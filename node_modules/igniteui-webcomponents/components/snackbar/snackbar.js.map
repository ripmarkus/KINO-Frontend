{"version":3,"file":"snackbar.js","sourceRoot":"","sources":["../../../src/components/snackbar/snackbar.ts"],"names":[],"mappings":";;;;;;AAAA,OAAO,EAAE,IAAI,EAAE,OAAO,EAAE,MAAM,KAAK,CAAC;AACpC,OAAO,EAAE,QAAQ,EAAE,MAAM,mBAAmB,CAAC;AAC7C,OAAO,EAAE,SAAS,EAAE,GAAG,EAAE,MAAM,uBAAuB,CAAC;AACvD,OAAO,EAAE,sBAAsB,EAAE,MAAM,4BAA4B,CAAC;AACpE,OAAO,EAAE,oBAAoB,EAAE,MAAM,qCAAqC,CAAC;AAC3E,OAAO,kBAAkB,MAAM,qBAAqB,CAAC;AACrD,OAAO,EAAE,iBAAiB,EAAE,MAAM,mCAAmC,CAAC;AACtE,OAAO,EAAE,yBAAyB,EAAE,MAAM,2BAA2B,CAAC;AAEtE,OAAO,EAAE,iBAAiB,EAAE,MAAM,mCAAmC,CAAC;AACtE,OAAO,EAAE,MAAM,IAAI,MAAM,EAAE,MAAM,wCAAwC,CAAC;AAC1E,OAAO,EAAE,MAAM,EAAE,MAAM,+BAA+B,CAAC;AACvD,OAAO,EAAE,GAAG,EAAE,MAAM,oBAAoB,CAAC;AAsBzC,MAAqB,oBAAqB,SAAQ,iBAAiB,CAGjE,yBAAyB,CAAC;IAKnB,MAAM,CAAC,QAAQ;QACpB,iBAAiB,CAAC,oBAAoB,EAAE,kBAAkB,CAAC,CAAC;IAC9D,CAAC;IAeD;QACE,KAAK,EAAE,CAAC;QAdS,gBAAW,GAAG,SAAS,EAAe,CAAC;QAC9B,YAAO,GAAG,sBAAsB,CAC1D,IAAI,EACJ,IAAI,CAAC,WAAW,CACjB,CAAC;QAWA,oBAAoB,CAAC,IAAI,EAAE,GAAG,CAAC,CAAC;IAClC,CAAC;IAEO,YAAY;QAClB,IAAI,CAAC,SAAS,CAAC,WAAW,CAAC,CAAC;IAC9B,CAAC;IAEkB,MAAM;QACvB,OAAO,IAAI,CAAA;aACF,GAAG,CAAC,IAAI,CAAC,WAAW,CAAC,uBAAuB,CAAC,IAAI,CAAC,IAAI;;;;;6DAKN,IAAI,CAAC,YAAY;YAClE,IAAI,CAAC,UAAU;YACf,CAAC,CAAC,IAAI,CAAA;kBACA,IAAI,CAAC,UAAU;4BACL;YAChB,CAAC,CAAC,OAAO;;;KAGhB,CAAC;IACJ,CAAC;;AA9CsB,4BAAO,GAAG,cAAc,AAAjB,CAAkB;AAClC,2BAAM,GAAG,CAAC,MAAM,EAAE,MAAM,CAAC,AAAnB,CAAoB;eALrB,oBAAoB;AAuBhC;IADN,QAAQ,CAAC,EAAE,SAAS,EAAE,aAAa,EAAE,CAAC;wDACZ","sourcesContent":["import { html, nothing } from 'lit';\nimport { property } from 'lit/decorators.js';\nimport { createRef, ref } from 'lit/directives/ref.js';\nimport { addAnimationController } from '../../animations/player.js';\nimport { addThemingController } from '../../theming/theming-controller.js';\nimport IgcButtonComponent from '../button/button.js';\nimport { registerComponent } from '../common/definitions/register.js';\nimport { IgcBaseAlertLikeComponent } from '../common/mixins/alert.js';\nimport type { AbstractConstructor } from '../common/mixins/constructor.js';\nimport { EventEmitterMixin } from '../common/mixins/event-emitter.js';\nimport { styles as shared } from './themes/shared/snackbar.common.css.js';\nimport { styles } from './themes/snackbar.base.css.js';\nimport { all } from './themes/themes.js';\n\nexport interface IgcSnackbarComponentEventMap {\n  igcAction: CustomEvent<void>;\n}\n\n/**\n * A snackbar component is used to provide feedback about an operation\n * by showing a brief message at the bottom of the screen.\n *\n * @element igc-snackbar\n *\n * @slot - Default slot to render the snackbar content.\n * @slot action - Renders the action part of the snackbar. Usually an interactive element (button)\n *\n * @fires igcAction - Emitted when the snackbar action button is clicked.\n *\n * @csspart base - The base wrapper of the snackbar component.\n * @csspart message - The snackbar message.\n * @csspart action - The default snackbar action button.\n * @csspart action-container - The area holding the actions.\n */\nexport default class IgcSnackbarComponent extends EventEmitterMixin<\n  IgcSnackbarComponentEventMap,\n  AbstractConstructor<IgcBaseAlertLikeComponent>\n>(IgcBaseAlertLikeComponent) {\n  public static readonly tagName = 'igc-snackbar';\n  public static styles = [styles, shared];\n\n  /* blazorSuppress */\n  public static register(): void {\n    registerComponent(IgcSnackbarComponent, IgcButtonComponent);\n  }\n\n  protected readonly _contentRef = createRef<HTMLElement>();\n  protected override readonly _player = addAnimationController(\n    this,\n    this._contentRef\n  );\n\n  /**\n   * The snackbar action button.\n   * @attr action-text\n   */\n  @property({ attribute: 'action-text' })\n  public actionText!: string;\n\n  constructor() {\n    super();\n    addThemingController(this, all);\n  }\n\n  private _handleClick(): void {\n    this.emitEvent('igcAction');\n  }\n\n  protected override render() {\n    return html`\n      <div ${ref(this._contentRef)} part=\"base\" .inert=${!this.open}>\n        <span part=\"message\">\n          <slot></slot>\n        </span>\n\n        <slot name=\"action\" part=\"action-container\" @click=${this._handleClick}>\n          ${this.actionText\n            ? html`<igc-button type=\"button\" part=\"action\" variant=\"flat\">\n                ${this.actionText}\n              </igc-button>`\n            : nothing}\n        </slot>\n      </div>\n    `;\n  }\n}\n\ndeclare global {\n  interface HTMLElementTagNameMap {\n    'igc-snackbar': IgcSnackbarComponent;\n  }\n}\n"]}