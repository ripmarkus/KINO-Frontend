var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
import { html, svg } from 'lit';
import { queryAssignedElements } from 'lit/decorators.js';
import { styleMap } from 'lit/directives/style-map.js';
import { addThemingController } from '../../theming/theming-controller.js';
import { registerComponent } from '../common/definitions/register.js';
import { partMap } from '../common/part-map.js';
import { createCounter, isEmpty } from '../common/util.js';
import { IgcProgressBaseComponent } from './base.js';
import IgcCircularGradientComponent from './circular-gradient.js';
import { styles } from './themes/circular/circular.progress.base.css.js';
import { styles as shared } from './themes/circular/shared/circular.progress.common.css.js';
import { all } from './themes/circular/themes.js';
class IgcCircularProgressComponent extends IgcProgressBaseComponent {
    static register() {
        registerComponent(IgcCircularProgressComponent, IgcCircularGradientComponent);
    }
    constructor() {
        super();
        this._gradientId = `circular-progress-${IgcCircularProgressComponent.increment()}`;
        addThemingController(this, all);
    }
    renderSvg() {
        const gradients = !isEmpty(this._assignedGradients)
            ? this._assignedGradients.map(({ offset, color, opacity }) => svg `<stop offset=${offset} stop-color=${color} stop-opacity=${opacity}/>`)
            : svg `
        <stop offset="0%" part="gradient_start" />
        <stop offset="100%" part="gradient_end" />
      `;
        return svg `
      <circle part=${partMap({ track: true, indeterminate: this.indeterminate })}/>
      <circle style=${styleMap({ stroke: `url(#${this._gradientId})` })} part="fill"/>

      <defs>
          <linearGradient id=${this._gradientId} gradientTransform="rotate(90)">
          ${gradients}
          </linearGradient>
      </defs>
    `;
    }
    render() {
        return html `
      <div part="base" style=${styleMap(this._styleInfo)}>
        <svg part=${partMap({ svg: true, indeterminate: this.indeterminate })}>
          ${this.renderSvg()}
        </svg>
        <slot name="gradient"></slot>
        ${this.renderDefaultSlot()}
      </div>
    `;
    }
}
IgcCircularProgressComponent.tagName = 'igc-circular-progress';
IgcCircularProgressComponent.styles = [styles, shared];
IgcCircularProgressComponent.increment = createCounter();
export default IgcCircularProgressComponent;
__decorate([
    queryAssignedElements({ slot: 'gradient' })
], IgcCircularProgressComponent.prototype, "_assignedGradients", void 0);
//# sourceMappingURL=circular-progress.js.map