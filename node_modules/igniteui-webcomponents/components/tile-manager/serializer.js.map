{"version":3,"file":"serializer.js","sourceRoot":"","sources":["../../../src/components/tile-manager/serializer.ts"],"names":[],"mappings":"AAeA,MAAM,qBAAqB;IAGzB,YAAY,WAAoC;QAC9C,IAAI,CAAC,WAAW,GAAG,WAAW,CAAC;IACjC,CAAC;IAEM,IAAI;QACT,OAAO,IAAI,CAAC,WAAW,CAAC,KAAK,CAAC,GAAG,CAAC,CAAC,IAAI,EAAE,EAAE;YACzC,OAAO;gBACL,OAAO,EAAE,IAAI,CAAC,OAAO;gBACrB,QAAQ,EAAE,IAAI,CAAC,QAAQ;gBACvB,iBAAiB,EAAE,IAAI,CAAC,iBAAiB;gBACzC,eAAe,EAAE,IAAI,CAAC,eAAe;gBACrC,aAAa,EAAE,IAAI,CAAC,aAAa;gBACjC,SAAS,EAAE,IAAI,CAAC,SAAS;gBACzB,QAAQ,EAAE,IAAI,CAAC,QAAQ;gBACvB,OAAO,EAAE,IAAI,CAAC,OAAO;gBACrB,QAAQ,EAAE,IAAI,CAAC,QAAQ;gBACvB,EAAE,EAAE,IAAI,CAAC,EAAE;aACZ,CAAC;QACJ,CAAC,CAAC,CAAC;IACL,CAAC;IAEM,UAAU;QACf,OAAO,IAAI,CAAC,SAAS,CAAC,IAAI,CAAC,IAAI,EAAE,CAAC,CAAC;IACrC,CAAC;IAEM,IAAI,CAAC,KAAuB;QACjC,MAAM,MAAM,GAAG,IAAI,GAAG,CAAC,KAAK,CAAC,GAAG,CAAC,CAAC,IAAI,EAAE,EAAE,CAAC,CAAC,IAAI,CAAC,EAAE,EAAE,IAAI,CAAC,CAAC,CAAC,CAAC;QAE7D,KAAK,MAAM,IAAI,IAAI,IAAI,CAAC,WAAW,CAAC,KAAK,EAAE,CAAC;YAC1C,IAAI,CAAC,MAAM,CAAC,GAAG,CAAC,IAAI,CAAC,EAAE,CAAC,EAAE,CAAC;gBACzB,SAAS;YACX,CAAC;YAED,MAAM,UAAU,GAAG,MAAM,CAAC,GAAG,CAAC,IAAI,CAAC,EAAE,CAAE,CAAC;YAExC,MAAM,CAAC,MAAM,CAAC,IAAI,EAAE,UAAU,CAAC,CAAC;QAClC,CAAC;IACH,CAAC;IAEM,YAAY,CAAC,IAAY;QAC9B,IAAI,CAAC,IAAI;YAAE,OAAO;QAElB,IAAI,CAAC,IAAI,CAAC,IAAI,CAAC,KAAK,CAAC,IAAI,CAAC,CAAC,CAAC;IAC9B,CAAC;CACF;AAED,MAAM,UAAU,gBAAgB,CAAC,IAA6B;IAC5D,OAAO,IAAI,qBAAqB,CAAC,IAAI,CAAC,CAAC;AACzC,CAAC","sourcesContent":["import type IgcTileManagerComponent from './tile-manager.js';\n\nexport interface SerializedTile {\n  colSpan: number;\n  colStart: number | null;\n  disableFullscreen: boolean;\n  disableMaximize: boolean;\n  disableResize: boolean;\n  maximized: boolean;\n  position: number;\n  rowSpan: number;\n  rowStart: number | null;\n  id: string | null;\n}\n\nclass TileManagerSerializer {\n  public tileManager: IgcTileManagerComponent;\n\n  constructor(tileManager: IgcTileManagerComponent) {\n    this.tileManager = tileManager;\n  }\n\n  public save(): SerializedTile[] {\n    return this.tileManager.tiles.map((tile) => {\n      return {\n        colSpan: tile.colSpan,\n        colStart: tile.colStart,\n        disableFullscreen: tile.disableFullscreen,\n        disableMaximize: tile.disableMaximize,\n        disableResize: tile.disableResize,\n        maximized: tile.maximized,\n        position: tile.position,\n        rowSpan: tile.rowSpan,\n        rowStart: tile.rowStart,\n        id: tile.id,\n      };\n    });\n  }\n\n  public saveAsJSON(): string {\n    return JSON.stringify(this.save());\n  }\n\n  public load(tiles: SerializedTile[]): void {\n    const mapped = new Map(tiles.map((tile) => [tile.id, tile]));\n\n    for (const tile of this.tileManager.tiles) {\n      if (!mapped.has(tile.id)) {\n        continue;\n      }\n\n      const serialized = mapped.get(tile.id)!;\n\n      Object.assign(tile, serialized);\n    }\n  }\n\n  public loadFromJSON(data: string): void {\n    if (!data) return;\n\n    this.load(JSON.parse(data));\n  }\n}\n\nexport function createSerializer(host: IgcTileManagerComponent) {\n  return new TileManagerSerializer(host);\n}\n"]}