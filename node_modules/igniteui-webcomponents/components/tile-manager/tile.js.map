{"version":3,"file":"tile.js","sourceRoot":"","sources":["../../../src/components/tile-manager/tile.ts"],"names":[],"mappings":"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","sourcesContent":["import { html, LitElement, nothing } from 'lit';\nimport {\n  property,\n  query,\n  queryAssignedElements,\n  state,\n} from 'lit/decorators.js';\nimport { createRef, ref } from 'lit/directives/ref.js';\nimport { startViewTransition } from '../../animations/player.js';\nimport { addThemingController } from '../../theming/theming-controller.js';\nimport IgcIconButtonComponent from '../button/icon-button.js';\nimport {\n  type TileManagerContext,\n  tileManagerContext,\n} from '../common/context.js';\nimport { createAsyncContext } from '../common/controllers/async-consumer.js';\nimport {\n  addDragController,\n  type DragCallbackParameters,\n} from '../common/controllers/drag.js';\nimport { addFullscreenController } from '../common/controllers/fullscreen.js';\nimport { registerComponent } from '../common/definitions/register.js';\nimport type { Constructor } from '../common/mixins/constructor.js';\nimport { EventEmitterMixin } from '../common/mixins/event-emitter.js';\nimport { partMap } from '../common/part-map.js';\nimport {\n  asNumber,\n  createCounter,\n  findElementFromEventPath,\n  isEmpty,\n  isLTR,\n} from '../common/util.js';\nimport IgcDividerComponent from '../divider/divider.js';\nimport IgcResizeContainerComponent from '../resize-container/resize-container.js';\nimport type { ResizeCallbackParams } from '../resize-container/types.js';\nimport type { TileManagerResizeMode } from '../types.js';\nimport { createTileDragStack, swapTiles } from './position.js';\nimport { createTileResizeState } from './resize-state.js';\nimport { styles as shared } from './themes/shared/tile/tile.common.css.js';\nimport { styles } from './themes/tile.base.css.js';\nimport { all } from './themes/tile.js';\nimport { createTileDragGhost, createTileGhost } from './tile-ghost-util.js';\nimport type IgcTileManagerComponent from './tile-manager.js';\n\nexport interface IgcTileChangeStateEventArgs {\n  tile: IgcTileComponent;\n  state: boolean;\n}\n\ntype AdornerType = 'side' | 'corner' | 'bottom';\n\nexport interface IgcTileComponentEventMap {\n  igcTileFullscreen: CustomEvent<IgcTileChangeStateEventArgs>;\n  igcTileMaximize: CustomEvent<IgcTileChangeStateEventArgs>;\n  igcTileDragStart: CustomEvent<IgcTileComponent>;\n  igcTileDragEnd: CustomEvent<IgcTileComponent>;\n  igcTileDragCancel: CustomEvent<IgcTileComponent>;\n  igcTileResizeStart: CustomEvent<IgcTileComponent>;\n  igcTileResizeEnd: CustomEvent<IgcTileComponent>;\n  igcTileResizeCancel: CustomEvent<IgcTileComponent>;\n}\n\n/**\n * The tile component is used within the `igc-tile-manager` as a container\n * for displaying various types of information.\n *\n * @element igc-tile\n *\n * @fires igcTileFullscreen - Fired when tile the fullscreen state changes.\n * @fires igcTileMaximize - Fired when tile the maximize state changes.\n * @fires igcTileDragStart - Fired when a drag operation on a tile is about to begin. Cancelable.\n * @fires igcTileDragEnd - Fired when a drag operation with a tile is successfully completed.\n * @fires igcTileDragCancel - Fired when a tile drag operation is canceled by the user.\n * @fires igcTileResizeStart - Fired when a resize operation on a tile is about to begin. Cancelable.\n * @fires igcTileResizeEnd - Fired when a resize operation on a tile is successfully completed.\n * @fires igcTileResizeCancel - Fired when a resize operation on a tile is canceled by the user.\n *\n * @slot - Default slot for the tile's content.\n * @slot title - Renders the title of the tile header.\n * @slot maximize-action - Renders the maximize action element of the tile header.\n * @slot fullscreen-action - Renders the fullscreen action element of the tile header.\n * @slot actions - Renders items after the default actions in the tile header.\n * @slot side-adorner - Renders the side resize handle of the tile.\n * @slot corner-adorner - Renders the corner resize handle of the tile.\n * @slot bottom-adorner - Renders the bottom resize handle of the tile.\n *\n * @csspart base - The wrapper for the entire tile content, header and content.\n * @csspart header - The container for the tile header, including title and actions.\n * @csspart title - The title container of the tile.\n * @csspart actions - The actions container of the tile header.\n * @csspart content-container - The container wrapping the tile’s main content.\n * @csspart trigger-side - The part for the side adorner of the encapsulated resize element in the tile.\n * @csspart trigger - The part for the corner adorner of the encapsulated resize element in the tile.\n * @csspart trigger-bottom - The part for the bottom adorner of the encapsulated resize element in the tile.\n */\nexport default class IgcTileComponent extends EventEmitterMixin<\n  IgcTileComponentEventMap,\n  Constructor<LitElement>\n>(LitElement) {\n  public static readonly tagName = 'igc-tile';\n  public static styles = [styles, shared];\n\n  /* blazorSuppress */\n  public static register() {\n    registerComponent(\n      IgcTileComponent,\n      IgcIconButtonComponent,\n      IgcDividerComponent,\n      IgcResizeContainerComponent\n    );\n  }\n\n  private static readonly increment = createCounter();\n\n  private _dragController = addDragController(this, {\n    skip: this._skipDrag,\n    matchTarget: this._match,\n    ghost: this._createDragGhost,\n    start: this._handleDragStart,\n    over: this._handleDragOver,\n    end: this._handleDragEnd,\n    cancel: this._handleDragCancel,\n  });\n\n  private _fullscreenController = addFullscreenController(this, {\n    enter: this._emitFullScreenEvent,\n    exit: this._emitFullScreenEvent,\n  });\n\n  private _colSpan = 1;\n  private _rowSpan = 1;\n  private _colStart: number | null = null;\n  private _rowStart: number | null = null;\n  private _position = -1;\n  private _resizeState = createTileResizeState();\n  private _dragStack = createTileDragStack();\n\n  private _customAdorners = new Map<string, boolean>(\n    Object.entries({\n      side: false,\n      corner: false,\n      bottom: false,\n    })\n  );\n\n  // Tile manager context properties and helpers\n\n  /**\n   * Context consumer callback that sets the updated configuration of the internal drag controller\n   * based on the passed tile manager properties.\n   */\n  private _setDragConfiguration = ({\n    instance: { dragMode },\n  }: TileManagerContext) => {\n    this._dragController.set({\n      enabled: dragMode !== 'none',\n      trigger:\n        dragMode === 'tile-header' ? () => this._headerRef.value! : undefined,\n    });\n  };\n\n  private _context = createAsyncContext(\n    this,\n    tileManagerContext,\n    this._setDragConfiguration\n  );\n\n  /** Returns the parent tile manager context. */\n  private get _tileManagerCtx(): TileManagerContext | undefined {\n    return this._context.value;\n  }\n\n  private get _tileManager(): IgcTileManagerComponent | undefined {\n    return this._tileManagerCtx?.instance;\n  }\n\n  /** Returns the tile manager internal CSS grid container. */\n  private get _cssContainer(): HTMLElement {\n    return this._tileManagerCtx?.grid.value!;\n  }\n\n  /** Returns the tile manager current resize mode. */\n  private get _resizeMode(): TileManagerResizeMode {\n    return this._tileManager?.resizeMode ?? 'none';\n  }\n\n  protected _headerRef = createRef<HTMLElement>();\n\n  @queryAssignedElements({ slot: 'title' })\n  private _titleElements!: HTMLElement[];\n\n  @queryAssignedElements({ slot: 'actions' })\n  private _actionsElements!: HTMLElement[];\n\n  @query(IgcResizeContainerComponent.tagName)\n  protected _resizeContainer?: IgcResizeContainerComponent;\n\n  @query('[part~=\"base\"]', true)\n  public _tileContent!: HTMLElement;\n\n  @state()\n  private _maximized = false;\n\n  @state()\n  private _isDragging = false;\n\n  @state()\n  private _isResizing = false;\n\n  /** Whether to render the resize container based on tile and tile manager configuration. */\n  private get _resizeDisabled(): boolean {\n    return (\n      this.disableResize ||\n      this.maximized ||\n      this.fullscreen ||\n      this._resizeMode === 'none'\n    );\n  }\n\n  /**\n   * The number of columns the tile will span.\n   *\n   * @remarks\n   * When setting a value that is less than 1, it will be\n   * coerced to 1.\n   *\n   * @attr col-span\n   * @default 1\n   */\n  @property({ type: Number, attribute: 'col-span' })\n  public set colSpan(value: number) {\n    this._colSpan = Math.max(1, asNumber(value));\n    this.style.setProperty('--ig-col-span', this._colSpan.toString());\n  }\n\n  public get colSpan(): number {\n    return this._colSpan;\n  }\n\n  /**\n   * The number of rows the tile will span.\n   *\n   * @remarks\n   * When setting a value that is less than 1, it will be\n   * coerced to 1.\n   *\n   * @attr row-span\n   * @default 1\n   */\n  @property({ type: Number, attribute: 'row-span' })\n  public set rowSpan(value: number) {\n    this._rowSpan = Math.max(1, asNumber(value));\n    this.style.setProperty('--ig-row-span', this._rowSpan.toString());\n  }\n\n  public get rowSpan(): number {\n    return this._rowSpan;\n  }\n\n  /**\n   * The starting column for the tile.\n   *\n   * @attr col-start\n   */\n  @property({ type: Number, attribute: 'col-start' })\n  public set colStart(value: number | null) {\n    this._colStart = Math.max(0, asNumber(value)) || null;\n    this.style.setProperty(\n      '--ig-col-start',\n      this._colStart ? this._colStart.toString() : null\n    );\n  }\n\n  public get colStart(): number | null {\n    return this._colStart;\n  }\n\n  /**\n   * The starting row for the tile.\n   *\n   * @attr row-start\n   */\n  @property({ type: Number, attribute: 'row-start' })\n  public set rowStart(value: number | null) {\n    this._rowStart = Math.max(0, asNumber(value)) || null;\n    this.style.setProperty(\n      '--ig-row-start',\n      this._rowStart ? this._rowStart.toString() : null\n    );\n  }\n\n  public get rowStart(): number | null {\n    return this._rowStart;\n  }\n\n  /**\n   * Indicates whether the tile occupies the whole screen.\n   *\n   * @property\n   */\n  public get fullscreen(): boolean {\n    return this._fullscreenController.fullscreen;\n  }\n\n  /**\n   * Indicates whether the tile occupies all available space within the layout.\n   *\n   * @attr maximized\n   */\n  @property({ type: Boolean, reflect: true })\n  public set maximized(value: boolean) {\n    this._maximized = value;\n\n    if (this._tileManagerCtx) {\n      this._tileManagerCtx.instance.requestUpdate();\n    }\n  }\n\n  public get maximized(): boolean {\n    return this._maximized;\n  }\n\n  /**\n   * Indicates whether to disable tile resize behavior regardless\n   * ot its tile manager parent settings.\n   *\n   * @attr disable-resize\n   * @default false\n   */\n  @property({ type: Boolean, reflect: true, attribute: 'disable-resize' })\n  public disableResize = false;\n\n  /**\n   * Whether to disable the rendering of the tile `fullscreen-action` slot and its\n   * default fullscreen action button.\n   *\n   * @attr disable-fullscreen\n   * @default false\n   */\n  @property({ type: Boolean, reflect: true, attribute: 'disable-fullscreen' })\n  public disableFullscreen = false;\n\n  /**\n   * Whether to disable the rendering of the tile `maximize-action` slot and its\n   * default maximize action button.\n   *\n   * @attr disable-maximize\n   * @default false\n   */\n  @property({ type: Boolean, reflect: true, attribute: 'disable-maximize' })\n  public disableMaximize = false;\n\n  /**\n   * Gets/sets the tile's visual position in the layout.\n   * Corresponds to the CSS `order` property.\n   *\n   * @attr position\n   */\n  @property({ type: Number })\n  public set position(value: number) {\n    this._position = asNumber(value);\n    this.style.order = this._position.toString();\n  }\n\n  public get position(): number {\n    return this._position;\n  }\n\n  constructor() {\n    super();\n    addThemingController(this, all);\n  }\n\n  /** @internal */\n  public override connectedCallback(): void {\n    super.connectedCallback();\n    this.id = this.id || `tile-${IgcTileComponent.increment()}`;\n\n    this.style.viewTransitionName =\n      this.style.viewTransitionName || `tile-transition-${this.id}`;\n  }\n\n  protected override createRenderRoot() {\n    const root = super.createRenderRoot();\n    root.addEventListener('slotchange', () => this.requestUpdate());\n    return root;\n  }\n\n  private _setDragState(state = true) {\n    this._isDragging = state;\n    this._tileContent.style.opacity = state ? '0' : '';\n    this.style.pointerEvents = state ? 'none' : '';\n    this.part.toggle('dragging', state);\n  }\n\n  private _handleDragStart() {\n    if (!this._emitTileDragStart()) {\n      return false;\n    }\n\n    this._setDragState();\n    this._dragStack.push(this);\n    return true;\n  }\n\n  private _handleDragOver({ event, state }: DragCallbackParameters): void {\n    const match = state.element as IgcTileComponent;\n\n    if (this._dragStack.peek() === match) {\n      if (this._shouldSwap(event, state, match)) {\n        this._dragStack.pop();\n        this._dragStack.push(match);\n        this._performSwap(match);\n      }\n      return;\n    }\n\n    this._dragStack.push(match);\n    this._performSwap(match);\n  }\n\n  private _handleDragCancel() {\n    startViewTransition(() => {\n      this._dragStack.restore();\n      this._dragStack.reset();\n    });\n\n    this._dragController.dispose();\n    this._setDragState(false);\n    this.emitEvent('igcTileDragCancel', { detail: this });\n  }\n\n  private _handleDragEnd() {\n    this._setDragState(false);\n    this._dragStack.reset();\n    this.emitEvent('igcTileDragEnd', { detail: this });\n  }\n\n  private _performSwap(match: IgcTileComponent): void {\n    startViewTransition(() => swapTiles(this, match));\n  }\n\n  private _shouldSwap(\n    { clientX, clientY }: PointerEvent,\n    state: DragCallbackParameters['state'],\n    match: IgcTileComponent\n  ): boolean {\n    const LTR = isLTR(this);\n    const direction = state.pointerState.direction;\n\n    const { left, top, width, height } = match.getBoundingClientRect();\n    const relativeX = (clientX - left) / width;\n    const relativeY = (clientY - top) / height;\n\n    switch (direction) {\n      case 'start':\n        return (\n          this.position > match.position &&\n          (LTR ? relativeX <= 0.25 : relativeX >= 0.75)\n        );\n      case 'end':\n        return (\n          this.position < match.position &&\n          (LTR ? relativeX >= 0.75 : relativeX <= 0.25)\n        );\n      case 'top':\n        return this.position > match.position && relativeY <= 0.25;\n      case 'bottom':\n        return this.position < match.position && relativeY >= 0.75;\n      default:\n        return false;\n    }\n  }\n\n  private _skipDrag(event: PointerEvent): boolean {\n    if (this._maximized || this.fullscreen) {\n      return true;\n    }\n\n    return Boolean(\n      findElementFromEventPath(\n        (e) => e.matches('[part*=trigger]') || e.matches('#tile-actions'),\n        event\n      )\n    );\n  }\n\n  private _match(element: Element): element is IgcTileComponent {\n    return element !== this && IgcTileComponent.tagName === element.localName;\n  }\n\n  private _createDragGhost(): IgcTileComponent {\n    return createTileDragGhost(this);\n  }\n\n  private _createResizeGhost = (): HTMLElement => {\n    return createTileGhost(this);\n  };\n\n  private _setResizeState(state = true) {\n    this._isResizing = state;\n    this.style.zIndex = state ? '1' : '';\n    this.part.toggle('resizing', state);\n  }\n\n  private _handleResizeStart(event: CustomEvent<ResizeCallbackParams>) {\n    if (!this._emitTileResizeStart()) {\n      event.preventDefault();\n      return;\n    }\n\n    this._resizeState.updateState(\n      event.detail.state.initial,\n      this,\n      this._cssContainer\n    );\n    this._setResizeState();\n  }\n\n  private _handleResize({\n    detail: { state },\n  }: CustomEvent<ResizeCallbackParams>) {\n    const trigger = state.trigger!;\n\n    const isWidthResize = trigger.matches('[part*=\"side\"], [part=\"trigger\"]');\n    const isHeightResize = trigger.matches(\n      '[part*=\"bottom\"], [part=\"trigger\"]'\n    );\n\n    if (isWidthResize) {\n      state.current.width = this._resizeState.calculateSnappedWidth(state);\n    }\n\n    if (isHeightResize) {\n      state.current.height = this._resizeState.calculateSnappedHeight(state);\n    }\n  }\n\n  private _handleResizeEnd({\n    detail: { state },\n  }: CustomEvent<ResizeCallbackParams>) {\n    const { colSpan, rowSpan } = this._resizeState.calculateResizedGridPosition(\n      state.current\n    );\n\n    state.commit = async () => {\n      await startViewTransition(() => {\n        this.colSpan = colSpan;\n        this.rowSpan = rowSpan;\n      }).transition?.updateCallbackDone;\n\n      this._setResizeState(false);\n      this.emitEvent('igcTileResizeEnd', { detail: this });\n    };\n  }\n\n  private _handleResizeCancel() {\n    this._setResizeState(false);\n    this.emitEvent('igcTileResizeCancel', { detail: this });\n  }\n\n  private _handleFullscreen() {\n    this._fullscreenController.setState(!this.fullscreen);\n  }\n\n  private async _handleMaximize() {\n    if (!this._emitMaximizedEvent()) {\n      return;\n    }\n\n    this.style.zIndex = '1';\n\n    await startViewTransition(() => {\n      this.maximized = !this.maximized;\n    }).transition?.finished;\n\n    this.style.zIndex = '';\n  }\n\n  private _emitFullScreenEvent(state: boolean) {\n    this.requestUpdate();\n\n    return this.emitEvent('igcTileFullscreen', {\n      detail: { tile: this, state },\n      cancelable: true,\n    });\n  }\n\n  private _emitMaximizedEvent() {\n    return this.emitEvent('igcTileMaximize', {\n      detail: { tile: this, state: !this.maximized },\n      cancelable: true,\n    });\n  }\n\n  private _emitTileDragStart() {\n    return this.emitEvent('igcTileDragStart', {\n      detail: this,\n      cancelable: true,\n    });\n  }\n\n  private _emitTileResizeStart() {\n    return this.emitEvent('igcTileResizeStart', {\n      detail: this,\n      cancelable: true,\n    });\n  }\n\n  protected _renderDefaultAction(type: 'maximize' | 'fullscreen') {\n    const [icon, listener] =\n      type === 'fullscreen'\n        ? [\n            this.fullscreen ? 'fullscreen_exit' : 'fullscreen',\n            this._handleFullscreen,\n          ]\n        : [\n            this._maximized ? 'collapse_content' : 'expand_content',\n            this._handleMaximize,\n          ];\n\n    return html`\n      <igc-icon-button\n        variant=\"flat\"\n        collection=\"default\"\n        exportparts=\"icon\"\n        name=${icon}\n        aria-label=${icon}\n        @click=${listener}\n      ></igc-icon-button>\n    `;\n  }\n\n  protected _renderHeader() {\n    const hideHeader =\n      isEmpty(this._titleElements) &&\n      isEmpty(this._actionsElements) &&\n      this.disableMaximize &&\n      this.disableFullscreen;\n\n    const hasMaximizeSlot = !(this.disableMaximize || this.fullscreen);\n    const hasFullscreenSlot = !this.disableFullscreen;\n\n    return html`\n      <section part=\"header\" ?hidden=${hideHeader} ${ref(this._headerRef)}>\n        <header part=\"title\">\n          <slot name=\"title\"></slot>\n        </header>\n        <section id=\"tile-actions\" part=\"actions\">\n          ${hasMaximizeSlot\n            ? html`\n                <slot name=\"maximize-action\">\n                  ${this._renderDefaultAction('maximize')}\n                </slot>\n              `\n            : nothing}\n          ${hasFullscreenSlot\n            ? html`\n                <slot name=\"fullscreen-action\">\n                  ${this._renderDefaultAction('fullscreen')}\n                </slot>\n              `\n            : nothing}\n\n          <slot name=\"actions\"></slot>\n        </section>\n      </section>\n      <igc-divider></igc-divider>\n    `;\n  }\n\n  protected _renderContent() {\n    const parts = {\n      base: true,\n      draggable: this._tileManager?.dragMode !== 'none',\n      fullscreen: this.fullscreen,\n      dragging: this._isDragging,\n      resizable:\n        !this.disableResize && this._tileManager?.resizeMode !== 'none',\n      resizing: this._isResizing,\n      maximized: this.maximized,\n    };\n\n    return html`\n      <div part=${partMap(parts)}>\n        ${this._renderHeader()}\n        <div part=\"content-container\">\n          <slot></slot>\n        </div>\n      </div>\n    `;\n  }\n\n  private _renderAdornerSlot(name: AdornerType) {\n    return html`\n      <slot\n        @slotchange=${() => this._customAdorners.set(name, true)}\n        name=\"${name}-adorner\"\n        slot=\"${name}-adorner\"\n      >\n      </slot>\n    `;\n  }\n\n  protected override render() {\n    const isActive = this._resizeMode === 'always';\n\n    return this._resizeDisabled\n      ? this._renderContent()\n      : html`\n          <igc-resize\n            part=${partMap({\n              resize: true,\n              'side-adorner': this._customAdorners.get('side')!,\n              'corner-adorner': this._customAdorners.get('corner')!,\n              'bottom-adorner': this._customAdorners.get('bottom')!,\n            })}\n            exportparts=\"trigger-side, trigger, trigger-bottom\"\n            mode=\"deferred\"\n            ?active=${isActive}\n            .ghostFactory=${this._createResizeGhost}\n            @igcResizeStart=${this._handleResizeStart}\n            @igcResize=${this._handleResize}\n            @igcResizeEnd=${this._handleResizeEnd}\n            @igcResizeCancel=${this._handleResizeCancel}\n          >\n            ${this._renderContent()} ${this._renderAdornerSlot('side')}\n            ${this._renderAdornerSlot('corner')}\n            ${this._renderAdornerSlot('bottom')}\n          </igc-resize>\n        `;\n  }\n}\n\ndeclare global {\n  interface HTMLElementTagNameMap {\n    'igc-tile': IgcTileComponent;\n  }\n}\n"]}