{"version":3,"file":"resize-state.js","sourceRoot":"","sources":["../../../src/components/tile-manager/resize-state.ts"],"names":[],"mappings":"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","sourcesContent":["import { asNumber, first } from '../common/util.js';\nimport type { ResizeState } from '../resize-container/types.js';\nimport { ResizeUtil } from './resize-util.js';\nimport type IgcTileComponent from './tile.js';\nimport type {\n  ResizeProps,\n  ResizeSpanProps,\n  TileGridDimension,\n  TileGridPosition,\n  TileResizeDimensions,\n} from './types.js';\n\nconst CssValues = new RegExp(/(?<start>\\d+)?\\s*\\/?\\s*span\\s*(?<span>\\d+)?/gi);\n\nfunction parseTileGridRect(tile: IgcTileComponent): TileGridPosition {\n  const computed = getComputedStyle(tile);\n  const { gridColumn, gridRow } = computed;\n\n  const [column, row] = [\n    first(Array.from(gridColumn.matchAll(CssValues))).groups!,\n    first(Array.from(gridRow.matchAll(CssValues))).groups!,\n  ];\n\n  return {\n    column: {\n      start: asNumber(column.start, -1),\n      span: asNumber(column.span, -1),\n    },\n    row: { start: asNumber(row.start, -1), span: asNumber(row.span, -1) },\n  };\n}\n\nfunction parseTileParentGrid(gridContainer: HTMLElement) {\n  const computed = getComputedStyle(gridContainer);\n  const { gap, gridTemplateColumns, gridTemplateRows } = computed;\n\n  const columns = gridTemplateColumns.split(' ').map(asNumber);\n  const rows = gridTemplateRows.split(' ').map(asNumber);\n\n  return {\n    gap: asNumber(gap),\n    columns: {\n      count: columns.length,\n      entries: columns,\n      minSize: asNumber(computed.getPropertyValue('--min-col-width')),\n    },\n    rows: {\n      count: rows.length,\n      entries: rows,\n      minSize: asNumber(computed.getPropertyValue('--min-row-height')),\n    },\n  };\n}\n\nclass TileResizeState {\n  private _initialPosition!: TileGridPosition;\n  private _resizeUtil!: ResizeUtil;\n\n  protected _gap = 0;\n  protected _prevDeltaX = 0;\n  protected _prevDeltaY = 0;\n\n  protected _prevSnappedWidth = 0;\n  protected _prevSnappedHeight = 0;\n\n  protected _position: TileGridPosition = {\n    column: { start: 0, span: 0 },\n    row: { start: 0, span: 0 },\n  };\n\n  protected _columns: TileGridDimension = {\n    count: 0,\n    entries: [],\n    minSize: 0,\n  };\n\n  protected _rows: TileGridDimension = {\n    count: 0,\n    entries: [],\n    minSize: 0,\n  };\n\n  public resizedDimensions: TileResizeDimensions = {\n    width: null,\n    height: null,\n  };\n\n  public get gap(): number {\n    return this._gap;\n  }\n\n  public get position(): TileGridPosition {\n    return structuredClone(this._position);\n  }\n\n  public get columns(): TileGridDimension {\n    return structuredClone(this._columns);\n  }\n\n  public get rows(): TileGridDimension {\n    return structuredClone(this._rows);\n  }\n\n  public calculateSnappedWidth(state: ResizeState): number {\n    const resizeProps = this.getResizeProps(state);\n    const snappedDimension =\n      this._resizeUtil.calculateSnappedDimension(resizeProps);\n\n    this._prevDeltaX = snappedDimension.newDelta;\n    this._prevSnappedWidth = snappedDimension.snappedSize;\n    return snappedDimension.snappedSize;\n  }\n\n  public calculateSnappedHeight(state: ResizeState): number {\n    const resizeProps = this.getResizeProps(state, true);\n    const snappedDimension =\n      this._resizeUtil.calculateSnappedDimension(resizeProps);\n\n    this._prevDeltaY = snappedDimension.newDelta;\n    this._prevSnappedHeight = snappedDimension.snappedSize;\n    return snappedDimension.snappedSize;\n  }\n\n  public updateState(\n    tileRect: DOMRect,\n    tile: IgcTileComponent,\n    grid: HTMLElement\n  ): void {\n    this.initState(grid, tile);\n    this.calculateTileStartPosition(grid, tileRect);\n  }\n\n  /**\n   * Calculates and returns the CSS column and row properties of a tile after resizing,\n   * based on its new dimensions and starting position.\n   */\n  public calculateResizedGridPosition(rect: DOMRect) {\n    const colProps = this.getResizeSpanProps(rect);\n    const rowProps = this.getResizeSpanProps(rect, true);\n\n    // REVIEW pass col minSize and allowOverflow?\n    this._position.column.span =\n      this._resizeUtil.calculateResizedSpan(colProps);\n    this._position.row.span = this._resizeUtil.calculateResizedSpan(rowProps);\n\n    return {\n      colSpan: this._position.column.span,\n      rowSpan: this._position.row.span,\n    };\n  }\n\n  private initState(grid: HTMLElement, tile: IgcTileComponent): void {\n    const { gap, columns, rows } = parseTileParentGrid(grid);\n\n    this._resizeUtil = new ResizeUtil(gap);\n    this._initialPosition = parseTileGridRect(tile);\n    this._position = structuredClone(this._initialPosition);\n\n    this._gap = gap;\n    this._columns = columns;\n    this._rows = rows;\n    this._prevDeltaX = 0;\n    this._prevDeltaY = 0;\n    this._prevSnappedWidth = 0;\n    this._prevSnappedHeight = 0;\n  }\n\n  private calculateTileStartPosition(\n    grid: HTMLElement,\n    tileRect: DOMRect\n  ): void {\n    if (this._position.column.start < 0) {\n      const offsetX = this.getGridOffset(grid, 'horizontal');\n\n      this._position.column.start = this._resizeUtil.calculatePosition(\n        tileRect.left + window.scrollX + grid.scrollLeft - offsetX,\n        this._columns.entries\n      );\n    }\n\n    if (this._position.row.start < 0) {\n      const offsetY = this.getGridOffset(grid, 'vertical');\n\n      this._position.row.start = this._resizeUtil.calculatePosition(\n        tileRect.top + window.scrollY - offsetY,\n        this._rows.entries\n      );\n    }\n  }\n\n  private getGridOffset(\n    grid: HTMLElement,\n    axis: 'horizontal' | 'vertical'\n  ): number {\n    const gridRect = grid.getBoundingClientRect();\n    const computed = getComputedStyle(grid);\n\n    return axis === 'horizontal'\n      ? gridRect.left +\n          window.scrollX +\n          grid.scrollLeft +\n          Number.parseFloat(computed.paddingLeft)\n      : gridRect.top + window.scrollY + Number.parseFloat(computed.paddingTop);\n  }\n\n  private getResizeProps(state: ResizeState, isRow = false): ResizeProps {\n    return isRow\n      ? {\n          currentDelta: state.deltaY,\n          currentSize: state.current.height,\n          prevDelta: this._prevDeltaY,\n          gridEntries: this._rows.entries,\n          startIndex: this._position.row.start,\n          prevSnapped: this._prevSnappedHeight,\n        }\n      : {\n          currentDelta: state.deltaX,\n          currentSize: state.current.width,\n          prevDelta: this._prevDeltaX,\n          gridEntries: this._columns.entries,\n          startIndex: this._position.column.start,\n          prevSnapped: this._prevSnappedWidth,\n        };\n  }\n\n  private getResizeSpanProps(rect: DOMRect, isRow = false): ResizeSpanProps {\n    return isRow\n      ? {\n          targetSize: rect.height,\n          tilePosition: this.position.row,\n          tileGridDimension: this.rows,\n          gap: this.gap,\n          isRow,\n        }\n      : {\n          targetSize: rect.width,\n          tilePosition: this.position.column,\n          tileGridDimension: this.columns,\n          gap: this.gap,\n          isRow,\n        };\n  }\n}\n\nexport function createTileResizeState(): TileResizeState {\n  return new TileResizeState();\n}\n"]}