{"version":3,"file":"position.js","sourceRoot":"","sources":["../../../src/components/tile-manager/position.ts"],"names":[],"mappings":"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","sourcesContent":["import { last, partition } from '../common/util.js';\nimport type IgcTileComponent from './tile.js';\nimport type IgcTileManagerComponent from './tile-manager.js';\n\nclass TilesState {\n  private _nextEmptyPosition = 0;\n\n  public manager: IgcTileManagerComponent;\n\n  private get _tiles(): IgcTileComponent[] {\n    return Array.from(\n      this.manager.querySelectorAll<IgcTileComponent>(':scope > igc-tile')\n    );\n  }\n\n  /**\n   * Returns the current tiles of the tile manager sorted by their position.\n   */\n  public get tiles(): IgcTileComponent[] {\n    return this._tiles.toSorted((a, b) => a.position - b.position);\n  }\n\n  constructor(manager: IgcTileManagerComponent) {\n    this.manager = manager;\n  }\n\n  public assignPositions(): void {\n    let nextPosition = 0;\n    const [positionedTiles, nonPositionedTiles] = partition(\n      this._tiles,\n      (tile) => tile.position !== -1\n    );\n\n    positionedTiles.sort((a, b) => a.position - b.position);\n\n    for (const tile of positionedTiles) {\n      // Fill any unassigned slots before the next assigned tile's position\n      while (nextPosition < tile.position && nonPositionedTiles.length > 0) {\n        const nonPositionedTile = nonPositionedTiles.shift()!;\n        nonPositionedTile.position = nextPosition++;\n      }\n\n      tile.position = nextPosition;\n      nextPosition = tile.position + 1;\n    }\n\n    for (const tile of nonPositionedTiles) {\n      tile.position = nextPosition++;\n    }\n  }\n\n  /** Updates the default (manual) slot of the tile manager with the current tiles. */\n  public assignTiles(): void {\n    this.manager.renderRoot.querySelector('slot')!.assign(...this._tiles);\n  }\n\n  public add(tile: IgcTileComponent): void {\n    const tiles = this.tiles;\n\n    if (tile.position > -1) {\n      for (const each of tiles) {\n        if (each !== tile && each.position >= tile.position) {\n          each.position++;\n        }\n      }\n    } else {\n      const positionedTiles = this._tiles.filter((tile) => tile.position > -1);\n      tile.position =\n        positionedTiles.length > 1\n          ? Math.max(...positionedTiles.map((tile) => tile.position)) + 1\n          : this._nextEmptyPosition++;\n    }\n  }\n\n  /**\n   * Checks and adjusts tile spans based on the column count of the tile manager.\n   */\n  public adjustTileGridPosition(): void {\n    const columnCount = this.manager.columnCount;\n\n    if (columnCount > 0) {\n      for (const tile of this.tiles) {\n        let colStart = tile.colStart || 0;\n        let colStartDelta = colStart > 0 ? 1 : 0;\n        const colSpan = tile.colSpan || 0;\n\n        if (colStart > columnCount) {\n          colStart = 0;\n          colStartDelta = 0;\n          tile.colStart = 0;\n        }\n\n        if (colStart + colSpan > columnCount) {\n          tile.colSpan = columnCount - colStart + colStartDelta;\n        }\n      }\n    }\n  }\n\n  public remove(tile: IgcTileComponent): void {\n    for (const each of this.tiles) {\n      if (each.position >= tile.position) {\n        each.position--;\n      }\n    }\n  }\n}\n\ntype TileDragStackEntry = {\n  tile: IgcTileComponent;\n  position: number;\n  column?: number | null;\n  row?: number | null;\n};\n\nclass TileDragStack {\n  private _stack: TileDragStackEntry[] = [];\n\n  public peek(): IgcTileComponent {\n    return last(this._stack).tile;\n  }\n\n  public pop(): TileDragStackEntry | undefined {\n    return this._stack.pop();\n  }\n\n  public push(tile: IgcTileComponent): void {\n    this._stack.push({\n      tile,\n      position: tile.position,\n      column: tile.colStart,\n      row: tile.rowStart,\n    });\n  }\n\n  public restore(): void {\n    for (const {\n      tile,\n      position,\n      column: colStart,\n      row: rowStart,\n    } of this._stack.toReversed()) {\n      Object.assign(tile, {\n        position,\n        colStart,\n        rowStart,\n      });\n    }\n  }\n\n  public reset(): void {\n    this._stack = [];\n  }\n}\n\nexport function createTilesState(manager: IgcTileManagerComponent) {\n  return new TilesState(manager);\n}\n\nexport function createTileDragStack(): TileDragStack {\n  return new TileDragStack();\n}\n\nexport function swapTiles(a: IgcTileComponent, b: IgcTileComponent): void {\n  [a.colStart, b.colStart] = [b.colStart, a.colStart];\n  [a.rowStart, b.rowStart] = [b.rowStart, a.colStart];\n  [a.position, b.position] = [b.position, a.position];\n}\n"]}