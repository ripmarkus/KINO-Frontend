{"version":3,"file":"combo.js","sourceRoot":"","sources":["../../../src/components/combo/combo.ts"],"names":[],"mappings":";;;;;;;AAAA,OAAO,EAAE,IAAI,EAAE,UAAU,EAAE,OAAO,EAAuB,MAAM,KAAK,CAAC;AACrE,OAAO,EACL,QAAQ,EACR,KAAK,EACL,qBAAqB,EACrB,KAAK,GACN,MAAM,mBAAmB,CAAC;AAC3B,OAAO,EAAE,SAAS,EAAE,MAAM,8BAA8B,CAAC;AACzD,OAAO,EAAE,IAAI,EAAE,MAAM,wBAAwB,CAAC;AAE9C,OAAO,EAAE,oBAAoB,EAAE,MAAM,qCAAqC,CAAC;AAC3E,OAAO,EAAE,sBAAsB,EAAE,MAAM,qCAAqC,CAAC;AAC7E,OAAO,EAAE,4BAA4B,EAAE,MAAM,sDAAsD,CAAC;AACpG,OAAO,EAAE,oBAAoB,EAAE,MAAM,8CAA8C,CAAC;AACpF,OAAO,EAAE,KAAK,EAAE,MAAM,+BAA+B,CAAC;AACtD,OAAO,EAAE,iBAAiB,EAAE,MAAM,mCAAmC,CAAC;AAEtE,OAAO,EAAE,iBAAiB,EAAE,MAAM,mCAAmC,CAAC;AACtE,OAAO,EAAE,2BAA2B,EAAE,MAAM,+CAA+C,CAAC;AAC5F,OAAO,EACL,oBAAoB,GAErB,MAAM,sCAAsC,CAAC;AAC9C,OAAO,EAAE,OAAO,EAAE,MAAM,uBAAuB,CAAC;AAChD,OAAO,EACL,oBAAoB,EACpB,OAAO,EACP,KAAK,EACL,wBAAwB,EACxB,KAAK,EACL,OAAO,GACR,MAAM,mBAAmB,CAAC;AAC3B,OAAO,gBAAgB,MAAM,iBAAiB,CAAC;AAC/C,OAAO,iBAAiB,MAAM,mBAAmB,CAAC;AAClD,OAAO,mBAAmB,MAAM,uBAAuB,CAAC;AACxD,OAAO,+BAA+B,MAAM,iDAAiD,CAAC;AAC9F,OAAO,uBAAuB,MAAM,mBAAmB,CAAC;AACxD,OAAO,qBAAqB,MAAM,iBAAiB,CAAC;AACpD,OAAO,qBAAqB,MAAM,iBAAiB,CAAC;AACpD,OAAO,EAAE,cAAc,EAAE,MAAM,uBAAuB,CAAC;AACvD,OAAO,EAAE,oBAAoB,EAAE,MAAM,6BAA6B,CAAC;AACnE,OAAO,EAAE,mBAAmB,EAAE,MAAM,4BAA4B,CAAC;AACjE,OAAO,EAAE,MAAM,EAAE,MAAM,4BAA4B,CAAC;AACpD,OAAO,EAAE,MAAM,IAAI,MAAM,EAAE,MAAM,qCAAqC,CAAC;AACvE,OAAO,EAAE,GAAG,EAAE,MAAM,oBAAoB,CAAC;AAYzC,OAAO,EAAE,eAAe,EAAE,MAAM,iBAAiB,CAAC;AAsDnC,IAAM,iBAAiB,yBAAvB,MAAM,iBAEnB,SAAQ,2BAA2B,CACnC,iBAAiB,CACf,UAAU,CACX,CACF;IAKQ,MAAM,CAAC,QAAQ;QACpB,iBAAiB,CACf,mBAAiB,EACjB,gBAAgB,EAChB,qBAAqB,EACrB,qBAAqB,EACrB,uBAAuB,EACvB,iBAAiB,EACjB,mBAAmB,EACnB,+BAA+B,CAChC,CAAC;IACJ,CAAC;IAED,IAAuB,YAAY;QACjC,OAAO,eAAe,CAAC;IACzB,CAAC;IAkED,IAAW,IAAI,CAAC,KAAU;QACxB,IAAI,IAAI,CAAC,KAAK,KAAK,KAAK,EAAE,CAAC;YACzB,OAAO;QACT,CAAC;QACD,IAAI,CAAC,KAAK,GAAG,OAAO,CAAC,KAAK,CAAC,CAAC;QAC5B,MAAM,QAAQ,GAAG,IAAI,CAAC,SAAS,CAAC;QAChC,IAAI,CAAC,KAAK,GAAG,OAAO,CAAC,IAAI,CAAC,KAAK,CAAC,CAAC;QACjC,IAAI,CAAC,SAAS,GAAG,QAAQ,CAAC;QAC1B,IAAI,CAAC,MAAM,CAAC,WAAW,EAAE,CAAC;IAC5B,CAAC;IAED,IAAW,IAAI;QACb,OAAO,IAAI,CAAC,KAAK,CAAC;IACpB,CAAC;IAeD,IAAW,YAAY,CAAC,KAAc;QACpC,IAAI,IAAI,CAAC,aAAa,KAAK,OAAO,CAAC,KAAK,CAAC,EAAE,CAAC;YAC1C,OAAO;QACT,CAAC;QAED,IAAI,CAAC,aAAa,GAAG,OAAO,CAAC,KAAK,CAAC,CAAC;QACpC,IAAI,CAAC,UAAU,CAAC,KAAK,EAAE,CAAC;QACxB,IAAI,IAAI,CAAC,UAAU,EAAE,CAAC;YACpB,IAAI,CAAC,WAAW,EAAE,CAAC;YACnB,IAAI,CAAC,eAAe,EAAE,CAAC;YACvB,IAAI,CAAC,WAAW,CAAC,MAAM,GAAG,CAAC,CAAC,CAAC;QAC/B,CAAC;IACH,CAAC;IAED,IAAW,YAAY;QACrB,OAAO,IAAI,CAAC,aAAa,CAAC;IAC5B,CAAC;IAiDD,IAAW,QAAQ,CAAC,KAA0B;QAC5C,IAAI,CAAC,SAAS,GAAG,KAAK,CAAC;QACvB,IAAI,CAAC,WAAW,GAAG,IAAI,CAAC,WAAW,IAAI,IAAI,CAAC,SAAS,CAAC;IACxD,CAAC;IAED,IAAW,QAAQ;QACjB,OAAO,IAAI,CAAC,SAAS,CAAC;IACxB,CAAC;IAOD,IAAW,UAAU,CAAC,KAA0B;QAC9C,IAAI,CAAC,WAAW,GAAG,KAAK,CAAC;QACzB,IAAI,CAAC,IAAI,CAAC,gBAAgB,CAAC,SAAS,EAAE,CAAC;YACrC,IAAI,CAAC,gBAAgB,GAAG,EAAE,SAAS,EAAE,IAAI,CAAC,UAAU,EAAE,CAAC;QACzD,CAAC;IACH,CAAC;IAED,IAAW,UAAU;QACnB,OAAO,IAAI,CAAC,WAAW,IAAI,IAAI,CAAC,SAAS,CAAC;IAC5C,CAAC;IAOD,IAAW,QAAQ,CAAC,KAA0B;QAC5C,IAAI,IAAI,CAAC,SAAS,KAAK,KAAK,EAAE,CAAC;YAC7B,IAAI,CAAC,SAAS,GAAG,KAAK,CAAC;YACvB,IAAI,CAAC,MAAM,CAAC,WAAW,EAAE,CAAC;QAC5B,CAAC;IACH,CAAC;IAED,IAAW,QAAQ;QACjB,OAAO,IAAI,CAAC,SAAS,CAAC;IACxB,CAAC;IASD,IAAW,YAAY,CAAC,KAAwB;QAC9C,IAAI,IAAI,CAAC,aAAa,KAAK,KAAK,EAAE,CAAC;YACjC,IAAI,CAAC,aAAa,GAAG,KAAK,CAAC;YAC3B,IAAI,CAAC,MAAM,CAAC,WAAW,EAAE,CAAC;QAC5B,CAAC;IACH,CAAC;IAED,IAAW,YAAY;QACrB,OAAO,IAAI,CAAC,aAAa,CAAC;IAC5B,CAAC;IAWD,IAAW,gBAAgB,CAAC,KAAmC;QAC7D,MAAM,OAAO,GAAG,EAAE,GAAG,IAAI,CAAC,iBAAiB,EAAE,GAAG,KAAK,EAAE,CAAC;QACxD,IAAI,CAAC,KAAK,CAAC,OAAO,EAAE,IAAI,CAAC,iBAAiB,CAAC,EAAE,CAAC;YAC5C,IAAI,CAAC,iBAAiB,GAAG,OAAO,CAAC;YACjC,IAAI,CAAC,MAAM,CAAC,WAAW,EAAE,CAAC;QAC5B,CAAC;IACH,CAAC;IAED,IAAW,gBAAgB;QACzB,OAAO,IAAI,CAAC,iBAAiB,CAAC;IAChC,CAAC;IAeD,IAAW,gBAAgB,CAAC,KAAc;QACxC,IAAI,CAAC,iBAAiB,GAAG,KAAK,CAAC;QAC/B,IAAI,CAAC,eAAe,EAAE,CAAC;IACzB,CAAC;IAED,IAAW,gBAAgB;QACzB,OAAO,IAAI,CAAC,iBAAiB,CAAC;IAChC,CAAC;IAmDD,IAAW,KAAK,CAAC,KAAsB;QACrC,IAAI,CAAC,UAAU,CAAC,KAAK,GAAG,KAAK,CAAC;QAC9B,IAAI,IAAI,CAAC,UAAU,EAAE,CAAC;YACpB,IAAI,CAAC,gBAAgB,EAAE,CAAC;YACxB,IAAI,CAAC,WAAW,EAAE,CAAC;QACrB,CAAC;IACH,CAAC;IAMD,IAAW,KAAK;QACd,OAAO,IAAI,CAAC,UAAU,CAAC,KAAK,CAAC;IAC/B,CAAC;IAES,gBAAgB;QACxB,IAAI,CAAC,UAAU,CAAC,QAAQ,EAAE,CAAC;QAC3B,IAAI,CAAC,OAAO,CAAC,IAAI,CAAC,KAAK,CAAC,EAAE,CAAC;YACzB,IAAI,CAAC,UAAU,CAAC,MAAM,CAAC,IAAI,CAAC,KAAK,CAAC,CAAC;QACrC,CAAC;IACH,CAAC;IAGS,qBAAqB;QAC7B,IAAI,CAAC,oBAAoB,CAAC,MAAM,EAAE,CAAC;IACrC,CAAC;IAED;QACE,KAAK,EAAE,CAAC;QAjVO,yBAAoB,GAAG,sBAAsB,CAAC,IAAI,EAAE;YACnE,MAAM,EAAE,KAAK,IAAI,EAAE;gBACjB,IAAI,CAAC,IAAI,CAAC,aAAa,EAAE,EAAE,CAAC;oBAC1B,OAAO;gBACT,CAAC;gBACD,IAAI,CAAC,IAAI,GAAG,KAAK,CAAC;gBAElB,MAAM,IAAI,CAAC,cAAc,CAAC;gBAC1B,IAAI,CAAC,SAAS,CAAC,WAAW,CAAC,CAAC;YAC9B,CAAC;SACF,CAAC,CAAC;QAEyB,eAAU,GACpC,oBAAoB,CAAkB,IAAI,EAAE;YAC1C,YAAY,EAAE,EAAE;YAChB,YAAY,EAAE;gBACZ,QAAQ,EAAE,OAAO;gBACjB,eAAe,EAAE,OAAO;aACzB;SACF,CAAC,CAAC;QACG,UAAK,GAAQ,EAAE,CAAC;QAMhB,sBAAiB,GAAG,KAAK,CAAC;QAC1B,kBAAa,GAAG,KAAK,CAAC;QAEtB,kBAAa,GAAsB,KAAK,CAAC;QACzC,sBAAiB,GAAwB;YAC/C,SAAS,EAAE,IAAI,CAAC,UAAU;YAC1B,aAAa,EAAE,KAAK;YACpB,eAAe,EAAE,KAAK;SACvB,CAAC;QAMM,kBAAa,GAAG,EAAE,CAAC;QAEjB,WAAM,GAAG,IAAI,cAAc,CAAI,IAAI,CAAC,CAAC;QACrC,eAAU,GAAG,IAAI,mBAAmB,CAAI,IAAI,EAAE,IAAI,CAAC,MAAM,CAAC,CAAC;QAC3D,gBAAW,GAAG,IAAI,oBAAoB,CAAI,IAAI,EAAE,IAAI,CAAC,MAAM,CAAC,CAAC;QAwChE,aAAQ,GAAG,KAAK,CAAC;QAsCjB,kBAAa,GAAG,KAAK,CAAC;QAqBtB,sBAAiB,GAAG,QAAQ,CAAC;QAO7B,SAAI,GAAG,KAAK,CAAC;QA4Fb,sBAAiB,GAAG,KAAK,CAAC;QAuB1B,iBAAY,GAAyB,CAAC,EAAE,IAAI,EAAE,EAAE,EAAE,CACvD,IAAI,CAAA,GAAG,IAAI,CAAC,UAAU,CAAC,CAAC,CAAC,IAAI,CAAC,IAAI,CAAC,UAAU,CAAC,CAAC,CAAC,CAAC,IAAI,EAAE,CAAC;QAQnD,wBAAmB,GAAyB,CAAC,EAAE,IAAI,EAAE,EAAE,EAAE,CAC9D,IAAI,CAAA,GAAG,IAAI,CAAC,QAAQ,IAAI,IAAI,CAAC,IAAI,CAAC,QAAQ,CAAC,EAAE,CAAC;QAuTtC,iBAAY,GAA2B,CAC/C,IAAoB,EACpB,KAAa,EACb,EAAE;YACF,IAAI,CAAC,IAAI,EAAE,CAAC;gBACV,OAAO,IAAI,CAAA,GAAG,OAAO,EAAE,CAAC;YAC1B,CAAC;YAED,IAAI,IAAI,CAAC,QAAQ,IAAI,IAAI,CAAC,MAAM,EAAE,CAAC;gBACjC,OAAO,IAAI,CAAA;;YAEL,IAAI,CAAC,mBAAmB,CAAC,EAAE,IAAI,EAAE,IAAI,CAAC,KAAK,EAAE,CAAC;;OAEnD,CAAC;YACJ,CAAC;YAED,MAAM,EAAE,EAAE,EAAE,QAAQ,EAAE,GAAG,IAAI,CAAC,sBAAsB,CAAC,KAAK,CAAC,CAAC;YAC5D,MAAM,MAAM,GAAG,IAAI,CAAC,WAAW,CAAC,MAAM,KAAK,KAAK,CAAC;YACjD,MAAM,QAAQ,GAAG,IAAI,CAAC,UAAU,CAAC,GAAG,CAAC,IAAI,CAAC,IAAI,CAAC,EAAE,CAAC,IAAI,CAAC,SAAS,CAAC,CAAC,CAAC;YAEnE,IAAI,MAAM,EAAE,CAAC;gBACX,IAAI,CAAC,iBAAiB,GAAG,EAAE,CAAC;YAC9B,CAAC;YAED,OAAO,IAAI,CAAA;;aAEF,EAAE;eACA,OAAO,CAAC,EAAE,IAAI,EAAE,IAAI,EAAE,QAAQ,EAAE,MAAM,EAAE,CAAC;uBACjC,IAAI,CAAC,MAAM,CAAC,SAAS,CAAC,MAAM;wBAC3B,QAAQ;;iBAEf,KAAK;kBACJ,MAAM;oBACJ,QAAQ;yBACH,IAAI,CAAC,YAAY;;UAEhC,IAAI,CAAC,YAAY,CAAC,EAAE,IAAI,EAAE,IAAI,CAAC,KAAK,EAAE,CAAC;;KAE5C,CAAC;QACJ,CAAC,CAAC;QA9RA,oBAAoB,CAAC,IAAI,EAAE,GAAG,CAAC,CAAC;QAChC,oBAAoB,CAAC,IAAI,EAAE,MAAM,EAAE,IAAI,CAAC,WAAW,CAAC,CAAC;QAGrD,IAAI,CAAC,gBAAgB,CACnB,SAAS,EACT,IAAI,CAAC,WAAW,CAAC,YAAY,CAAC,IAAI,CAAC,IAAI,CAAC,WAAW,CAAC,CACrD,CAAC;IACJ,CAAC;IAEkB,KAAK,CAAC,YAAY;QACnC,MAAM,IAAI,CAAC,cAAc,CAAC;QAE1B,IAAI,CAAC,gBAAgB,EAAE,CAAC;QACxB,IAAI,CAAC,WAAW,CAAC,IAAI,CAAC,UAAU,CAAC,CAAC;QAClC,IAAI,CAAC,SAAS,GAAG,IAAI,CAAC;QACtB,IAAI,CAAC,MAAM,CAAC,WAAW,EAAE,CAAC;IAC5B,CAAC;IAEkB,oBAAoB;QACrC,IAAI,CAAC,UAAU,CAAC,KAAK,GAAG,IAAI,CAAC,UAAU,CAAC,YAAY,CAAC;QACrD,IAAI,CAAC,gBAAgB,EAAE,CAAC;QACxB,IAAI,CAAC,WAAW,CAAC,IAAI,CAAC,CAAC;QACvB,IAAI,CAAC,eAAe,EAAE,CAAC;IACzB,CAAC;IAEkB,gBAAgB,CAAC,OAAsB;QACxD,IAAI,CAAC,YAAY,GAAG,IAAI,CAAC,KAAK,CAAC,OAAO,IAAI,IAAI,CAAC,CAAC;IAClD,CAAC;IAEkB,aAAa;QAC9B,IAAI,OAAO,CAAC,IAAI,CAAC,KAAK,CAAC,EAAE,CAAC;YACxB,KAAK,CAAC,aAAa,CAAC,IAAI,CAAC,CAAC;YAC1B,OAAO;QACT,CAAC;QAED,IAAI,IAAI,CAAC,YAAY,EAAE,CAAC;YACtB,KAAK,CAAC,aAAa,CAAC,GAAG,KAAK,CAAC,IAAI,CAAC,KAAK,CAAC,EAAE,CAAC,CAAC;YAC5C,OAAO;QACT,CAAC;QAED,IAAI,IAAI,CAAC,IAAI,EAAE,CAAC;YACd,MAAM,KAAK,GAAG,IAAI,QAAQ,EAAE,CAAC;YAC7B,KAAK,MAAM,IAAI,IAAI,IAAI,CAAC,KAAK,EAAE,CAAC;gBAC9B,KAAK,CAAC,MAAM,CAAC,IAAI,CAAC,IAAI,EAAE,GAAG,IAAI,EAAE,CAAC,CAAC;YACrC,CAAC;YACD,KAAK,CAAC,aAAa,CAAC,KAAK,CAAC,CAAC;QAC7B,CAAC;IACH,CAAC;IAES,eAAe;QACvB,IAAI,CAAC,MAAM,CAAC,UAAU,GAAG,EAAE,CAAC;IAC9B,CAAC;IAES,WAAW,CAAC,OAAO,GAAG,KAAK;QACnC,IAAI,OAAO,CAAC,IAAI,CAAC,IAAI,CAAC,EAAE,CAAC;YACvB,OAAO;QACT,CAAC;QACD,IAAI,CAAC,UAAU,CAAC,KAAK,GAAG,IAAI,CAAC,UAAU,CAAC,sBAAsB,CAC5D,IAAI,CAAC,QAAQ,CACd,CAAC;QACF,IAAI,CAAC,aAAa,GAAG,IAAI,CAAC,UAAU;aACjC,sBAAsB,CAAC,IAAI,CAAC,UAAU,CAAC;aACvC,IAAI,CAAC,IAAI,CAAC,CAAC;QAEd,IAAI,CAAC,aAAa,EAAE,CAAC;QAErB,IAAI,CAAC,OAAO,EAAE,CAAC;YACb,IAAI,CAAC,SAAS,EAAE,CAAC;YACjB,IAAI,CAAC,KAAK,CAAC,aAAa,EAAE,CAAC;QAC7B,CAAC;IACH,CAAC;IAIe,KAAK,CAAC,OAAsB;QAC1C,IAAI,CAAC,MAAM,CAAC,KAAK,CAAC,OAAO,CAAC,CAAC;IAC7B,CAAC;IAIe,IAAI;QAClB,IAAI,CAAC,MAAM,CAAC,IAAI,EAAE,CAAC;IACrB,CAAC;IAKD,IAAW,SAAS;QAClB,OAAO,IAAI,CAAC,UAAU,CAAC,OAAO,CAAC;IACjC,CAAC;IAwBM,MAAM,CAAC,KAA2B;QACvC,IAAI,CAAC,UAAU,CAAC,MAAM,CAAC,KAAK,CAAC,CAAC;QAC9B,IAAI,CAAC,WAAW,EAAE,CAAC;IACrB,CAAC;IAwBM,QAAQ,CAAC,KAA2B;QACzC,IAAI,CAAC,UAAU,CAAC,QAAQ,CAAC,KAAK,CAAC,CAAC;QAChC,IAAI,CAAC,WAAW,EAAE,CAAC;IACrB,CAAC;IAES,KAAK,CAAC,eAAe,CAAC,EAAE,MAAM,EAAuB;QAC7D,IAAI,CAAC,KAAK,EAAE,CAAC;QACb,IAAI,CAAC,MAAM,CAAC,UAAU,GAAG,MAAM,CAAC;QAGhC,MAAM,IAAI,CAAC,cAAc,CAAC;QAE1B,MAAM,UAAU,GAAG,IAAI,CAAC,MAAM,CAAC,SAAS,CAAC,SAAS,CAAC,CAAC,CAAC,EAAE,EAAE,CAAC,CAAC,CAAC,CAAC,MAAM,CAAC,CAAC;QACrE,IAAI,CAAC,WAAW,CAAC,MAAM,GAAG,MAAM,CAAC,CAAC,CAAC,UAAU,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;QAGnD,IAAI,CAAC,KAAK,CAAC,aAAa,EAAE,CAAC;QAG3B,IAAI,CAAC,oBAAoB,EAAE,CAAC;IAC9B,CAAC;IAEO,WAAW;QACjB,IAAI,IAAI,CAAC,UAAU,CAAC,OAAO,EAAE,CAAC;YAC5B,IAAI,CAAC,aAAa,GAAG,EAAE,CAAC;YACxB,IAAI,CAAC,eAAe,EAAE,CAAC;QACzB,CAAC;QACD,IAAI,CAAC,aAAa,EAAE,CAAC;IACvB,CAAC;IAES,iBAAiB,CAAC,EAAE,MAAM,EAAuB;QACzD,IAAI,CAAC,MAAM,CAAC,UAAU,GAAG,MAAM,CAAC;IAClC,CAAC;IAES,aAAa;QACrB,OAAO,IAAI,CAAC,SAAS,CAAC,YAAY,EAAE,EAAE,UAAU,EAAE,IAAI,EAAE,CAAC,CAAC;IAC5D,CAAC;IAES,aAAa;QACrB,OAAO,IAAI,CAAC,SAAS,CAAC,YAAY,EAAE,EAAE,UAAU,EAAE,IAAI,EAAE,CAAC,CAAC;IAC5D,CAAC;IAES,KAAK,CAAC,KAAK,CAAC,SAAS,GAAG,IAAI;QACpC,IAAI,IAAI,CAAC,IAAI,IAAI,CAAC,SAAS,IAAI,CAAC,IAAI,CAAC,aAAa,EAAE,CAAC,EAAE,CAAC;YACtD,OAAO,KAAK,CAAC;QACf,CAAC;QAED,IAAI,CAAC,IAAI,GAAG,IAAI,CAAC;QACjB,MAAM,IAAI,CAAC,cAAc,CAAC;QAE1B,IAAI,SAAS,EAAE,CAAC;YACd,IAAI,CAAC,SAAS,CAAC,WAAW,CAAC,CAAC;QAC9B,CAAC;QAED,IAAI,CAAC,IAAI,CAAC,YAAY,EAAE,CAAC;YACvB,IAAI,CAAC,KAAK,CAAC,KAAK,EAAE,CAAC;QACrB,CAAC;QAED,IAAI,CAAC,IAAI,CAAC,aAAa,EAAE,CAAC;YACxB,IAAI,CAAC,YAAY,CAAC,KAAK,EAAE,CAAC;QAC5B,CAAC;QAED,OAAO,IAAI,CAAC;IACd,CAAC;IAGM,KAAK,CAAC,IAAI;QACf,OAAO,MAAM,IAAI,CAAC,KAAK,CAAC,KAAK,CAAC,CAAC;IACjC,CAAC;IAES,KAAK,CAAC,KAAK,CAAC,SAAS,GAAG,IAAI;QACpC,IAAI,CAAC,IAAI,CAAC,IAAI,IAAI,CAAC,SAAS,IAAI,CAAC,IAAI,CAAC,aAAa,EAAE,CAAC,EAAE,CAAC;YACvD,OAAO,KAAK,CAAC;QACf,CAAC;QAED,IAAI,CAAC,IAAI,GAAG,KAAK,CAAC;QAClB,MAAM,IAAI,CAAC,cAAc,CAAC;QAE1B,IAAI,SAAS,EAAE,CAAC;YACd,IAAI,CAAC,SAAS,CAAC,WAAW,CAAC,CAAC;QAC9B,CAAC;QACD,IAAI,CAAC,WAAW,CAAC,MAAM,GAAG,CAAC,CAAC,CAAC;QAC7B,OAAO,IAAI,CAAC;IACd,CAAC;IAGM,KAAK,CAAC,IAAI;QACf,OAAO,MAAM,IAAI,CAAC,KAAK,CAAC,KAAK,CAAC,CAAC;IACjC,CAAC;IAES,OAAO,CAAC,IAAI,GAAG,IAAI;QAC3B,OAAO,IAAI,CAAC,IAAI,CAAC,CAAC,CAAC,IAAI,CAAC,KAAK,CAAC,IAAI,CAAC,CAAC,CAAC,CAAC,IAAI,CAAC,KAAK,CAAC,IAAI,CAAC,CAAC;IACzD,CAAC;IAGM,KAAK,CAAC,MAAM;QACjB,OAAO,MAAM,IAAI,CAAC,OAAO,CAAC,KAAK,CAAC,CAAC;IACnC,CAAC;IAEO,sBAAsB,CAAC,KAAa;QAC1C,MAAM,QAAQ,GAAG,KAAK,GAAG,CAAC,CAAC;QAC3B,MAAM,EAAE,GAAG,IAAI,CAAC,EAAE,CAAC,CAAC,CAAC,GAAG,IAAI,CAAC,EAAE,SAAS,QAAQ,EAAE,CAAC,CAAC,CAAC,QAAQ,QAAQ,EAAE,CAAC;QAExE,OAAO,EAAE,EAAE,EAAE,QAAQ,EAAE,CAAC;IAC1B,CAAC;IA2CS,kBAAkB,CAAC,KAAoB;QAC/C,MAAM,MAAM,GAAG,wBAAwB,CACrC,qBAAqB,CAAC,OAAO,EAC7B,KAAK,CACN,CAAC;QAEF,IAAI,MAAM,EAAE,CAAC;YACX,IAAI,CAAC,WAAW,CAAC,YAAY,CAAC,KAAK,EAAE,MAAM,CAAC,CAAC;QAC/C,CAAC;IACH,CAAC;IAES,gBAAgB,CAAC,KAAmB;QAC5C,MAAM,MAAM,GAAG,wBAAwB,CACrC,qBAAqB,CAAC,OAAO,EAC7B,KAAK,CACN,CAAC;QAEF,IAAI,CAAC,MAAM,EAAE,CAAC;YACZ,OAAO;QACT,CAAC;QAED,IAAI,CAAC,YAAY,CAAC,MAAM,CAAC,KAAK,CAAC,CAAC;QAEhC,IAAI,IAAI,CAAC,YAAY,EAAE,CAAC;YACtB,IAAI,CAAC,MAAM,CAAC,KAAK,EAAE,CAAC;YACpB,IAAI,CAAC,KAAK,EAAE,CAAC;QACf,CAAC;aAAM,CAAC;YACN,IAAI,CAAC,YAAY,CAAC,KAAK,EAAE,CAAC;QAC5B,CAAC;IACH,CAAC;IAES,YAAY,CAAC,KAAa;QAClC,MAAM,EAAE,SAAS,EAAE,GAAG,IAAI,CAAC,MAAM,CAAC,SAAS,CAAC,EAAE,CAAC,KAAK,CAAE,CAAC;QAEvD,IAAI,CAAC,UAAU,CAAC,eAAe,CAAC,SAAS,CAAC,CAAC;QAC3C,IAAI,CAAC,WAAW,CAAC,MAAM,GAAG,KAAK,CAAC;QAChC,IAAI,CAAC,WAAW,EAAE,CAAC;IACrB,CAAC;IAES,aAAa,CAAC,KAAa;QACnC,MAAM,EAAE,SAAS,EAAE,GAAG,IAAI,CAAC,MAAM,CAAC,SAAS,CAAC,EAAE,CAAC,KAAK,CAAE,CAAC;QAEvD,IAAI,CAAC,UAAU,CAAC,aAAa,CAAC,SAAS,CAAC,CAAC;QACzC,IAAI,CAAC,WAAW,CAAC,MAAM,GAAG,KAAK,CAAC;QAChC,IAAI,CAAC,WAAW,EAAE,CAAC;IACrB,CAAC;IAES,oBAAoB;QAC5B,MAAM,UAAU,GAAG,IAAI,CAAC,UAAU,CAAC,OAAO,CAAC;QAC3C,MAAM,SAAS,GAAG,KAAK,CAAC,UAAU,CAAC,CAAC;QAEpC,IAAI,SAAS,EAAE,CAAC;YACd,MAAM,IAAI,GAAG,IAAI,CAAC,QAAQ,CAAC,CAAC,CAAC,SAAS,CAAC,IAAI,CAAC,QAAQ,CAAC,CAAC,CAAC,CAAC,SAAS,CAAC;YAClE,IAAI,CAAC,UAAU,CAAC,QAAQ,CAAC,IAAI,EAAE,CAAC,OAAO,CAAC,UAAU,CAAC,CAAC,CAAC;YACrD,IAAI,CAAC,UAAU,CAAC,KAAK,GAAG,EAAE,CAAC;QAC7B,CAAC;IACH,CAAC;IAES,oBAAoB,CAAC,CAAe;QAC5C,CAAC,CAAC,eAAe,EAAE,CAAC;QAEpB,IAAI,IAAI,CAAC,YAAY,EAAE,CAAC;YACtB,IAAI,CAAC,eAAe,EAAE,CAAC;YACvB,IAAI,CAAC,oBAAoB,EAAE,CAAC;QAC9B,CAAC;aAAM,CAAC;YACN,IAAI,CAAC,UAAU,CAAC,QAAQ,CAAC,EAAE,EAAE,IAAI,CAAC,CAAC;QACrC,CAAC;QAED,IAAI,CAAC,WAAW,EAAE,CAAC;QACnB,IAAI,CAAC,WAAW,CAAC,MAAM,GAAG,CAAC,CAAC,CAAC;IAC/B,CAAC;IAES,sBAAsB,CAAC,CAAgB;QAC/C,IAAI,CAAC,WAAW,CAAC,iBAAiB,CAAC,CAAC,EAAE,IAAI,CAAC,KAAK,CAAC,CAAC;IACpD,CAAC;IAES,wBAAwB,CAAC,CAAgB;QACjD,IAAI,CAAC,WAAW,CAAC,mBAAmB,CAAC,CAAC,EAAE,IAAI,CAAC,KAAK,CAAC,CAAC;IACtD,CAAC;IAES,qBAAqB;QAC7B,IAAI,CAAC,gBAAgB,GAAG;YACtB,aAAa,EAAE,CAAC,IAAI,CAAC,gBAAgB,CAAC,aAAa;SACpD,CAAC;IACJ,CAAC;IAEO,gBAAgB,CAAC,CAAQ;QAC/B,CAAC,CAAC,eAAe,EAAE,CAAC;IACtB,CAAC;IAEO,gBAAgB;QACtB,OAAO,IAAI,CAAA;;;eAGA,OAAO,CAAC;YACb,aAAa,EAAE,IAAI;YACnB,MAAM,EAAE,CAAC,OAAO,CAAC,IAAI,CAAC,KAAK,CAAC;SAC7B,CAAC;;;;mBAIS,IAAI,CAAC,IAAI,CAAC,CAAC,CAAC,gBAAgB,CAAC,CAAC,CAAC,cAAc;;;;;;KAM3D,CAAC;IACJ,CAAC;IAEO,eAAe;QACrB,OAAO,IAAI,CAAA;;;;iBAIE,IAAI,CAAC,oBAAoB;kBACxB,IAAI,CAAC,UAAU,CAAC,OAAO;;;;;;;;;;KAUpC,CAAC;IACJ,CAAC;IAEO,eAAe;QACrB,OAAO,IAAI,CAAA;;;;;;;wBAOS,IAAI,CAAC,IAAI,CAAC,CAAC,CAAC,MAAM,CAAC,CAAC,CAAC,OAAO;;wBAE5B,IAAI,CAAC,QAAQ;;iBAEpB,IAAI,CAAC,OAAO;sBACP,SAAS,CAAC,IAAI,CAAC,WAAW,CAAC;gBACjC,SAAS,CAAC,IAAI,CAAC,KAAK,CAAC;qBAChB,IAAI,CAAC,gBAAgB;oBACtB,IAAI,CAAC,eAAe;mBACrB,IAAI,CAAC,sBAAsB;iBAC7B,IAAI,CAAC,aAAa;oBACf,IAAI,CAAC,QAAQ;oBACb,IAAI,CAAC,QAAQ;mBACd,IAAI,CAAC,IAAI,CAAC,OAAO,CAAC;oBACjB,IAAI,CAAC,QAAQ;qBACZ,IAAI,CAAC,SAAS;oBACf,CAAC,IAAI,CAAC,YAAY;;qBAEjB,CAAC,OAAO,CAAC,IAAI,CAAC,WAAW,CAAC,IAAI,QAAQ;;;UAGjD,IAAI,CAAC,eAAe,EAAE;qBACX,CAAC,OAAO,CAAC,IAAI,CAAC,WAAW,CAAC,IAAI,QAAQ;;;UAGjD,IAAI,CAAC,gBAAgB,EAAE;;KAE5B,CAAC;IACJ,CAAC;IAEO,iBAAiB;QACvB,OAAO,IAAI,CAAA;;;kBAGG,IAAI,CAAC,gBAAgB,IAAI,IAAI,CAAC,YAAY;;;mBAGzC,IAAI,CAAC,MAAM,CAAC,UAAU;;wBAEjB,IAAI,CAAC,iBAAiB;;sBAExB,IAAI,CAAC,iBAAiB;qBACvB,IAAI,CAAC,wBAAwB;;;mBAG/B,IAAI,CAAC,iBAAiB,IAAI,QAAQ;;;mBAGlC,OAAO,CAAC;YACb,WAAW,EAAE,IAAI;YACjB,MAAM,EAAE,IAAI,CAAC,gBAAgB,CAAC,aAAa,IAAI,KAAK;SACrD,CAAC;qBACO,IAAI,CAAC,qBAAqB;;;;KAI1C,CAAC;IACJ,CAAC;IAEO,mBAAmB;QACzB,OAAO,IAAI,CAAA;kCACmB,CAAC,OAAO,CAAC,IAAI,CAAC,MAAM,CAAC,SAAS,CAAC;;;KAG5D,CAAC;IACJ,CAAC;IAEO,UAAU;QAChB,OAAO,IAAI,CAAA;;iBAEE,CAAC,IAAI,CAAC,IAAI;mBACR,IAAI,CAAC,kBAAkB;;;UAGhC,IAAI,CAAC,iBAAiB,EAAE;;;;;iCAKD,CAAC,IAAI,CAAC,YAAY;;;;;;kCAMjB,SAAS,CAAC,IAAI,CAAC,iBAAiB,CAAC;mBAChD,IAAI,CAAC,MAAM,CAAC,SAAS;wBAChB,IAAI,CAAC,YAAY;oBACrB,OAAO,CAAC,IAAI,CAAC,MAAM,CAAC,SAAS,CAAC;mBAC/B,IAAI,CAAC,gBAAgB;;;UAG9B,IAAI,CAAC,mBAAmB,EAAE;;;;;KAK/B,CAAC;IACJ,CAAC;IAEO,gBAAgB;QACtB,OAAO,+BAA+B,CAAC,MAAM,CAAC,IAAI,EAAE;YAClD,EAAE,EAAE,mBAAmB;YACvB,aAAa,EAAE,IAAI;SACpB,CAAC,CAAC;IACL,CAAC;IAEkB,MAAM;QACvB,OAAO,IAAI,CAAA;2BACY,IAAI,CAAC,IAAI;UAC1B,IAAI,CAAC,eAAe,EAAE,IAAI,IAAI,CAAC,UAAU,EAAE;;QAE7C,IAAI,CAAC,gBAAgB,EAAE;KAC1B,CAAC;IACJ,CAAC;;AAn4BsB,yBAAO,GAAG,WAAW,AAAd,CAAe;AAC/B,wBAAM,GAAG,CAAC,MAAM,EAAE,MAAM,CAAC,AAAnB,CAAoB;AAyDhC;IADP,KAAK,EAAE;4DAC2B;AAG3B;IADP,KAAK,EAAE;wDACmB;AAOjB;IADT,qBAAqB,CAAC,EAAE,IAAI,EAAE,QAAQ,EAAE,CAAC;sDACJ;AAG5B;IADT,qBAAqB,CAAC,EAAE,IAAI,EAAE,QAAQ,EAAE,CAAC;sDACJ;AAG5B;IADT,KAAK,CAAC,uBAAuB,CAAC;uDACY;AAGnC;IADP,KAAK,CAAC,SAAS,EAAE,IAAI,CAAC;iDACY;AAG3B;IADP,KAAK,CAAC,qBAAqB,CAAC,OAAO,EAAE,IAAI,CAAC;gDACL;AAKtC;IADC,QAAQ,CAAC,EAAE,SAAS,EAAE,KAAK,EAAE,CAAC;6CAU9B;AAWM;IADN,QAAQ,CAAC,EAAE,IAAI,EAAE,OAAO,EAAE,OAAO,EAAE,IAAI,EAAE,CAAC;mDACnB;AAQxB;IADC,QAAQ,CAAC,EAAE,IAAI,EAAE,OAAO,EAAE,OAAO,EAAE,IAAI,EAAE,SAAS,EAAE,eAAe,EAAE,CAAC;qDAatE;AAWe;IADf,QAAQ,CAAC,EAAE,IAAI,EAAE,OAAO,EAAE,CAAC;oDACQ;AAO7B;IADN,QAAQ,CAAC,EAAE,IAAI,EAAE,OAAO,EAAE,SAAS,EAAE,gBAAgB,EAAE,CAAC;wDAC5B;AAOtB;IADN,QAAQ,EAAE;gDACW;AAOf;IADN,QAAQ,EAAE;sDACiB;AAOrB;IADN,QAAQ,CAAC,EAAE,SAAS,EAAE,oBAAoB,EAAE,CAAC;4DACV;AAO7B;IADN,QAAQ,CAAC,EAAE,IAAI,EAAE,OAAO,EAAE,OAAO,EAAE,IAAI,EAAE,CAAC;+CACvB;AAOpB;IADC,QAAQ,CAAC,EAAE,SAAS,EAAE,WAAW,EAAE,CAAC;iDAIpC;AAWD;IADC,QAAQ,CAAC,EAAE,SAAS,EAAE,aAAa,EAAE,CAAC;mDAMtC;AAWD;IADC,QAAQ,CAAC,EAAE,SAAS,EAAE,WAAW,EAAE,CAAC;iDAMpC;AAaD;IADC,QAAQ,CAAC,EAAE,SAAS,EAAE,eAAe,EAAE,CAAC;qDAMxC;AAeD;IADC,QAAQ,CAAC,EAAE,IAAI,EAAE,MAAM,EAAE,SAAS,EAAE,mBAAmB,EAAE,CAAC;yDAO1D;AAWM;IADN,QAAQ,CAAC,EAAE,IAAI,EAAE,OAAO,EAAE,SAAS,EAAE,qBAAqB,EAAE,CAAC;4DAC7B;AAQjC;IADC,QAAQ,CAAC,EAAE,IAAI,EAAE,OAAO,EAAE,SAAS,EAAE,mBAAmB,EAAE,CAAC;yDAI3D;AAYM;IADN,QAAQ,CAAC,EAAE,SAAS,EAAE,KAAK,EAAE,CAAC;uDAE2B;AAQnD;IADN,QAAQ,CAAC,EAAE,SAAS,EAAE,KAAK,EAAE,CAAC;8DAEiB;AAiChD;IADC,QAAQ,CAAC,EAAE,IAAI,EAAE,KAAK,EAAE,CAAC;8CAOzB;AAkBS;IADT,KAAK,CAAC,MAAM,CAAC;8DAGb;AA1WkB,iBAAiB;IAFrC,4BAA4B,CAAC,qCAAqC,CAAC;IACnE,oBAAoB;GACA,iBAAiB,CA24BrC;eA34BoB,iBAAiB","sourcesContent":["import { html, LitElement, nothing, type TemplateResult } from 'lit';\nimport {\n  property,\n  query,\n  queryAssignedElements,\n  state,\n} from 'lit/decorators.js';\nimport { ifDefined } from 'lit/directives/if-defined.js';\nimport { live } from 'lit/directives/live.js';\n\nimport { addThemingController } from '../../theming/theming-controller.js';\nimport { addRootClickController } from '../common/controllers/root-click.js';\nimport { blazorAdditionalDependencies } from '../common/decorators/blazorAdditionalDependencies.js';\nimport { blazorIndirectRender } from '../common/decorators/blazorIndirectRender.js';\nimport { watch } from '../common/decorators/watch.js';\nimport { registerComponent } from '../common/definitions/register.js';\nimport type { Constructor } from '../common/mixins/constructor.js';\nimport { EventEmitterMixin } from '../common/mixins/event-emitter.js';\nimport { FormAssociatedRequiredMixin } from '../common/mixins/forms/associated-required.js';\nimport {\n  createFormValueState,\n  type FormValueOf,\n} from '../common/mixins/forms/form-value.js';\nimport { partMap } from '../common/part-map.js';\nimport {\n  addSafeEventListener,\n  asArray,\n  equal,\n  findElementFromEventPath,\n  first,\n  isEmpty,\n} from '../common/util.js';\nimport IgcIconComponent from '../icon/icon.js';\nimport IgcInputComponent from '../input/input.js';\nimport IgcPopoverComponent from '../popover/popover.js';\nimport IgcValidationContainerComponent from '../validation-container/validation-container.js';\nimport IgcComboHeaderComponent from './combo-header.js';\nimport IgcComboItemComponent from './combo-item.js';\nimport IgcComboListComponent from './combo-list.js';\nimport { DataController } from './controllers/data.js';\nimport { NavigationController } from './controllers/navigation.js';\nimport { SelectionController } from './controllers/selection.js';\nimport { styles } from './themes/combo.base.css.js';\nimport { styles as shared } from './themes/shared/combo.common.css.js';\nimport { all } from './themes/themes.js';\nimport type {\n  ComboItemTemplate,\n  ComboRecord,\n  ComboRenderFunction,\n  ComboValue,\n  FilteringOptions,\n  GroupingDirection,\n  IgcComboComponentEventMap,\n  Item,\n  Keys,\n} from './types.js';\nimport { comboValidators } from './validators.js';\n\n/* blazorSupportsVisualChildren */\n/**\n * The Combo component is similar to the Select component in that it provides a list of options from which the user can make a selection.\n * In contrast to the Select component, the Combo component displays all options in a virtualized list of items,\n * meaning the combo box can simultaneously show thousands of options, where one or more options can be selected.\n * Additionally, users can create custom item templates, allowing for robust data visualization.\n * The Combo component features case-sensitive filtering, grouping, complex data binding, dynamic addition of values and more.\n *\n * @element igc-combo\n *\n * @slot prefix - Renders content before the input of the combo.\n * @slot suffix - Renders content after the input of the combo.\n * @slot header - Renders a container before the list of options of the combo.\n * @slot footer - Renders a container after the list of options of the combo.\n * @slot helper-text - Renders content below the input of the combo.\n * @slot toggle-icon - Renders content inside the suffix container of the combo.\n * @slot clear-icon - Renders content inside the suffix container of the combo.\n * @slot value-missing - Renders content when the required validation fails.\n * @slot custom-error - Renders content when setCustomValidity(message) is set.\n * @slot invalid - Renders content when the component is in invalid state (validity.valid = false).\n *\n * @fires igcChange - Emitted when the control's selection has changed.\n * @fires igcOpening - Emitted just before the list of options is opened.\n * @fires igcOpened - Emitted after the list of options is opened.\n * @fires igcClosing - Emitter just before the list of options is closed.\n * @fires igcClosed - Emitted after the list of options is closed.\n *\n * @csspart label - The encapsulated text label of the combo.\n * @csspart input - The main input field of the combo.\n * @csspart native-input - The native input of the main input field of the combo.\n * @csspart prefix - The prefix wrapper of the combo.\n * @csspart suffix - The suffix wrapper of the combo.\n * @csspart toggle-icon - The toggle icon wrapper of the combo.\n * @csspart clear-icon - The clear icon wrapper of the combo.\n * @csspart case-icon - The case icon wrapper of the combo.\n * @csspart helper-text - The helper text wrapper of the combo.\n * @csspart search-input - The search input field of the combo.\n * @csspart list-wrapper - The list of options wrapper of the combo.\n * @csspart list - The list of options box of the combo.\n * @csspart item - Represents each item in the list of options of the combo.\n * @csspart group-header - Represents each header in the list of options of the combo.\n * @csspart active - Appended to the item parts list when the item is active of the combo.\n * @csspart selected - Appended to the item parts list when the item is selected of the combo.\n * @csspart checkbox - Represents each checkbox of each list item of the combo.\n * @csspart checkbox-indicator - Represents the checkbox indicator of each list item of the combo.\n * @csspart checked - Appended to checkbox parts list when checkbox is checked in the combo.\n * @csspart header - The container holding the header content of the combo.\n * @csspart footer - The container holding the footer content of the combo.\n * @csspart empty - The container holding the empty content of the combo.\n */\n@blazorAdditionalDependencies('IgcIconComponent, IgcInputComponent')\n@blazorIndirectRender\nexport default class IgcComboComponent<\n  T extends object = any,\n> extends FormAssociatedRequiredMixin(\n  EventEmitterMixin<IgcComboComponentEventMap, Constructor<LitElement>>(\n    LitElement\n  )\n) {\n  public static readonly tagName = 'igc-combo';\n  public static styles = [styles, shared];\n\n  /* blazorSuppress */\n  public static register() {\n    registerComponent(\n      IgcComboComponent,\n      IgcIconComponent,\n      IgcComboListComponent,\n      IgcComboItemComponent,\n      IgcComboHeaderComponent,\n      IgcInputComponent,\n      IgcPopoverComponent,\n      IgcValidationContainerComponent\n    );\n  }\n\n  protected override get __validators() {\n    return comboValidators;\n  }\n\n  private readonly _rootClickController = addRootClickController(this, {\n    onHide: async () => {\n      if (!this.handleClosing()) {\n        return;\n      }\n      this.open = false;\n\n      await this.updateComplete;\n      this.emitEvent('igcClosed');\n    },\n  });\n\n  protected override readonly _formValue: FormValueOf<ComboValue<T>[]> =\n    createFormValueState<ComboValue<T>[]>(this, {\n      initialValue: [],\n      transformers: {\n        setValue: asArray,\n        setDefaultValue: asArray,\n      },\n    });\n  private _data: T[] = [];\n\n  private _valueKey?: Keys<T>;\n  private _displayKey?: Keys<T>;\n  private _groupKey?: Keys<T>;\n\n  private _disableFiltering = false;\n  private _singleSelect = false;\n\n  private _groupSorting: GroupingDirection = 'asc';\n  private _filteringOptions: FilteringOptions<T> = {\n    filterKey: this.displayKey,\n    caseSensitive: false,\n    matchDiacritics: false,\n  };\n\n  @state()\n  private _activeDescendant!: string;\n\n  @state()\n  private _displayValue = '';\n\n  protected _state = new DataController<T>(this);\n  protected _selection = new SelectionController<T>(this, this._state);\n  protected _navigation = new NavigationController<T>(this, this._state);\n\n  @queryAssignedElements({ slot: 'suffix' })\n  protected inputSuffix!: HTMLElement[];\n\n  @queryAssignedElements({ slot: 'prefix' })\n  protected inputPrefix!: HTMLElement[];\n\n  @query('[part=\"search-input\"]')\n  protected _searchInput!: IgcInputComponent;\n\n  @query('#target', true)\n  private _input!: IgcInputComponent;\n\n  @query(IgcComboListComponent.tagName, true)\n  private _list!: IgcComboListComponent;\n\n  /** The data source used to generate the list of options. */\n  /* treatAsRef */\n  @property({ attribute: false })\n  public set data(value: T[]) {\n    if (this._data === value) {\n      return;\n    }\n    this._data = asArray(value);\n    const pristine = this._pristine;\n    this.value = asArray(this.value);\n    this._pristine = pristine;\n    this._state.runPipeline();\n  }\n\n  public get data() {\n    return this._data;\n  }\n\n  /**\n   * The outlined attribute of the control.\n   * @attr outlined\n   */\n  @property({ type: Boolean, reflect: true })\n  public outlined = false;\n\n  /**\n   * Enables single selection mode and moves item filtering to the main input.\n   * @attr single-select\n   * @default false\n   */\n  @property({ type: Boolean, reflect: true, attribute: 'single-select' })\n  public set singleSelect(value: boolean) {\n    if (this._singleSelect === Boolean(value)) {\n      return;\n    }\n\n    this._singleSelect = Boolean(value);\n    this._selection.clear();\n    if (this.hasUpdated) {\n      this.updateValue();\n      this.resetSearchTerm();\n      this._navigation.active = -1;\n    }\n  }\n\n  public get singleSelect(): boolean {\n    return this._singleSelect;\n  }\n\n  /**\n   * The autofocus attribute of the control.\n   * @attr autofocus\n   */\n  @property({ type: Boolean })\n  public override autofocus!: boolean;\n\n  /**\n   * Focuses the list of options when the menu opens.\n   * @attr autofocus-list\n   */\n  @property({ type: Boolean, attribute: 'autofocus-list' })\n  public autofocusList = false;\n\n  /**\n   * The label attribute of the control.\n   * @attr label\n   */\n  @property()\n  public label!: string;\n\n  /**\n   * The placeholder attribute of the control.\n   * @attr placeholder\n   */\n  @property()\n  public placeholder!: string;\n\n  /**\n   * The placeholder attribute of the search input.\n   * @attr placeholder-search\n   */\n  @property({ attribute: 'placeholder-search' })\n  public placeholderSearch = 'Search';\n\n  /**\n   * Sets the open state of the component.\n   * @attr open\n   */\n  @property({ type: Boolean, reflect: true })\n  public open = false;\n\n  /**\n   * The key in the data source used when selecting items.\n   * @attr value-key\n   */\n  @property({ attribute: 'value-key' })\n  public set valueKey(value: Keys<T> | undefined) {\n    this._valueKey = value;\n    this._displayKey = this._displayKey ?? this._valueKey;\n  }\n\n  public get valueKey() {\n    return this._valueKey;\n  }\n\n  /**\n   * The key in the data source used to display items in the list.\n   * @attr display-key\n   */\n  @property({ attribute: 'display-key' })\n  public set displayKey(value: Keys<T> | undefined) {\n    this._displayKey = value;\n    if (!this.filteringOptions.filterKey) {\n      this.filteringOptions = { filterKey: this.displayKey };\n    }\n  }\n\n  public get displayKey() {\n    return this._displayKey ?? this._valueKey;\n  }\n\n  /**\n   * The key in the data source used to group items in the list.\n   * @attr group-key\n   */\n  @property({ attribute: 'group-key' })\n  public set groupKey(value: Keys<T> | undefined) {\n    if (this._groupKey !== value) {\n      this._groupKey = value;\n      this._state.runPipeline();\n    }\n  }\n\n  public get groupKey() {\n    return this._groupKey;\n  }\n\n  /**\n   * Sorts the items in each group by ascending or descending order.\n   * @attr group-sorting\n   * @default asc\n   * @type {\"asc\" | \"desc\" | \"none\"}\n   */\n  @property({ attribute: 'group-sorting' })\n  public set groupSorting(value: GroupingDirection) {\n    if (this._groupSorting !== value) {\n      this._groupSorting = value;\n      this._state.runPipeline();\n    }\n  }\n\n  public get groupSorting() {\n    return this._groupSorting;\n  }\n\n  /**\n   * An object that configures the filtering of the combo.\n   * @attr filtering-options\n   * @type {FilteringOptions<T>}\n   * @param filterKey - The key in the data source used when filtering the list of options.\n   * @param caseSensitive - Determines whether the filtering operation should be case sensitive.\n   * @param matchDiacritics -If true, the filter distinguishes between accented letters and their base letters.\n   */\n  @property({ type: Object, attribute: 'filtering-options' })\n  public set filteringOptions(value: Partial<FilteringOptions<T>>) {\n    const options = { ...this._filteringOptions, ...value };\n    if (!equal(options, this._filteringOptions)) {\n      this._filteringOptions = options;\n      this._state.runPipeline();\n    }\n  }\n\n  public get filteringOptions(): FilteringOptions<T> {\n    return this._filteringOptions;\n  }\n\n  /**\n   * Enables the case sensitive search icon in the filtering input.\n   * @attr case-sensitive-icon\n   */\n  @property({ type: Boolean, attribute: 'case-sensitive-icon' })\n  public caseSensitiveIcon = false;\n\n  /**\n   * Disables the filtering of the list of options.\n   * @attr disable-filtering\n   * @default false\n   */\n  @property({ type: Boolean, attribute: 'disable-filtering' })\n  public set disableFiltering(value: boolean) {\n    this._disableFiltering = value;\n    this.resetSearchTerm();\n  }\n\n  public get disableFiltering(): boolean {\n    return this._disableFiltering;\n  }\n\n  /* blazorSuppress */\n  /**\n   * The template used for the content of each combo item.\n   * @type {ComboItemTemplate<T>}\n   */\n  @property({ attribute: false })\n  public itemTemplate: ComboItemTemplate<T> = ({ item }) =>\n    html`${this.displayKey ? item[this.displayKey] : item}`;\n\n  /* blazorSuppress */\n  /**\n   * The template used for the content of each combo group header.\n   * @type {ComboItemTemplate<T>}\n   */\n  @property({ attribute: false })\n  public groupHeaderTemplate: ComboItemTemplate<T> = ({ item }) =>\n    html`${this.groupKey && item[this.groupKey]}`;\n\n  /**\n   * Sets the value (selected items). The passed value must be a valid JSON array.\n   * If the data source is an array of complex objects, the `valueKey` attribute must be set.\n   * Note that when `displayKey` is not explicitly set, it will fall back to the value of `valueKey`.\n   *\n   * @attr value\n   *\n   * @example\n   * ```tsx\n   * <igc-combo\n   *  .data=${[\n   *    {\n   *      id: 'BG01',\n   *      name: 'Sofia'\n   *    },\n   *    {\n   *      id: 'BG02',\n   *      name: 'Plovdiv'\n   *    }\n   *  ]}\n   *  display-key='name'\n   *  value-key='id'\n   *  value='[\"BG01\", \"BG02\"]'>\n   *  </igc-combo>\n   * ```\n   */\n  /* blazorPrimitiveValue */\n  /* blazorByValueArray */\n  /* blazorGenericType */\n  /* @tsTwoWayProperty (true, \"Change\", \"Detail.NewValue\", false) */\n  @property({ type: Array })\n  public set value(items: ComboValue<T>[]) {\n    this._formValue.value = items;\n    if (this.hasUpdated) {\n      this._updateSelection();\n      this.updateValue();\n    }\n  }\n\n  /**\n   * Returns the current selection as a list of comma separated values,\n   * represented by the value key, when provided.\n   */\n  public get value(): ComboValue<T>[] {\n    return this._formValue.value;\n  }\n\n  protected _updateSelection() {\n    this._selection.deselect();\n    if (!isEmpty(this.value)) {\n      this._selection.select(this.value);\n    }\n  }\n\n  @watch('open')\n  protected toggleDirectiveChange() {\n    this._rootClickController.update();\n  }\n\n  constructor() {\n    super();\n\n    addThemingController(this, all);\n    addSafeEventListener(this, 'blur', this._handleBlur);\n\n    // TODO\n    this.addEventListener(\n      'keydown',\n      this._navigation.navigateHost.bind(this._navigation)\n    );\n  }\n\n  protected override async firstUpdated() {\n    await this.updateComplete;\n\n    this._updateSelection();\n    this.updateValue(this.hasUpdated);\n    this._pristine = true;\n    this._state.runPipeline();\n  }\n\n  protected override _restoreDefaultValue(): void {\n    this._formValue.value = this._formValue.defaultValue;\n    this._updateSelection();\n    this.updateValue(true);\n    this._updateValidity();\n  }\n\n  protected override _setDefaultValue(current: string | null): void {\n    this.defaultValue = JSON.parse(current ?? '[]');\n  }\n\n  protected override _setFormValue(): void {\n    if (isEmpty(this.value)) {\n      super._setFormValue(null);\n      return;\n    }\n\n    if (this.singleSelect) {\n      super._setFormValue(`${first(this.value)}`);\n      return;\n    }\n\n    if (this.name) {\n      const value = new FormData();\n      for (const item of this.value) {\n        value.append(this.name, `${item}`);\n      }\n      super._setFormValue(value);\n    }\n  }\n\n  protected resetSearchTerm() {\n    this._state.searchTerm = '';\n  }\n\n  protected updateValue(initial = false) {\n    if (isEmpty(this.data)) {\n      return;\n    }\n    this._formValue.value = this._selection.getSelectedValuesByKey(\n      this.valueKey\n    );\n    this._displayValue = this._selection\n      .getSelectedValuesByKey(this.displayKey)\n      .join(', ');\n\n    this._setFormValue();\n\n    if (!initial) {\n      this._validate();\n      this._list.requestUpdate();\n    }\n  }\n\n  /* alternateName: focusComponent */\n  /** Sets focus on the component. */\n  public override focus(options?: FocusOptions) {\n    this._input.focus(options);\n  }\n\n  /* alternateName: blurComponent */\n  /** Removes focus from the component. */\n  public override blur() {\n    this._input.blur();\n  }\n\n  /**\n   * Returns the current selection as an array of objects as provided in the `data` source.\n   */\n  public get selection(): T[] {\n    return this._selection.asArray;\n  }\n\n  /**\n   * Selects option(s) in the list by either reference or valueKey.\n   * If not argument is provided all items will be selected.\n   * @param { Item<T> | Items<T> } items - One or more items to be selected. Multiple items should be passed as an array.\n   * When valueKey is specified, the corresponding value should be used in place of the item reference.\n   * @example\n   * ```typescript\n   * const combo<IgcComboComponent<T>> = document.querySelector('igc-combo');\n   *\n   * // Select one item at a time by reference when valueKey is not specified.\n   * combo.select(combo.data[0]);\n   *\n   * // Select multiple items at a time by reference when valueKey is not specified.\n   * combo.select([combo.data[0], combo.data[1]]);\n   *\n   * // Select one item at a time when valueKey is specified.\n   * combo.select('BG01');\n   *\n   * // Select multiple items at a time when valueKey is specified.\n   * combo.select(['BG01', 'BG02']);\n   * ```\n   */\n  public select(items?: Item<T> | Item<T>[]) {\n    this._selection.select(items);\n    this.updateValue();\n  }\n\n  /**\n   * Deselects option(s) in the list by either reference or valueKey.\n   * If not argument is provided all items will be deselected.\n   * @param { Item<T> | Items<T> } items - One or more items to be deselected. Multiple items should be passed as an array.\n   * When valueKey is specified, the corresponding value should be used in place of the item reference.\n   * @example\n   * ```typescript\n   * const combo<IgcComboComponent<T>> = document.querySelector('igc-combo');\n   *\n   * // Deselect one item at a time by reference when valueKey is not specified.\n   * combo.deselect(combo.data[0]);\n   *\n   * // Deselect multiple items at a time by reference when valueKey is not specified.\n   * combo.deselect([combo.data[0], combo.data[1]]);\n   *\n   * // Deselect one item at a time when valueKey is specified.\n   * combo.deselect('BG01');\n   *\n   * // Deselect multiple items at a time when valueKey is specified.\n   * combo.deselect(['BG01', 'BG02']);\n   * ```\n   */\n  public deselect(items?: Item<T> | Item<T>[]) {\n    this._selection.deselect(items);\n    this.updateValue();\n  }\n\n  protected async handleMainInput({ detail }: CustomEvent<string>) {\n    this._show();\n    this._state.searchTerm = detail;\n\n    // wait for the dataState to update after filtering\n    await this.updateComplete;\n\n    const matchIndex = this._state.dataState.findIndex((i) => !i.header);\n    this._navigation.active = detail ? matchIndex : -1;\n\n    // update the list after changing the active item\n    this._list.requestUpdate();\n\n    // clear the selection upon typing\n    this.clearSingleSelection();\n  }\n\n  private _handleBlur() {\n    if (this._selection.isEmpty) {\n      this._displayValue = '';\n      this.resetSearchTerm();\n    }\n    this.checkValidity();\n  }\n\n  protected handleSearchInput({ detail }: CustomEvent<string>) {\n    this._state.searchTerm = detail;\n  }\n\n  protected handleOpening() {\n    return this.emitEvent('igcOpening', { cancelable: true });\n  }\n\n  protected handleClosing(): boolean {\n    return this.emitEvent('igcClosing', { cancelable: true });\n  }\n\n  protected async _show(emitEvent = true) {\n    if (this.open || (emitEvent && !this.handleOpening())) {\n      return false;\n    }\n\n    this.open = true;\n    await this.updateComplete;\n\n    if (emitEvent) {\n      this.emitEvent('igcOpened');\n    }\n\n    if (!this.singleSelect) {\n      this._list.focus();\n    }\n\n    if (!this.autofocusList) {\n      this._searchInput.focus();\n    }\n\n    return true;\n  }\n\n  /** Shows the list of options. */\n  public async show(): Promise<boolean> {\n    return await this._show(false);\n  }\n\n  protected async _hide(emitEvent = true) {\n    if (!this.open || (emitEvent && !this.handleClosing())) {\n      return false;\n    }\n\n    this.open = false;\n    await this.updateComplete;\n\n    if (emitEvent) {\n      this.emitEvent('igcClosed');\n    }\n    this._navigation.active = -1;\n    return true;\n  }\n\n  /** Hides the list of options. */\n  public async hide(): Promise<boolean> {\n    return await this._hide(false);\n  }\n\n  protected _toggle(emit = true) {\n    return this.open ? this._hide(emit) : this._show(emit);\n  }\n\n  /** Toggles the list of options. */\n  public async toggle(): Promise<boolean> {\n    return await this._toggle(false);\n  }\n\n  private _getActiveDescendantId(index: number) {\n    const position = index + 1;\n    const id = this.id ? `${this.id}-item-${position}` : `item-${position}`;\n\n    return { id, position };\n  }\n\n  protected itemRenderer: ComboRenderFunction<T> = (\n    item: ComboRecord<T>,\n    index: number\n  ) => {\n    if (!item) {\n      return html`${nothing}`;\n    }\n\n    if (this.groupKey && item.header) {\n      return html`\n        <igc-combo-header part=\"group-header\">\n          ${this.groupHeaderTemplate({ item: item.value })}\n        </igc-combo-header>\n      `;\n    }\n\n    const { id, position } = this._getActiveDescendantId(index);\n    const active = this._navigation.active === index;\n    const selected = this._selection.has(this.data.at(item.dataIndex));\n\n    if (active) {\n      this._activeDescendant = id;\n    }\n\n    return html`\n      <igc-combo-item\n        id=${id}\n        part=${partMap({ item: true, selected, active })}\n        aria-setsize=${this._state.dataState.length}\n        aria-posinset=${position}\n        exportparts=\"checkbox, checkbox-indicator, checked\"\n        .index=${index}\n        ?active=${active}\n        ?selected=${selected}\n        ?hide-checkbox=${this.singleSelect}\n      >\n        ${this.itemTemplate({ item: item.value })}\n      </igc-combo-item>\n    `;\n  };\n\n  protected listKeydownHandler(event: KeyboardEvent) {\n    const target = findElementFromEventPath<IgcComboListComponent>(\n      IgcComboListComponent.tagName,\n      event\n    );\n\n    if (target) {\n      this._navigation.navigateList(event, target);\n    }\n  }\n\n  protected itemClickHandler(event: PointerEvent) {\n    const target = findElementFromEventPath<IgcComboItemComponent>(\n      IgcComboItemComponent.tagName,\n      event\n    );\n\n    if (!target) {\n      return;\n    }\n\n    this.toggleSelect(target.index);\n\n    if (this.singleSelect) {\n      this._input.focus();\n      this._hide();\n    } else {\n      this._searchInput.focus();\n    }\n  }\n\n  protected toggleSelect(index: number) {\n    const { dataIndex } = this._state.dataState.at(index)!;\n\n    this._selection.changeSelection(dataIndex);\n    this._navigation.active = index;\n    this.updateValue();\n  }\n\n  protected selectByIndex(index: number) {\n    const { dataIndex } = this._state.dataState.at(index)!;\n\n    this._selection.selectByIndex(dataIndex);\n    this._navigation.active = index;\n    this.updateValue();\n  }\n\n  protected clearSingleSelection() {\n    const _selection = this._selection.asArray;\n    const selection = first(_selection);\n\n    if (selection) {\n      const item = this.valueKey ? selection[this.valueKey] : selection;\n      this._selection.deselect(item, !isEmpty(_selection));\n      this._formValue.value = [];\n    }\n  }\n\n  protected handleClearIconClick(e: PointerEvent) {\n    e.stopPropagation();\n\n    if (this.singleSelect) {\n      this.resetSearchTerm();\n      this.clearSingleSelection();\n    } else {\n      this._selection.deselect([], true);\n    }\n\n    this.updateValue();\n    this._navigation.active = -1;\n  }\n\n  protected handleMainInputKeydown(e: KeyboardEvent) {\n    this._navigation.navigateMainInput(e, this._list);\n  }\n\n  protected handleSearchInputKeydown(e: KeyboardEvent) {\n    this._navigation.navigateSearchInput(e, this._list);\n  }\n\n  protected toggleCaseSensitivity() {\n    this.filteringOptions = {\n      caseSensitive: !this.filteringOptions.caseSensitive,\n    };\n  }\n\n  private _stopPropagation(e: Event) {\n    e.stopPropagation();\n  }\n\n  private renderToggleIcon() {\n    return html`\n      <span\n        slot=\"suffix\"\n        part=${partMap({\n          'toggle-icon': true,\n          filled: !isEmpty(this.value),\n        })}\n      >\n        <slot name=\"toggle-icon\">\n          <igc-icon\n            name=${this.open ? 'input_collapse' : 'input_expand'}\n            collection=\"default\"\n            aria-hidden=\"true\"\n          ></igc-icon>\n        </slot>\n      </span>\n    `;\n  }\n\n  private renderClearIcon() {\n    return html`\n      <span\n        slot=\"suffix\"\n        part=\"clear-icon\"\n        @click=${this.handleClearIconClick}\n        ?hidden=${this._selection.isEmpty}\n      >\n        <slot name=\"clear-icon\">\n          <igc-icon\n            name=\"input_clear\"\n            collection=\"default\"\n            aria-hidden=\"true\"\n          ></igc-icon>\n        </slot>\n      </span>\n    `;\n  }\n\n  private renderMainInput() {\n    return html`\n      <igc-input\n        id=\"target\"\n        slot=\"anchor\"\n        role=\"combobox\"\n        aria-controls=\"dropdown\"\n        aria-owns=\"dropdown\"\n        aria-expanded=${this.open ? 'true' : 'false'}\n        aria-describedby=\"combo-helper-text\"\n        aria-disabled=${this.disabled}\n        exportparts=\"container: input, input: native-input, label, prefix, suffix\"\n        @click=${this._toggle}\n        placeholder=${ifDefined(this.placeholder)}\n        label=${ifDefined(this.label)}\n        @igcChange=${this._stopPropagation}\n        @igcInput=${this.handleMainInput}\n        @keydown=${this.handleMainInputKeydown}\n        .value=${this._displayValue}\n        .disabled=${this.disabled}\n        .required=${this.required}\n        .invalid=${live(this.invalid)}\n        .outlined=${this.outlined}\n        .autofocus=${this.autofocus}\n        ?readonly=${!this.singleSelect}\n      >\n        <span slot=${!isEmpty(this.inputPrefix) && 'prefix'}>\n          <slot name=\"prefix\"></slot>\n        </span>\n        ${this.renderClearIcon()}\n        <span slot=${!isEmpty(this.inputSuffix) && 'suffix'}>\n          <slot name=\"suffix\"></slot>\n        </span>\n        ${this.renderToggleIcon()}\n      </igc-input>\n    `;\n  }\n\n  private renderSearchInput() {\n    return html`\n      <div\n        part=\"filter-input\"\n        ?hidden=${this.disableFiltering || this.singleSelect}\n      >\n        <igc-input\n          .value=${this._state.searchTerm}\n          part=\"search-input\"\n          placeholder=${this.placeholderSearch}\n          exportparts=\"input: search-input\"\n          @igcInput=${this.handleSearchInput}\n          @keydown=${this.handleSearchInputKeydown}\n        >\n          <igc-icon\n            slot=${this.caseSensitiveIcon && 'suffix'}\n            name=\"case_sensitive\"\n            collection=\"default\"\n            part=${partMap({\n              'case-icon': true,\n              active: this.filteringOptions.caseSensitive ?? false,\n            })}\n            @click=${this.toggleCaseSensitivity}\n          ></igc-icon>\n        </igc-input>\n      </div>\n    `;\n  }\n\n  private renderEmptyTemplate() {\n    return html`\n      <div part=\"empty\" ?hidden=${!isEmpty(this._state.dataState)}>\n        <slot name=\"empty\">The list is empty</slot>\n      </div>\n    `;\n  }\n\n  private renderList() {\n    return html`\n      <div\n        .inert=${!this.open}\n        @keydown=${this.listKeydownHandler}\n        part=\"list-wrapper\"\n      >\n        ${this.renderSearchInput()}\n        <div part=\"header\">\n          <slot name=\"header\"></slot>\n        </div>\n        <igc-combo-list\n          aria-multiselectable=${!this.singleSelect}\n          id=\"dropdown\"\n          part=\"list\"\n          role=\"listbox\"\n          tabindex=\"0\"\n          aria-labelledby=\"target\"\n          aria-activedescendant=${ifDefined(this._activeDescendant)}\n          .items=${this._state.dataState}\n          .renderItem=${this.itemRenderer}\n          ?hidden=${isEmpty(this._state.dataState)}\n          @click=${this.itemClickHandler}\n        >\n        </igc-combo-list>\n        ${this.renderEmptyTemplate()}\n        <div part=\"footer\">\n          <slot name=\"footer\"></slot>\n        </div>\n      </div>\n    `;\n  }\n\n  private renderHelperText(): TemplateResult {\n    return IgcValidationContainerComponent.create(this, {\n      id: 'combo-helper-text',\n      hasHelperText: true,\n    });\n  }\n\n  protected override render() {\n    return html`\n      <igc-popover ?open=${this.open} flip shift same-width>\n        ${this.renderMainInput()} ${this.renderList()}\n      </igc-popover>\n      ${this.renderHelperText()}\n    `;\n  }\n}\n\ndeclare global {\n  interface HTMLElementTagNameMap {\n    'igc-combo': IgcComboComponent<object>;\n  }\n}\n"]}