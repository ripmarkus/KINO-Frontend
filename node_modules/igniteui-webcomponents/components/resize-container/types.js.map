{"version":3,"file":"types.js","sourceRoot":"","sources":["../../../src/components/resize-container/types.ts"],"names":[],"mappings":"","sourcesContent":["import type { Ref } from 'lit/directives/ref.js';\n\nexport type ResizeMode = 'immediate' | 'deferred';\nexport type ResizeCallback = (params: ResizeCallbackParams) => unknown;\nexport type ResizeCancelCallback = (state: ResizeState) => unknown;\nexport type ResizeGhostFactory = () => HTMLElement;\n\nexport type ResizeState = {\n  initial: DOMRect;\n  current: DOMRect;\n  deltaX: number;\n  deltaY: number;\n  ghost: HTMLElement | null;\n  trigger: HTMLElement | null;\n  commit?: () => unknown;\n};\n\nexport type ResizeCallbackParams = {\n  event: PointerEvent;\n  state: ResizeState;\n};\n\nexport type ResizeControllerConfiguration = {\n  enabled?: boolean;\n  ref?: Ref<HTMLElement>[];\n  mode?: ResizeMode;\n  deferredFactory?: ResizeGhostFactory;\n  layer?: () => HTMLElement;\n  /** Callback invoked at the start of a resize operation. */\n  start?: ResizeCallback;\n  /** Callback invoked on each pointer move during a resize operation. */\n  resize?: ResizeCallback;\n  /** Callback invoked when a resize operation completes. */\n  end?: ResizeCallback;\n  /** Callback invoked when a resize operation is cancelled. */\n  cancel?: ResizeCancelCallback;\n  /**\n   * Optional callback that returns the DOM element which will be resized/resizing depending on the\n   * configured mode of the controller.\n   *\n   * Defaults to the controller host.\n   */\n  resizeTarget?: () => HTMLElement;\n};\n"]}