{"version":3,"file":"textarea.js","sourceRoot":"","sources":["../../../src/components/textarea/textarea.ts"],"names":[],"mappings":"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","sourcesContent":["import { html, LitElement, nothing, type TemplateResult } from 'lit';\nimport {\n  property,\n  query,\n  queryAssignedElements,\n  queryAssignedNodes,\n} from 'lit/decorators.js';\nimport { ifDefined } from 'lit/directives/if-defined.js';\nimport { live } from 'lit/directives/live.js';\nimport { type StyleInfo, styleMap } from 'lit/directives/style-map.js';\n\nimport { addThemingController } from '../../theming/theming-controller.js';\nimport { createResizeObserverController } from '../common/controllers/resize-observer.js';\nimport { shadowOptions } from '../common/decorators/shadow-options.js';\nimport { watch } from '../common/decorators/watch.js';\nimport { registerComponent } from '../common/definitions/register.js';\nimport type { Constructor } from '../common/mixins/constructor.js';\nimport { EventEmitterMixin } from '../common/mixins/event-emitter.js';\nimport { FormAssociatedRequiredMixin } from '../common/mixins/forms/associated-required.js';\nimport {\n  createFormValueState,\n  type FormValueOf,\n} from '../common/mixins/forms/form-value.js';\nimport { partMap } from '../common/part-map.js';\nimport {\n  addSafeEventListener,\n  asNumber,\n  createCounter,\n  isEmpty,\n} from '../common/util.js';\nimport type {\n  RangeTextSelectMode,\n  SelectionRangeDirection,\n  TextareaResize,\n} from '../types.js';\nimport IgcValidationContainerComponent from '../validation-container/validation-container.js';\nimport { styles as shared } from './themes/shared/textarea.common.css.js';\nimport { styles } from './themes/textarea.base.css.js';\nimport { all } from './themes/themes.js';\nimport { textAreaValidators } from './validators.js';\n\nexport interface IgcTextareaComponentEventMap {\n  igcInput: CustomEvent<string>;\n  igcChange: CustomEvent<string>;\n  // For analyzer meta only:\n  /* skipWCPrefix */\n  focus: FocusEvent;\n  /* skipWCPrefix */\n  blur: FocusEvent;\n}\n\n/**\n * This element represents a multi-line plain-text editing control,\n * useful when you want to allow users to enter a sizeable amount of free-form text,\n * for example a comment on a review or feedback form.\n *\n * @element igc-textarea\n *\n * @slot - Text content from the default slot will be used as the value of the component.\n * @slot prefix - Renders content before the input.\n * @slot suffix - Renders content after input.\n * @slot helper-text - Renders content below the input.\n * @slot value-missing - Renders content when the required validation fails.\n * @slot too-long - Renders content when the maxlength validation fails.\n * @slot too-short - Renders content when the minlength validation fails.\n * @slot custom-error - Renders content when setCustomValidity(message) is set.\n * @slot invalid - Renders content when the component is in invalid state (validity.valid = false).\n *\n * @fires igcInput - Emitted when the control receives user input.\n * @fires igcChange - Emitted when the a change to the control value is committed by the user.\n *\n * @csspart container - The main wrapper that holds all main input elements of the textarea.\n * @csspart input - The native input element of the igc-textarea.\n * @csspart label - The native label element of the igc-textarea.\n * @csspart prefix - The prefix wrapper of the igc-textarea.\n * @csspart suffix - The suffix wrapper of the igc-textarea.\n * @csspart helper-text - The helper text wrapper of the igc-textarea.\n */\n@shadowOptions({ delegatesFocus: true })\nexport default class IgcTextareaComponent extends FormAssociatedRequiredMixin(\n  EventEmitterMixin<IgcTextareaComponentEventMap, Constructor<LitElement>>(\n    LitElement\n  )\n) {\n  public static readonly tagName = 'igc-textarea';\n  public static styles = [styles, shared];\n\n  /* blazorSuppress */\n  public static register(): void {\n    registerComponent(IgcTextareaComponent, IgcValidationContainerComponent);\n  }\n\n  //#region Private properties and state\n\n  private static readonly increment = createCounter();\n\n  private readonly _themes = addThemingController(this, all);\n\n  protected override get __validators() {\n    return textAreaValidators;\n  }\n\n  protected override readonly _formValue: FormValueOf<string> =\n    createFormValueState(this, { initialValue: '' });\n\n  protected readonly _inputId = `textarea-${IgcTextareaComponent.increment()}`;\n\n  @queryAssignedNodes({ flatten: true })\n  private readonly _projected!: Node[];\n\n  @queryAssignedElements({\n    slot: 'prefix',\n    selector: '[slot=\"prefix\"]:not([hidden])',\n  })\n  protected readonly _prefixes!: HTMLElement[];\n\n  @queryAssignedElements({\n    slot: 'suffix',\n    selector: '[slot=\"suffix\"]:not([hidden])',\n  })\n  protected readonly _suffixes!: HTMLElement[];\n\n  @query('textarea', true)\n  private readonly _input!: HTMLTextAreaElement;\n\n  private get _resizeStyles(): StyleInfo {\n    return {\n      resize: this.resize === 'auto' ? 'none' : this.resize,\n    };\n  }\n\n  //#endregion\n\n  //#region Public properties and attributes\n\n  /**\n   * Specifies what if any permission the browser has to provide for automated assistance in filling out form field values,\n   * as well as guidance to the browser as to the type of information expected in the field.\n   * Refer to [this page](https://developer.mozilla.org/en-US/docs/Web/HTML/Attributes/autocomplete) for additional information.\n   *\n   * @attr\n   */\n  @property()\n  public autocomplete!: string;\n\n  /**\n   * Controls whether and how text input is automatically capitalized as it is entered/edited by the user.\n   *\n   * [MDN documentation](https://developer.mozilla.org/en-US/docs/Web/HTML/Global_attributes/autocapitalize).\n   *\n   * @attr\n   */\n  @property()\n  public override autocapitalize!: string;\n\n  /**\n   * Hints at the type of data that might be entered by the user while editing the element or its contents.\n   * This allows a browser to display an appropriate virtual keyboard.\n   *\n   * [MDN documentation](https://developer.mozilla.org/en-US/docs/Web/HTML/Global_attributes/inputmode)\n   *\n   * @attr inputmode\n   */\n  @property({ attribute: 'inputmode' })\n  public override inputMode!: string;\n\n  /**\n   * The label for the control.\n   *\n   * @attr\n   */\n  @property()\n  public label!: string;\n\n  /**\n   * The maximum number of characters (UTF-16 code units) that the user can enter.\n   * If this value isn't specified, the user can enter an unlimited number of characters.\n   *\n   * @attr maxlength\n   */\n  @property({ type: Number, attribute: 'maxlength' })\n  public maxLength!: number;\n\n  /**\n   * The minimum number of characters (UTF-16 code units) required that the user should enter.\n   *\n   * @attr minlength\n   */\n  @property({ type: Number, attribute: 'minlength' })\n  public minLength!: number;\n\n  /**\n   * Whether the control will have outlined appearance.\n   * @attr\n   */\n  @property({ reflect: true, type: Boolean })\n  public outlined = false;\n\n  /**\n   * The placeholder attribute of the control.\n   *\n   * @attr\n   */\n  @property()\n  public placeholder!: string;\n\n  /**\n   * Makes the control a readonly field.\n   *\n   * @attr readonly\n   */\n  @property({ type: Boolean, reflect: true, attribute: 'readonly' })\n  public readOnly = false;\n\n  /**\n   * Controls whether the control can be resized.\n   * When `auto` is set, the control will try to expand and fit its content.\n   *\n   * @attr\n   */\n  @property()\n  public resize: TextareaResize = 'vertical';\n\n  /**\n   * The number of visible text lines for the control. If it is specified, it must be a positive integer.\n   * If it is not specified, the default value is 2.\n   *\n   * @attr\n   */\n  @property({ type: Number })\n  public rows = 2;\n\n  /* @tsTwoWayProperty(true, \"igcChange\", \"detail\", false) */\n  /**\n   * The value of the component\n   *\n   * @attr\n   */\n  @property()\n  public set value(value: string) {\n    this._formValue.setValueAndFormState(value);\n    this._validate();\n  }\n\n  public get value(): string {\n    return this._formValue.value;\n  }\n\n  /**\n   * Controls whether the element may be checked for spelling errors.\n   *\n   * @attr\n   */\n  @property({\n    type: Boolean,\n    converter: {\n      fromAttribute: (value) => !(!value || value === 'false'),\n      toAttribute: (value) => (value ? 'true' : 'false'),\n    },\n  })\n  public override spellcheck = true;\n\n  /**\n   * Indicates how the control should wrap the value for form submission.\n   * Refer to [this page on MDN](https://developer.mozilla.org/en-US/docs/Web/HTML/Element/textarea#attributes)\n   * for explanation of the available values.\n   *\n   * @attr\n   */\n  @property()\n  public wrap: 'hard' | 'soft' | 'off' = 'soft';\n\n  /**\n   * Enables validation rules to be evaluated without restricting user input. This applies to the `maxLength` property\n   * when it is defined.\n   *\n   * @attr validate-only\n   */\n  @property({ type: Boolean, reflect: true, attribute: 'validate-only' })\n  public validateOnly = false;\n\n  //#endregion\n\n  //#region Watchers\n\n  @watch('value')\n  protected async _valueChanged(): Promise<void> {\n    await this.updateComplete;\n    this._setAreaHeight();\n  }\n\n  @watch('rows', { waitUntilFirstUpdate: true })\n  @watch('resize', { waitUntilFirstUpdate: true })\n  protected _setAreaHeight(): void {\n    if (this.resize === 'auto') {\n      this._input.style.height = 'auto';\n      this._input.style.height = `${this._setAutoHeight()}px`;\n    } else {\n      Object.assign(this._input.style, { height: undefined });\n    }\n  }\n\n  //#endregion\n\n  //#region Life-cycle hooks\n\n  constructor() {\n    super();\n\n    createResizeObserverController(this, {\n      callback: this._setAreaHeight,\n    });\n\n    addSafeEventListener(this, 'focus', this._handleFocus);\n    addSafeEventListener(this, 'blur', this._handleBlur);\n  }\n\n  protected override createRenderRoot(): HTMLElement | DocumentFragment {\n    const root = super.createRenderRoot();\n    root.addEventListener('slotchange', (event) =>\n      this._handleSlotChange(event)\n    );\n    return root;\n  }\n\n  //#endregion\n\n  //#region Internal methods\n\n  protected _resolvePartNames() {\n    return {\n      container: true,\n      prefixed: this._prefixes.length > 0,\n      suffixed: this._suffixes.length > 0,\n      filled: !!this.value,\n    };\n  }\n\n  private _setAutoHeight(): number {\n    const { borderTopWidth, borderBottomWidth } = getComputedStyle(this._input);\n    return (\n      this._input.scrollHeight +\n      asNumber(borderTopWidth) +\n      asNumber(borderBottomWidth)\n    );\n  }\n\n  //#endregion\n\n  //#region Event handlers\n\n  protected _handleSlotChange({ target }: Event): void {\n    const slot = target as HTMLSlotElement;\n\n    // Default slot used for declarative value projection\n    if (!slot.name) {\n      const value = this._projected\n        .map((node) => node.textContent?.trim())\n        .filter((node) => Boolean(node))\n        .join('\\r\\n');\n\n      if (value !== this.value) {\n        this.value = value;\n      }\n    }\n\n    this.requestUpdate();\n  }\n\n  protected _handleInput(): void {\n    this.value = this._input.value;\n    this.emitEvent('igcInput', { detail: this.value });\n  }\n\n  protected _handleChange(): void {\n    this.value = this._input.value;\n    this.emitEvent('igcChange', { detail: this.value });\n  }\n\n  protected _handleFocus(): void {\n    this._dirty = true;\n  }\n\n  protected _handleBlur(): void {\n    this._validate();\n  }\n\n  //#endregion\n\n  //#region Public methods\n\n  /** Selects all text within the control. */\n  public select(): void {\n    this._input.select();\n  }\n\n  /** Sets the text selection range of the control */\n  public setSelectionRange(\n    start: number,\n    end: number,\n    direction: SelectionRangeDirection = 'none'\n  ): void {\n    this._input.setSelectionRange(start, end, direction);\n  }\n\n  /** Replaces the selected text in the control. */\n  public setRangeText(\n    replacement: string,\n    start: number,\n    end: number,\n    selectMode: RangeTextSelectMode = 'preserve'\n  ): void {\n    this._input.setRangeText(replacement, start, end, selectMode);\n    this.value = this._input.value;\n  }\n\n  /* blazorSuppress */\n  public override scrollTo(options?: ScrollToOptions | undefined): void;\n  /* blazorSuppress */\n  public override scrollTo(x: number, y: number): void;\n  public override scrollTo(x?: unknown, y?: unknown): void {\n    x != null && y != null\n      ? this._input.scrollTo(x as number, y as number)\n      : this._input.scrollTo(x as ScrollToOptions);\n  }\n\n  //#endregion\n\n  //#region Renderers\n\n  protected _renderPrefix() {\n    return html`\n      <div part=\"prefix\" .hidden=${isEmpty(this._prefixes)}>\n        <slot name=\"prefix\"></slot>\n      </div>\n    `;\n  }\n\n  protected _renderSuffix() {\n    return html`\n      <div part=\"suffix\" .hidden=${isEmpty(this._suffixes)}>\n        <slot name=\"suffix\"></slot>\n      </div>\n    `;\n  }\n\n  protected _renderLabel() {\n    return this.label\n      ? html`\n          <label part=\"label\" for=${this.id || this._inputId}>\n            ${this.label}\n          </label>\n        `\n      : nothing;\n  }\n\n  protected _renderStandard() {\n    return html`\n      ${this._renderLabel()}\n      <div part=${partMap(this._resolvePartNames())}>\n        ${this._renderPrefix()} ${this._renderInput()} ${this._renderSuffix()}\n      </div>\n      ${this._renderValidationContainer()}\n    `;\n  }\n\n  protected _renderMaterial() {\n    return html`\n      <div\n        part=${partMap({\n          ...this._resolvePartNames(),\n          labelled: !!this.label,\n          placeholder: !!this.placeholder,\n        })}\n      >\n        <div part=\"start\">${this._renderPrefix()}</div>\n        ${this._renderInput()}\n        <div part=\"notch\">${this._renderLabel()}</div>\n        <div part=\"filler\"></div>\n        <div part=\"end\">${this._renderSuffix()}</div>\n      </div>\n      ${this._renderValidationContainer()}\n    `;\n  }\n\n  protected _renderInput() {\n    return html`\n      <slot style=\"display: none\"></slot>\n      <textarea\n        id=${this.id || this._inputId}\n        part=\"input\"\n        style=${styleMap(this._resizeStyles)}\n        @input=${this._handleInput}\n        @change=${this._handleChange}\n        placeholder=${ifDefined(this.placeholder)}\n        .rows=${this.rows}\n        .value=${live(this.value)}\n        .wrap=${this.wrap}\n        autocomplete=${ifDefined(this.autocomplete as any)}\n        autocapitalize=${ifDefined(this.autocapitalize as any)}\n        inputmode=${ifDefined(this.inputMode)}\n        spellcheck=${ifDefined(this.spellcheck)}\n        minlength=${ifDefined(this.minLength)}\n        maxlength=${ifDefined(this.validateOnly ? undefined : this.maxLength)}\n        ?disabled=${this.disabled}\n        ?required=${this.required}\n        ?readonly=${this.readOnly}\n        aria-invalid=${this.invalid ? 'true' : 'false'}\n      ></textarea>\n    `;\n  }\n\n  protected _renderValidationContainer(): TemplateResult {\n    return IgcValidationContainerComponent.create(this);\n  }\n\n  protected override render() {\n    return this._themes.theme === 'material'\n      ? this._renderMaterial()\n      : this._renderStandard();\n  }\n\n  //#endregion\n}\n\ndeclare global {\n  interface HTMLElementTagNameMap {\n    'igc-textarea': IgcTextareaComponent;\n  }\n}\n"]}