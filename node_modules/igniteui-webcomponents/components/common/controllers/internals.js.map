{"version":3,"file":"internals.js","sourceRoot":"","sources":["../../../../src/components/common/controllers/internals.ts"],"names":[],"mappings":"AAgBA,MAAM,0BAA0B;IAW9B,IAAW,IAAI;QACb,OAAO,IAAI,CAAC,UAAU,CAAC,IAAI,CAAC;IAC9B,CAAC;IAED,YACE,IAAyC,EACzC,MAA+B;QAE/B,IAAI,CAAC,KAAK,GAAG,IAAI,CAAC;QAClB,IAAI,CAAC,UAAU,GAAG,IAAI,CAAC,KAAK,CAAC,eAAe,EAAE,CAAC;QAE/C,IAAI,MAAM,EAAE,WAAW,EAAE,CAAC;YACxB,IAAI,CAAC,OAAO,CAAC,MAAM,CAAC,WAAW,CAAC,CAAC;QACnC,CAAC;QAED,IAAI,CAAC,aAAa,CAAC,IAA0B,CAAC,CAAC;IACjD,CAAC;IAGM,OAAO,CACZ,KAAuC;QAEvC,MAAM,CAAC,MAAM,CAAC,IAAI,CAAC,UAAU,EAAE,KAAK,CAAC,CAAC;IACxC,CAAC;IAMM,QAAQ,CAAC,KAAa,EAAE,KAAc;QAC3C,KAAK;YACH,CAAC,CAAC,IAAI,CAAC,UAAU,CAAC,MAAM,CAAC,GAAG,CAAC,KAAK,CAAC;YACnC,CAAC,CAAC,IAAI,CAAC,UAAU,CAAC,MAAM,CAAC,MAAM,CAAC,KAAK,CAAC,CAAC;IAC3C,CAAC;CACF;AAGD,MAAM,UAAU,sBAAsB,CACpC,IAAyC,EACzC,MAA+B;IAE/B,OAAO,IAAI,0BAA0B,CAAC,IAAI,EAAE,MAAM,CAAC,CAAC;AACtD,CAAC","sourcesContent":["import type {\n  LitElement,\n  ReactiveController,\n  ReactiveControllerHost,\n} from 'lit';\n\n/** Configuration for the ElementInternalsController. */\ntype ElementInternalsConfig<T extends keyof ARIAMixin = keyof ARIAMixin> = {\n  /** Initial ARIA attributes to set on the element internals. */\n  initialARIA: Partial<Record<T, ARIAMixin[T]>>;\n};\n\n/**\n * A Lit ReactiveController to manage `ElementInternals` for a host element.\n * Provides methods to interact with custom element states and ARIA attributes..\n */\nclass ElementInternalsController {\n  private readonly _host: ReactiveControllerHost & LitElement;\n  private readonly _internals: ElementInternals;\n\n  /**\n   * Gets the closest ancestor `<form>` element or `null`.\n   *\n   * @remarks\n   * The host element must be form associated, that is should have\n   * `static formAssociated = true` in order to return the parent form.\n   */\n  public get form(): HTMLFormElement | null {\n    return this._internals.form;\n  }\n\n  constructor(\n    host: ReactiveControllerHost & LitElement,\n    config?: ElementInternalsConfig\n  ) {\n    this._host = host;\n    this._internals = this._host.attachInternals();\n\n    if (config?.initialARIA) {\n      this.setARIA(config.initialARIA);\n    }\n\n    host.addController(this as ReactiveController);\n  }\n\n  /** Sets ARIA attributes on the element's internals. */\n  public setARIA<T extends keyof ARIAMixin = keyof ARIAMixin>(\n    state: Partial<Record<T, ARIAMixin[T]>>\n  ): void {\n    Object.assign(this._internals, state);\n  }\n\n  /**\n   * Adds or removes a custom state from the element's internals.\n   * Custom states can be styled via `:state()` pseudo-class in CSS.\n   */\n  public setState(state: string, value: boolean): void {\n    value\n      ? this._internals.states.add(state)\n      : this._internals.states.delete(state);\n  }\n}\n\n/** Creates and adds a {@link ElementInternalsController} to a LitElement host. */\nexport function addInternalsController(\n  host: ReactiveControllerHost & LitElement,\n  config?: ElementInternalsConfig\n): ElementInternalsController {\n  return new ElementInternalsController(host, config);\n}\n\nexport type { ElementInternalsController };\n"]}