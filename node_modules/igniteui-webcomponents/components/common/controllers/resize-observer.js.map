{"version":3,"file":"resize-observer.js","sourceRoot":"","sources":["../../../../src/components/common/controllers/resize-observer.ts"],"names":[],"mappings":"AAAA,OAAO,EACL,QAAQ,GAGT,MAAM,KAAK,CAAC;AAwBb,MAAM,wBAAwB;IAM5B,YACE,IAAsC,EACtC,MAAsC;QANvB,aAAQ,GAAG,IAAI,GAAG,EAAW,CAAC;QAQ7C,IAAI,CAAC,KAAK,GAAG,IAAI,CAAC;QAClB,IAAI,CAAC,OAAO,GAAG,MAAM,CAAC;QAEtB,IAAI,IAAI,CAAC,OAAO,CAAC,MAAM,KAAK,IAAI,EAAE,CAAC;YACjC,IAAI,CAAC,QAAQ,CAAC,GAAG,CAAC,IAAI,CAAC,OAAO,CAAC,MAAM,IAAI,IAAI,CAAC,CAAC;QACjD,CAAC;QAGD,IAAI,QAAQ,EAAE,CAAC;YACb,OAAO;QACT,CAAC;QAED,IAAI,CAAC,SAAS,GAAG,IAAI,cAAc,CAAC,CAAC,OAAO,EAAE,EAAE,CAC9C,IAAI,CAAC,OAAO,CAAC,QAAQ,CAAC,IAAI,CAAC,IAAI,CAAC,KAAK,EAAE,OAAO,EAAE,IAAI,CAAC,SAAS,CAAC,CAChE,CAAC;QAEF,IAAI,CAAC,aAAa,CAAC,IAAI,CAAC,CAAC;IAC3B,CAAC;IAGM,OAAO,CAAC,MAAe;QAC5B,IAAI,CAAC,QAAQ,CAAC,GAAG,CAAC,MAAM,CAAC,CAAC;QAC1B,IAAI,CAAC,SAAS,CAAC,OAAO,CAAC,MAAM,EAAE,IAAI,CAAC,OAAO,CAAC,OAAO,CAAC,CAAC;QACrD,IAAI,CAAC,KAAK,CAAC,aAAa,EAAE,CAAC;IAC7B,CAAC;IAGM,SAAS,CAAC,MAAe;QAC9B,IAAI,CAAC,QAAQ,CAAC,MAAM,CAAC,MAAM,CAAC,CAAC;QAC7B,IAAI,CAAC,SAAS,CAAC,SAAS,CAAC,MAAM,CAAC,CAAC;IACnC,CAAC;IAGM,aAAa;QAClB,KAAK,MAAM,MAAM,IAAI,IAAI,CAAC,QAAQ,EAAE,CAAC;YACnC,IAAI,CAAC,OAAO,CAAC,MAAM,CAAC,CAAC;QACvB,CAAC;IACH,CAAC;IAGM,gBAAgB;QACrB,IAAI,CAAC,SAAS,CAAC,UAAU,EAAE,CAAC;IAC9B,CAAC;CACF;AAMD,MAAM,UAAU,8BAA8B,CAC5C,IAAsC,EACtC,MAAsC;IAEtC,OAAO,IAAI,wBAAwB,CAAC,IAAI,EAAE,MAAM,CAAC,CAAC;AACpD,CAAC","sourcesContent":["import {\n  isServer,\n  type ReactiveController,\n  type ReactiveControllerHost,\n} from 'lit';\n\ntype ResizeObserverControllerCallback = (\n  ...args: Parameters<ResizeObserverCallback>\n) => unknown;\n\n/**\n * Configuration for initializing a resize controller.\n * @ignore\n */\nexport interface ResizeObserverControllerConfig {\n  /** The callback function to run when a resize mutation is triggered. */\n  callback: ResizeObserverControllerCallback;\n  /** Configuration options passed to the underlying ResizeObserver. */\n  options?: ResizeObserverOptions;\n  /**\n   * The initial target element to observe for resize mutations.\n   *\n   * If not provided, the host element will be set as initial target.\n   * Pass in `null` to skip setting an initial target.\n   */\n  target?: Element | null;\n}\n\nclass ResizeObserverController implements ReactiveController {\n  private readonly _host: ReactiveControllerHost & Element;\n  private readonly _targets = new Set<Element>();\n  private readonly _observer!: ResizeObserver;\n  private readonly _config: ResizeObserverControllerConfig;\n\n  constructor(\n    host: ReactiveControllerHost & Element,\n    config: ResizeObserverControllerConfig\n  ) {\n    this._host = host;\n    this._config = config;\n\n    if (this._config.target !== null) {\n      this._targets.add(this._config.target ?? host);\n    }\n\n    /* c8 ignore next 3 */\n    if (isServer) {\n      return;\n    }\n\n    this._observer = new ResizeObserver((entries) =>\n      this._config.callback.call(this._host, entries, this._observer)\n    );\n\n    host.addController(this);\n  }\n\n  /** Starts observing the `targe` element. */\n  public observe(target: Element): void {\n    this._targets.add(target);\n    this._observer.observe(target, this._config.options);\n    this._host.requestUpdate();\n  }\n\n  /** Stops observing the `target` element. */\n  public unobserve(target: Element): void {\n    this._targets.delete(target);\n    this._observer.unobserve(target);\n  }\n\n  /** @internal */\n  public hostConnected(): void {\n    for (const target of this._targets) {\n      this.observe(target);\n    }\n  }\n\n  /** @internal */\n  public hostDisconnected(): void {\n    this._observer.disconnect();\n  }\n}\n\n/**\n * Creates a new resize controller bound to the given `host`\n * with {@link ResizeObserverControllerConfig | `config`}.\n */\nexport function createResizeObserverController(\n  host: ReactiveControllerHost & Element,\n  config: ResizeObserverControllerConfig\n): ResizeObserverController {\n  return new ResizeObserverController(host, config);\n}\n"]}