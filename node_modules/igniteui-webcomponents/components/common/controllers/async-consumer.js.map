{"version":3,"file":"async-consumer.js","sourceRoot":"","sources":["../../../../src/components/common/controllers/async-consumer.ts"],"names":[],"mappings":"AAAA,OAAO,EAAgB,eAAe,EAAoB,MAAM,cAAc,CAAC;AAc/E,MAAM,OAAO,oBAAoB;IAS/B,YAAY,IAAU,EAAE,OAA+B;QACrD,IAAI,CAAC,KAAK,GAAG,IAAI,CAAC;QAClB,IAAI,CAAC,QAAQ,GAAG,OAAO,CAAC;QAExB,IAAI,CAAC,KAAK,CAAC,aAAa,CAAC,IAAI,CAAC,CAAC;IACjC,CAAC;IAED,IAAW,KAAK;QACd,OAAO,IAAI,CAAC,SAAS,EAAE,KAAK,CAAC;IAC/B,CAAC;IAEM,KAAK,CAAC,aAAa;QACxB,MAAM,IAAI,CAAC,KAAK,CAAC,cAAc,CAAC;QAIhC,IAAI,CAAC,IAAI,CAAC,SAAS,EAAE,CAAC;YACpB,IAAI,CAAC,SAAS,GAAG,IAAI,eAAe,CAAC,IAAI,CAAC,KAAK,EAAE;gBAC/C,OAAO,EAAE,IAAI,CAAC,QAAQ,CAAC,OAAO;gBAC9B,QAAQ,EAAE,IAAI,CAAC,QAAQ,CAAC,QAAQ;gBAChC,SAAS,EAAE,IAAI,CAAC,QAAQ,CAAC,SAAS;aACnC,CAAC,CAAC;QACL,CAAC;IACH,CAAC;CACF;AAED,MAAM,UAAU,kBAAkB,CAIhC,IAAU,EACV,OAAU,EACV,QAAgE;IAEhE,OAAO,IAAI,oBAAoB,CAAC,IAAI,EAAE;QACpC,OAAO;QACP,QAAQ;QACR,SAAS,EAAE,IAAI;KAChB,CAAkC,CAAC;AACtC,CAAC","sourcesContent":["import { type Context, ContextConsumer, type ContextType } from '@lit/context';\nimport type {\n  LitElement,\n  ReactiveController,\n  ReactiveControllerHost,\n} from 'lit';\n\ntype AsyncContextOptions<T extends Context<unknown, unknown>> = {\n  context: T;\n  callback?: (value: ContextType<T>, dispose?: () => void) => void;\n  subscribe?: boolean;\n};\n\n/* blazorSuppress */\nexport class AsyncContextConsumer<\n  T extends Context<unknown, unknown>,\n  Host extends ReactiveControllerHost & HTMLElement,\n> implements ReactiveController\n{\n  protected _host: Host;\n  protected _options: AsyncContextOptions<T>;\n  protected _consumer?: ContextConsumer<T, Host>;\n\n  constructor(host: Host, options: AsyncContextOptions<T>) {\n    this._host = host;\n    this._options = options;\n\n    this._host.addController(this);\n  }\n\n  public get value(): ContextType<T> | undefined {\n    return this._consumer?.value;\n  }\n\n  public async hostConnected(): Promise<void> {\n    await this._host.updateComplete;\n\n    // If there is already an instance of a consumer (because of an attach/detach cycle),\n    // skip creating a new instance for this host.\n    if (!this._consumer) {\n      this._consumer = new ContextConsumer(this._host, {\n        context: this._options.context,\n        callback: this._options.callback,\n        subscribe: this._options.subscribe,\n      });\n    }\n  }\n}\n\nexport function createAsyncContext<\n  T extends Context<unknown, unknown>,\n  Host extends ReactiveControllerHost & LitElement,\n>(\n  host: Host,\n  context: T,\n  callback?: (value: ContextType<T>, dispose?: () => void) => void\n): AsyncContextConsumer<T, Host> {\n  return new AsyncContextConsumer(host, {\n    context,\n    callback,\n    subscribe: true,\n  }) as AsyncContextConsumer<T, Host>;\n}\n"]}