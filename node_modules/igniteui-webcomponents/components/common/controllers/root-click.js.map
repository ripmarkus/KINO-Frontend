{"version":3,"file":"root-click.js","sourceRoot":"","sources":["../../../../src/components/common/controllers/root-click.ts"],"names":[],"mappings":"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","sourcesContent":["import type { ReactiveController, ReactiveControllerHost } from 'lit';\nimport { findElementFromEventPath, isEmpty } from '../util.js';\n\n/** Configuration options for the RootClickController */\ntype RootClickControllerConfig = {\n  /**\n   * An optional callback function to execute when an outside click occurs.\n   * If not provided, the `hide()` method of the host will be called.\n   */\n  onHide?: () => void;\n  /**\n   * An optional additional HTMLElement that, if clicked, should not trigger the hide action.\n   * This is useful for elements like a toggle button that opens the component.\n   */\n  target?: HTMLElement;\n};\n\n/** Interface for the host element that the RootClickController will be attached to. */\ninterface RootClickControllerHost extends ReactiveControllerHost, HTMLElement {\n  /**\n   * Indicates whether the host element is currently open or visible.\n   */\n  open: boolean;\n  /**\n   * If true, outside clicks will not trigger the hide action.\n   */\n  keepOpenOnOutsideClick?: boolean;\n  /**\n   * A method on the host to hide or close itself.\n   * This will be called if `hideCallback` is not provided in the config.\n   */\n  hide(): void;\n}\n\nlet rootClickListenerActive = false;\n\nconst HostConfigs = new WeakMap<\n  RootClickControllerHost,\n  RootClickControllerConfig\n>();\n\nconst ActiveHosts = new Set<RootClickControllerHost>();\n\nfunction handleRootClick(event: MouseEvent): void {\n  for (const host of ActiveHosts) {\n    const config = HostConfigs.get(host);\n\n    if (host.keepOpenOnOutsideClick) {\n      continue;\n    }\n\n    const targets: Set<Element> = config?.target\n      ? new Set([host, config.target])\n      : new Set([host]);\n\n    if (!findElementFromEventPath((node) => targets.has(node), event)) {\n      config?.onHide ? config.onHide.call(host) : host.hide();\n    }\n  }\n}\n\n/* blazorSuppress */\n/**\n * A Lit ReactiveController that manages global click listeners to hide a component\n * when a click occurs outside of the component or its specified target.\n *\n * This controller implements a singleton pattern for the document click listener,\n * meaning only one event listener is attached to `document` regardless of how many\n * instances of `RootClickController` are active. Each controller instance\n * subscribes to this single listener.\n */\nclass RootClickController implements ReactiveController {\n  private readonly _host: RootClickControllerHost;\n  private _config?: RootClickControllerConfig;\n\n  constructor(\n    host: RootClickControllerHost,\n    config?: RootClickControllerConfig\n  ) {\n    this._host = host;\n    this._config = config;\n    this._host.addController(this);\n\n    if (this._config) {\n      HostConfigs.set(this._host, this._config);\n    }\n  }\n\n  /**\n   * Adds the host to the set of active hosts and ensures the global\n   * document click listener is active if needed.\n   */\n  private _addActiveHost(): void {\n    ActiveHosts.add(this._host);\n\n    if (this._config) {\n      HostConfigs.set(this._host, this._config);\n\n      if (!rootClickListenerActive) {\n        document.addEventListener('click', handleRootClick, { capture: true });\n        rootClickListenerActive = true;\n      }\n    }\n  }\n\n  /**\n   * Removes the host from the set of active hosts and removes the global\n   * document click listener if no other hosts are active.\n   */\n  private _removeActiveHost(): void {\n    ActiveHosts.delete(this._host);\n\n    if (isEmpty(ActiveHosts) && rootClickListenerActive) {\n      document.removeEventListener('click', handleRootClick, { capture: true });\n      rootClickListenerActive = false;\n    }\n  }\n\n  /**\n   * Configures the active state of the controller based on the host's `open` property.\n   * If `host.open` is true, the controller becomes active; otherwise, it becomes inactive.\n   */\n  private _configureListeners(): void {\n    this._host.open && !this._host.keepOpenOnOutsideClick\n      ? this._addActiveHost()\n      : this._removeActiveHost();\n  }\n\n  /** Updates the controller configuration and active state. */\n  public update(config?: RootClickControllerConfig): void {\n    if (config) {\n      this._config = { ...this._config, ...config };\n      HostConfigs.set(this._host, this._config);\n    }\n\n    this._configureListeners();\n  }\n\n  /** @internal */\n  public hostConnected(): void {\n    this._configureListeners();\n  }\n\n  /** @internal */\n  public hostDisconnected(): void {\n    this._removeActiveHost();\n  }\n}\n\n/**\n * Creates and adds a {@link RootClickController} instance with a {@link RootClickControllerConfig | configuration}\n * to the given {@link RootClickControllerHost | host}.\n */\nexport function addRootClickController(\n  host: RootClickControllerHost,\n  config?: RootClickControllerConfig\n): RootClickController {\n  return new RootClickController(host, config);\n}\n\nexport type { RootClickController };\n"]}