{"version":3,"file":"part-map.js","sourceRoot":"","sources":["../../../src/components/common/part-map.ts"],"names":[],"mappings":"AAAA,OAAO,EAAE,QAAQ,EAAE,MAAM,KAAK,CAAC;AAC/B,OAAO,EAEL,SAAS,EAET,SAAS,EAET,QAAQ,GACT,MAAM,kBAAkB,CAAC;AAM1B,MAAM,gBAAiB,SAAQ,SAAS;IAGtC,YAAY,QAAkB;QAC5B,KAAK,CAAC,QAAQ,CAAC,CAAC;QAEhB,IACE,QAAQ,CAAC,IAAI,KAAK,QAAQ,CAAC,SAAS;YACpC,QAAQ,CAAC,IAAI,KAAK,MAAM;YACvB,QAAQ,CAAC,OAAO,EAAE,MAAiB,GAAG,CAAC,EACxC,CAAC;YACD,MAAM,IAAI,KAAK,CACb,iGAAiG,CAClG,CAAC;QACJ,CAAC;IACH,CAAC;IAEe,MAAM,CAAC,WAAwB;QAC7C,OAAO,MAAM,CAAC,IAAI,CAAC,WAAW,CAAC;aAC5B,MAAM,CAAC,CAAC,GAAG,EAAE,EAAE,CAAC,WAAW,CAAC,GAAG,CAAC,CAAC;aACjC,IAAI,CAAC,GAAG,CAAC,CAAC;IACf,CAAC;IAEe,MAAM,CACpB,IAAmB,EACnB,CAAC,WAAW,CAA4B;QAExC,MAAM,QAAQ,GAAG,IAAI,CAAC,OAAO,CAAC,IAAI,CAAC;QAEnC,IAAI,IAAI,CAAC,cAAc,KAAK,SAAS,EAAE,CAAC;YACtC,IAAI,CAAC,cAAc,GAAG,IAAI,GAAG,EAAE,CAAC;YAEhC,KAAK,MAAM,IAAI,IAAI,WAAW,EAAE,CAAC;gBAC/B,IAAI,WAAW,CAAC,IAAI,CAAC,EAAE,CAAC;oBACtB,QAAQ,CAAC,GAAG,CAAC,IAAI,CAAC,CAAC;oBACnB,IAAI,CAAC,cAAc,CAAC,GAAG,CAAC,IAAI,CAAC,CAAC;gBAChC,CAAC;YACH,CAAC;YAED,OAAO,IAAI,CAAC,MAAM,CAAC,WAAW,CAAC,CAAC;QAClC,CAAC;QAED,KAAK,MAAM,IAAI,IAAI,IAAI,CAAC,cAAc,EAAE,CAAC;YACvC,IAAI,CAAC,CAAC,IAAI,IAAI,WAAW,CAAC,IAAI,CAAC,WAAW,CAAC,IAAI,CAAC,EAAE,CAAC;gBACjD,QAAQ,CAAC,MAAM,CAAC,IAAI,CAAC,CAAC;gBACtB,IAAI,CAAC,cAAc,CAAC,MAAM,CAAC,IAAI,CAAC,CAAC;YACnC,CAAC;QACH,CAAC;QAED,KAAK,MAAM,IAAI,IAAI,WAAW,EAAE,CAAC;YAC/B,MAAM,KAAK,GAAG,CAAC,CAAC,WAAW,CAAC,IAAI,CAAC,CAAC;YAClC,IAAI,KAAK,IAAI,CAAC,IAAI,CAAC,cAAc,CAAC,GAAG,CAAC,IAAI,CAAC,EAAE,CAAC;gBAC5C,QAAQ,CAAC,GAAG,CAAC,IAAI,CAAC,CAAC;gBACnB,IAAI,CAAC,cAAc,CAAC,GAAG,CAAC,IAAI,CAAC,CAAC;YAChC,CAAC;QACH,CAAC;QAED,OAAO,QAAQ,CAAC;IAClB,CAAC;CACF;AAMD,MAAM,CAAC,MAAM,OAAO,GAAG,SAAS,CAAC,gBAAgB,CAAC,CAAC","sourcesContent":["import { noChange } from 'lit';\nimport {\n  type AttributePart,\n  Directive,\n  type DirectiveParameters,\n  directive,\n  type PartInfo,\n  PartType,\n} from 'lit/directive.js';\n\nexport interface PartMapInfo {\n  readonly [name: string]: boolean | null | undefined;\n}\n\nclass PartMapDirective extends Directive {\n  private _previousParts?: Set<string>;\n\n  constructor(partInfo: PartInfo) {\n    super(partInfo);\n\n    if (\n      partInfo.type !== PartType.ATTRIBUTE ||\n      partInfo.name !== 'part' ||\n      (partInfo.strings?.length as number) > 0\n    ) {\n      throw new Error(\n        '`partMap() can only be used in the `part` attribute and must be the only part in the attribute.'\n      );\n    }\n  }\n\n  public override render(partMapInfo: PartMapInfo): string {\n    return Object.keys(partMapInfo)\n      .filter((key) => partMapInfo[key])\n      .join(' ');\n  }\n\n  public override update(\n    part: AttributePart,\n    [partMapInfo]: DirectiveParameters<this>\n  ) {\n    const partList = part.element.part;\n\n    if (this._previousParts === undefined) {\n      this._previousParts = new Set();\n\n      for (const name in partMapInfo) {\n        if (partMapInfo[name]) {\n          partList.add(name);\n          this._previousParts.add(name);\n        }\n      }\n\n      return this.render(partMapInfo);\n    }\n\n    for (const name of this._previousParts) {\n      if (!(name in partMapInfo) || !partMapInfo[name]) {\n        partList.remove(name);\n        this._previousParts.delete(name);\n      }\n    }\n\n    for (const name in partMapInfo) {\n      const value = !!partMapInfo[name];\n      if (value && !this._previousParts.has(name)) {\n        partList.add(name);\n        this._previousParts.add(name);\n      }\n    }\n\n    return noChange;\n  }\n}\n\n/**\n * Similar to Lit's {@link https://lit.dev/docs/templates/directives/#classmap | `classMap`} and\n * {@link https://lit.dev/docs/templates/directives/#stylemap | `styleMap`} but for `part` attributes.\n */\nexport const partMap = directive(PartMapDirective);\nexport type { PartMapDirective };\n"]}