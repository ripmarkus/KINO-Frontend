{"version":3,"file":"abort-handler.js","sourceRoot":"","sources":["../../../src/components/common/abort-handler.ts"],"names":[],"mappings":"AAMA,MAAM,WAAW;IAGf;QACE,IAAI,CAAC,WAAW,GAAG,IAAI,eAAe,EAAE,CAAC;IAC3C,CAAC;IAMD,IAAW,MAAM;QACf,OAAO,IAAI,CAAC,WAAW,CAAC,MAAM,CAAC;IACjC,CAAC;IAUM,KAAK,CAAC,MAAgB;QAC3B,IAAI,CAAC,WAAW,CAAC,KAAK,CAAC,MAAM,CAAC,CAAC;QAC/B,IAAI,CAAC,WAAW,GAAG,IAAI,eAAe,EAAE,CAAC;IAC3C,CAAC;IAOM,KAAK;QACV,IAAI,CAAC,WAAW,GAAG,IAAI,eAAe,EAAE,CAAC;IAC3C,CAAC;CACF;AASD,MAAM,UAAU,iBAAiB;IAC/B,OAAO,IAAI,WAAW,EAAE,CAAC;AAC3B,CAAC","sourcesContent":["/**\n * A utility class that wraps AbortController, allowing its signal to be\n * used for event listeners and providing a mechanism to reset it,\n * effectively generating a fresh AbortController instance on subsequent access\n * after an abort call.\n */\nclass AbortHandle {\n  private _controller: AbortController;\n\n  constructor() {\n    this._controller = new AbortController();\n  }\n\n  /**\n   * Returns the AbortSignal associated with the current AbortController instance.\n   * This signal can be passed to functions like `addEventListener` or `fetch`.\n   */\n  public get signal(): AbortSignal {\n    return this._controller.signal;\n  }\n\n  /**\n   * Aborts the current AbortController instance and immediately creates a new,\n   * fresh AbortController.\n   *\n   * Any operations or event listeners associated with the previous signal\n   * will be aborted. Subsequent accesses to `signal` will return the\n   * signal from the new controller.\n   */\n  public abort(reason?: unknown): void {\n    this._controller.abort(reason);\n    this._controller = new AbortController();\n  }\n\n  /**\n   * Resets the controller without triggering an abort.\n   * This is useful if you want to explicitly get a fresh signal without\n   * aborting any ongoing operations from the previous signal.\n   */\n  public reset(): void {\n    this._controller = new AbortController();\n  }\n}\n\n/**\n * Creates and returns an `AbortHandle` object that wraps an AbortController,\n * providing a resettable AbortSignal. This allows you to use the signal for event\n * listeners, fetch requests, or other cancellable operations, and then\n * reset the underlying AbortController to get a fresh signal without\n * needing to create a new wrapper object.\n */\nexport function createAbortHandle(): AbortHandle {\n  return new AbortHandle();\n}\n"]}