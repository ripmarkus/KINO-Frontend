{"version":3,"file":"form-value.js","sourceRoot":"","sources":["../../../../../src/components/common/mixins/forms/form-value.ts"],"names":[],"mappings":"AAAA,OAAO,EACL,aAAa,EACb,kBAAkB,EAClB,gBAAgB,GACjB,MAAM,8BAA8B,CAAC;AAEtC,OAAO,EAAE,QAAQ,EAAE,MAAM,eAAe,CAAC;AAiBzC,MAAM,mBAAmB,GAAkC;IACzD,QAAQ,EAAE,CAAC,KAAK,EAAE,EAAE,CAAC,KAAK,IAAI,EAAE;IAChC,QAAQ,EAAE,CAAC,KAAK,EAAE,EAAE,CAAC,KAAK;IAC1B,eAAe,EAAE,CAAC,KAAK,EAAE,EAAE,CAAC,KAAK,IAAI,EAAE;IACvC,eAAe,EAAE,CAAC,KAAK,EAAE,EAAE,CAAC,KAAK;IACjC,YAAY,EAAE,CAAC,KAAK,EAAE,CAAiB,EAAE,EAAE,CAAC,KAAK,IAAI,IAAI;CAC1D,CAAC;AAEF,MAAM,CAAC,MAAM,0BAA0B,GAEnC;IACF,QAAQ,EAAE,OAAO;IACjB,eAAe,EAAE,OAAO;IACxB,YAAY,EAAE,CAAC,OAAO,EAAE,IAAI,EAAE,EAAE;QAC9B,OAAO,OAAO,IAAI,OAAO,IAAI,IAAI,CAAC,CAAC,CAAE,IAAI,CAAC,KAAgB,IAAI,IAAI,CAAC,CAAC,CAAC,IAAI,CAAC;IAC5E,CAAC;CACF,CAAC;AAEF,MAAM,CAAC,MAAM,yBAAyB,GACpC;IACE,QAAQ,EAAE,QAAQ;IAClB,eAAe,EAAE,QAAQ;IACzB,YAAY,EAAE,CAAC,KAAK,EAAE,EAAE,CAAC,KAAK,CAAC,QAAQ,EAAE;CAC1C,CAAC;AAEJ,MAAM,CAAC,MAAM,2BAA2B,GAEpC;IACF,QAAQ,EAAE,aAAa;IACvB,eAAe,EAAE,aAAa;IAC9B,YAAY,EAAE,gBAAgB;CAC/B,CAAC;AAEF,MAAM,CAAC,MAAM,0BAA0B,GAEnC;IACF,QAAQ,EAAE,CAAC,KAAK,EAAE,EAAE,CAAC,KAAK,IAAI,IAAI;IAClC,QAAQ,EAAE,CAAC,KAAK,EAAE,EAAE,CAAC,KAAK;IAC1B,eAAe,EAAE,CAAC,KAAK,EAAE,EAAE,CAAC,KAAK,IAAI,IAAI;IACzC,eAAe,EAAE,CAAC,KAAK,EAAE,EAAE,CAAC,KAAK;IACjC,YAAY,EAAE,CAAC,KAAsB,EAAE,IAAoB,EAAE,EAAE;QAC7D,IAAI,CAAC,IAAI,CAAC,IAAI,IAAI,CAAC,KAAK,EAAE,CAAC;YACzB,OAAO,IAAI,CAAC;QACd,CAAC;QAED,MAAM,IAAI,GAAG,IAAI,QAAQ,EAAE,CAAC;QAE5B,KAAK,MAAM,IAAI,IAAI,KAAK,CAAC,IAAI,CAAC,KAAK,CAAC,EAAE,CAAC;YACrC,IAAI,CAAC,MAAM,CAAC,IAAI,CAAC,IAAI,EAAE,IAAI,CAAC,CAAC;QAC/B,CAAC;QAED,OAAO,IAAI,CAAC;IACd,CAAC;CACF,CAAC;AAYF,MAAM,UAAU,qBAAqB,CACnC,KAA4B,EAC5B,IAAoB;IAEpB,IAAI,CAAC,IAAI,CAAC,IAAI,EAAE,CAAC;QACf,OAAO,IAAI,CAAC;IACd,CAAC;IAED,MAAM,KAAK,GAAG,KAAK,EAAE,KAAK,EAAE,WAAW,EAAE,CAAC;IAC1C,MAAM,GAAG,GAAG,KAAK,EAAE,GAAG,EAAE,WAAW,EAAE,CAAC;IAEtC,MAAM,EAAE,GAAG,IAAI,QAAQ,EAAE,CAAC;IAC1B,MAAM,MAAM,GAAG,GAAG,IAAI,CAAC,IAAI,GAAG,CAAC;IAE/B,IAAI,KAAK,EAAE,CAAC;QACV,EAAE,CAAC,MAAM,CAAC,GAAG,MAAM,OAAO,EAAE,KAAK,CAAC,CAAC;IACrC,CAAC;IACD,IAAI,GAAG,EAAE,CAAC;QACR,EAAE,CAAC,MAAM,CAAC,GAAG,MAAM,KAAK,EAAE,GAAG,CAAC,CAAC;IACjC,CAAC;IAED,OAAO,EAAE,CAAC;AACZ,CAAC;AAED,MAAM,CAAC,MAAM,4BAA4B,GAErC;IACF,QAAQ,EAAE,kBAAkB;IAC5B,eAAe,EAAE,kBAAkB;IACnC,YAAY,EAAE,qBAAqB;CACpC,CAAC;AAGF,MAAM,OAAO,SAAS;IASpB,YAAY,IAAoB,EAAE,MAA0B;QAC1D,IAAI,CAAC,KAAK,GAAG,IAAI,CAAC;QAClB,IAAI,CAAC,MAAM,GAAG,MAAM,CAAC,YAAY,CAAC;QAClC,IAAI,CAAC,aAAa,GAAG,MAAM,CAAC,mBAAmB,IAAI,IAAI,CAAC,MAAM,CAAC;QAC/D,IAAI,CAAC,aAAa,GAAG,IAAI,CAAC,SAAS,CAAC,eAAe,CAAC,CAAC;QAErD,IAAI,CAAC,aAAa,GAAG;YACnB,GAAG,mBAAmB;YACtB,GAAG,MAAM,CAAC,YAAY;SACK,CAAC;IAChC,CAAC;IAEM,oBAAoB,CAAC,KAAQ;QAClC,IAAI,CAAC,KAAK,GAAG,KAAK,CAAC;QACnB,IAAI,CAAC,aAAa,CAAC,IAAI,CACrB,IAAI,CAAC,KAAK,EACV,IAAI,CAAC,aAAa,CAAC,YAAY,CAAC,IAAI,CAAC,KAAK,EAAE,IAAI,CAAC,KAAK,CAAC,CACxD,CAAC;IACJ,CAAC;IAED,IAAW,YAAY,CAAC,KAAQ;QAC9B,IAAI,CAAC,aAAa,GAAG,IAAI,CAAC,aAAa,CAAC,eAAe,CAAC,KAAK,CAAC,CAAC;IACjE,CAAC;IAED,IAAW,YAAY;QACrB,OAAO,IAAI,CAAC,aAAa,CAAC,eAAe,CAAC,IAAI,CAAC,aAAa,CAAC,CAAC;IAChE,CAAC;IAED,IAAW,KAAK,CAAC,KAAQ;QACvB,IAAI,CAAC,MAAM,GAAG,IAAI,CAAC,aAAa,CAAC,QAAQ,CAAC,KAAK,CAAC,CAAC;IACnD,CAAC;IAED,IAAW,KAAK;QACd,OAAO,IAAI,CAAC,aAAa,CAAC,QAAQ,CAAC,IAAI,CAAC,MAAM,CAAC,CAAC;IAClD,CAAC;;AA1CuB,yBAAe,GAAG,eAAwB,CAAC;AA6CrE,MAAM,UAAU,oBAAoB,CAClC,IAAoB,EACpB,MAA0B;IAE1B,OAAO,IAAI,SAAS,CAAC,IAAI,EAAE,MAAM,CAAC,CAAC;AACrC,CAAC","sourcesContent":["import {\n  convertToDate,\n  convertToDateRange,\n  getDateFormValue,\n} from '../../../calendar/helpers.js';\nimport type { DateRangeValue } from '../../../date-range-picker/date-range-picker.js';\nimport { asNumber } from '../../util.js';\nimport type { FormValueType, IgcFormControl } from './types.js';\n\ntype FormValueTransformers<T> = {\n  setValue: (value: T) => T;\n  getValue: (value: T) => T;\n  setDefaultValue: (value: T) => T;\n  getDefaultValue: (value: T) => T;\n  setFormValue: (value: T, host: IgcFormControl) => FormValueType;\n};\n\ntype FormValueConfig<T> = {\n  initialValue: T;\n  initialDefaultValue?: T;\n  transformers?: Partial<FormValueTransformers<T>>;\n};\n\nconst defaultTransformers: FormValueTransformers<string> = {\n  setValue: (value) => value || '',\n  getValue: (value) => value,\n  setDefaultValue: (value) => value || '',\n  getDefaultValue: (value) => value,\n  setFormValue: (value, _: IgcFormControl) => value || null,\n};\n\nexport const defaultBooleanTransformers: Partial<\n  FormValueTransformers<boolean>\n> = {\n  setValue: Boolean,\n  setDefaultValue: Boolean,\n  setFormValue: (checked, host) => {\n    return checked && 'value' in host ? (host.value as string) || 'on' : null;\n  },\n};\n\nexport const defaultNumberTransformers: Partial<FormValueTransformers<number>> =\n  {\n    setValue: asNumber,\n    setDefaultValue: asNumber,\n    setFormValue: (value) => value.toString(),\n  };\n\nexport const defaultDateTimeTransformers: Partial<\n  FormValueTransformers<Date | null>\n> = {\n  setValue: convertToDate,\n  setDefaultValue: convertToDate,\n  setFormValue: getDateFormValue,\n};\n\nexport const defaultFileListTransformer: Partial<\n  FormValueTransformers<FileList | null>\n> = {\n  setValue: (value) => value || null,\n  getValue: (value) => value,\n  setDefaultValue: (value) => value || null,\n  getDefaultValue: (value) => value,\n  setFormValue: (files: FileList | null, host: IgcFormControl) => {\n    if (!host.name || !files) {\n      return null;\n    }\n\n    const data = new FormData();\n\n    for (const file of Array.from(files)) {\n      data.append(host.name, file);\n    }\n\n    return data;\n  },\n};\n\n/**\n * Converts a DateDateRangeValue object to FormData with\n * start and end Date values as ISO 8601 strings.\n * The keys are prefixed with the host name\n * and suffixed with 'start' or 'end' accordingly.\n * In case the host does not have a name, it does not participate in form submission.\n *\n * If the date values are null or undefined, the form data values\n * are empty strings ''.\n */\nexport function getDateRangeFormValue(\n  value: DateRangeValue | null,\n  host: IgcFormControl\n): FormValueType {\n  if (!host.name) {\n    return null;\n  }\n\n  const start = value?.start?.toISOString();\n  const end = value?.end?.toISOString();\n\n  const fd = new FormData();\n  const prefix = `${host.name}-`;\n\n  if (start) {\n    fd.append(`${prefix}start`, start);\n  }\n  if (end) {\n    fd.append(`${prefix}end`, end);\n  }\n\n  return fd;\n}\n\nexport const defaultDateRangeTransformers: Partial<\n  FormValueTransformers<DateRangeValue | null>\n> = {\n  setValue: convertToDateRange,\n  setDefaultValue: convertToDateRange,\n  setFormValue: getDateRangeFormValue,\n};\n\n/* blazorSuppress */\nexport class FormValue<T> {\n  private static readonly setFormValueKey = '_setFormValue' as const;\n\n  private _host: IgcFormControl;\n  private _value: T;\n  private _defaultValue: T;\n  private _transformers: FormValueTransformers<T>;\n  private _setFormValue: IgcFormControl[typeof FormValue.setFormValueKey];\n\n  constructor(host: IgcFormControl, config: FormValueConfig<T>) {\n    this._host = host;\n    this._value = config.initialValue;\n    this._defaultValue = config.initialDefaultValue ?? this._value;\n    this._setFormValue = host[FormValue.setFormValueKey];\n\n    this._transformers = {\n      ...defaultTransformers,\n      ...config.transformers,\n    } as FormValueTransformers<T>;\n  }\n\n  public setValueAndFormState(value: T): void {\n    this.value = value;\n    this._setFormValue.call(\n      this._host,\n      this._transformers.setFormValue(this.value, this._host)\n    );\n  }\n\n  public set defaultValue(value: T) {\n    this._defaultValue = this._transformers.setDefaultValue(value);\n  }\n\n  public get defaultValue(): T {\n    return this._transformers.getDefaultValue(this._defaultValue);\n  }\n\n  public set value(value: T) {\n    this._value = this._transformers.setValue(value);\n  }\n\n  public get value(): T {\n    return this._transformers.getValue(this._value);\n  }\n}\n\nexport function createFormValueState<T>(\n  host: IgcFormControl,\n  config: FormValueConfig<T>\n): FormValue<T> {\n  return new FormValue(host, config);\n}\n\nexport type FormValueOf<T> = ReturnType<typeof createFormValueState<T>>;\n"]}