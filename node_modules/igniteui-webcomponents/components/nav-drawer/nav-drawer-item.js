var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
import { html, LitElement } from 'lit';
import { property, queryAssignedElements, queryAssignedNodes, state, } from 'lit/decorators.js';
import { addThemingController } from '../../theming/theming-controller.js';
import { registerComponent } from '../common/definitions/register.js';
import { partMap } from '../common/part-map.js';
import { styles } from './themes/item.base.css.js';
import { all } from './themes/item.js';
import { styles as shared } from './themes/shared/item/item.common.css.js';
class IgcNavDrawerItemComponent extends LitElement {
    static register() {
        registerComponent(IgcNavDrawerItemComponent);
    }
    constructor() {
        super();
        this.disabled = false;
        this.active = false;
        addThemingController(this, all);
    }
    createRenderRoot() {
        const root = super.createRenderRoot();
        root.addEventListener('slotchange', () => {
            this._textLength = this._text.length;
        });
        return root;
    }
    render() {
        return html `
      <div part=${partMap({ base: true, mini: this._textLength < 1 })}>
        <span part="icon" .hidden="${this.navdrawerIcon.length === 0}">
          <slot name="icon"></slot>
        </span>
        <span part="content">
          <slot name="content"></slot>
        </span>
      </div>
    `;
    }
}
IgcNavDrawerItemComponent.tagName = 'igc-nav-drawer-item';
IgcNavDrawerItemComponent.styles = [styles, shared];
export default IgcNavDrawerItemComponent;
__decorate([
    property({ type: Boolean, reflect: true })
], IgcNavDrawerItemComponent.prototype, "disabled", void 0);
__decorate([
    property({ type: Boolean, reflect: true })
], IgcNavDrawerItemComponent.prototype, "active", void 0);
__decorate([
    state()
], IgcNavDrawerItemComponent.prototype, "_textLength", void 0);
__decorate([
    queryAssignedElements({ slot: 'content' })
], IgcNavDrawerItemComponent.prototype, "_text", void 0);
__decorate([
    queryAssignedNodes({ slot: 'icon', flatten: true })
], IgcNavDrawerItemComponent.prototype, "navdrawerIcon", void 0);
//# sourceMappingURL=nav-drawer-item.js.map