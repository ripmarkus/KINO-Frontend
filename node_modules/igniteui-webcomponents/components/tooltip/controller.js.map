{"version":3,"file":"controller.js","sourceRoot":"","sources":["../../../src/components/tooltip/controller.ts"],"names":[],"mappings":"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","sourcesContent":["import type { ReactiveController } from 'lit';\nimport { createAbortHandle } from '../common/abort-handler.js';\nimport {\n  addWeakEventListener,\n  getElementByIdFromRoot,\n  isString,\n} from '../common/util.js';\nimport service from './service.js';\nimport type IgcTooltipComponent from './tooltip.js';\n\nclass TooltipController implements ReactiveController {\n  //#region Internal properties and state\n\n  private static readonly _listeners = [\n    'pointerenter',\n    'pointerleave',\n  ] as const;\n\n  private readonly _host: IgcTooltipComponent;\n  private readonly _options: TooltipCallbacks;\n\n  private readonly _hostAbortHandle = createAbortHandle();\n  private readonly _anchorAbortHandle = createAbortHandle();\n\n  private _showTriggers = new Set(['pointerenter']);\n  private _hideTriggers = new Set(['pointerleave', 'click']);\n\n  private _anchor: WeakRef<Element> | null = null;\n  private _initialAnchor: WeakRef<Element> | null = null;\n\n  private _isTransient = false;\n  private _open = false;\n\n  //#endregion\n\n  //#region Public properties\n\n  /** Whether the tooltip is in shown state. */\n  public get open(): boolean {\n    return this._open;\n  }\n\n  /** Sets the shown state of the current tooltip. */\n  public set open(value: boolean) {\n    this._open = value;\n\n    if (this._open) {\n      this._addTooltipListeners();\n      service.add(this._host, this._options.onEscape);\n    } else {\n      if (this._isTransient) {\n        this._isTransient = false;\n        this.setAnchor(this._initialAnchor?.deref());\n      }\n\n      this._hostAbortHandle.abort();\n      service.remove(this._host);\n    }\n  }\n\n  /**\n   * Returns the current tooltip anchor target if any.\n   */\n  public get anchor(): TooltipAnchor {\n    return this._isTransient\n      ? this._anchor?.deref()\n      : this._initialAnchor?.deref();\n  }\n\n  /**\n   * Returns the current set of hide triggers as a comma-separated string.\n   */\n  public get hideTriggers(): string {\n    return Array.from(this._hideTriggers).join();\n  }\n\n  /**\n   * Sets a new set of hide triggers from a comma-separated string.\n   *\n   * @remarks\n   * If the tooltip already has an `anchor` bound it will remove the old\n   * set of triggers from it and rebind it with the new one.\n   */\n  public set hideTriggers(value: string) {\n    this._hideTriggers = parseTriggers(value);\n    this._anchorAbortHandle.abort();\n    this._addAnchorListeners();\n  }\n\n  /**\n   * Returns the current set of show triggers as a comma-separated string.\n   */\n  public get showTriggers(): string {\n    return Array.from(this._showTriggers).join();\n  }\n\n  /**\n   * Sets a new set of show triggers from a comma-separated string.\n   *\n   * @remarks\n   * If the tooltip already has an `anchor` bound it will remove the old\n   * set of triggers from it and rebind it with the new one.\n   */\n  public set showTriggers(value: string) {\n    this._showTriggers = parseTriggers(value);\n    this._anchorAbortHandle.abort();\n    this._addAnchorListeners();\n  }\n\n  //#endregion\n\n  constructor(tooltip: IgcTooltipComponent, options: TooltipCallbacks) {\n    this._host = tooltip;\n    this._options = options;\n    this._host.addController(this);\n  }\n\n  //#region Internal event listeners state\n\n  private _addAnchorListeners(): void {\n    const anchor = this.anchor;\n\n    if (!anchor) {\n      return;\n    }\n\n    const { signal } = this._anchorAbortHandle;\n\n    for (const each of this._showTriggers) {\n      addWeakEventListener(anchor, each, this, { passive: true, signal });\n    }\n\n    for (const each of this._hideTriggers) {\n      addWeakEventListener(anchor, each, this, { passive: true, signal });\n    }\n  }\n\n  private _addTooltipListeners(): void {\n    const { signal } = this._hostAbortHandle;\n\n    for (const event of TooltipController._listeners) {\n      this._host.addEventListener(event, this, { passive: true, signal });\n    }\n  }\n\n  //#endregion\n\n  //#region Event handlers\n\n  private async _handleTooltipEvent(event: Event): Promise<void> {\n    switch (event.type) {\n      case 'pointerenter':\n        await this._options.onShow.call(this._host);\n        break;\n      case 'pointerleave':\n        await this._options.onHide.call(this._host);\n        break;\n      default:\n        return;\n    }\n  }\n\n  private async _handleAnchorEvent(event: Event): Promise<void> {\n    if (!this._open && this._showTriggers.has(event.type)) {\n      await this._options.onShow.call(this._host);\n    }\n\n    if (this._open && this._hideTriggers.has(event.type)) {\n      await this._options.onHide.call(this._host);\n    }\n  }\n\n  /** @internal */\n  public handleEvent(event: Event): void {\n    if (event.target === this._host) {\n      this._handleTooltipEvent(event);\n    } else if (event.target === this._anchor?.deref()) {\n      this._handleAnchorEvent(event);\n    } else if (event.target === this._initialAnchor?.deref()) {\n      this.open = false;\n      this._handleAnchorEvent(event);\n    }\n  }\n\n  //#endregion\n\n  private _dispose(): void {\n    this._anchorAbortHandle.abort();\n    this._hostAbortHandle.abort();\n    service.remove(this._host);\n    this._anchor = null;\n    this._initialAnchor = null;\n  }\n\n  //#region Public API\n\n  /**\n   * Removes all triggers from the previous `anchor` target and rebinds the current\n   * sets back to the new value if it exists.\n   */\n  public setAnchor(value: TooltipAnchor | string, transient = false): void {\n    const newAnchor = isString(value)\n      ? getElementByIdFromRoot(this._host, value)\n      : value;\n\n    if (this._anchor?.deref() === newAnchor) {\n      return;\n    }\n\n    // Tooltip `show()` method called with a target. Set to hidden state.\n    if (transient && this._open) {\n      this.open = false;\n    }\n\n    if (this._anchor?.deref() !== this._initialAnchor?.deref()) {\n      this._anchorAbortHandle.abort();\n    }\n\n    this._anchor = newAnchor ? new WeakRef(newAnchor) : null;\n    this._isTransient = transient;\n    this._addAnchorListeners();\n  }\n\n  public resolveAnchor(value: TooltipAnchor | string): void {\n    const resolvedElement = isString(value)\n      ? getElementByIdFromRoot(this._host, value)\n      : value;\n\n    this._initialAnchor = resolvedElement ? new WeakRef(resolvedElement) : null;\n    this.setAnchor(resolvedElement);\n  }\n\n  //#endregion\n\n  //#region ReactiveController interface\n\n  /** @internal */\n  public hostConnected(): void {\n    this.resolveAnchor(this._host.anchor);\n  }\n\n  /** @internal */\n  public hostDisconnected(): void {\n    this._dispose();\n  }\n\n  //#endregion\n}\n\nfunction parseTriggers(string: string): Set<string> {\n  return new Set(\n    (string ?? '').split(TooltipRegexes.triggers).filter((s) => s.trim())\n  );\n}\n\nexport const TooltipRegexes = Object.freeze({\n  /** Used for parsing the strings passed in the tooltip `show/hide-trigger` properties. */\n  triggers: /[,\\s]+/,\n\n  /** Matches horizontal `PopoverPlacement` start positions. */\n  horizontalStart: /^(left|right)-start$/,\n\n  /** Matches horizontal `PopoverPlacement` end positions. */\n  horizontalEnd: /^(left|right)-end$/,\n\n  /** Matches vertical `PopoverPlacement` start positions. */\n  start: /start$/,\n\n  /** Matches vertical `PopoverPlacement` end positions. */\n  end: /end$/,\n});\n\nexport function addTooltipController(\n  host: IgcTooltipComponent,\n  options: TooltipCallbacks\n): TooltipController {\n  return new TooltipController(host, options);\n}\n\ntype TooltipAnchor = Element | null | undefined;\n\ntype TooltipCallbacks = {\n  onShow: (event?: Event) => unknown;\n  onHide: (event?: Event) => unknown;\n  onEscape: (event?: Event) => unknown;\n};\n"]}