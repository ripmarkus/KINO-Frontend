{"version":3,"file":"service.js","sourceRoot":"","sources":["../../../src/components/tooltip/service.ts"],"names":[],"mappings":"AAAA,OAAO,EAAE,QAAQ,EAAE,MAAM,KAAK,CAAC;AAC/B,OAAO,EAAE,SAAS,EAAE,MAAM,uCAAuC,CAAC;AAClE,OAAO,EAAE,OAAO,EAAE,IAAI,EAAE,MAAM,mBAAmB,CAAC;AAKlD,MAAM,sBAAsB;IAA5B;QACU,gBAAW,GAAG,IAAI,GAAG,EAA4C,CAAC;IA6C5E,CAAC;IA3CS,YAAY,CAAC,KAAK,GAAG,IAAI;QAE/B,IAAI,QAAQ,EAAE,CAAC;YACb,OAAO;QACT,CAAC;QAED,IAAI,OAAO,CAAC,IAAI,CAAC,WAAW,CAAC,EAAE,CAAC;YAC9B,KAAK;gBACH,CAAC,CAAC,UAAU,CAAC,gBAAgB,CAAC,SAAS,EAAE,IAAI,CAAC;gBAC9C,CAAC,CAAC,UAAU,CAAC,mBAAmB,CAAC,SAAS,EAAE,IAAI,CAAC,CAAC;QACtD,CAAC;IACH,CAAC;IAEM,GAAG,CACR,QAA6B,EAC7B,YAAiC;QAEjC,IAAI,IAAI,CAAC,WAAW,CAAC,GAAG,CAAC,QAAQ,CAAC,EAAE,CAAC;YACnC,OAAO;QACT,CAAC;QAED,IAAI,CAAC,YAAY,EAAE,CAAC;QACpB,IAAI,CAAC,WAAW,CAAC,GAAG,CAAC,QAAQ,EAAE,YAAY,CAAC,CAAC;IAC/C,CAAC;IAEM,MAAM,CAAC,QAA6B;QACzC,IAAI,CAAC,IAAI,CAAC,WAAW,CAAC,GAAG,CAAC,QAAQ,CAAC,EAAE,CAAC;YACpC,OAAO;QACT,CAAC;QAED,IAAI,CAAC,WAAW,CAAC,MAAM,CAAC,QAAQ,CAAC,CAAC;QAClC,IAAI,CAAC,YAAY,CAAC,KAAK,CAAC,CAAC;IAC3B,CAAC;IAGM,KAAK,CAAC,WAAW,CAAC,KAAoB;QAC3C,IAAI,KAAK,CAAC,GAAG,KAAK,SAAS,EAAE,CAAC;YAC5B,OAAO;QACT,CAAC;QAED,MAAM,CAAC,OAAO,EAAE,QAAQ,CAAC,GAAG,IAAI,CAAC,KAAK,CAAC,IAAI,CAAC,IAAI,CAAC,WAAW,CAAC,OAAO,EAAE,CAAC,CAAC,CAAC;QACzE,MAAM,QAAQ,EAAE,IAAI,CAAC,OAAO,CAAC,CAAC;IAChC,CAAC;CACF;AAED,MAAM,OAAO,GAAG,IAAI,sBAAsB,EAAE,CAAC;AAC7C,eAAe,OAAO,CAAC","sourcesContent":["import { isServer } from 'lit';\nimport { escapeKey } from '../common/controllers/key-bindings.js';\nimport { isEmpty, last } from '../common/util.js';\nimport type IgcTooltipComponent from './tooltip.js';\n\ntype TooltipHideCallback = () => unknown;\n\nclass TooltipEscapeCallbacks {\n  private _collection = new Map<IgcTooltipComponent, TooltipHideCallback>();\n\n  private _setListener(state = true): void {\n    /* c8 ignore next 3 */\n    if (isServer) {\n      return;\n    }\n\n    if (isEmpty(this._collection)) {\n      state\n        ? globalThis.addEventListener('keydown', this)\n        : globalThis.removeEventListener('keydown', this);\n    }\n  }\n\n  public add(\n    instance: IgcTooltipComponent,\n    hideCallback: TooltipHideCallback\n  ): void {\n    if (this._collection.has(instance)) {\n      return;\n    }\n\n    this._setListener();\n    this._collection.set(instance, hideCallback);\n  }\n\n  public remove(instance: IgcTooltipComponent): void {\n    if (!this._collection.has(instance)) {\n      return;\n    }\n\n    this._collection.delete(instance);\n    this._setListener(false);\n  }\n\n  /** @internal */\n  public async handleEvent(event: KeyboardEvent): Promise<void> {\n    if (event.key !== escapeKey) {\n      return;\n    }\n\n    const [tooltip, callback] = last(Array.from(this._collection.entries()));\n    await callback?.call(tooltip);\n  }\n}\n\nconst service = new TooltipEscapeCallbacks();\nexport default service;\n"]}