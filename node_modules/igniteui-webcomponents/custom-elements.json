{
  "schemaVersion": "1.0.0",
  "readme": "",
  "modules": [
    {
      "kind": "javascript-module",
      "path": "src/theming/types.ts",
      "declarations": [],
      "exports": []
    },
    {
      "kind": "javascript-module",
      "path": "src/theming/theming-event.ts",
      "declarations": [
        {
          "kind": "variable",
          "name": "CHANGE_THEME_EVENT",
          "type": {
            "text": "string"
          },
          "default": "'igc-change-theme'"
        },
        {
          "kind": "variable",
          "name": "CHANGED_THEME_EVENT",
          "type": {
            "text": "string"
          },
          "default": "'igc-changed-theme'"
        },
        {
          "kind": "variable",
          "name": "_themeChangedEmitter",
          "default": "new ThemeChangedEmitter()"
        }
      ],
      "exports": [
        {
          "kind": "js",
          "name": "CHANGE_THEME_EVENT",
          "declaration": {
            "name": "CHANGE_THEME_EVENT",
            "module": "src/theming/theming-event.ts"
          }
        },
        {
          "kind": "js",
          "name": "CHANGED_THEME_EVENT",
          "declaration": {
            "name": "CHANGED_THEME_EVENT",
            "module": "src/theming/theming-event.ts"
          }
        },
        {
          "kind": "js",
          "name": "_themeChangedEmitter",
          "declaration": {
            "name": "_themeChangedEmitter",
            "module": "src/theming/theming-event.ts"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "src/theming/utils.ts",
      "declarations": [
        {
          "kind": "function",
          "name": "getAllCssVariables",
          "return": {
            "type": {
              "text": "Record<string, string>"
            }
          }
        }
      ],
      "exports": [
        {
          "kind": "js",
          "name": "getAllCssVariables",
          "declaration": {
            "name": "getAllCssVariables",
            "module": "src/theming/utils.ts"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "src/theming/config.ts",
      "declarations": [
        {
          "kind": "function",
          "name": "getTheme"
        },
        {
          "kind": "function",
          "name": "setTheme",
          "return": {
            "type": {
              "text": "void"
            }
          },
          "parameters": [
            {
              "name": "value",
              "type": {
                "text": "Theme"
              }
            },
            {
              "name": "variant",
              "type": {
                "text": "ThemeVariant"
              }
            }
          ]
        },
        {
          "kind": "function",
          "name": "configureTheme",
          "return": {
            "type": {
              "text": "void"
            }
          },
          "parameters": [
            {
              "name": "t",
              "type": {
                "text": "Theme"
              }
            },
            {
              "name": "v",
              "default": "'light'",
              "type": {
                "text": "ThemeVariant"
              }
            }
          ],
          "description": "Allows the global configuration of the active theme.\n\nUsage:\n ```ts\n import { configureTheme } from 'igniteui-webcomponents';\n\n configureTheme('material', 'light');\n ```"
        }
      ],
      "exports": [
        {
          "kind": "js",
          "name": "getTheme",
          "declaration": {
            "name": "getTheme",
            "module": "src/theming/config.ts"
          }
        },
        {
          "kind": "js",
          "name": "setTheme",
          "declaration": {
            "name": "setTheme",
            "module": "src/theming/config.ts"
          }
        },
        {
          "kind": "js",
          "name": "configureTheme",
          "declaration": {
            "name": "configureTheme",
            "module": "src/theming/config.ts"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "src/theming/theming-controller.ts",
      "declarations": [
        {
          "kind": "class",
          "description": "",
          "name": "ThemingController",
          "members": [
            {
              "kind": "field",
              "name": "_host",
              "type": {
                "text": "ReactiveControllerHost & ReactiveElement"
              },
              "privacy": "private",
              "readonly": true,
              "default": "host"
            },
            {
              "kind": "field",
              "name": "_themes",
              "type": {
                "text": "Themes"
              },
              "privacy": "private",
              "readonly": true,
              "default": "themes"
            },
            {
              "kind": "field",
              "name": "_options",
              "type": {
                "text": "ThemingControllerConfig | undefined"
              },
              "privacy": "private",
              "readonly": true,
              "default": "config"
            },
            {
              "kind": "field",
              "name": "_theme",
              "type": {
                "text": "Theme"
              },
              "privacy": "private",
              "default": "'bootstrap'",
              "expandedType": {
                "text": "'material' | 'bootstrap' | 'indigo' | 'fluent'"
              }
            },
            {
              "kind": "field",
              "name": "_variant",
              "type": {
                "text": "ThemeVariant"
              },
              "privacy": "private",
              "default": "'light'",
              "expandedType": {
                "text": "'light' | 'dark'"
              }
            },
            {
              "kind": "field",
              "name": "theme",
              "type": {
                "text": "Theme"
              },
              "privacy": "public",
              "readonly": true,
              "expandedType": {
                "text": "'material' | 'bootstrap' | 'indigo' | 'fluent'"
              }
            },
            {
              "kind": "method",
              "name": "_getStyles",
              "privacy": "private"
            },
            {
              "kind": "method",
              "name": "_adoptStyles",
              "privacy": "protected",
              "return": {
                "type": {
                  "text": "void"
                }
              }
            },
            {
              "kind": "method",
              "name": "_handleThemeChanged",
              "privacy": "private",
              "return": {
                "type": {
                  "text": "void"
                }
              }
            }
          ]
        },
        {
          "kind": "function",
          "name": "addThemingController",
          "return": {
            "type": {
              "text": "ThemingController"
            }
          },
          "parameters": [
            {
              "name": "host",
              "type": {
                "text": "ReactiveControllerHost & ReactiveElement"
              }
            },
            {
              "name": "themes",
              "type": {
                "text": "Themes"
              }
            },
            {
              "name": "config",
              "optional": true,
              "type": {
                "text": "ThemingControllerConfig"
              }
            }
          ]
        }
      ],
      "exports": [
        {
          "kind": "js",
          "name": "addThemingController",
          "declaration": {
            "name": "addThemingController",
            "module": "src/theming/theming-controller.ts"
          }
        },
        {
          "kind": "js",
          "name": "ThemingController",
          "declaration": {
            "name": "ThemingController",
            "module": "src/theming/theming-controller.ts"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "src/components/common/controllers/internals.ts",
      "declarations": [
        {
          "kind": "class",
          "description": "A Lit ReactiveController to manage `ElementInternals` for a host element.\nProvides methods to interact with custom element states and ARIA attributes..",
          "name": "ElementInternalsController",
          "members": [
            {
              "kind": "field",
              "name": "_host",
              "type": {
                "text": "ReactiveControllerHost & LitElement"
              },
              "privacy": "private",
              "readonly": true,
              "default": "host"
            },
            {
              "kind": "field",
              "name": "_internals",
              "type": {
                "text": "ElementInternals"
              },
              "privacy": "private",
              "readonly": true
            },
            {
              "kind": "field",
              "name": "form",
              "type": {
                "text": "HTMLFormElement | null"
              },
              "privacy": "public",
              "description": "Gets the closest ancestor `<form>` element or `null`.",
              "readonly": true
            },
            {
              "kind": "method",
              "name": "setARIA",
              "privacy": "public",
              "return": {
                "type": {
                  "text": "void"
                }
              },
              "parameters": [
                {
                  "name": "state",
                  "type": {
                    "text": "Partial<Record<T, ARIAMixin[T]>>"
                  }
                }
              ],
              "description": "Sets ARIA attributes on the element's internals."
            },
            {
              "kind": "method",
              "name": "setState",
              "privacy": "public",
              "return": {
                "type": {
                  "text": "void"
                }
              },
              "parameters": [
                {
                  "name": "state",
                  "type": {
                    "text": "string"
                  }
                },
                {
                  "name": "value",
                  "type": {
                    "text": "boolean"
                  }
                }
              ],
              "description": "Adds or removes a custom state from the element's internals.\nCustom states can be styled via `:state()` pseudo-class in CSS."
            }
          ]
        },
        {
          "kind": "function",
          "name": "addInternalsController",
          "return": {
            "type": {
              "text": "ElementInternalsController"
            }
          },
          "parameters": [
            {
              "name": "host",
              "type": {
                "text": "ReactiveControllerHost & LitElement"
              }
            },
            {
              "name": "config",
              "optional": true,
              "type": {
                "text": "ElementInternalsConfig"
              }
            }
          ],
          "description": "Creates and adds a ElementInternalsController to a LitElement host."
        }
      ],
      "exports": [
        {
          "kind": "js",
          "name": "addInternalsController",
          "declaration": {
            "name": "addInternalsController",
            "module": "src/components/common/controllers/internals.ts"
          }
        },
        {
          "kind": "js",
          "name": "ElementInternalsController",
          "declaration": {
            "name": "ElementInternalsController",
            "module": "src/components/common/controllers/internals.ts"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "src/components/common/definitions/register.ts",
      "declarations": [
        {
          "kind": "function",
          "name": "registerComponent",
          "parameters": [
            {
              "name": "component",
              "type": {
                "text": "IgniteComponent"
              }
            },
            {
              "name": "dependencies",
              "type": {
                "text": "IgniteComponent[]"
              }
            }
          ]
        }
      ],
      "exports": [
        {
          "kind": "js",
          "name": "registerComponent",
          "declaration": {
            "name": "registerComponent",
            "module": "src/components/common/definitions/register.ts"
          }
        },
        {
          "kind": "custom-element-definition",
          "declaration": {
            "name": "component",
            "module": "src/components/common/definitions/register.ts"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "src/components/types.ts",
      "declarations": [],
      "exports": []
    },
    {
      "kind": "javascript-module",
      "path": "src/components/avatar/avatar.ts",
      "declarations": [
        {
          "kind": "class",
          "description": "An avatar component is used as a representation of a user identity\ntypically in a user profile.",
          "name": "IgcAvatarComponent",
          "cssParts": [
            {
              "description": "The base wrapper of the avatar.",
              "name": "base"
            },
            {
              "description": "The initials wrapper of the avatar.",
              "name": "initials"
            },
            {
              "description": "The image wrapper of the avatar.",
              "name": "image"
            },
            {
              "description": "The icon wrapper of the avatar.",
              "name": "icon"
            }
          ],
          "slots": [
            {
              "description": "Renders an icon inside the default slot.",
              "name": ""
            }
          ],
          "members": [
            {
              "kind": "field",
              "name": "tagName",
              "type": {
                "text": "string"
              },
              "privacy": "public",
              "static": true,
              "readonly": true,
              "default": "'igc-avatar'"
            },
            {
              "kind": "method",
              "name": "register",
              "privacy": "public",
              "static": true,
              "return": {
                "type": {
                  "text": "void"
                }
              }
            },
            {
              "kind": "field",
              "name": "_internals",
              "privacy": "private",
              "readonly": true
            },
            {
              "kind": "field",
              "name": "_hasError",
              "type": {
                "text": "boolean"
              },
              "privacy": "private",
              "default": "false"
            },
            {
              "kind": "field",
              "name": "src",
              "type": {
                "text": "string | undefined"
              },
              "privacy": "public",
              "description": "The image source to use.",
              "attribute": "src"
            },
            {
              "kind": "field",
              "name": "alt",
              "type": {
                "text": "string | undefined"
              },
              "privacy": "public",
              "description": "Alternative text for the image.",
              "attribute": "alt"
            },
            {
              "kind": "field",
              "name": "initials",
              "type": {
                "text": "string | undefined"
              },
              "privacy": "public",
              "description": "Initials to use as a fallback when no image is available.",
              "attribute": "initials"
            },
            {
              "kind": "field",
              "name": "shape",
              "type": {
                "text": "AvatarShape"
              },
              "privacy": "public",
              "default": "'square'",
              "description": "The shape of the avatar.",
              "attribute": "shape",
              "reflects": true,
              "expandedType": {
                "text": "'square' | 'circle' | 'rounded'"
              }
            },
            {
              "kind": "method",
              "name": "_handleError",
              "privacy": "protected",
              "return": {
                "type": {
                  "text": "void"
                }
              }
            }
          ],
          "attributes": [
            {
              "name": "src",
              "type": {
                "text": "string | undefined"
              },
              "description": "The image source to use.",
              "fieldName": "src",
              "attribute": "src"
            },
            {
              "name": "alt",
              "type": {
                "text": "string | undefined"
              },
              "description": "Alternative text for the image.",
              "fieldName": "alt",
              "attribute": "alt"
            },
            {
              "name": "initials",
              "type": {
                "text": "string | undefined"
              },
              "description": "Initials to use as a fallback when no image is available.",
              "fieldName": "initials",
              "attribute": "initials"
            },
            {
              "name": "shape",
              "type": {
                "text": "AvatarShape"
              },
              "default": "'square'",
              "description": "The shape of the avatar.",
              "fieldName": "shape",
              "attribute": "shape",
              "expandedType": {
                "text": "'square' | 'circle' | 'rounded'"
              }
            }
          ],
          "superclass": {
            "name": "LitElement",
            "package": "lit"
          },
          "tagName": "igc-avatar",
          "customElement": true
        }
      ],
      "exports": [
        {
          "kind": "js",
          "name": "default",
          "declaration": {
            "name": "IgcAvatarComponent",
            "module": "src/components/avatar/avatar.ts"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "src/components/common/abort-handler.ts",
      "declarations": [
        {
          "kind": "function",
          "name": "createAbortHandle",
          "return": {
            "type": {
              "text": "AbortHandle"
            }
          },
          "description": "Creates and returns an `AbortHandle` object that wraps an AbortController,\nproviding a resettable AbortSignal. This allows you to use the signal for event\nlisteners, fetch requests, or other cancellable operations, and then\nreset the underlying AbortController to get a fresh signal without\nneeding to create a new wrapper object."
        }
      ],
      "exports": [
        {
          "kind": "js",
          "name": "createAbortHandle",
          "declaration": {
            "name": "createAbortHandle",
            "module": "src/components/common/abort-handler.ts"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "src/components/common/util.ts",
      "declarations": [
        {
          "kind": "function",
          "name": "asPercent",
          "parameters": [
            {
              "name": "part",
              "type": {
                "text": "number"
              }
            },
            {
              "name": "whole",
              "type": {
                "text": "number"
              }
            }
          ]
        },
        {
          "kind": "function",
          "name": "clamp",
          "parameters": [
            {
              "name": "number",
              "type": {
                "text": "number"
              }
            },
            {
              "name": "min",
              "type": {
                "text": "number"
              }
            },
            {
              "name": "max",
              "type": {
                "text": "number"
              }
            }
          ]
        },
        {
          "kind": "function",
          "name": "numberOfDecimals",
          "return": {
            "type": {
              "text": "number"
            }
          },
          "parameters": [
            {
              "name": "number",
              "type": {
                "text": "number"
              }
            }
          ]
        },
        {
          "kind": "function",
          "name": "roundPrecise",
          "return": {
            "type": {
              "text": "number"
            }
          },
          "parameters": [
            {
              "name": "number",
              "type": {
                "text": "number"
              }
            },
            {
              "name": "magnitude",
              "default": "1"
            }
          ]
        },
        {
          "kind": "function",
          "name": "numberInRangeInclusive",
          "parameters": [
            {
              "name": "value",
              "type": {
                "text": "number"
              }
            },
            {
              "name": "min",
              "type": {
                "text": "number"
              }
            },
            {
              "name": "max",
              "type": {
                "text": "number"
              }
            }
          ]
        },
        {
          "kind": "function",
          "name": "createCounter"
        },
        {
          "kind": "function",
          "name": "isLTR",
          "parameters": [
            {
              "name": "element",
              "type": {
                "text": "HTMLElement"
              }
            }
          ],
          "description": "Returns whether an element has a Left-to-Right directionality."
        },
        {
          "kind": "function",
          "name": "formatString",
          "return": {
            "type": {
              "text": "string"
            }
          },
          "parameters": [
            {
              "name": "template",
              "type": {
                "text": "string"
              }
            },
            {
              "name": "params",
              "type": {
                "text": "unknown[]"
              }
            }
          ],
          "description": "Builds a string from format specifiers and replacement parameters.\nWill coerce non-string parameters to their string representations."
        },
        {
          "kind": "function",
          "name": "asNumber",
          "parameters": [
            {
              "name": "value",
              "type": {
                "text": "unknown"
              }
            },
            {
              "name": "fallback",
              "default": "0"
            }
          ],
          "description": "Parse the passed `value` as a number or return the `fallback` if it can't be done."
        },
        {
          "kind": "function",
          "name": "wrap",
          "parameters": [
            {
              "name": "min",
              "type": {
                "text": "number"
              }
            },
            {
              "name": "max",
              "type": {
                "text": "number"
              }
            },
            {
              "name": "value",
              "type": {
                "text": "number"
              }
            }
          ],
          "description": "Returns the value wrapped between the min and max bounds.\n\nIf the value is greater than max, returns the min and vice-versa.\nIf the value is between the bounds, it is returned unchanged."
        },
        {
          "kind": "function",
          "name": "isDefined",
          "parameters": [
            {
              "name": "value",
              "type": {
                "text": "T"
              }
            }
          ]
        },
        {
          "kind": "function",
          "name": "iterNodes",
          "return": {
            "type": {
              "text": "Generator<T>"
            }
          },
          "parameters": [
            {
              "name": "root",
              "type": {
                "text": "Node"
              }
            },
            {
              "name": "options",
              "optional": true,
              "type": {
                "text": "IterNodesOptions<T>"
              }
            }
          ]
        },
        {
          "kind": "function",
          "name": "getRoot",
          "return": {
            "type": {
              "text": "Document | ShadowRoot"
            }
          },
          "parameters": [
            {
              "name": "element",
              "type": {
                "text": "Element"
              }
            },
            {
              "name": "options",
              "optional": true,
              "type": {
                "text": "GetRootNodeOptions"
              }
            }
          ]
        },
        {
          "kind": "function",
          "name": "getElementByIdFromRoot",
          "parameters": [
            {
              "name": "root",
              "type": {
                "text": "HTMLElement"
              }
            },
            {
              "name": "id",
              "type": {
                "text": "string"
              }
            }
          ]
        },
        {
          "kind": "function",
          "name": "isElement",
          "return": {
            "type": {
              "text": "node is Element"
            }
          },
          "parameters": [
            {
              "name": "node",
              "type": {
                "text": "unknown"
              }
            }
          ]
        },
        {
          "kind": "function",
          "name": "getElementsFromEventPath",
          "parameters": [
            {
              "name": "event",
              "type": {
                "text": "Event"
              }
            }
          ]
        },
        {
          "kind": "function",
          "name": "findElementFromEventPath",
          "parameters": [
            {
              "name": "predicate",
              "type": {
                "text": "string | ((element: Element) => boolean)"
              }
            },
            {
              "name": "event",
              "type": {
                "text": "Event"
              }
            }
          ]
        },
        {
          "kind": "function",
          "name": "groupBy",
          "parameters": [
            {
              "name": "array",
              "type": {
                "text": "T[]"
              }
            },
            {
              "name": "key",
              "type": {
                "text": "keyof T | ((item: T) => any)"
              }
            }
          ]
        },
        {
          "kind": "function",
          "name": "first",
          "parameters": [
            {
              "name": "arr",
              "type": {
                "text": "T[]"
              }
            }
          ]
        },
        {
          "kind": "function",
          "name": "last",
          "parameters": [
            {
              "name": "arr",
              "type": {
                "text": "T[]"
              }
            }
          ]
        },
        {
          "kind": "function",
          "name": "modulo",
          "parameters": [
            {
              "name": "n",
              "type": {
                "text": "number"
              }
            },
            {
              "name": "d",
              "type": {
                "text": "number"
              }
            }
          ]
        },
        {
          "kind": "function",
          "name": "take",
          "parameters": [
            {
              "name": "iterable",
              "type": {
                "text": "IterableIterator<T>"
              }
            },
            {
              "name": "n",
              "type": {
                "text": "number"
              }
            }
          ],
          "description": "Creates an array of `n` elements from a given iterator."
        },
        {
          "kind": "function",
          "name": "chunk",
          "parameters": [
            {
              "name": "arr",
              "type": {
                "text": "T[]"
              }
            },
            {
              "name": "size",
              "type": {
                "text": "number"
              }
            }
          ],
          "description": "Splits an array into chunks of length `size` and returns a generator\nyielding each chunk.\nThe last chunk may contain less than `size` elements."
        },
        {
          "kind": "function",
          "name": "splitToWords",
          "parameters": [
            {
              "name": "text",
              "type": {
                "text": "string"
              }
            }
          ]
        },
        {
          "kind": "function",
          "name": "toKebabCase",
          "return": {
            "type": {
              "text": "string"
            }
          },
          "parameters": [
            {
              "name": "text",
              "type": {
                "text": "string"
              }
            }
          ]
        },
        {
          "kind": "function",
          "name": "isFunction",
          "return": {
            "type": {
              "text": "value is CallableFunction"
            }
          },
          "parameters": [
            {
              "name": "value",
              "type": {
                "text": "unknown"
              }
            }
          ]
        },
        {
          "kind": "function",
          "name": "isString",
          "return": {
            "type": {
              "text": "value is string"
            }
          },
          "parameters": [
            {
              "name": "value",
              "type": {
                "text": "unknown"
              }
            }
          ]
        },
        {
          "kind": "function",
          "name": "isObject",
          "return": {
            "type": {
              "text": "value is object"
            }
          },
          "parameters": [
            {
              "name": "value",
              "type": {
                "text": "unknown"
              }
            }
          ]
        },
        {
          "kind": "function",
          "name": "isEventListenerObject",
          "return": {
            "type": {
              "text": "x is EventListenerObject"
            }
          },
          "parameters": [
            {
              "name": "x",
              "type": {
                "text": "unknown"
              }
            }
          ]
        },
        {
          "kind": "function",
          "name": "addWeakEventListener",
          "return": {
            "type": {
              "text": "void"
            }
          },
          "parameters": [
            {
              "name": "element",
              "type": {
                "text": "Element"
              }
            },
            {
              "name": "event",
              "type": {
                "text": "string"
              }
            },
            {
              "name": "listener",
              "type": {
                "text": "EventListenerOrEventListenerObject"
              }
            },
            {
              "name": "options",
              "optional": true,
              "type": {
                "text": "AddEventListenerOptions | boolean"
              }
            }
          ]
        },
        {
          "kind": "function",
          "name": "addSafeEventListener",
          "return": {
            "type": {
              "text": "void"
            }
          },
          "parameters": [
            {
              "name": "target",
              "type": {
                "text": "HTMLElement"
              }
            },
            {
              "name": "eventName",
              "type": {
                "text": "E"
              }
            },
            {
              "name": "handler",
              "type": {
                "text": "(event: EventTypeOf<E>) => unknown"
              }
            },
            {
              "name": "options",
              "optional": true,
              "type": {
                "text": "boolean | AddEventListenerOptions"
              }
            }
          ],
          "description": "Safely adds an event listener to an HTMLElement, automatically handling\nserver-side rendering environments by doing nothing if `isServer` is true.\nThis function also correctly binds the `handler`'s `this` context to the `target` element\nand ensures proper event type inference."
        },
        {
          "kind": "function",
          "name": "isEmpty",
          "return": {
            "type": {
              "text": "boolean"
            }
          },
          "parameters": [
            {
              "name": "x",
              "type": {
                "text": "ArrayLike<T> | Set<T> | Map<U, T>"
              }
            }
          ],
          "description": "Returns whether a given collection is empty."
        },
        {
          "kind": "function",
          "name": "asArray",
          "return": {
            "type": {
              "text": "T[]"
            }
          },
          "parameters": [
            {
              "name": "value",
              "optional": true,
              "type": {
                "text": "T | T[]"
              }
            }
          ]
        },
        {
          "kind": "function",
          "name": "partition",
          "return": {
            "type": {
              "text": "[truthy: T[], falsy: T[]]"
            }
          },
          "parameters": [
            {
              "name": "array",
              "type": {
                "text": "T[]"
              }
            },
            {
              "name": "isTruthy",
              "type": {
                "text": "(value: T) => boolean"
              }
            }
          ]
        },
        {
          "kind": "function",
          "name": "getCenterPoint",
          "parameters": [
            {
              "name": "element",
              "type": {
                "text": "Element"
              }
            }
          ],
          "description": "Returns the center x/y coordinate of a given element."
        },
        {
          "kind": "function",
          "name": "roundByDPR",
          "return": {
            "type": {
              "text": "number"
            }
          },
          "parameters": [
            {
              "name": "value",
              "type": {
                "text": "number"
              }
            }
          ]
        },
        {
          "kind": "function",
          "name": "scrollIntoView",
          "return": {
            "type": {
              "text": "void"
            }
          },
          "parameters": [
            {
              "name": "element",
              "optional": true,
              "type": {
                "text": "HTMLElement"
              }
            },
            {
              "name": "config",
              "optional": true,
              "type": {
                "text": "ScrollIntoViewOptions"
              }
            }
          ]
        },
        {
          "kind": "function",
          "name": "isRegExp",
          "return": {
            "type": {
              "text": "value is RegExp"
            }
          },
          "parameters": [
            {
              "name": "value",
              "type": {
                "text": "unknown"
              }
            }
          ]
        },
        {
          "kind": "function",
          "name": "equal",
          "return": {
            "type": {
              "text": "boolean"
            }
          },
          "parameters": [
            {
              "name": "a",
              "type": {
                "text": "unknown"
              }
            },
            {
              "name": "b",
              "type": {
                "text": "T"
              }
            },
            {
              "name": "visited",
              "default": "new WeakSet()"
            }
          ]
        }
      ],
      "exports": [
        {
          "kind": "js",
          "name": "asPercent",
          "declaration": {
            "name": "asPercent",
            "module": "src/components/common/util.ts"
          }
        },
        {
          "kind": "js",
          "name": "clamp",
          "declaration": {
            "name": "clamp",
            "module": "src/components/common/util.ts"
          }
        },
        {
          "kind": "js",
          "name": "numberOfDecimals",
          "declaration": {
            "name": "numberOfDecimals",
            "module": "src/components/common/util.ts"
          }
        },
        {
          "kind": "js",
          "name": "roundPrecise",
          "declaration": {
            "name": "roundPrecise",
            "module": "src/components/common/util.ts"
          }
        },
        {
          "kind": "js",
          "name": "numberInRangeInclusive",
          "declaration": {
            "name": "numberInRangeInclusive",
            "module": "src/components/common/util.ts"
          }
        },
        {
          "kind": "js",
          "name": "createCounter",
          "declaration": {
            "name": "createCounter",
            "module": "src/components/common/util.ts"
          }
        },
        {
          "kind": "js",
          "name": "isLTR",
          "declaration": {
            "name": "isLTR",
            "module": "src/components/common/util.ts"
          }
        },
        {
          "kind": "js",
          "name": "formatString",
          "declaration": {
            "name": "formatString",
            "module": "src/components/common/util.ts"
          }
        },
        {
          "kind": "js",
          "name": "asNumber",
          "declaration": {
            "name": "asNumber",
            "module": "src/components/common/util.ts"
          }
        },
        {
          "kind": "js",
          "name": "wrap",
          "declaration": {
            "name": "wrap",
            "module": "src/components/common/util.ts"
          }
        },
        {
          "kind": "js",
          "name": "isDefined",
          "declaration": {
            "name": "isDefined",
            "module": "src/components/common/util.ts"
          }
        },
        {
          "kind": "js",
          "name": "iterNodes",
          "declaration": {
            "name": "iterNodes",
            "module": "src/components/common/util.ts"
          }
        },
        {
          "kind": "js",
          "name": "getRoot",
          "declaration": {
            "name": "getRoot",
            "module": "src/components/common/util.ts"
          }
        },
        {
          "kind": "js",
          "name": "getElementByIdFromRoot",
          "declaration": {
            "name": "getElementByIdFromRoot",
            "module": "src/components/common/util.ts"
          }
        },
        {
          "kind": "js",
          "name": "isElement",
          "declaration": {
            "name": "isElement",
            "module": "src/components/common/util.ts"
          }
        },
        {
          "kind": "js",
          "name": "getElementsFromEventPath",
          "declaration": {
            "name": "getElementsFromEventPath",
            "module": "src/components/common/util.ts"
          }
        },
        {
          "kind": "js",
          "name": "findElementFromEventPath",
          "declaration": {
            "name": "findElementFromEventPath",
            "module": "src/components/common/util.ts"
          }
        },
        {
          "kind": "js",
          "name": "groupBy",
          "declaration": {
            "name": "groupBy",
            "module": "src/components/common/util.ts"
          }
        },
        {
          "kind": "js",
          "name": "first",
          "declaration": {
            "name": "first",
            "module": "src/components/common/util.ts"
          }
        },
        {
          "kind": "js",
          "name": "last",
          "declaration": {
            "name": "last",
            "module": "src/components/common/util.ts"
          }
        },
        {
          "kind": "js",
          "name": "modulo",
          "declaration": {
            "name": "modulo",
            "module": "src/components/common/util.ts"
          }
        },
        {
          "kind": "js",
          "name": "take",
          "declaration": {
            "name": "take",
            "module": "src/components/common/util.ts"
          }
        },
        {
          "kind": "js",
          "name": "chunk",
          "declaration": {
            "name": "chunk",
            "module": "src/components/common/util.ts"
          }
        },
        {
          "kind": "js",
          "name": "splitToWords",
          "declaration": {
            "name": "splitToWords",
            "module": "src/components/common/util.ts"
          }
        },
        {
          "kind": "js",
          "name": "toKebabCase",
          "declaration": {
            "name": "toKebabCase",
            "module": "src/components/common/util.ts"
          }
        },
        {
          "kind": "js",
          "name": "isFunction",
          "declaration": {
            "name": "isFunction",
            "module": "src/components/common/util.ts"
          }
        },
        {
          "kind": "js",
          "name": "isString",
          "declaration": {
            "name": "isString",
            "module": "src/components/common/util.ts"
          }
        },
        {
          "kind": "js",
          "name": "isObject",
          "declaration": {
            "name": "isObject",
            "module": "src/components/common/util.ts"
          }
        },
        {
          "kind": "js",
          "name": "isEventListenerObject",
          "declaration": {
            "name": "isEventListenerObject",
            "module": "src/components/common/util.ts"
          }
        },
        {
          "kind": "js",
          "name": "addWeakEventListener",
          "declaration": {
            "name": "addWeakEventListener",
            "module": "src/components/common/util.ts"
          }
        },
        {
          "kind": "js",
          "name": "addSafeEventListener",
          "declaration": {
            "name": "addSafeEventListener",
            "module": "src/components/common/util.ts"
          }
        },
        {
          "kind": "js",
          "name": "isEmpty",
          "declaration": {
            "name": "isEmpty",
            "module": "src/components/common/util.ts"
          }
        },
        {
          "kind": "js",
          "name": "asArray",
          "declaration": {
            "name": "asArray",
            "module": "src/components/common/util.ts"
          }
        },
        {
          "kind": "js",
          "name": "partition",
          "declaration": {
            "name": "partition",
            "module": "src/components/common/util.ts"
          }
        },
        {
          "kind": "js",
          "name": "getCenterPoint",
          "declaration": {
            "name": "getCenterPoint",
            "module": "src/components/common/util.ts"
          }
        },
        {
          "kind": "js",
          "name": "roundByDPR",
          "declaration": {
            "name": "roundByDPR",
            "module": "src/components/common/util.ts"
          }
        },
        {
          "kind": "js",
          "name": "scrollIntoView",
          "declaration": {
            "name": "scrollIntoView",
            "module": "src/components/common/util.ts"
          }
        },
        {
          "kind": "js",
          "name": "isRegExp",
          "declaration": {
            "name": "isRegExp",
            "module": "src/components/common/util.ts"
          }
        },
        {
          "kind": "js",
          "name": "equal",
          "declaration": {
            "name": "equal",
            "module": "src/components/common/util.ts"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "src/components/common/controllers/key-bindings.ts",
      "declarations": [
        {
          "kind": "variable",
          "name": "arrowLeft",
          "type": {
            "text": "'ArrowLeft'"
          },
          "default": "'ArrowLeft'"
        },
        {
          "kind": "variable",
          "name": "arrowRight",
          "type": {
            "text": "'ArrowRight'"
          },
          "default": "'ArrowRight'"
        },
        {
          "kind": "variable",
          "name": "arrowUp",
          "type": {
            "text": "'ArrowUp'"
          },
          "default": "'ArrowUp'"
        },
        {
          "kind": "variable",
          "name": "arrowDown",
          "type": {
            "text": "'ArrowDown'"
          },
          "default": "'ArrowDown'"
        },
        {
          "kind": "variable",
          "name": "enterKey",
          "type": {
            "text": "'Enter'"
          },
          "default": "'Enter'"
        },
        {
          "kind": "variable",
          "name": "spaceBar",
          "type": {
            "text": "' '"
          },
          "default": "' '"
        },
        {
          "kind": "variable",
          "name": "escapeKey",
          "type": {
            "text": "'Escape'"
          },
          "default": "'Escape'"
        },
        {
          "kind": "variable",
          "name": "homeKey",
          "type": {
            "text": "'Home'"
          },
          "default": "'Home'"
        },
        {
          "kind": "variable",
          "name": "endKey",
          "type": {
            "text": "'End'"
          },
          "default": "'End'"
        },
        {
          "kind": "variable",
          "name": "pageUpKey",
          "type": {
            "text": "'PageUp'"
          },
          "default": "'PageUp'"
        },
        {
          "kind": "variable",
          "name": "pageDownKey",
          "type": {
            "text": "'PageDown'"
          },
          "default": "'PageDown'"
        },
        {
          "kind": "variable",
          "name": "tabKey",
          "type": {
            "text": "'Tab'"
          },
          "default": "'Tab'"
        },
        {
          "kind": "variable",
          "name": "altKey",
          "type": {
            "text": "'Alt'"
          },
          "default": "'Alt'"
        },
        {
          "kind": "variable",
          "name": "ctrlKey",
          "type": {
            "text": "'Ctrl'"
          },
          "default": "'Ctrl'"
        },
        {
          "kind": "variable",
          "name": "metaKey",
          "type": {
            "text": "'Meta'"
          },
          "default": "'Meta'"
        },
        {
          "kind": "variable",
          "name": "shiftKey",
          "type": {
            "text": "'Shift'"
          },
          "default": "'Shift'"
        },
        {
          "kind": "class",
          "description": "",
          "name": "KeyBindingController",
          "members": [
            {
              "kind": "field",
              "name": "_defaultOptions",
              "type": {
                "text": "KeyBindingControllerOptions"
              },
              "privacy": "private",
              "static": true,
              "readonly": true,
              "default": "{ skip: ['input', 'textarea', 'select'], }"
            },
            {
              "kind": "field",
              "name": "_host",
              "type": {
                "text": "ReactiveControllerHost & Element"
              },
              "privacy": "private",
              "readonly": true,
              "default": "host"
            },
            {
              "kind": "field",
              "name": "_ref",
              "type": {
                "text": "Ref | undefined"
              },
              "privacy": "private",
              "readonly": true
            },
            {
              "kind": "field",
              "name": "_abortHandle",
              "privacy": "private",
              "readonly": true
            },
            {
              "kind": "field",
              "name": "_bindings",
              "privacy": "private",
              "readonly": true,
              "default": "new Map<string, KeyBinding>()"
            },
            {
              "kind": "field",
              "name": "_allowedKeys",
              "privacy": "private",
              "readonly": true,
              "default": "new Set<string>()"
            },
            {
              "kind": "field",
              "name": "_pressedKeys",
              "privacy": "private",
              "readonly": true,
              "default": "new Set<string>()"
            },
            {
              "kind": "field",
              "name": "_options",
              "type": {
                "text": "KeyBindingControllerOptions"
              },
              "privacy": "private",
              "readonly": true,
              "default": "{ ...KeyBindingController._defaultOptions, ...options }"
            },
            {
              "kind": "field",
              "name": "_skipSelector",
              "type": {
                "text": "string | undefined"
              },
              "privacy": "private",
              "readonly": true
            },
            {
              "kind": "field",
              "name": "_observedElement",
              "type": {
                "text": "Element | undefined"
              },
              "privacy": "private"
            },
            {
              "kind": "field",
              "name": "_element",
              "type": {
                "text": "Element"
              },
              "privacy": "private",
              "readonly": true
            },
            {
              "kind": "method",
              "name": "_applyEventModifiers",
              "privacy": "private",
              "return": {
                "type": {
                  "text": "void"
                }
              },
              "parameters": [
                {
                  "name": "binding",
                  "type": {
                    "text": "KeyBinding"
                  }
                },
                {
                  "name": "event",
                  "type": {
                    "text": "KeyboardEvent"
                  }
                }
              ],
              "description": "Checks and executes any event modifiers that are present in the matched binding."
            },
            {
              "kind": "method",
              "name": "_bindingMatches",
              "privacy": "private",
              "return": {
                "type": {
                  "text": "boolean"
                }
              },
              "parameters": [
                {
                  "name": "binding",
                  "type": {
                    "text": "KeyBinding"
                  }
                },
                {
                  "name": "event",
                  "type": {
                    "text": "KeyboardEvent"
                  }
                }
              ]
            },
            {
              "kind": "method",
              "name": "_shouldSkip",
              "privacy": "private",
              "return": {
                "type": {
                  "text": "boolean"
                }
              },
              "parameters": [
                {
                  "name": "event",
                  "type": {
                    "text": "KeyboardEvent"
                  }
                }
              ]
            },
            {
              "kind": "method",
              "name": "set",
              "privacy": "public",
              "parameters": [
                {
                  "name": "key",
                  "type": {
                    "text": "string | string[]"
                  }
                },
                {
                  "name": "handler",
                  "type": {
                    "text": "KeyBindingHandler"
                  }
                },
                {
                  "name": "bindingOptions",
                  "optional": true,
                  "type": {
                    "text": "KeyBindingOptions"
                  }
                }
              ],
              "description": "Registers a keybinding handler."
            },
            {
              "kind": "method",
              "name": "setActivateHandler",
              "privacy": "public",
              "parameters": [
                {
                  "name": "handler",
                  "type": {
                    "text": "KeyBindingHandler"
                  }
                },
                {
                  "name": "options",
                  "optional": true,
                  "type": {
                    "text": "KeyBindingOptions"
                  }
                }
              ],
              "description": "Register a handler function which is called when the target receives a key\nwhich \"activates\" it.\n\nIn the browser context this is usually either an Enter and Space bar keypress."
            },
            {
              "kind": "method",
              "name": "observeElement",
              "privacy": "public",
              "return": {
                "type": {
                  "text": "KeyBindingObserverCleanup"
                }
              },
              "parameters": [
                {
                  "name": "element",
                  "type": {
                    "text": "Element"
                  }
                }
              ],
              "description": "Sets the controller to listen for keyboard events on an arbitrary `element` in the page context.\nAll the configuration and event handlers are applied as well.\n\nReturns an object with an `unsubscribe` function which should be called when the observing of keyboard\nevents on the `element` should cease."
            }
          ]
        },
        {
          "kind": "function",
          "name": "addKeybindings",
          "return": {
            "type": {
              "text": "KeyBindingController"
            }
          },
          "parameters": [
            {
              "name": "element",
              "type": {
                "text": "ReactiveControllerHost & Element"
              }
            },
            {
              "name": "options",
              "optional": true,
              "type": {
                "text": "KeyBindingControllerOptions"
              }
            }
          ],
          "description": "Creates a keybinding controller and adds to it to the passed `element`\nwith the provided `options`."
        }
      ],
      "exports": [
        {
          "kind": "js",
          "name": "arrowLeft",
          "declaration": {
            "name": "arrowLeft",
            "module": "src/components/common/controllers/key-bindings.ts"
          }
        },
        {
          "kind": "js",
          "name": "arrowRight",
          "declaration": {
            "name": "arrowRight",
            "module": "src/components/common/controllers/key-bindings.ts"
          }
        },
        {
          "kind": "js",
          "name": "arrowUp",
          "declaration": {
            "name": "arrowUp",
            "module": "src/components/common/controllers/key-bindings.ts"
          }
        },
        {
          "kind": "js",
          "name": "arrowDown",
          "declaration": {
            "name": "arrowDown",
            "module": "src/components/common/controllers/key-bindings.ts"
          }
        },
        {
          "kind": "js",
          "name": "enterKey",
          "declaration": {
            "name": "enterKey",
            "module": "src/components/common/controllers/key-bindings.ts"
          }
        },
        {
          "kind": "js",
          "name": "spaceBar",
          "declaration": {
            "name": "spaceBar",
            "module": "src/components/common/controllers/key-bindings.ts"
          }
        },
        {
          "kind": "js",
          "name": "escapeKey",
          "declaration": {
            "name": "escapeKey",
            "module": "src/components/common/controllers/key-bindings.ts"
          }
        },
        {
          "kind": "js",
          "name": "homeKey",
          "declaration": {
            "name": "homeKey",
            "module": "src/components/common/controllers/key-bindings.ts"
          }
        },
        {
          "kind": "js",
          "name": "endKey",
          "declaration": {
            "name": "endKey",
            "module": "src/components/common/controllers/key-bindings.ts"
          }
        },
        {
          "kind": "js",
          "name": "pageUpKey",
          "declaration": {
            "name": "pageUpKey",
            "module": "src/components/common/controllers/key-bindings.ts"
          }
        },
        {
          "kind": "js",
          "name": "pageDownKey",
          "declaration": {
            "name": "pageDownKey",
            "module": "src/components/common/controllers/key-bindings.ts"
          }
        },
        {
          "kind": "js",
          "name": "tabKey",
          "declaration": {
            "name": "tabKey",
            "module": "src/components/common/controllers/key-bindings.ts"
          }
        },
        {
          "kind": "js",
          "name": "altKey",
          "declaration": {
            "name": "altKey",
            "module": "src/components/common/controllers/key-bindings.ts"
          }
        },
        {
          "kind": "js",
          "name": "ctrlKey",
          "declaration": {
            "name": "ctrlKey",
            "module": "src/components/common/controllers/key-bindings.ts"
          }
        },
        {
          "kind": "js",
          "name": "metaKey",
          "declaration": {
            "name": "metaKey",
            "module": "src/components/common/controllers/key-bindings.ts"
          }
        },
        {
          "kind": "js",
          "name": "shiftKey",
          "declaration": {
            "name": "shiftKey",
            "module": "src/components/common/controllers/key-bindings.ts"
          }
        },
        {
          "kind": "js",
          "name": "addKeybindings",
          "declaration": {
            "name": "addKeybindings",
            "module": "src/components/common/controllers/key-bindings.ts"
          }
        },
        {
          "kind": "js",
          "name": "KeyBindingHandler",
          "declaration": {
            "name": "KeyBindingHandler",
            "module": "src/components/common/controllers/key-bindings.ts"
          }
        },
        {
          "kind": "js",
          "name": "KeyBindingObserverCleanup",
          "declaration": {
            "name": "KeyBindingObserverCleanup",
            "module": "src/components/common/controllers/key-bindings.ts"
          }
        },
        {
          "kind": "js",
          "name": "KeyBindingSkipCallback",
          "declaration": {
            "name": "KeyBindingSkipCallback",
            "module": "src/components/common/controllers/key-bindings.ts"
          }
        },
        {
          "kind": "js",
          "name": "KeyBindingTrigger",
          "declaration": {
            "name": "KeyBindingTrigger",
            "module": "src/components/common/controllers/key-bindings.ts"
          }
        },
        {
          "kind": "js",
          "name": "KeyBindingOptions",
          "declaration": {
            "name": "KeyBindingOptions",
            "module": "src/components/common/controllers/key-bindings.ts"
          }
        },
        {
          "kind": "js",
          "name": "KeyBindingController",
          "declaration": {
            "name": "KeyBindingController",
            "module": "src/components/common/controllers/key-bindings.ts"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "src/animations/types.ts",
      "declarations": [
        {
          "kind": "function",
          "name": "animation",
          "return": {
            "type": {
              "text": "AnimationReferenceMetadata"
            }
          },
          "parameters": [
            {
              "name": "steps",
              "type": {
                "text": "Keyframe[]"
              }
            },
            {
              "name": "options",
              "optional": true,
              "type": {
                "text": "KeyframeAnimationOptions"
              }
            }
          ]
        }
      ],
      "exports": [
        {
          "kind": "js",
          "name": "animation",
          "declaration": {
            "name": "animation",
            "module": "src/animations/types.ts"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "src/animations/player.ts",
      "declarations": [
        {
          "kind": "class",
          "description": "",
          "name": "AnimationController",
          "members": [
            {
              "kind": "field",
              "name": "target",
              "privacy": "protected",
              "readonly": true
            },
            {
              "kind": "method",
              "name": "parseKeyframes",
              "privacy": "private",
              "parameters": [
                {
                  "name": "keyframes",
                  "type": {
                    "text": "Keyframe[]"
                  }
                }
              ]
            },
            {
              "kind": "method",
              "name": "play",
              "privacy": "public",
              "parameters": [
                {
                  "name": "animation",
                  "type": {
                    "text": "AnimationReferenceMetadata"
                  }
                }
              ]
            },
            {
              "kind": "method",
              "name": "stopAll",
              "privacy": "public"
            },
            {
              "kind": "method",
              "name": "playExclusive",
              "privacy": "public",
              "parameters": [
                {
                  "name": "animation",
                  "type": {
                    "text": "AnimationReferenceMetadata"
                  }
                }
              ]
            },
            {
              "kind": "method",
              "name": "hostConnected",
              "privacy": "public"
            }
          ]
        },
        {
          "kind": "function",
          "name": "addAnimationController",
          "parameters": [
            {
              "name": "host",
              "type": {
                "text": "ReactiveControllerHost & HTMLElement"
              }
            },
            {
              "name": "target",
              "optional": true,
              "type": {
                "text": "Ref<HTMLElement> | HTMLElement"
              }
            }
          ],
          "description": "Creates and attaches an animation player instance to the passed in `host` element.\nThe player will run animations on the passed in `target`, or if `target` is undefined,\nthe host element itself."
        },
        {
          "kind": "function",
          "name": "startViewTransition",
          "return": {
            "type": {
              "text": "ViewTransitionResult"
            }
          },
          "parameters": [
            {
              "name": "callback",
              "optional": true,
              "type": {
                "text": "ViewTransitionUpdateCallback"
              }
            }
          ]
        }
      ],
      "exports": [
        {
          "kind": "js",
          "name": "addAnimationController",
          "declaration": {
            "name": "addAnimationController",
            "module": "src/animations/player.ts"
          }
        },
        {
          "kind": "js",
          "name": "startViewTransition",
          "declaration": {
            "name": "startViewTransition",
            "module": "src/animations/player.ts"
          }
        },
        {
          "kind": "js",
          "name": "AnimationController",
          "declaration": {
            "name": "AnimationController",
            "module": "src/animations/player.ts"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "src/animations/easings.ts",
      "declarations": [],
      "exports": [
        {
          "kind": "js",
          "name": "EaseIn",
          "declaration": {
            "name": "EaseIn",
            "module": "src/animations/easings.ts"
          }
        },
        {
          "kind": "js",
          "name": "EaseOut",
          "declaration": {
            "name": "EaseOut",
            "module": "src/animations/easings.ts"
          }
        },
        {
          "kind": "js",
          "name": "EaseInOut",
          "declaration": {
            "name": "EaseInOut",
            "module": "src/animations/easings.ts"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "src/animations/presets/grow/index.ts",
      "declarations": [
        {
          "kind": "function",
          "name": "growVerIn",
          "parameters": [
            {
              "name": "options",
              "default": "baseOptions"
            }
          ]
        },
        {
          "kind": "function",
          "name": "growVerOut",
          "parameters": [
            {
              "name": "options",
              "default": "baseOptions"
            }
          ]
        }
      ],
      "exports": [
        {
          "kind": "js",
          "name": "growVerIn",
          "declaration": {
            "name": "growVerIn",
            "module": "src/animations/presets/grow/index.ts"
          }
        },
        {
          "kind": "js",
          "name": "growVerOut",
          "declaration": {
            "name": "growVerOut",
            "module": "src/animations/presets/grow/index.ts"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "src/components/common/mixins/constructor.ts",
      "declarations": [],
      "exports": []
    },
    {
      "kind": "javascript-module",
      "path": "src/components/common/mixins/event-emitter.ts",
      "declarations": [
        {
          "kind": "class",
          "description": "",
          "name": "EventEmitterInterface",
          "members": [
            {
              "kind": "method",
              "name": "addEventListener",
              "privacy": "public",
              "return": {
                "type": {
                  "text": "void"
                }
              },
              "parameters": [
                {
                  "name": "type",
                  "type": {
                    "text": "K"
                  }
                },
                {
                  "name": "listener",
                  "type": {
                    "text": "(this: HTMLElement, ev: M[K]) => any"
                  }
                },
                {
                  "name": "options",
                  "optional": true,
                  "type": {
                    "text": "boolean | AddEventListenerOptions"
                  }
                }
              ]
            },
            {
              "kind": "method",
              "name": "addEventListener",
              "privacy": "public",
              "return": {
                "type": {
                  "text": "void"
                }
              },
              "parameters": [
                {
                  "name": "type",
                  "type": {
                    "text": "string"
                  }
                },
                {
                  "name": "listener",
                  "type": {
                    "text": "EventListenerOrEventListenerObject"
                  }
                },
                {
                  "name": "options",
                  "optional": true,
                  "type": {
                    "text": "boolean | AddEventListenerOptions"
                  }
                }
              ]
            },
            {
              "kind": "method",
              "name": "removeEventListener",
              "privacy": "public",
              "return": {
                "type": {
                  "text": "void"
                }
              },
              "parameters": [
                {
                  "name": "type",
                  "type": {
                    "text": "K"
                  }
                },
                {
                  "name": "listener",
                  "type": {
                    "text": "(this: HTMLElement, ev: M[K]) => any"
                  }
                },
                {
                  "name": "options",
                  "optional": true,
                  "type": {
                    "text": "boolean | EventListenerOptions"
                  }
                }
              ]
            },
            {
              "kind": "method",
              "name": "removeEventListener",
              "privacy": "public",
              "return": {
                "type": {
                  "text": "void"
                }
              },
              "parameters": [
                {
                  "name": "type",
                  "type": {
                    "text": "string"
                  }
                },
                {
                  "name": "listener",
                  "type": {
                    "text": "EventListenerOrEventListenerObject"
                  }
                },
                {
                  "name": "options",
                  "optional": true,
                  "type": {
                    "text": "boolean | EventListenerOptions"
                  }
                }
              ]
            },
            {
              "kind": "method",
              "name": "emitEvent",
              "privacy": "public",
              "return": {
                "type": {
                  "text": "boolean"
                }
              },
              "parameters": [
                {
                  "name": "type",
                  "type": {
                    "text": "K"
                  }
                },
                {
                  "name": "eventInitDict",
                  "optional": true,
                  "type": {
                    "text": "CustomEventInit<D>"
                  }
                }
              ]
            }
          ]
        },
        {
          "kind": "function",
          "name": "EventEmitterMixin",
          "return": {
            "type": {
              "text": "Constructor<EventEmitterInterface<E>> & T"
            }
          },
          "parameters": [
            {
              "name": "superClass",
              "type": {
                "text": "T"
              }
            }
          ]
        },
        {
          "kind": "mixin",
          "description": "",
          "name": "EventEmitterMixin",
          "members": [
            {
              "kind": "method",
              "name": "addEventListener",
              "privacy": "private",
              "return": {
                "type": {
                  "text": "void"
                }
              },
              "parameters": [
                {
                  "name": "type",
                  "type": {
                    "text": "K"
                  }
                },
                {
                  "name": "listener",
                  "type": {
                    "text": "(this: HTMLElement, ev: M[K]) => any"
                  }
                },
                {
                  "name": "options",
                  "optional": true,
                  "type": {
                    "text": "boolean | AddEventListenerOptions"
                  }
                }
              ]
            },
            {
              "kind": "method",
              "name": "addEventListener",
              "privacy": "public",
              "return": {
                "type": {
                  "text": "void"
                }
              },
              "parameters": [
                {
                  "name": "type",
                  "type": {
                    "text": "string"
                  }
                },
                {
                  "name": "listener",
                  "type": {
                    "text": "EventListenerOrEventListenerObject"
                  }
                },
                {
                  "name": "options",
                  "optional": true,
                  "type": {
                    "text": "boolean | AddEventListenerOptions"
                  }
                }
              ]
            },
            {
              "kind": "method",
              "name": "removeEventListener",
              "privacy": "private",
              "return": {
                "type": {
                  "text": "void"
                }
              },
              "parameters": [
                {
                  "name": "type",
                  "type": {
                    "text": "K"
                  }
                },
                {
                  "name": "listener",
                  "type": {
                    "text": "(this: HTMLElement, ev: M[K]) => any"
                  }
                },
                {
                  "name": "options",
                  "optional": true,
                  "type": {
                    "text": "boolean | EventListenerOptions"
                  }
                }
              ]
            },
            {
              "kind": "method",
              "name": "removeEventListener",
              "privacy": "public",
              "return": {
                "type": {
                  "text": "void"
                }
              },
              "parameters": [
                {
                  "name": "type",
                  "type": {
                    "text": "string"
                  }
                },
                {
                  "name": "listener",
                  "type": {
                    "text": "EventListenerOrEventListenerObject"
                  }
                },
                {
                  "name": "options",
                  "optional": true,
                  "type": {
                    "text": "boolean | EventListenerOptions"
                  }
                }
              ]
            },
            {
              "kind": "method",
              "name": "emitEvent",
              "privacy": "private",
              "return": {
                "type": {
                  "text": "boolean"
                }
              },
              "parameters": [
                {
                  "name": "type",
                  "type": {
                    "text": "K"
                  }
                },
                {
                  "name": "eventInitDict",
                  "optional": true,
                  "type": {
                    "text": "CustomEventInit<D>"
                  }
                }
              ]
            }
          ],
          "events": [
            {
              "type": {
                "text": "CustomEvent"
              }
            }
          ],
          "parameters": [
            {
              "name": "superClass",
              "type": {
                "text": "T"
              }
            }
          ]
        }
      ],
      "exports": [
        {
          "kind": "js",
          "name": "EventEmitterInterface",
          "declaration": {
            "name": "EventEmitterInterface",
            "module": "src/components/common/mixins/event-emitter.ts"
          }
        },
        {
          "kind": "js",
          "name": "EventEmitterMixin",
          "declaration": {
            "name": "EventEmitterMixin",
            "module": "src/components/common/mixins/event-emitter.ts"
          }
        },
        {
          "kind": "js",
          "name": "EventEmitterMixin",
          "declaration": {
            "name": "EventEmitterMixin",
            "module": "src/components/common/mixins/event-emitter.ts"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "src/components/common/decorators/blazorInclude.ts",
      "declarations": [
        {
          "kind": "function",
          "name": "blazorInclude",
          "description": "Indicates a member should be included in the Blazor API even if non-public.",
          "return": {
            "type": {
              "text": ""
            }
          }
        }
      ],
      "exports": [
        {
          "kind": "js",
          "name": "blazorInclude",
          "declaration": {
            "name": "blazorInclude",
            "module": "src/components/common/decorators/blazorInclude.ts"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "src/components/common/decorators/watch.ts",
      "declarations": [
        {
          "kind": "function",
          "name": "watch",
          "parameters": [
            {
              "name": "propName",
              "type": {
                "text": "string"
              }
            },
            {
              "name": "options",
              "optional": true,
              "type": {
                "text": "WatchOptions"
              }
            }
          ]
        }
      ],
      "exports": [
        {
          "kind": "js",
          "name": "watch",
          "declaration": {
            "name": "watch",
            "module": "src/components/common/decorators/watch.ts"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "src/components/icon/registry/default-map.ts",
      "declarations": [
        {
          "kind": "class",
          "description": "",
          "name": "DefaultMap",
          "members": [
            {
              "kind": "field",
              "name": "_defaultValue",
              "type": {
                "text": "() => U"
              },
              "privacy": "private",
              "default": "defaultValue"
            },
            {
              "kind": "field",
              "name": "_map",
              "privacy": "private",
              "default": "new Map<T, U>()"
            },
            {
              "kind": "method",
              "name": "getOrCreate",
              "privacy": "public",
              "parameters": [
                {
                  "name": "key",
                  "type": {
                    "text": "T"
                  }
                }
              ]
            },
            {
              "kind": "method",
              "name": "get",
              "privacy": "public",
              "parameters": [
                {
                  "name": "key",
                  "type": {
                    "text": "T"
                  }
                }
              ]
            },
            {
              "kind": "method",
              "name": "set",
              "privacy": "public",
              "parameters": [
                {
                  "name": "key",
                  "type": {
                    "text": "T"
                  }
                },
                {
                  "name": "value",
                  "type": {
                    "text": "U"
                  }
                }
              ]
            },
            {
              "kind": "method",
              "name": "has",
              "privacy": "public",
              "parameters": [
                {
                  "name": "key",
                  "type": {
                    "text": "T"
                  }
                }
              ]
            },
            {
              "kind": "method",
              "name": "toMap",
              "privacy": "public"
            },
            {
              "kind": "method",
              "name": "entries",
              "privacy": "public"
            }
          ]
        },
        {
          "kind": "function",
          "name": "createIconDefaultMap"
        }
      ],
      "exports": [
        {
          "kind": "js",
          "name": "DefaultMap",
          "declaration": {
            "name": "DefaultMap",
            "module": "src/components/icon/registry/default-map.ts"
          }
        },
        {
          "kind": "js",
          "name": "createIconDefaultMap",
          "declaration": {
            "name": "createIconDefaultMap",
            "module": "src/components/icon/registry/default-map.ts"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "src/components/icon/registry/types.ts",
      "declarations": [],
      "exports": []
    },
    {
      "kind": "javascript-module",
      "path": "src/components/icon/icon-references.ts",
      "declarations": [
        {
          "kind": "variable",
          "name": "iconReferences",
          "type": {
            "text": "IconReference[]"
          },
          "default": "[]"
        }
      ],
      "exports": [
        {
          "kind": "js",
          "name": "iconReferences",
          "declaration": {
            "name": "iconReferences",
            "module": "src/components/icon/icon-references.ts"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "src/components/icon/icon-state.broadcast.ts",
      "declarations": [
        {
          "kind": "class",
          "description": "",
          "name": "IconsStateBroadcast",
          "members": [
            {
              "kind": "field",
              "name": "channel",
              "type": {
                "text": "BroadcastChannel | null"
              },
              "privacy": "private"
            },
            {
              "kind": "field",
              "name": "collections",
              "type": {
                "text": "IconsCollection<SvgIcon>"
              },
              "privacy": "private",
              "default": "collections"
            },
            {
              "kind": "field",
              "name": "refsCollection",
              "type": {
                "text": "IconsCollection<IconMeta>"
              },
              "privacy": "private",
              "default": "refsCollection"
            },
            {
              "kind": "field",
              "name": "origin",
              "type": {
                "text": "string"
              },
              "privacy": "private",
              "static": true,
              "readonly": true,
              "default": "'igniteui-webcomponents'"
            },
            {
              "kind": "method",
              "name": "send",
              "privacy": "public",
              "parameters": [
                {
                  "name": "data",
                  "type": {
                    "text": "BroadcastIconsChangeMessage"
                  }
                }
              ]
            },
            {
              "kind": "method",
              "name": "handleEvent",
              "privacy": "public",
              "parameters": [
                {
                  "name": "{ data }",
                  "type": {
                    "text": "MessageEvent<BroadcastIconsChangeMessage>"
                  }
                }
              ]
            },
            {
              "kind": "method",
              "name": "create",
              "privacy": "private"
            },
            {
              "kind": "method",
              "name": "dispose",
              "privacy": "private"
            },
            {
              "kind": "method",
              "name": "getUserRefsCollection",
              "privacy": "private",
              "parameters": [
                {
                  "name": "collections",
                  "type": {
                    "text": "IconsCollection<IconMeta>"
                  }
                }
              ]
            },
            {
              "kind": "method",
              "name": "getUserSetCollection",
              "privacy": "private",
              "parameters": [
                {
                  "name": "collections",
                  "type": {
                    "text": "IconsCollection<SvgIcon>"
                  }
                }
              ]
            }
          ]
        }
      ],
      "exports": [
        {
          "kind": "js",
          "name": "IconsStateBroadcast",
          "declaration": {
            "name": "IconsStateBroadcast",
            "module": "src/components/icon/icon-state.broadcast.ts"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "src/components/icon/internal-icons-lib.ts",
      "declarations": [
        {
          "kind": "variable",
          "name": "internalIcons",
          "default": "new Map<string, SvgIcon>( Object.entries({ navigate_before: { svg: `<svg xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 24 24\"><path d=\"M0 0h24v24H0V0z\" fill=\"none\"/><path d=\"M15.61 7.41L14.2 6l-6 6 6 6 1.41-1.41L11.03 12l4.58-4.59z\"/></svg>`, }, navigate_next: { svg: `<svg xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 24 24\"><path d=\"M0 0h24v24H0V0z\" fill=\"none\"/><path d=\"M10.02 6L8.61 7.41 13.19 12l-4.58 4.59L10.02 18l6-6-6-6z\"/></svg>`, }, keyboard_arrow_up: { svg: `<svg xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 24 24\"><path d=\"M0 0h24v24H0z\" fill=\"none\"/><path d=\"M7.41 15.41L12 10.83l4.59 4.58L18 14l-6-6-6 6z\"/></svg>`, }, keyboard_arrow_down: { svg: `<svg xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 24 24\"><path d=\"M0 0h24v24H0V0z\" fill=\"none\"/><path d=\"M7.41 8.59L12 13.17l4.59-4.58L18 10l-6 6-6-6 1.41-1.41z\"/></svg>`, }, keyboard_arrow_right: { svg: `<svg xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 24 24\"><path d=\"M0 0h24v24H0V0z\" fill=\"none\"/><path d=\"M8.59 16.59L13.17 12 8.59 7.41 10 6l6 6-6 6-1.41-1.41z\"/></svg>`, }, keyboard_arrow_left: { svg: `<svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24\" viewBox=\"0 0 24 24\" width=\"24\"><path d=\"M0 0h24v24H0V0z\" fill=\"none\"/><path d=\"M15.41 16.59L10.83 12l4.58-4.59L14 6l-6 6 6 6 1.41-1.41z\"/></svg>`, }, chip_cancel: { svg: `<svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24\" viewBox=\"0 0 24 24\" width=\"24\"><path d=\"M0 0h24v24H0z\" fill=\"none\"/><path d=\"M12 2C6.47 2 2 6.47 2 12s4.47 10 10 10 10-4.47 10-10S17.53 2 12 2zm5 13.59L15.59 17 12 13.41 8.41 17 7 15.59 10.59 12 7 8.41 8.41 7 12 10.59 15.59 7 17 8.41 13.41 12 17 15.59z\"/></svg>`, }, chip_select: { svg: `<svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24\" viewBox=\"0 0 24 24\" width=\"24\"><path d=\"M0 0h24v24H0z\" fill=\"none\"/><path d=\"M9 16.17L4.83 12l-1.42 1.41L9 19 21 7l-1.41-1.41z\"/></svg>`, }, star: { svg: `<svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\" viewBox=\"0 0 24 24\" width=\"24px\"><path d=\"M0 0h24v24H0z\" fill=\"none\"/><path d=\"M0 0h24v24H0z\" fill=\"none\"/><path d=\"M12 17.27L18.18 21l-1.64-7.03L22 9.24l-7.19-.61L12 2 9.19 8.63 2 9.24l5.46 4.73L5.82 21z\"/></svg>`, }, star_border: { svg: `<svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\" viewBox=\"0 0 24 24\" width=\"24px\"><path d=\"M0 0h24v24H0z\" fill=\"none\"/><path d=\"M22 9.24l-7.19-.62L12 2 9.19 8.63 2 9.24l5.46 4.73L5.82 21 12 17.27 18.18 21l-1.63-7.03L22 9.24zM12 15.4l-3.76 2.27 1-4.28-3.32-2.88 4.38-.38L12 6.1l1.71 4.04 4.38.38-3.32 2.88 1 4.28L12 15.4z\"/></svg>`, }, case_sensitive: { svg: `<svg xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 24 24\" preserveAspectRatio=\"xMidYMid meet\"><path d=\"M21.2 16.5c0-.2-.1-.5-.1-.7v-4.4c0-.4-.1-.8-.3-1.2-.2-.3-.5-.6-.8-.7-.3-.2-.7-.3-1.1-.3-.4-.1-.8-.1-1.2-.1-.5 0-.9 0-1.4.1-.4.1-.8.3-1.2.5-.3.2-.6.5-.8.9s-.3.9-.3 1.3h1.4c0-.5.2-1 .7-1.3.5-.2 1-.4 1.5-.3.2 0 .5 0 .7.1.2 0 .4.1.6.2.2.1.3.2.5.4.1.2.2.5.2.7s-.1.4-.2.6c-.2.2-.4.3-.6.3-.3.1-.6.1-.9.2-.4 0-.7.1-1.1.2-.4.1-.7.1-1.1.2-.3.1-.7.2-1 .4s-.5.5-.7.8c-.2.4-.3.8-.3 1.2s.1.8.2 1.1c.1.3.4.5.6.7.3.2.6.3.9.4.9.2 1.9.2 2.8-.2.5-.2 1-.6 1.4-1 0 .4.1.7.3 1 .2.2.6.3.9.3.4 0 .7-.1 1-.2v-1.1c-.1 0-.3.1-.4.1-.1.1-.2 0-.2-.2zm-1.5-1.7c0 .2-.1.4-.2.6-.1.2-.3.5-.5.6-.2.2-.5.4-.8.5-.4.1-.8.2-1.2.2-.2 0-.4 0-.6-.1-.2 0-.4-.1-.5-.2-.2-.1-.3-.2-.4-.4-.1-.2-.2-.4-.1-.6 0-.3.1-.6.2-.8.2-.2.4-.4.6-.5.3-.1.6-.2.9-.2s.7-.1 1-.1.6-.1.9-.1.5-.1.7-.3v1.4zm-9.6-.4l1.3 3.6h1.8L8.5 6H6.7L2 18h1.7L5 14.4h5.1zm-2.5-7l2.1 5.5H5.5l2.1-5.5z\"></path></svg>`, }, clear: { svg: `<svg xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 24 24\"><path d=\"M0 0h24v24H0z\" fill=\"none\"/><path d=\"M19 6.41L17.59 5 12 10.59 6.41 5 5 6.41 10.59 12 5 17.59 6.41 19 12 13.41 17.59 19 19 17.59 13.41 12z\"/></svg>`, }, arrow_drop_up: { svg: `<svg xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 24 24\"><path d=\"M0 0h24v24H0z\" fill=\"none\"/><path d=\"M7 14l5-5 5 5z\"/></svg>`, }, arrow_drop_down: { svg: `<svg xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 24 24\"><path d=\"M0 0h24v24H0z\" fill=\"none\"/><path d=\"M7 10l5 5 5-5z\"/></svg>`, }, arrow_back: { svg: `<svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24\" viewBox=\"0 0 24 24\" width=\"24\"><path d=\"M0 0h24v24H0z\" fill=\"none\"/><path d=\"M20 11H7.83l5.59-5.59L12 4l-8 8 8 8 1.41-1.41L7.83 13H20v-2z\"/></svg>`, }, arrow_forward: { svg: `<svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24\" viewBox=\"0 0 24 24\" width=\"24\"><path d=\"M0 0h24v24H0z\" fill=\"none\"/><path d=\"M12 4l-1.41 1.41L16.17 11H4v2h12.17l-5.58 5.59L12 20l8-8z\"/></svg>`, }, arrow_downward: { svg: `<svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\" viewBox=\"0 0 24 24\" width=\"24px\"><path d=\"M0 0h24v24H0V0z\" fill=\"none\"/><path d=\"M20 12l-1.41-1.41L13 16.17V4h-2v12.17l-5.58-5.59L4 12l8 8 8-8z\"/></svg>`, }, arrow_upward: { svg: `<svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\" viewBox=\"0 0 24 24\" width=\"24px\"><path d=\"M0 0h24v24H0V0z\" fill=\"none\"/><path d=\"M4 12l1.41 1.41L11 7.83V20h2V7.83l5.58 5.59L20 12l-8-8-8 8z\"/></svg>`, }, calendar: { svg: `<svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24\" viewBox=\"0 -960 960 960\" width=\"24\"><path d=\"M200-80q-33 0-56.5-23.5T120-160v-560q0-33 23.5-56.5T200-800h40v-80h80v80h320v-80h80v80h40q33 0 56.5 23.5T840-720v560q0 33-23.5 56.5T760-80H200Zm0-80h560v-400H200v400Zm0-480h560v-80H200v80Zm0 0v-80 80Z\"/></svg>`, }, calendar_today: { svg: `<svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24\" viewBox=\"0 0 24 24\" width=\"24\"><path d=\"M0 0h24v24H0z\" fill=\"none\"/><path d=\"M20 3h-1V1h-2v2H7V1H5v2H4c-1.1 0-2 .9-2 2v16c0 1.1.9 2 2 2h16c1.1 0 2-.9 2-2V5c0-1.1-.9-2-2-2zm0 18H4V8h16v13z\"/></svg>`, }, expand_content: { svg: `<svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\" viewBox=\"0 -960 960 960\" width=\"24px\"><path d=\"M200-200v-240h80v160h160v80H200Zm480-320v-160H520v-80h240v240h-80Z\"/></svg>`, }, indigo_expand_content: { svg: `<svg width=\"24\" height=\"24\" viewBox=\"0 0 24 24\" fill=\"none\" xmlns=\"http://www.w3.org/2000/svg\"> <path d=\"M21 9C21 9.82843 20.3284 10.5 19.5 10.5C18.6716 10.5 18 9.82843 18 9V6H15C14.1716 6 13.5 5.32843 13.5 4.5C13.5 3.67157 14.1716 3 15 3L19.5 3C20.3284 3 21 3.67218 21 4.50061V9Z\"/> <path d=\"M3 15C3 14.1716 3.67157 13.5 4.5 13.5C5.32843 13.5 6 14.1716 6 15V18H9C9.82843 18 10.5 18.6716 10.5 19.5C10.5 20.3284 9.82843 21 9 21H4.5C3.67157 21 3 20.3278 3 19.4994V15Z\"/> </svg> `, }, collapse_content: { svg: `<svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\" viewBox=\"0 -960 960 960\" width=\"24px\"><path d=\"M440-440v240h-80v-160H200v-80h240Zm160-320v160h160v80H520v-240h80Z\"/></svg>`, }, indigo_collapse_content: { svg: `<svg width=\"24\" height=\"24\" viewBox=\"0 0 24 24\" fill=\"none\" xmlns=\"http://www.w3.org/2000/svg\"> <path d=\"M15 3C14.1716 3 13.5 3.67157 13.5 4.5L13.5 8.9994C13.5 9.82782 14.1716 10.5 15 10.5L19.5 10.5C20.3284 10.5 21 9.82843 21 9C21 8.17158 20.3284 7.5 19.5 7.5L16.5 7.5L16.5 4.5C16.5 3.67157 15.8284 3 15 3Z\"/> <path d=\"M9 21C9.82842 21 10.5 20.3284 10.5 19.5V15.0006C10.5 14.1722 9.82843 13.5 9 13.5L4.5 13.5C3.67157 13.5 3 14.1716 3 15C3 15.8284 3.67157 16.5 4.5 16.5H7.5V19.5C7.5 20.3284 8.17157 21 9 21Z\"/> </svg> `, }, fullscreen: { svg: `<svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\" viewBox=\"0 -960 960 960\" width=\"24px\"><path d=\"M120-120v-200h80v120h120v80H120Zm520 0v-80h120v-120h80v200H640ZM120-640v-200h200v80H200v120h-80Zm640 0v-120H640v-80h200v200h-80Z\"/></svg>`, }, indigo_fullscreen: { svg: `<svg width=\"24\" height=\"24\" viewBox=\"0 0 24 24\" xmlns=\"http://www.w3.org/2000/svg\"> <path d=\"M6.16606 3H8.66571C9.06363 3 9.44512 3.15818 9.72636 3.43942C10.0076 3.72069 10.1657 4.10213 10.1657 4.5C10.1657 4.89782 10.0077 5.2794 9.72636 5.56071C9.44502 5.84205 9.06349 6 8.66571 6H6.16657C6.12239 6.00015 6.08005 6.01779 6.04883 6.04907C6.01759 6.08036 6 6.12284 6 6.16717V8.66683C6 9.06465 5.84195 9.44623 5.56064 9.72754C5.27931 10.0089 4.89778 10.1668 4.5 10.1668C4.10222 10.1668 3.72069 10.0089 3.43936 9.72754C3.15805 9.44623 3 9.06465 3 8.66683V6.16718C3.00098 5.32785 3.33474 4.52264 3.92812 3.92903C4.5215 3.33542 5.32673 3.00131 6.16606 3Z\"/> <path d=\"M14.2715 3.43942C14.5527 3.15818 14.9342 3 15.3321 3H17.8328C18.6724 3.00098 19.4778 3.33492 20.0714 3.92857C20.6651 4.52223 20.999 5.32714 21 6.16667L21 8.66683C21 9.06465 20.842 9.44623 20.5606 9.72754C20.2793 10.0089 19.8978 10.1668 19.5 10.1668C19.1022 10.1668 18.7207 10.0089 18.4394 9.72754C18.158 9.44623 18 9.06465 18 8.66683L18 6.16794C17.9998 6.1236 17.9821 6.08077 17.9507 6.04934C17.9192 6.01785 17.8766 6.00015 17.8323 6H15.3321C14.9343 6 14.5528 5.84205 14.2715 5.56071C13.9902 5.2794 13.8321 4.89782 13.8321 4.5C13.8321 4.10213 13.9902 3.72069 14.2715 3.43942Z\"/> <path d=\"M3.43936 14.2736C3.72069 13.9923 4.10222 13.8344 4.5 13.8344C4.89778 13.8344 5.27931 13.9923 5.56064 14.2736C5.84195 14.5549 6 14.9365 6 15.3344V17.8335C6.00015 17.8776 6.01771 17.9198 6.04895 17.9511C6.08014 17.9822 6.12239 17.9998 6.16651 18H8.66571C9.06363 18 9.44512 18.1582 9.72636 18.4394C10.0076 18.7207 10.1657 19.1021 10.1657 19.5C10.1657 19.8978 10.0077 20.2794 9.72636 20.5607C9.44502 20.842 9.06349 21 8.66571 21H6.16606C5.32684 20.999 4.52172 20.6653 3.92825 20.0718C3.3348 19.4784 3.00098 18.6738 3 17.8345V15.3344C3 14.9365 3.15805 14.5549 3.43936 14.2736Z\"/> <path d=\"M20.071 20.0719C19.4774 20.6653 18.6726 20.999 17.8333 21L15.3321 21C14.9343 21 14.5528 20.842 14.2715 20.5607C13.9902 20.2794 13.8321 19.8978 13.8321 19.5C13.8321 19.1021 13.9902 18.7207 14.2715 18.4394C14.5527 18.1582 14.9342 18 15.3321 18H17.8328C17.8772 18 17.9196 17.9824 17.9509 17.9512C17.9822 17.9199 17.9998 17.8773 18 17.8332L18 15.3344C18 14.9365 18.158 14.5549 18.4394 14.2736C18.7207 13.9923 19.1022 13.8344 19.5 13.8344C19.8978 13.8344 20.2793 13.9923 20.5606 14.2736C20.842 14.5549 21 14.9365 21 15.3344L21 17.8347C20.9987 18.674 20.6646 19.4785 20.071 20.0719Z\"/> </svg> `, }, fullscreen_exit: { svg: `<svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\" viewBox=\"0 -960 960 960\" width=\"24px\"><path d=\"M240-120v-120H120v-80h200v200h-80Zm400 0v-200h200v80H720v120h-80ZM120-640v-80h120v-120h80v200H120Zm520 0v-200h80v120h120v80H640Z\"/></svg>`, }, indigo_fullscreen_exit: { svg: `<svg width=\"24\" height=\"24\" viewBox=\"0 0 24 24\" xmlns=\"http://www.w3.org/2000/svg\"> <path d=\"M9.23813 9.23897C8.64442 9.83244 7.83947 10.1662 6.99999 10.1668H4.5C4.10222 10.1668 3.72069 10.0089 3.43936 9.72754C3.15805 9.44623 3 9.06465 3 8.66683C3 8.26901 3.15805 7.88742 3.43936 7.60612C3.72069 7.32478 4.10222 7.16683 4.5 7.16683H6.99965C7.04399 7.16683 7.08646 7.14924 7.11776 7.118C7.14907 7.08674 7.16668 7.04445 7.16683 7.00032V4.5C7.16683 4.10219 7.3248 3.72074 7.60612 3.43942C7.88738 3.15816 8.26894 3 8.66683 3C9.06474 3 9.44623 3.15818 9.72747 3.43942C10.0087 3.72069 10.1668 4.10212 10.1668 4.5V7.00133C10.1658 7.84082 9.83183 8.6455 9.23813 9.23897Z\"/> <path d=\"M14.2726 3.43942C14.5538 3.15818 14.9353 3 15.3332 3C15.7312 3 16.1126 3.15818 16.3939 3.43942C16.6752 3.72069 16.8332 4.10212 16.8332 4.5V6.99982C16.8335 7.04404 16.8513 7.08642 16.8826 7.11774C16.914 7.14902 16.9564 7.16668 17.0008 7.16683H19.5C19.8978 7.16683 20.2793 7.32478 20.5606 7.60612C20.842 7.88742 21 8.26901 21 8.66683C21 9.06465 20.842 9.44623 20.5606 9.72754C20.2793 10.0089 19.8978 10.1668 19.5 10.1668H17.0003C16.1609 10.1662 15.3556 9.83243 14.7619 9.23897C14.1682 8.6455 13.8342 7.84082 13.8332 7.00133V4.5C13.8332 4.10212 13.9913 3.72069 14.2726 3.43942Z\"/> <path d=\"M3.43936 14.2736C3.72069 13.9923 4.10222 13.8343 4.5 13.8343H6.99965C7.83913 13.835 8.64442 14.1687 9.23813 14.7622C9.83183 15.3557 10.1658 16.1604 10.1668 16.9998V19.5C10.1668 19.8978 10.0088 20.2794 9.72747 20.5607C9.44613 20.842 9.06461 21 8.66683 21C8.26907 21 7.88747 20.8421 7.60612 20.5607C7.32476 20.2794 7.16683 19.8978 7.16683 19.5V17.0009C7.16668 16.9567 7.14907 16.9144 7.11776 16.8832C7.08646 16.8519 7.04399 16.8343 6.99965 16.8343H4.5C4.10222 16.8343 3.72069 16.6764 3.43936 16.3951C3.15805 16.1138 3 15.7322 3 15.3343C3 14.9365 3.15805 14.5549 3.43936 14.2736Z\"/> <path d=\"M14.7619 14.7622C15.3556 14.1687 16.1605 13.835 17 13.8343H19.5C19.8978 13.8343 20.2793 13.9923 20.5606 14.2736C20.842 14.5549 21 14.9365 21 15.3343C21 15.7322 20.842 16.1138 20.5606 16.3951C20.2793 16.6764 19.8978 16.8343 19.5 16.8343L17.0011 16.8343C16.9567 16.8345 16.914 16.8522 16.8826 16.8834C16.8513 16.9148 16.8335 16.9571 16.8332 17.0014V19.5C16.8332 19.8978 16.6752 20.2794 16.3939 20.5607C16.1125 20.842 15.731 21 15.3332 21C14.9355 21 14.5539 20.842 14.2726 20.5607C13.9913 20.2794 13.8332 19.8978 13.8332 19.5V17.0003C13.8342 16.1609 14.1682 15.3557 14.7619 14.7622Z\"/> </svg> `, }, resize: { svg: `<svg width=\"9\" height=\"9\" viewBox=\"0 0 9 9\" fill=\"none\" xmlns=\"http://www.w3.org/2000/svg\"><path d=\"M8.30362 0L0 8.30362L0.691969 8.99559L8.99559 0.691968L8.30362 0Z\"/><path d=\"M8.30803 3.46558L3.46425 8.30936L4.15622 9.00132L9 4.15755L8.30803 3.46558Z\"/></svg>`, }, indigo_clear: { svg: `<svg xmlns=\"http://www.w3.org/2000/svg\" width=\"512\" height=\"512\" viewBox=\"0 0 24 24\"> <path d=\"M14.8144 11.9896L18.4171 8.39087C18.7818 8.0135 18.9836 7.50809 18.9791 6.98347C18.9745 6.45885 18.764 5.95699 18.3927 5.58602C18.0215 5.21504 17.5192 5.00464 16.9942 5.00008C16.4692 4.99552 15.9635 5.19718 15.5858 5.56166L11.9896 9.15372L8.39335 5.56166C8.01571 5.19718 7.50992 4.99552 6.98492 5.00008C6.45992 5.00464 5.95769 5.21505 5.58645 5.58602C5.2152 5.95699 5.00464 6.45885 5.00008 6.98347C4.99551 7.50809 5.19733 8.0135 5.56207 8.39087L9.18561 12.0104L5.58291 15.6091C5.21817 15.9865 5.01635 16.4919 5.02091 17.0165C5.02548 17.5412 5.23604 18.043 5.60729 18.414C5.97853 18.785 6.48075 18.9954 7.00576 18.9999C7.53076 19.0045 8.03654 18.8028 8.41419 18.4383L12.0104 14.8463L15.6067 18.4383C15.9843 18.8028 16.4901 19.0045 17.0151 18.9999C17.5401 18.9954 18.0423 18.785 18.4136 18.414C18.7848 18.043 18.9954 17.5412 18.9999 17.0165C19.0045 16.4919 18.8027 15.9865 18.4379 15.6091L14.8144 11.9896Z\"/> </svg>`, }, indigo_unfold_more: { svg: `<svg xmlns=\"http://www.w3.org/2000/svg\" width=\"512\" height=\"512\" viewBox=\"0 0 24 24\"> <path d=\"M13.2403 2.52848C12.9114 2.1902 12.4652 2.0001 12 2C11.5348 2.0001 11.0886 2.1902 10.7597 2.52848L6.49245 6.94326C6.17289 7.28344 5.99607 7.73906 6.00007 8.21198C6.00406 8.6849 6.18855 9.13731 6.51381 9.47173C6.83907 9.80615 7.27909 9.99582 7.73907 9.99993C8.19904 10.004 8.64218 9.82225 8.97305 9.49369L12 6.35412L15.0269 9.49369C15.3578 9.82225 15.801 10.004 16.2609 9.99993C16.7209 9.99582 17.1609 9.80615 17.4862 9.47173C17.8115 9.13731 17.9959 8.6849 17.9999 8.21198C18.0039 7.73906 17.8271 7.28344 17.5076 6.94326L13.2403 2.52848Z\"/> <path d=\"M10.7597 21.4715C11.0886 21.8098 11.5348 21.9999 12 22C12.4652 21.9999 12.9114 21.8098 13.2403 21.4715L17.5076 17.0567C17.8271 16.7166 18.0039 16.2609 17.9999 15.788C17.9959 15.3151 17.8115 14.8627 17.4862 14.5283C17.1609 14.1939 16.7209 14.0042 16.2609 14.0001C15.801 13.996 15.3578 14.1778 15.0269 14.5063L12 17.6459L8.97305 14.5063C8.64218 14.1778 8.19904 13.996 7.73907 14.0001C7.27909 14.0042 6.83907 14.1939 6.51381 14.5283C6.18855 14.8627 6.00406 15.3151 6.00007 15.788C5.99607 16.2609 6.17289 16.7166 6.49245 17.0567L10.7597 21.4715Z\"/> </svg>`, }, indigo_unfold_less: { svg: `<svg xmlns=\"http://www.w3.org/2000/svg\" width=\"512\" height=\"512\" viewBox=\"0 0 24 24\"> <path d=\"M10.7597 9.47152C11.0886 9.8098 11.5348 9.9999 12 10C12.4652 9.9999 12.9114 9.8098 13.2403 9.47152L17.5076 5.05674C17.8271 4.71656 18.0039 4.26094 17.9999 3.78802C17.9959 3.3151 17.8115 2.86269 17.4862 2.52827C17.1609 2.19385 16.7209 2.00418 16.2609 2.00007C15.801 1.99596 15.3578 2.17775 15.0269 2.50631L12 5.64588L8.97305 2.50631C8.64218 2.17775 8.19904 1.99596 7.73907 2.00007C7.27909 2.00418 6.83907 2.19386 6.51381 2.52828C6.18855 2.8627 6.00406 3.3151 6.00007 3.78802C5.99607 4.26095 6.17289 4.71656 6.49245 5.05674L10.7597 9.47152Z\"/> <path d=\"M13.2403 14.5285C12.9114 14.1902 12.4652 14.0001 12 14C11.5348 14.0001 11.0886 14.1902 10.7597 14.5285L6.49245 18.9433C6.17289 19.2834 5.99607 19.7391 6.00007 20.212C6.00406 20.6849 6.18855 21.1373 6.51381 21.4717C6.83907 21.8061 7.27909 21.9958 7.73907 21.9999C8.19904 22.004 8.64218 21.8222 8.97305 21.4937L12 18.3541L15.0269 21.4937C15.3578 21.8222 15.801 22.004 16.2609 21.9999C16.7209 21.9958 17.1609 21.8061 17.4862 21.4717C17.8115 21.1373 17.9959 20.6849 17.9999 20.212C18.0039 19.7391 17.8271 19.2834 17.5076 18.9433L13.2403 14.5285Z\"/> </svg>`, }, indigo_arrow_forward: { svg: `<svg xmlns=\"http://www.w3.org/2000/svg\" width=\"512\" height=\"512\" viewBox=\"0 0 24 24\"> <path d=\"M4.00085 11.9436C3.99347 12.178 4.034 12.4115 4.12005 12.6303C4.20609 12.849 4.33589 13.0484 4.50174 13.2168C4.66758 13.3851 4.8661 13.519 5.0855 13.6103C5.30489 13.7017 5.54069 13.7487 5.7789 13.7486H14.136L11.6165 16.1733L11.5898 16.1996C11.2817 16.5108 11.1117 16.9297 11.117 17.3643C11.1224 17.7989 11.3026 18.2137 11.6183 18.5175C11.9413 18.8269 12.3741 19 12.8247 19C13.2753 19 13.7081 18.8269 14.0311 18.5175L19.5004 13.2234C19.6586 13.0703 19.7843 12.8878 19.8701 12.6864C19.9559 12.485 20 12.2688 20 12.0504V11.9576C20.0002 11.7387 19.9561 11.5219 19.8703 11.3199C19.7846 11.1179 19.6588 10.9348 19.5004 10.7811L14.0311 5.48876C13.8672 5.32979 13.6726 5.20469 13.4589 5.12081C13.2451 5.03693 13.0165 4.99596 12.7865 5.00031C12.3501 5.01251 11.9346 5.18704 11.6236 5.48876L11.5952 5.51677C11.2855 5.82747 11.1138 6.24653 11.1178 6.68184C11.1218 7.11714 11.3012 7.53307 11.6165 7.83821L14.12 10.2472L5.7789 10.2472C5.31673 10.247 4.87263 10.4239 4.54073 10.7406C4.20882 11.0573 4.01518 11.4888 4.00085 11.9436Z\"/> </svg>`, }, indigo_arrow_back: { svg: `<svg xmlns=\"http://www.w3.org/2000/svg\" width=\"512\" height=\"512\" viewBox=\"0 0 24 24\"> <path d=\"M18.229 13.7483H9.87121L12.3839 16.1672L12.4106 16.1952C12.5638 16.3492 12.6846 16.5315 12.7662 16.7316C12.8478 16.9316 12.8885 17.1455 12.8861 17.361C12.8836 17.5766 12.8379 17.7895 12.7518 17.9877C12.6656 18.1859 12.5406 18.3654 12.3839 18.516C12.0608 18.8263 11.6272 19 11.1757 19C10.7242 19 10.2906 18.8263 9.9675 18.516L4.4996 13.2197C4.3412 13.0668 4.21543 12.8843 4.12963 12.683C4.04384 12.4816 3.99978 12.2654 4 12.0471L4 11.9543C3.9998 11.7354 4.04385 11.5187 4.12963 11.3168C4.21542 11.1148 4.34117 10.9317 4.4996 10.7782L9.9675 5.48717C10.2904 5.17494 10.7249 5 11.1775 5C11.6301 5 12.0646 5.17494 12.3874 5.48717L12.4106 5.51163C12.564 5.66543 12.6851 5.84754 12.767 6.04746C12.8489 6.24737 12.8899 6.46121 12.8878 6.67675C12.8857 6.8923 12.8404 7.10529 12.7545 7.30359C12.6687 7.50189 12.5439 7.68161 12.3874 7.83242L9.87832 10.2479L18.2219 10.2479C18.6935 10.2479 19.1458 10.4323 19.4792 10.7605C19.8127 11.0887 20 11.5339 20 11.9981C20 12.4623 19.8127 12.9074 19.4792 13.2356C19.1458 13.5638 18.6935 13.7483 18.2219 13.7483H18.229Z\"/> </svg>`, }, indigo_arrow_downward: { svg: `<svg xmlns=\"http://www.w3.org/2000/svg\" width=\"512\" height=\"512\" viewBox=\"0 0 24 24\"> <path d=\"M12.0564 4.00085C11.822 3.99347 11.5885 4.034 11.3697 4.12005C11.151 4.20609 10.9516 4.33589 10.7832 4.50174C10.6149 4.66758 10.481 4.8661 10.3897 5.0855C10.2983 5.30489 10.2513 5.54069 10.2514 5.7789V14.136L7.82669 11.6165L7.80043 11.5898C7.48918 11.2817 7.07026 11.1117 6.63567 11.117C6.20107 11.1224 5.78632 11.3026 5.48249 11.6183C5.17311 11.9413 5 12.3741 5 12.8247C5 13.2753 5.17311 13.7081 5.48249 14.0311L10.7766 19.5004C10.9297 19.6586 11.1122 19.7843 11.3136 19.8701C11.515 19.9559 11.7312 20 11.9496 20H12.0424C12.2613 20.0002 12.4781 19.9561 12.6801 19.8703C12.8821 19.7846 13.0652 19.6588 13.2189 19.5004L18.5112 14.0311C18.6702 13.8672 18.7953 13.6726 18.8792 13.4589C18.9631 13.2451 19.004 13.0165 18.9997 12.7865C18.9875 12.3501 18.813 11.9346 18.5112 11.6236L18.4832 11.5952C18.1725 11.2855 17.7535 11.1138 17.3182 11.1178C16.8829 11.1218 16.4669 11.3012 16.1618 11.6165L13.7528 14.12V5.7789C13.753 5.31673 13.5761 4.87263 13.2594 4.54073C12.9427 4.20882 12.5112 4.01518 12.0564 4.00085Z\"/> </svg>`, }, indigo_arrow_upward: { svg: `<svg xmlns=\"http://www.w3.org/2000/svg\" width=\"512\" height=\"512\" viewBox=\"0 0 24 24\"> <path d=\"M10.2517 18.229V9.87121L7.83279 12.3839L7.80481 12.4106C7.65078 12.5638 7.46849 12.6846 7.26845 12.7662C7.0684 12.8478 6.85454 12.8885 6.63899 12.8861C6.42344 12.8836 6.21049 12.8379 6.01231 12.7518C5.81414 12.6656 5.63459 12.5406 5.48402 12.3839C5.17367 12.0608 5 11.6272 5 11.1757C5 10.7242 5.17367 10.2906 5.48402 9.9675L10.7803 4.4996C10.9332 4.3412 11.1157 4.21543 11.317 4.12963C11.5184 4.04384 11.7346 3.99978 11.9529 4H12.0457C12.2646 3.9998 12.4813 4.04385 12.6832 4.12963C12.8852 4.21542 13.0683 4.34117 13.2218 4.4996L18.5128 9.9675C18.8251 10.2904 19 10.7249 19 11.1775C19 11.6301 18.8251 12.0646 18.5128 12.3874L18.4884 12.4106C18.3346 12.564 18.1525 12.6851 17.9525 12.767C17.7526 12.8489 17.5388 12.8899 17.3232 12.8878C17.1077 12.8857 16.8947 12.8404 16.6964 12.7545C16.4981 12.6687 16.3184 12.5439 16.1676 12.3874L13.7521 9.87832V18.2219C13.7521 18.6935 13.5677 19.1458 13.2395 19.4792C12.9113 19.8127 12.4661 20 12.0019 20C11.5377 20 11.0926 19.8127 10.7644 19.4792C10.4362 19.1458 10.2517 18.6935 10.2517 18.2219V18.229Z\"/> </svg>`, }, indigo_chevron_down: { svg: `<svg xmlns=\"http://www.w3.org/2000/svg\" width=\"512\" height=\"512\" viewBox=\"0 0 24 24\"> <path d=\"M12 17C11.5348 16.9999 11.0886 16.8098 10.7597 16.4715L5.49245 11.0567C5.17289 10.7166 4.99607 10.2609 5.00007 9.78802C5.00406 9.3151 5.18855 8.86269 5.51381 8.52827C5.83907 8.19385 6.27909 8.00418 6.73907 8.00007C7.19904 7.99596 7.64218 8.17775 7.97305 8.50631L12 12.6459L16.027 8.50631C16.3578 8.17775 16.801 7.99596 17.2609 8.00007C17.7209 8.00418 18.1609 8.19386 18.4862 8.52827C18.8115 8.86269 18.9959 9.3151 18.9999 9.78802C19.0039 10.2609 18.8271 10.7166 18.5076 11.0567L13.2403 16.4715C12.9114 16.8098 12.4652 16.9999 12 17Z\"/> </svg>`, }, indigo_chevron_up: { svg: `<svg xmlns=\"http://www.w3.org/2000/svg\" width=\"512\" height=\"512\" viewBox=\"0 0 24 24\"> <path d=\"M12 7.00001C12.4629 7.00011 12.9069 7.18943 13.2342 7.52633L18.467 12.9116C18.6338 13.0773 18.7668 13.2755 18.8583 13.4947C18.9498 13.7138 18.9979 13.9496 18.9999 14.1881C19.0019 14.4266 18.9578 14.6632 18.87 14.8839C18.7822 15.1047 18.6526 15.3052 18.4887 15.4739C18.3247 15.6425 18.1299 15.7759 17.9153 15.8662C17.7008 15.9565 17.4709 16.002 17.2391 15.9999C17.0073 15.9979 16.7783 15.9483 16.5653 15.8542C16.3523 15.76 16.1596 15.6232 15.9986 15.4516L12 11.3363L8.00135 15.4516C7.84032 15.6232 7.64771 15.76 7.43472 15.8542C7.22174 15.9483 6.99265 15.9979 6.76085 15.9999C6.52906 16.002 6.29918 15.9565 6.08463 15.8662C5.87009 15.7759 5.6752 15.6425 5.51129 15.4739C5.34738 15.3052 5.21778 15.1047 5.13 14.8839C5.04223 14.6632 4.99805 14.4266 5.00007 14.1881C5.00208 13.9496 5.05023 13.7138 5.14172 13.4947C5.23321 13.2755 5.36619 13.0773 5.53292 12.9116L10.7658 7.52633C10.9274 7.35895 11.1198 7.22625 11.3316 7.1359C11.5435 7.04556 11.7706 6.99937 12 7.00001Z\"/> </svg>`, }, indigo_chevron_right: { svg: `<svg xmlns=\"http://www.w3.org/2000/svg\" width=\"512\" height=\"512\" viewBox=\"0 0 24 24\"> <path d=\"M17 12C16.9999 12.4652 16.8098 12.9114 16.4715 13.2403L11.0567 18.5076C10.7166 18.8271 10.2609 19.0039 9.78802 18.9999C9.3151 18.9959 8.86269 18.8115 8.52827 18.4862C8.19385 18.1609 8.00418 17.7209 8.00007 17.2609C7.99596 16.801 8.17775 16.3578 8.50631 16.027L12.6459 12L8.50631 7.97305C8.17775 7.64218 7.99596 7.19904 8.00007 6.73907C8.00418 6.27909 8.19385 5.83907 8.52827 5.51381C8.86269 5.18855 9.3151 5.00406 9.78802 5.00007C10.2609 4.99607 10.7166 5.17289 11.0567 5.49245L16.4715 10.7597C16.8098 11.0886 16.9999 11.5348 17 12Z\"/> </svg>`, }, indigo_chevron_left: { svg: `<svg xmlns=\"http://www.w3.org/2000/svg\" width=\"512\" height=\"512\" viewBox=\"0 0 24 24\"> <path d=\"M7.00001 12C7.00011 11.5371 7.18943 11.0931 7.52633 10.7658L12.9116 5.53297C13.0773 5.36624 13.2755 5.23321 13.4947 5.14172C13.7138 5.05023 13.9496 5.00208 14.1881 5.00007C14.4266 4.99805 14.6632 5.04223 14.8839 5.13C15.1047 5.21778 15.3052 5.34743 15.4739 5.51134C15.6425 5.67525 15.7759 5.87015 15.8662 6.08469C15.9565 6.29923 16.002 6.52911 15.9999 6.7609C15.9979 6.9927 15.9483 7.22174 15.8542 7.43472C15.76 7.64771 15.6232 7.84037 15.4516 8.00141L11.3363 12L15.4516 15.9986C15.6232 16.1597 15.76 16.3523 15.8542 16.5653C15.9483 16.7783 15.9979 17.0074 15.9999 17.2391C16.002 17.4709 15.9565 17.7008 15.8662 17.9154C15.7759 18.1299 15.6425 18.3248 15.4739 18.4887C15.3052 18.6526 15.1047 18.7822 14.8839 18.87C14.6632 18.9578 14.4266 19.0019 14.1881 18.9999C13.9496 18.9979 13.7138 18.9498 13.4947 18.8583C13.2755 18.7668 13.0773 18.6338 12.9116 18.4671L7.52633 13.2342C7.35895 13.0726 7.22625 12.8802 7.1359 12.6684C7.04556 12.4565 6.99937 12.2294 7.00001 12Z\"/> </svg>`, }, indigo_check: { svg: `<svg xmlns=\"http://www.w3.org/2000/svg\" width=\"512\" height=\"512\" viewBox=\"0 0 24 24\"> <path d=\"M19.0329 5.00008C18.7694 4.99771 18.5081 5.04833 18.2646 5.14892C18.0211 5.2495 17.8003 5.39801 17.6153 5.5856L9.136 14.1629L6.38271 11.3931C6.19957 11.2083 5.98158 11.0615 5.74134 10.9613C5.5011 10.8612 5.24337 10.8096 4.98307 10.8096C4.72276 10.8096 4.46503 10.8612 4.22479 10.9613C3.98455 11.0615 3.76656 11.2083 3.58343 11.3931C3.2098 11.7677 3 12.2751 3 12.804C3 13.3329 3.2098 13.8402 3.58343 14.2148L7.73836 18.4113C7.92066 18.5977 8.13838 18.7458 8.37874 18.8468C8.61909 18.9479 8.87723 19 9.138 19C9.39876 19 9.6569 18.9479 9.89726 18.8468C10.1376 18.7458 10.3553 18.5977 10.5376 18.4113L20.4166 8.42125C20.7902 8.04667 21 7.53933 21 7.01042C21 6.48151 20.7902 5.97417 20.4166 5.59958C20.2368 5.41354 20.022 5.26481 19.7846 5.16193C19.5471 5.05905 19.2917 5.00405 19.0329 5.00008Z\"/> </svg>`, }, error: { svg: `<svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\" viewBox=\"0 -960 960 960\" width=\"24px\"><path d=\"M480-280q17 0 28.5-11.5T520-320q0-17-11.5-28.5T480-360q-17 0-28.5 11.5T440-320q0 17 11.5 28.5T480-280Zm-40-160h80v-240h-80v240Zm40 360q-83 0-156-31.5T197-197q-54-54-85.5-127T80-480q0-83 31.5-156T197-763q54-54 127-85.5T480-880q83 0 156 31.5T763-763q54 54 85.5 127T880-480q0 83-31.5 156T763-197q-54 54-127 85.5T480-80Z\"/></svg>`, }, indigo_access_time: { svg: `<svg xmlns=\"http://www.w3.org/2000/svg\" width=\"512\" height=\"512\" viewBox=\"0 0 24 24\"><path d=\"M10.5 8a1.5 1.5 0 0 1 3 0v2.5H16a1.5 1.5 0 1 1 0 3h-4a1.5 1.5 0 0 1-1.5-1.5V8Z\"/><path fill-rule=\"evenodd\" clip-rule=\"evenodd\" d=\"M22 12c0 5.523-4.476 10-10 10-5.522 0-10-4.477-10-10S6.479 2 12 2c5.524 0 10 4.477 10 10Zm-3 0a7 7 0 1 1-14 0 7 7 0 0 1 14 0Z\"/></svg>`, }, indigo_add: { svg: `<svg xmlns=\"http://www.w3.org/2000/svg\" width=\"512\" height=\"512\" viewBox=\"0 0 24 24\"><path d=\"M10.2 13.8H5.8a1.8 1.8 0 0 1 0-3.6h4.4V5.8a1.8 1.8 0 1 1 3.6 0v4.4h4.4a1.8 1.8 0 0 1 0 3.6h-4.4v4.4a1.8 1.8 0 1 1-3.6 0v-4.4Z\"/></svg>`, }, indigo_attach_file: { svg: `<svg xmlns=\"http://www.w3.org/2000/svg\" width=\"512\" height=\"512\" viewBox=\"0 0 24 24\"><path d=\"m16.496 10.809-7.63 7.365a.965.965 0 0 1-1.31 0 .844.844 0 0 1 0-1.24l6.59-6.382c.601-.601.59-1.55-.032-2.14a1.689 1.689 0 0 0-2.261-.03l-.033.03-6.558 6.351c-1.629 1.542-1.629 4.04 0 5.581 1.629 1.541 4.27 1.541 5.899 0l7.63-7.365c2.533-2.397 2.533-6.284 0-8.681-2.535-2.397-6.642-2.397-9.176 0L4.008 9.749l-.033.031a1.477 1.477 0 0 0 0 2.17 1.688 1.688 0 0 0 2.326-.03l5.608-5.452c1.267-1.198 3.32-1.198 4.587 0a2.954 2.954 0 0 1 0 4.34Z\"/></svg>`, }, indigo_block: { svg: `<svg xmlns=\"http://www.w3.org/2000/svg\" width=\"512\" height=\"512\" viewBox=\"0 0 24 24\"><path d=\"M19.248 4.787c-.006-.007-.008-.014-.014-.02-.007-.007-.014-.009-.02-.015A10.232 10.232 0 0 0 4.751 19.213c.006.007.008.016.014.02.006.006.014.009.02.015A10.232 10.232 0 0 0 19.249 4.787ZM12 4.327c1.592 0 3.145.498 4.44 1.425L5.751 16.44A7.66 7.66 0 0 1 12 4.326Zm0 15.347a7.623 7.623 0 0 1-4.44-1.426L18.249 7.56A7.661 7.661 0 0 1 12 19.674Z\"/></svg>`, }, indigo_calendar_today: { svg: `<svg xmlns=\"http://www.w3.org/2000/svg\" width=\"512\" height=\"512\" viewBox=\"0 0 24 24\"><path d=\"M18.299 4H17v-.5a1.5 1.5 0 1 0-3 0V4h-4v-.5a1.5 1.5 0 1 0-3 0V4H5.703A3.707 3.707 0 0 0 2 7.702v10.595A3.707 3.707 0 0 0 5.703 22h12.596A3.706 3.706 0 0 0 22 18.297V7.702A3.707 3.707 0 0 0 18.299 4ZM5.703 7H7v.5a1.5 1.5 0 0 0 3 0V7h4v.5a1.5 1.5 0 0 0 3 0V7h1.298a.704.704 0 0 1 .702.702v2.655H5V7.703A.703.703 0 0 1 5.703 7Zm12.596 12H5.703A.704.704 0 0 1 5 18.297v-4.94h14v4.94a.704.704 0 0 1-.702.703Z\"/></svg>`, }, indigo_cancel: { svg: `<svg xmlns=\"http://www.w3.org/2000/svg\" width=\"512\" height=\"512\" viewBox=\"0 0 24 24\"><path fill-rule=\"evenodd\" clip-rule=\"evenodd\" d=\"M12 22c5.524 0 10-4.477 10-10 0-5.522-4.476-10-10-10C6.479 2 2 6.478 2 12c0 5.523 4.478 10 10 10ZM7.438 9.543a1.49 1.49 0 0 1 2.106-2.106l2.458 2.457 2.457-2.457a1.489 1.489 0 1 1 2.106 2.106L14.107 12l2.457 2.457a1.49 1.49 0 0 1-2.106 2.107l-2.457-2.458-2.458 2.458a1.489 1.489 0 1 1-2.106-2.107L9.894 12 7.437 9.543Z\"/></svg>`, }, indigo_check_circle: { svg: `<svg xmlns=\"http://www.w3.org/2000/svg\" width=\"512\" height=\"512\" viewBox=\"0 0 24 24\"><path fill-rule=\"evenodd\" clip-rule=\"evenodd\" d=\"M6.445 3.685a10 10 0 1 1 11.111 16.63A10 10 0 0 1 6.445 3.685Zm10.22 3.923a1.294 1.294 0 0 0-.523-.108 1.294 1.294 0 0 0-.947.424l-4.761 5.131-1.626-1.703a1.297 1.297 0 0 0-1.911 0c-.254.27-.396.632-.396 1.009 0 .376.142.738.396 1.008l2.59 2.712c.124.133.272.238.436.31a1.29 1.29 0 0 0 1.473-.31l3.547-3.815 2.162-2.33c.254-.27.396-.632.396-1.008 0-.377-.142-.738-.396-1.01a1.325 1.325 0 0 0-.44-.31Z\"/></svg>`, }, indigo_error: { svg: `<svg xmlns=\"http://www.w3.org/2000/svg\" width=\"512\" height=\"512\" viewBox=\"0 0 24 24\"><path fill-rule=\"evenodd\" clip-rule=\"evenodd\" d=\"M3.685 17.556a10 10 0 1 1 16.63-11.112 10 10 0 0 1-16.63 11.112ZM10.5 11.5v-4a1.5 1.5 0 1 1 3 0v4a1.5 1.5 0 1 1-3 0Zm.253 5.833a1.5 1.5 0 1 1 2.495-1.667 1.5 1.5 0 0 1-2.495 1.667Z\"/></svg>`, }, indigo_file_download: { svg: `<svg xmlns=\"http://www.w3.org/2000/svg\" width=\"512\" height=\"512\" viewBox=\"0 0 24 24\"><path d=\"M10.41 11.21V3.616c0-.43.167-.84.466-1.144A1.578 1.578 0 0 1 12 2c.422 0 .826.17 1.125.473.298.304.466.715.466 1.144v7.586l2.195-2.282a1.49 1.49 0 0 1 1.05-.455 1.47 1.47 0 0 1 1.06.434l.022.021c.284.294.443.689.443 1.1 0 .412-.16.807-.443 1.1l-4.81 4.972a1.496 1.496 0 0 1-1.069.454h-.084a1.47 1.47 0 0 1-1.066-.454L6.076 11.12a1.586 1.586 0 0 1-.44-1.098c0-.41.158-.805.44-1.098a1.49 1.49 0 0 1 1.05-.457 1.47 1.47 0 0 1 1.06.432l.025.025 2.199 2.284Z\"/><path d=\"M20.41 14.729a1.59 1.59 0 0 0-1.592 1.591v1.613a.886.886 0 0 1-.884.884H6.07a.892.892 0 0 1-.89-.884V16.32a1.591 1.591 0 0 0-3.181 0v1.618A4.087 4.087 0 0 0 6.066 22h11.868A4.07 4.07 0 0 0 22 17.931V16.32a1.59 1.59 0 0 0-1.59-1.591Z\"/></svg>`, }, indigo_file_upload: { svg: `<svg xmlns=\"http://www.w3.org/2000/svg\" width=\"512\" height=\"512\" viewBox=\"0 0 24 24\"><path d=\"M13.59 14.927v-7.59L15.79 9.62l.026.024a1.489 1.489 0 0 0 1.06.432 1.473 1.473 0 0 0 1.05-.456c.281-.294.439-.688.439-1.098 0-.41-.158-.805-.44-1.099l-4.814-4.97A1.49 1.49 0 0 0 12.044 2h-.085a1.479 1.479 0 0 0-1.069.454l-4.81 4.97a1.582 1.582 0 0 0-.442 1.1c0 .412.16.806.443 1.1l.022.02a1.489 1.489 0 0 0 1.06.435 1.47 1.47 0 0 0 1.05-.455l2.195-2.28v7.583c0 .429.168.84.466 1.143.299.303.703.474 1.125.474.422 0 .827-.17 1.125-.474a1.63 1.63 0 0 0 .466-1.143Z\"/><path d=\"M19.284 15.197A1.59 1.59 0 0 1 22 16.32v1.611A4.071 4.071 0 0 1 17.934 22H6.066A4.085 4.085 0 0 1 2 17.939V16.32a1.59 1.59 0 0 1 3.182 0v1.613a.892.892 0 0 0 .89.884h11.862a.886.886 0 0 0 .884-.884v-1.613c0-.422.168-.826.466-1.124Z\"/></svg>`, }, indigo_filter_list: { svg: `<svg xmlns=\"http://www.w3.org/2000/svg\" width=\"512\" height=\"512\" viewBox=\"0 0 24 24\"><path d=\"M4.616 7.682h14.768c.428 0 .84-.168 1.143-.466.303-.298.473-.703.473-1.125 0-.422-.17-.827-.473-1.125a1.63 1.63 0 0 0-1.143-.466H4.616c-.428 0-.84.168-1.143.466A1.579 1.579 0 0 0 3 6.091c0 .422.17.827.473 1.125a1.63 1.63 0 0 0 1.143.466ZM7.344 13.591h9.312c.429 0 .84-.168 1.143-.466.303-.299.474-.703.474-1.125 0-.422-.17-.827-.474-1.125a1.63 1.63 0 0 0-1.143-.466H7.344c-.429 0-.84.167-1.143.466A1.579 1.579 0 0 0 5.727 12c0 .422.17.827.474 1.125a1.63 1.63 0 0 0 1.143.466ZM13.929 19.5h-3.858a1.63 1.63 0 0 1-1.143-.466 1.578 1.578 0 0 1-.473-1.125c0-.422.17-.826.473-1.125a1.63 1.63 0 0 1 1.143-.466h3.858c.429 0 .84.167 1.143.466.303.298.474.703.474 1.125 0 .422-.17.827-.474 1.125a1.63 1.63 0 0 1-1.143.466Z\"/></svg>`, }, indigo_horizontal_rule: { svg: `<svg xmlns=\"http://www.w3.org/2000/svg\" width=\"512\" height=\"512\" viewBox=\"0 0 24 24\"><path d=\"M5.778 13.5h12.444c.471 0 .924-.184 1.257-.512.334-.329.521-.774.521-1.238 0-.464-.187-.91-.52-1.237A1.793 1.793 0 0 0 18.221 10H5.778c-.471 0-.924.184-1.257.513-.334.328-.521.773-.521 1.237 0 .464.187.91.52 1.238.334.328.787.512 1.258.512Z\"/></svg>`, }, indigo_info: { svg: `<svg xmlns=\"http://www.w3.org/2000/svg\" width=\"512\" height=\"512\" viewBox=\"0 0 24 24\"><path fill-rule=\"evenodd\" clip-rule=\"evenodd\" d=\"M3.686 6.944a10 10 0 1 0 16.63 11.112A10 10 0 0 0 3.685 6.944Zm6.815 5.556V17a1.5 1.5 0 0 0 3 0v-4.5a1.5 1.5 0 1 0-3 0Zm.253-5.333a1.5 1.5 0 1 0 2.494 1.666 1.5 1.5 0 0 0-2.494-1.666Z\"/></svg>`, }, indigo_menu: { svg: `<svg xmlns=\"http://www.w3.org/2000/svg\" width=\"512\" height=\"512\" viewBox=\"0 0 24 24\"><path d=\"M4.616 7.682h14.768c.428 0 .84-.168 1.143-.466.303-.299.473-.703.473-1.125 0-.422-.17-.827-.473-1.125a1.63 1.63 0 0 0-1.143-.466H4.616c-.428 0-.84.168-1.143.466A1.578 1.578 0 0 0 3 6.09c0 .422.17.826.473 1.125a1.63 1.63 0 0 0 1.143.466ZM4.616 13.59h14.768c.428 0 .84-.167 1.143-.465.303-.299.473-.703.473-1.125 0-.422-.17-.827-.473-1.125a1.63 1.63 0 0 0-1.143-.466H4.616c-.428 0-.84.167-1.143.466A1.578 1.578 0 0 0 3 12c0 .422.17.826.473 1.125a1.63 1.63 0 0 0 1.143.466ZM19.384 19.5H4.616a1.63 1.63 0 0 1-1.143-.466A1.578 1.578 0 0 1 3 17.909c0-.422.17-.826.473-1.125a1.63 1.63 0 0 1 1.143-.466h14.768c.428 0 .84.168 1.143.466.303.299.473.703.473 1.125 0 .422-.17.827-.473 1.125a1.63 1.63 0 0 1-1.143.466Z\"/></svg>`, }, indigo_pin: { svg: `<svg xmlns=\"http://www.w3.org/2000/svg\" width=\"512\" height=\"512\" viewBox=\"0 0 24 24\"><path fill-rule=\"evenodd\" clip-rule=\"evenodd\" d=\"M18.12 2.516A1.572 1.572 0 0 0 16.966 2H7.034c-.435 0-.85.187-1.154.516a1.814 1.814 0 0 0-.472 1.23c0 .46.168.902.472 1.23.304.33.72.516 1.154.516h.169v3.023a6.54 6.54 0 0 0-1.977 2.382c-.535 1.083-.782 2.444-.715 3.669.006.45.174.882.472 1.204.304.329.719.516 1.153.516h4.238v3.825c-.01.073-.015.147-.015.222 0 .92.735 1.667 1.641 1.667s1.64-.746 1.64-1.667c0-.075-.004-.15-.014-.222v-3.825h4.238c.434 0 .849-.187 1.153-.516.298-.322.466-.754.473-1.204.066-1.225-.181-2.586-.716-3.67a6.54 6.54 0 0 0-1.977-2.38V5.491h.17c.434 0 .849-.186 1.153-.515.304-.329.472-.772.472-1.23 0-.46-.168-.903-.472-1.231ZM8.005 12.114c-.114.169-.288.708-.288 1.076h8.566c0-.368-.174-.907-.289-1.076a2.738 2.738 0 0 0-1.051-.925 1.645 1.645 0 0 1-.764-.624 1.836 1.836 0 0 1-.304-1.016V5.095h-3.75V9.55c0 .364-.106.719-.304 1.016-.19.285-.456.503-.764.624-.417.205-.779.523-1.052.925Z\"/></svg>`, }, indigo_refresh: { svg: `<svg xmlns=\"http://www.w3.org/2000/svg\" width=\"512\" height=\"512\" viewBox=\"0 0 24 24\"><path d=\"M14.068 3.247a9.05 9.05 0 0 0-8.98 2.925c-1.08 1.263-1.79 2.35-2.054 3.991a1.58 1.58 0 0 0-.034.315v.003A1.519 1.519 0 0 0 4.504 12a1.458 1.458 0 0 0 1.515-1.184l.002-.012.002-.012c.148-1.107.602-1.702 1.312-2.565a5.999 5.999 0 0 1 8.533-.75l-1.314 1.308a1.396 1.396 0 0 0-.314.445.761.761 0 0 0-.015.582.756.756 0 0 0 .418.406c.163.07.347.095.531.095H20.03A.985.985 0 0 0 21 9.348v-4.84c0-.323-.09-.772-.5-.94-.407-.17-.79.084-1.022.315l-1.45 1.444a9.05 9.05 0 0 0-3.96-2.08ZM3.977 13.687H3.97A.984.984 0 0 0 3 14.65v4.84c0 .324.09.773.499.942.408.17.79-.084 1.023-.315l1.45-1.444a9.049 9.049 0 0 0 12.94-.845c1.08-1.263 1.79-2.35 2.054-3.991.022-.104.033-.209.034-.315v-.003A1.518 1.518 0 0 0 19.496 12a1.458 1.458 0 0 0-1.513 1.184l-.002.012-.002.012c-.148 1.108-.602 1.702-1.312 2.565a6 6 0 0 1-8.535.75l1.314-1.308c.133-.132.246-.281.314-.445a.76.76 0 0 0 .015-.582.756.756 0 0 0-.418-.406 1.364 1.364 0 0 0-.531-.095h-4.85Z\"/></svg>`, }, indigo_search: { svg: `<svg xmlns=\"http://www.w3.org/2000/svg\" width=\"512\" height=\"512\" viewBox=\"0 0 24 24\"><path fill-rule=\"evenodd\" clip-rule=\"evenodd\" d=\"M10.393 3a7.393 7.393 0 1 0 4.068 13.567l3.996 3.997a1.49 1.49 0 1 0 2.107-2.107l-3.997-3.996A7.393 7.393 0 0 0 10.393 3ZM6 10.393a4.393 4.393 0 1 1 8.786 0 4.393 4.393 0 0 1-8.786 0Z\"></svg>`, }, indigo_send: { svg: `<svg xmlns=\"http://www.w3.org/2000/svg\" width=\"512\" height=\"512\" viewBox=\"0 0 24 24\"><path fill-rule=\"evenodd\" clip-rule=\"evenodd\" d=\"M20.302 10.84S5.5 2.591 4.352 2.13C3.207 1.666 3 2.59 3 2.59v17.791c0 .277.077.549.223.79.146.242.356.444.611.589a1.871 1.871 0 0 0 1.708.064l14.5-8.216c.29-.136.533-.343.702-.6.17-.256.258-.551.256-.851a1.528 1.528 0 0 0-.267-.85 1.672 1.672 0 0 0-.431-.433v-.035ZM6.5 10.021V6.803l9.5 5.385-9.5 5.555v-3.146l3.583-.645.036-.01a1.76 1.76 0 0 0 .913-.572 1.54 1.54 0 0 0 .361-.964 1.535 1.535 0 0 0-.336-.972 1.753 1.753 0 0 0-.898-.593l-.034-.01-3.625-.81Z\"/></svg>`, }, indigo_unpin: { svg: `<svg xmlns=\"http://www.w3.org/2000/svg\" width=\"512\" height=\"512\" viewBox=\"0 0 24 24\"><path fill-rule=\"evenodd\" clip-rule=\"evenodd\" d=\"M2.474 19.223a1.633 1.633 0 0 0 0 2.3 1.614 1.614 0 0 0 2.29 0l5.11-5.105v3.693c-.01.073-.015.147-.015.222 0 .92.735 1.667 1.641 1.667s1.64-.746 1.64-1.667a1.77 1.77 0 0 0-.014-.222v-3.825h4.237c.435 0 .85-.187 1.154-.516.298-.322.466-.754.472-1.204.067-1.225-.18-2.586-.715-3.67A6.66 6.66 0 0 0 17.09 9.21l4.436-4.432a1.633 1.633 0 0 0 0-2.3 1.614 1.614 0 0 0-2.29 0L2.474 19.223Zm12.381-7.781-1.75 1.748h2.678c0-.368-.174-.907-.288-1.076a2.798 2.798 0 0 0-.64-.672Z\"/><path d=\"M12.614 5.095h-2.99v2.986l-5.609 5.605c.061-.969.302-1.96.71-2.79a6.54 6.54 0 0 1 1.978-2.38V5.491h-.17c-.434 0-.849-.186-1.153-.515a1.814 1.814 0 0 1-.472-1.23c0-.46.168-.903.472-1.231A1.572 1.572 0 0 1 6.534 2h9.178l-3.098 3.095Z\"/></svg>`, }, }) )"
        }
      ],
      "exports": [
        {
          "kind": "js",
          "name": "internalIcons",
          "declaration": {
            "name": "internalIcons",
            "module": "src/components/icon/internal-icons-lib.ts"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "src/components/icon/registry/parser.ts",
      "declarations": [
        {
          "kind": "class",
          "description": "",
          "name": "SvgIconParser",
          "members": [
            {
              "kind": "field",
              "name": "_parser",
              "type": {
                "text": "DOMParser"
              },
              "privacy": "private",
              "default": "new DOMParser()"
            },
            {
              "kind": "method",
              "name": "parse",
              "privacy": "public",
              "return": {
                "type": {
                  "text": "SvgIcon"
                }
              },
              "parameters": [
                {
                  "name": "svgString",
                  "type": {
                    "text": "string"
                  }
                }
              ]
            }
          ]
        }
      ],
      "exports": [
        {
          "kind": "js",
          "name": "SvgIconParser",
          "declaration": {
            "name": "SvgIconParser",
            "module": "src/components/icon/registry/parser.ts"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "src/components/icon/icon.registry.ts",
      "declarations": [
        {
          "kind": "function",
          "name": "getIconRegistry"
        },
        {
          "kind": "function",
          "name": "registerIcon",
          "parameters": [
            {
              "name": "name",
              "type": {
                "text": "string"
              }
            },
            {
              "name": "url",
              "type": {
                "text": "string"
              }
            },
            {
              "name": "collection",
              "default": "'default'"
            }
          ]
        },
        {
          "kind": "function",
          "name": "registerIconFromText",
          "parameters": [
            {
              "name": "name",
              "type": {
                "text": "string"
              }
            },
            {
              "name": "iconText",
              "type": {
                "text": "string"
              }
            },
            {
              "name": "collection",
              "default": "'default'"
            }
          ]
        },
        {
          "kind": "function",
          "name": "setIconRef",
          "parameters": [
            {
              "name": "name",
              "type": {
                "text": "string"
              }
            },
            {
              "name": "collection",
              "type": {
                "text": "string"
              }
            },
            {
              "name": "icon",
              "type": {
                "text": "IconMeta"
              }
            }
          ]
        }
      ],
      "exports": [
        {
          "kind": "js",
          "name": "getIconRegistry",
          "declaration": {
            "name": "getIconRegistry",
            "module": "src/components/icon/icon.registry.ts"
          }
        },
        {
          "kind": "js",
          "name": "registerIcon",
          "declaration": {
            "name": "registerIcon",
            "module": "src/components/icon/icon.registry.ts"
          }
        },
        {
          "kind": "js",
          "name": "registerIconFromText",
          "declaration": {
            "name": "registerIconFromText",
            "module": "src/components/icon/icon.registry.ts"
          }
        },
        {
          "kind": "js",
          "name": "setIconRef",
          "declaration": {
            "name": "setIconRef",
            "module": "src/components/icon/icon.registry.ts"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "src/components/icon/icon.ts",
      "declarations": [
        {
          "kind": "class",
          "description": "The icon component allows visualizing collections of pre-registered SVG icons.",
          "name": "IgcIconComponent",
          "members": [
            {
              "kind": "field",
              "name": "tagName",
              "type": {
                "text": "string"
              },
              "privacy": "public",
              "static": true,
              "readonly": true,
              "default": "'igc-icon'"
            },
            {
              "kind": "method",
              "name": "register",
              "privacy": "public",
              "static": true,
              "return": {
                "type": {
                  "text": "void"
                }
              }
            },
            {
              "kind": "field",
              "name": "_internals",
              "privacy": "private",
              "readonly": true
            },
            {
              "kind": "field",
              "name": "svg",
              "type": {
                "text": "string"
              },
              "privacy": "private",
              "default": "''"
            },
            {
              "kind": "field",
              "name": "name",
              "type": {
                "text": "string"
              },
              "privacy": "public",
              "default": "''",
              "description": "The name of the icon glyph to draw.",
              "attribute": "name"
            },
            {
              "kind": "field",
              "name": "collection",
              "type": {
                "text": "string"
              },
              "privacy": "public",
              "default": "'default'",
              "description": "The name of the registered collection for look up of icons.\nDefaults to `default`.",
              "attribute": "collection"
            },
            {
              "kind": "field",
              "name": "mirrored",
              "type": {
                "text": "boolean"
              },
              "privacy": "public",
              "default": "false",
              "description": "Whether to flip the icon. Useful for RTL layouts.",
              "attribute": "mirrored",
              "reflects": true
            },
            {
              "kind": "method",
              "name": "iconChanged",
              "privacy": "protected",
              "parameters": [
                {
                  "name": "prev",
                  "type": {
                    "text": "string"
                  }
                },
                {
                  "name": "curr",
                  "type": {
                    "text": "string"
                  }
                }
              ]
            },
            {
              "kind": "method",
              "name": "_themeChangedCallback",
              "privacy": "private",
              "parameters": [
                {
                  "name": "theme",
                  "type": {
                    "text": "Theme"
                  }
                }
              ]
            },
            {
              "kind": "field",
              "name": "iconLoaded",
              "privacy": "private"
            },
            {
              "kind": "method",
              "name": "getIcon",
              "privacy": "private"
            },
            {
              "kind": "method",
              "name": "registerIcon",
              "privacy": "protected",
              "parameters": [
                {
                  "name": "name",
                  "type": {
                    "text": "string"
                  }
                },
                {
                  "name": "url",
                  "type": {
                    "text": "string"
                  }
                },
                {
                  "name": "collection",
                  "default": "'default'"
                }
              ]
            },
            {
              "kind": "method",
              "name": "registerIconFromText",
              "privacy": "protected",
              "parameters": [
                {
                  "name": "name",
                  "type": {
                    "text": "string"
                  }
                },
                {
                  "name": "iconText",
                  "type": {
                    "text": "string"
                  }
                },
                {
                  "name": "collection",
                  "default": "'default'"
                }
              ]
            },
            {
              "kind": "method",
              "name": "setIconRef",
              "privacy": "protected",
              "parameters": [
                {
                  "name": "name",
                  "type": {
                    "text": "string"
                  }
                },
                {
                  "name": "collection",
                  "type": {
                    "text": "string"
                  }
                },
                {
                  "name": "icon",
                  "type": {
                    "text": "IconMeta"
                  }
                }
              ]
            }
          ],
          "attributes": [
            {
              "name": "name",
              "type": {
                "text": "string"
              },
              "default": "''",
              "description": "The name of the icon glyph to draw.",
              "fieldName": "name",
              "attribute": "name"
            },
            {
              "name": "collection",
              "type": {
                "text": "string"
              },
              "default": "'default'",
              "description": "The name of the registered collection for look up of icons.\nDefaults to `default`.",
              "fieldName": "collection",
              "attribute": "collection"
            },
            {
              "name": "mirrored",
              "type": {
                "text": "boolean"
              },
              "default": "false",
              "description": "Whether to flip the icon. Useful for RTL layouts.",
              "fieldName": "mirrored",
              "attribute": "mirrored"
            }
          ],
          "superclass": {
            "name": "LitElement",
            "package": "lit"
          },
          "tagName": "igc-icon",
          "customElement": true
        }
      ],
      "exports": [
        {
          "kind": "js",
          "name": "default",
          "declaration": {
            "name": "IgcIconComponent",
            "module": "src/components/icon/icon.ts"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "src/components/expansion-panel/expansion-panel.ts",
      "declarations": [
        {
          "kind": "class",
          "description": "The Expansion Panel Component provides a way to display information in a toggleable way -\ncompact summary view containing title and description and expanded detail view containing\nadditional content to the summary header.",
          "name": "IgcExpansionPanelComponent",
          "cssParts": [
            {
              "description": "The container of the expansion indicator, title and subtitle.",
              "name": "header"
            },
            {
              "description": " The title container.",
              "name": "title"
            },
            {
              "description": "The subtitle container.",
              "name": "subtitle"
            },
            {
              "description": "The indicator container.",
              "name": "indicator"
            },
            {
              "description": "The expansion panel's content wrapper.",
              "name": "content"
            }
          ],
          "slots": [
            {
              "description": "renders the default content of the panel",
              "name": ""
            },
            {
              "description": "renders the title of the panel's header",
              "name": "title"
            },
            {
              "description": "renders the subtitle of the panel's header",
              "name": "subtitle"
            },
            {
              "description": "renders the expand/collapsed indicator",
              "name": "indicator"
            },
            {
              "description": "renders the expanded state of the indicator",
              "name": "indicator-expanded"
            }
          ],
          "members": [
            {
              "kind": "field",
              "name": "tagName",
              "type": {
                "text": "string"
              },
              "privacy": "public",
              "static": true,
              "readonly": true,
              "default": "'igc-expansion-panel'"
            },
            {
              "kind": "method",
              "name": "register",
              "privacy": "public",
              "static": true
            },
            {
              "kind": "field",
              "name": "increment",
              "privacy": "private",
              "static": true,
              "readonly": true
            },
            {
              "kind": "field",
              "name": "_panelId",
              "type": {
                "text": "string"
              },
              "privacy": "private"
            },
            {
              "kind": "field",
              "name": "headerRef",
              "type": {
                "text": "Ref<HTMLDivElement>"
              },
              "privacy": "private"
            },
            {
              "kind": "field",
              "name": "contentRef",
              "type": {
                "text": "Ref<HTMLDivElement>"
              },
              "privacy": "private"
            },
            {
              "kind": "field",
              "name": "animationPlayer",
              "privacy": "private"
            },
            {
              "kind": "field",
              "name": "_indicatorExpandedElements",
              "type": {
                "text": "HTMLElement[]"
              },
              "privacy": "private"
            },
            {
              "kind": "field",
              "name": "open",
              "type": {
                "text": "boolean"
              },
              "privacy": "public",
              "default": "false",
              "description": "Indicates whether the contents of the control should be visible.",
              "attribute": "open",
              "reflects": true
            },
            {
              "kind": "field",
              "name": "disabled",
              "type": {
                "text": "boolean"
              },
              "privacy": "public",
              "default": "false",
              "description": "Get/Set whether the expansion panel is disabled. Disabled panels are ignored for user interactions.",
              "attribute": "disabled",
              "reflects": true
            },
            {
              "kind": "field",
              "name": "indicatorPosition",
              "type": {
                "text": "ExpansionPanelIndicatorPosition"
              },
              "privacy": "public",
              "default": "'start'",
              "description": "The indicator position of the expansion panel.",
              "attribute": "indicator-position",
              "reflects": true,
              "expandedType": {
                "text": "'start' | 'end' | 'none'"
              }
            },
            {
              "kind": "method",
              "name": "handleClick",
              "privacy": "private"
            },
            {
              "kind": "method",
              "name": "toggleWithEvent",
              "privacy": "private"
            },
            {
              "kind": "method",
              "name": "toggleAnimation",
              "privacy": "private",
              "parameters": [
                {
                  "name": "dir",
                  "type": {
                    "text": "'open' | 'close'"
                  }
                }
              ]
            },
            {
              "kind": "method",
              "name": "openWithEvent",
              "privacy": "private"
            },
            {
              "kind": "method",
              "name": "closeWithEvent",
              "privacy": "private"
            },
            {
              "kind": "method",
              "name": "toggle",
              "privacy": "public",
              "return": {
                "type": {
                  "text": "Promise<boolean>"
                }
              },
              "description": "Toggles the panel open/close state."
            },
            {
              "kind": "method",
              "name": "hide",
              "privacy": "public",
              "return": {
                "type": {
                  "text": "Promise<boolean>"
                }
              },
              "description": "Hides the panel content."
            },
            {
              "kind": "method",
              "name": "show",
              "privacy": "public",
              "return": {
                "type": {
                  "text": "Promise<boolean>"
                }
              },
              "description": "Shows the panel content."
            },
            {
              "kind": "method",
              "name": "renderIndicatorTemplate",
              "privacy": "private"
            },
            {
              "kind": "method",
              "name": "renderHeaderTemplate",
              "privacy": "private"
            },
            {
              "kind": "method",
              "name": "renderContentTemplate",
              "privacy": "private"
            },
            {
              "kind": "method",
              "name": "addEventListener",
              "privacy": "public",
              "return": {
                "type": {
                  "text": "void"
                }
              },
              "parameters": [
                {
                  "name": "type",
                  "type": {
                    "text": "K"
                  }
                },
                {
                  "name": "listener",
                  "type": {
                    "text": "(this: HTMLElement, ev: M[K]) => any"
                  }
                },
                {
                  "name": "options",
                  "optional": true,
                  "type": {
                    "text": "boolean | AddEventListenerOptions"
                  }
                }
              ],
              "inheritedFrom": {
                "name": "EventEmitterMixin",
                "module": "src/components/common/mixins/event-emitter.ts"
              }
            },
            {
              "kind": "method",
              "name": "removeEventListener",
              "privacy": "public",
              "return": {
                "type": {
                  "text": "void"
                }
              },
              "parameters": [
                {
                  "name": "type",
                  "type": {
                    "text": "K"
                  }
                },
                {
                  "name": "listener",
                  "type": {
                    "text": "(this: HTMLElement, ev: M[K]) => any"
                  }
                },
                {
                  "name": "options",
                  "optional": true,
                  "type": {
                    "text": "boolean | EventListenerOptions"
                  }
                }
              ],
              "inheritedFrom": {
                "name": "EventEmitterMixin",
                "module": "src/components/common/mixins/event-emitter.ts"
              }
            },
            {
              "kind": "method",
              "name": "emitEvent",
              "privacy": "private",
              "return": {
                "type": {
                  "text": "boolean"
                }
              },
              "parameters": [
                {
                  "name": "type",
                  "type": {
                    "text": "K"
                  }
                },
                {
                  "name": "eventInitDict",
                  "optional": true,
                  "type": {
                    "text": "CustomEventInit<D>"
                  }
                }
              ],
              "inheritedFrom": {
                "name": "EventEmitterMixin",
                "module": "src/components/common/mixins/event-emitter.ts"
              }
            }
          ],
          "events": [
            {
              "description": "Emitted before opening the expansion panel.",
              "name": "igcOpening"
            },
            {
              "description": "Emitted after the expansion panel is opened.",
              "name": "igcOpened"
            },
            {
              "description": "Emitted before closing the expansion panel.",
              "name": "igcClosing"
            },
            {
              "description": "Emitted after the expansion panel is closed.",
              "name": "igcClosed"
            },
            {
              "type": {
                "text": "CustomEvent"
              },
              "inheritedFrom": {
                "name": "EventEmitterMixin",
                "module": "src/components/common/mixins/event-emitter.ts"
              }
            }
          ],
          "attributes": [
            {
              "name": "open",
              "type": {
                "text": "boolean"
              },
              "default": "false",
              "description": "Indicates whether the contents of the control should be visible.",
              "fieldName": "open",
              "attribute": "open"
            },
            {
              "name": "disabled",
              "type": {
                "text": "boolean"
              },
              "default": "false",
              "description": "Get/Set whether the expansion panel is disabled. Disabled panels are ignored for user interactions.",
              "fieldName": "disabled",
              "attribute": "disabled"
            },
            {
              "name": "indicator-position",
              "type": {
                "text": "ExpansionPanelIndicatorPosition"
              },
              "default": "'start'",
              "description": "The indicator position of the expansion panel.",
              "fieldName": "indicatorPosition",
              "attribute": "indicator-position",
              "expandedType": {
                "text": "'start' | 'end' | 'none'"
              }
            }
          ],
          "mixins": [
            {
              "name": "EventEmitterMixin",
              "module": "/src/components/common/mixins/event-emitter.js"
            }
          ],
          "superclass": {
            "name": "LitElement",
            "package": "lit"
          },
          "tagName": "igc-expansion-panel",
          "customElement": true
        }
      ],
      "exports": [
        {
          "kind": "js",
          "name": "default",
          "declaration": {
            "name": "IgcExpansionPanelComponent",
            "module": "src/components/expansion-panel/expansion-panel.ts"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "src/components/accordion/accordion.ts",
      "declarations": [
        {
          "kind": "class",
          "description": "The Accordion is a container-based component that can house multiple expansion panels\nand offers keyboard navigation.",
          "name": "IgcAccordionComponent",
          "slots": [
            {
              "description": "Renders the expansion panels inside default slot.",
              "name": ""
            }
          ],
          "members": [
            {
              "kind": "field",
              "name": "tagName",
              "type": {
                "text": "string"
              },
              "privacy": "public",
              "static": true,
              "readonly": true,
              "default": "'igc-accordion'"
            },
            {
              "kind": "method",
              "name": "register",
              "privacy": "public",
              "static": true
            },
            {
              "kind": "field",
              "name": "enabledPanels",
              "type": {
                "text": "Array<IgcExpansionPanelComponent>"
              },
              "privacy": "private"
            },
            {
              "kind": "field",
              "name": "singleExpand",
              "type": {
                "text": "boolean"
              },
              "privacy": "public",
              "default": "false",
              "description": "Allows only one panel to be expanded at a time.",
              "attribute": "single-expand",
              "reflects": true
            },
            {
              "kind": "field",
              "name": "panels",
              "type": {
                "text": "Array<IgcExpansionPanelComponent>"
              },
              "privacy": "public",
              "description": "Returns all of the accordions's direct igc-expansion-panel children."
            },
            {
              "kind": "method",
              "name": "skipKeybinding",
              "privacy": "private",
              "parameters": [
                {
                  "name": "target",
                  "type": {
                    "text": "Element"
                  }
                }
              ]
            },
            {
              "kind": "method",
              "name": "navigatePrev",
              "privacy": "private",
              "parameters": [
                {
                  "name": "event",
                  "type": {
                    "text": "KeyboardEvent"
                  }
                }
              ]
            },
            {
              "kind": "method",
              "name": "navigateNext",
              "privacy": "private",
              "parameters": [
                {
                  "name": "event",
                  "type": {
                    "text": "KeyboardEvent"
                  }
                }
              ]
            },
            {
              "kind": "method",
              "name": "collapseAll",
              "privacy": "private"
            },
            {
              "kind": "method",
              "name": "expandAll",
              "privacy": "private",
              "parameters": [
                {
                  "name": "event",
                  "type": {
                    "text": "KeyboardEvent"
                  }
                }
              ]
            },
            {
              "kind": "method",
              "name": "handlePanelOpening",
              "privacy": "private",
              "parameters": [
                {
                  "name": "event",
                  "type": {
                    "text": "Event"
                  }
                }
              ]
            },
            {
              "kind": "method",
              "name": "getNextPanel",
              "privacy": "private",
              "parameters": [
                {
                  "name": "panel",
                  "type": {
                    "text": "IgcExpansionPanelComponent"
                  }
                },
                {
                  "name": "dir",
                  "default": "1",
                  "type": {
                    "text": "1 | -1"
                  }
                }
              ]
            },
            {
              "kind": "method",
              "name": "getPanelHeader",
              "privacy": "private",
              "parameters": [
                {
                  "name": "panel",
                  "type": {
                    "text": "IgcExpansionPanelComponent"
                  }
                }
              ]
            },
            {
              "kind": "method",
              "name": "closePanel",
              "privacy": "private",
              "parameters": [
                {
                  "name": "panel",
                  "type": {
                    "text": "IgcExpansionPanelComponent"
                  }
                }
              ]
            },
            {
              "kind": "method",
              "name": "openPanel",
              "privacy": "private",
              "parameters": [
                {
                  "name": "panel",
                  "type": {
                    "text": "IgcExpansionPanelComponent"
                  }
                }
              ]
            },
            {
              "kind": "method",
              "name": "hideAll",
              "privacy": "public",
              "return": {
                "type": {
                  "text": "Promise<void>"
                }
              },
              "description": "Hides all of the child expansion panels' contents."
            },
            {
              "kind": "method",
              "name": "showAll",
              "privacy": "public",
              "return": {
                "type": {
                  "text": "Promise<void>"
                }
              },
              "description": "Shows all of the child expansion panels' contents."
            }
          ],
          "attributes": [
            {
              "name": "single-expand",
              "type": {
                "text": "boolean"
              },
              "default": "false",
              "description": "Allows only one panel to be expanded at a time.",
              "fieldName": "singleExpand",
              "attribute": "single-expand"
            }
          ],
          "superclass": {
            "name": "LitElement",
            "package": "lit"
          },
          "tagName": "igc-accordion",
          "customElement": true
        }
      ],
      "exports": [
        {
          "kind": "js",
          "name": "default",
          "declaration": {
            "name": "IgcAccordionComponent",
            "module": "src/components/accordion/accordion.ts"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "src/components/badge/badge.ts",
      "declarations": [
        {
          "kind": "class",
          "description": "The badge is a component indicating a status on a related item or an area\nwhere some active indication is required.",
          "name": "IgcBadgeComponent",
          "cssParts": [
            {
              "description": "The base wrapper of the badge.",
              "name": "base"
            }
          ],
          "slots": [
            {
              "description": "Default slot for the badge.",
              "name": ""
            }
          ],
          "members": [
            {
              "kind": "field",
              "name": "tagName",
              "type": {
                "text": "string"
              },
              "privacy": "public",
              "static": true,
              "readonly": true,
              "default": "'igc-badge'"
            },
            {
              "kind": "method",
              "name": "register",
              "privacy": "public",
              "static": true,
              "return": {
                "type": {
                  "text": "void"
                }
              }
            },
            {
              "kind": "field",
              "name": "_internals",
              "privacy": "private",
              "readonly": true
            },
            {
              "kind": "field",
              "name": "variant",
              "type": {
                "text": "StyleVariant"
              },
              "privacy": "public",
              "default": "'primary'",
              "description": "The type of badge.",
              "attribute": "variant",
              "reflects": true,
              "expandedType": {
                "text": "'primary' | 'info' | 'success' | 'warning' | 'danger'"
              }
            },
            {
              "kind": "field",
              "name": "outlined",
              "type": {
                "text": "boolean"
              },
              "privacy": "public",
              "default": "false",
              "description": "Sets whether to draw an outlined version of the badge.",
              "attribute": "outlined",
              "reflects": true
            },
            {
              "kind": "field",
              "name": "shape",
              "type": {
                "text": "BadgeShape"
              },
              "privacy": "public",
              "default": "'rounded'",
              "description": "The shape of the badge.",
              "attribute": "shape",
              "reflects": true,
              "expandedType": {
                "text": "'rounded' | 'square'"
              }
            }
          ],
          "attributes": [
            {
              "name": "variant",
              "type": {
                "text": "StyleVariant"
              },
              "default": "'primary'",
              "description": "The type of badge.",
              "fieldName": "variant",
              "attribute": "variant",
              "expandedType": {
                "text": "'primary' | 'info' | 'success' | 'warning' | 'danger'"
              }
            },
            {
              "name": "outlined",
              "type": {
                "text": "boolean"
              },
              "default": "false",
              "description": "Sets whether to draw an outlined version of the badge.",
              "fieldName": "outlined",
              "attribute": "outlined"
            },
            {
              "name": "shape",
              "type": {
                "text": "BadgeShape"
              },
              "default": "'rounded'",
              "description": "The shape of the badge.",
              "fieldName": "shape",
              "attribute": "shape",
              "expandedType": {
                "text": "'rounded' | 'square'"
              }
            }
          ],
          "superclass": {
            "name": "LitElement",
            "package": "lit"
          },
          "tagName": "igc-badge",
          "customElement": true
        }
      ],
      "exports": [
        {
          "kind": "js",
          "name": "default",
          "declaration": {
            "name": "IgcBadgeComponent",
            "module": "src/components/badge/badge.ts"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "src/components/common/controllers/focus-ring.ts",
      "declarations": [
        {
          "kind": "class",
          "description": "A controller class which determines whether a focus ring should be shown to indicate keyboard focus.\nFocus rings are visible only when the user is interacting with a keyboard, not with a mouse, touch, or other input methods.\n\nBy default the class attaches a keyup event handler on the component host and will update its keyboard focus\nstate based on it.\n\n**Important Note:** This controller is designed for use with **atomic web components** that represent single,\ninteractive elements (e.g., buttons, form fields, interactive icons). It helps these components correctly\ndisplay a focus indicator *only* when keyboard navigation is occurring, improving accessibility without\nvisual clutter during mouse or touch interactions.\n\n**Do not use this controller as a general-purpose shortcut for managing focus state in complex components or layouts.**\nMisusing it in this way can lead to incorrect focus ring behavior, accessibility issues, and make your\napplication harder to maintain. For managing focus within larger, composite components, consider alternative\nstrategies like ARIA attributes, managing `tabindex`, or a bespoke implementation if needed.",
          "name": "KeyboardFocusRingController",
          "members": [
            {
              "kind": "field",
              "name": "_events",
              "privacy": "private",
              "static": true,
              "readonly": true,
              "default": "[ 'keyup', 'focusout', 'pointerdown', ]",
              "type": {
                "text": "[\n    'keyup',\n    'focusout',\n    'pointerdown',\n  ]"
              }
            },
            {
              "kind": "field",
              "name": "_host",
              "type": {
                "text": "ReactiveControllerHost & HTMLElement"
              },
              "privacy": "private",
              "readonly": true,
              "default": "host"
            },
            {
              "kind": "field",
              "name": "_abortHandle",
              "privacy": "private",
              "readonly": true
            },
            {
              "kind": "field",
              "name": "_isKeyboardFocused",
              "type": {
                "text": "boolean"
              },
              "privacy": "private",
              "default": "false"
            },
            {
              "kind": "field",
              "name": "focused",
              "type": {
                "text": "boolean"
              },
              "privacy": "public",
              "description": "Gets whether the current focus state is activated through a keyboard interaction.",
              "readonly": true
            }
          ]
        },
        {
          "kind": "function",
          "name": "addKeyboardFocusRing",
          "return": {
            "type": {
              "text": "KeyboardFocusRingController"
            }
          },
          "parameters": [
            {
              "name": "host",
              "type": {
                "text": "ReactiveControllerHost & HTMLElement"
              }
            }
          ],
          "description": "Adds a KeyboardFocusRingController responsible for managing keyboard focus state.\n\nThis utility function is intended for use with **atomic web components** that require\ndynamic focus ring visibility based on keyboard interaction."
        }
      ],
      "exports": [
        {
          "kind": "js",
          "name": "KeyboardFocusRingController",
          "declaration": {
            "name": "KeyboardFocusRingController",
            "module": "src/components/common/controllers/focus-ring.ts"
          }
        },
        {
          "kind": "js",
          "name": "addKeyboardFocusRing",
          "declaration": {
            "name": "addKeyboardFocusRing",
            "module": "src/components/common/controllers/focus-ring.ts"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "src/components/common/decorators/blazorDeepImport.ts",
      "declarations": [
        {
          "kind": "function",
          "name": "blazorDeepImport",
          "parameters": [
            {
              "name": "_constructor",
              "type": {
                "text": "Constructor | AbstractConstructor"
              }
            }
          ],
          "description": "Indicates a class isn't imported at the root of the API, so needs to be referred to with a deep import in the wrappers."
        }
      ],
      "exports": [
        {
          "kind": "js",
          "name": "blazorDeepImport",
          "declaration": {
            "name": "blazorDeepImport",
            "module": "src/components/common/decorators/blazorDeepImport.ts"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "src/components/common/decorators/shadow-options.ts",
      "declarations": [
        {
          "kind": "function",
          "name": "shadowOptions",
          "return": {
            "type": {
              "text": "(proto: unknown) => void"
            }
          },
          "parameters": [
            {
              "name": "options",
              "type": {
                "text": "Partial<ShadowRootInit>"
              }
            }
          ],
          "description": "TypeScript decorator that allows customizing the Shadow DOM options for a LitElement component.\n\nThis decorator merges the provided `options` with LitElement's default `shadowRootOptions`,\nproviding a convenient way to configure the Shadow DOM, such as its `mode` (e.g., 'open' or 'closed')\nor `delegatesFocus` property.\n\nhttps://developer.mozilla.org/en-US/docs/Web/API/Element/attachShadow#options"
        }
      ],
      "exports": [
        {
          "kind": "js",
          "name": "shadowOptions",
          "declaration": {
            "name": "shadowOptions",
            "module": "src/components/common/decorators/shadow-options.ts"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "src/components/common/part-map.ts",
      "declarations": [
        {
          "kind": "class",
          "description": "",
          "name": "PartMapDirective",
          "members": [
            {
              "kind": "field",
              "name": "_previousParts",
              "type": {
                "text": "Set<string> | undefined"
              },
              "privacy": "private"
            }
          ],
          "superclass": {
            "name": "Directive",
            "package": "lit/directive.js"
          }
        },
        {
          "kind": "variable",
          "name": "partMap",
          "description": "Similar to Lit's https://lit.dev/docs/templates/directives/#classmap | `classMap` and\nhttps://lit.dev/docs/templates/directives/#stylemap | `styleMap` but for `part` attributes."
        }
      ],
      "exports": [
        {
          "kind": "js",
          "name": "partMap",
          "declaration": {
            "name": "partMap",
            "module": "src/components/common/part-map.ts"
          }
        },
        {
          "kind": "js",
          "name": "PartMapDirective",
          "declaration": {
            "name": "PartMapDirective",
            "module": "src/components/common/part-map.ts"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "src/components/button/button-base.ts",
      "declarations": [
        {
          "kind": "class",
          "description": "",
          "name": "IgcButtonBaseComponent",
          "members": [
            {
              "kind": "field",
              "name": "formAssociated",
              "type": {
                "text": "boolean"
              },
              "privacy": "public",
              "static": true,
              "readonly": true,
              "default": "true"
            },
            {
              "kind": "field",
              "name": "_internals",
              "privacy": "protected",
              "readonly": true
            },
            {
              "kind": "field",
              "name": "_focusRingManager",
              "privacy": "private",
              "readonly": true
            },
            {
              "kind": "field",
              "name": "_disabled",
              "type": {
                "text": "boolean"
              },
              "privacy": "protected",
              "default": "false"
            },
            {
              "kind": "field",
              "name": "_nativeButton",
              "type": {
                "text": "HTMLButtonElement"
              },
              "privacy": "private",
              "readonly": true
            },
            {
              "kind": "field",
              "name": "type",
              "type": {
                "text": "'button' | 'reset' | 'submit'"
              },
              "privacy": "public",
              "default": "'button'",
              "description": "The type of the button. Defaults to `button`.",
              "attribute": "type",
              "reflects": true
            },
            {
              "kind": "field",
              "name": "href",
              "type": {
                "text": "string | undefined"
              },
              "privacy": "public",
              "description": "The URL the button points to.",
              "attribute": "href"
            },
            {
              "kind": "field",
              "name": "download",
              "type": {
                "text": "string | undefined"
              },
              "privacy": "public",
              "description": "Prompts to save the linked URL instead of navigating to it.",
              "attribute": "download"
            },
            {
              "kind": "field",
              "name": "target",
              "type": {
                "text": "'_blank' | '_parent' | '_self' | '_top' | undefined"
              },
              "privacy": "public",
              "description": "Where to display the linked URL, as the name for a browsing context.",
              "attribute": "target"
            },
            {
              "kind": "field",
              "name": "rel",
              "type": {
                "text": "string | undefined"
              },
              "privacy": "public",
              "description": "The relationship of the linked URL.\nSee https://developer.mozilla.org/en-US/docs/Web/HTML/Link_types",
              "attribute": "rel"
            },
            {
              "kind": "field",
              "name": "disabled",
              "privacy": "public",
              "description": "The disabled state of the component",
              "attribute": "disabled",
              "type": {
                "text": "boolean"
              },
              "reflects": true
            },
            {
              "kind": "field",
              "name": "form",
              "type": {
                "text": "HTMLFormElement | null"
              },
              "privacy": "public",
              "description": "Returns the HTMLFormElement associated with this element.",
              "readonly": true
            },
            {
              "kind": "method",
              "name": "focus",
              "privacy": "public",
              "return": {
                "type": {
                  "text": "void"
                }
              },
              "parameters": [
                {
                  "name": "options",
                  "optional": true,
                  "type": {
                    "text": "FocusOptions"
                  }
                }
              ],
              "description": "Sets focus in the button."
            },
            {
              "kind": "method",
              "name": "click",
              "privacy": "public",
              "return": {
                "type": {
                  "text": "void"
                }
              },
              "description": "Simulates a mouse click on the element"
            },
            {
              "kind": "method",
              "name": "blur",
              "privacy": "public",
              "return": {
                "type": {
                  "text": "void"
                }
              },
              "description": "Removes focus from the button."
            },
            {
              "kind": "method",
              "name": "_handleClick",
              "privacy": "protected",
              "return": {
                "type": {
                  "text": "void"
                }
              }
            },
            {
              "kind": "method",
              "name": "formDisabledCallback",
              "privacy": "protected",
              "return": {
                "type": {
                  "text": "void"
                }
              },
              "parameters": [
                {
                  "name": "state",
                  "type": {
                    "text": "boolean"
                  }
                }
              ]
            },
            {
              "kind": "method",
              "name": "renderButton",
              "privacy": "private"
            },
            {
              "kind": "method",
              "name": "renderLinkButton",
              "privacy": "private"
            },
            {
              "kind": "method",
              "name": "renderContent",
              "privacy": "protected",
              "return": {
                "type": {
                  "text": "TemplateResult"
                }
              }
            },
            {
              "kind": "method",
              "name": "addEventListener",
              "privacy": "public",
              "return": {
                "type": {
                  "text": "void"
                }
              },
              "parameters": [
                {
                  "name": "type",
                  "type": {
                    "text": "K"
                  }
                },
                {
                  "name": "listener",
                  "type": {
                    "text": "(this: HTMLElement, ev: M[K]) => any"
                  }
                },
                {
                  "name": "options",
                  "optional": true,
                  "type": {
                    "text": "boolean | AddEventListenerOptions"
                  }
                }
              ],
              "inheritedFrom": {
                "name": "EventEmitterMixin",
                "module": "src/components/common/mixins/event-emitter.ts"
              }
            },
            {
              "kind": "method",
              "name": "removeEventListener",
              "privacy": "public",
              "return": {
                "type": {
                  "text": "void"
                }
              },
              "parameters": [
                {
                  "name": "type",
                  "type": {
                    "text": "K"
                  }
                },
                {
                  "name": "listener",
                  "type": {
                    "text": "(this: HTMLElement, ev: M[K]) => any"
                  }
                },
                {
                  "name": "options",
                  "optional": true,
                  "type": {
                    "text": "boolean | EventListenerOptions"
                  }
                }
              ],
              "inheritedFrom": {
                "name": "EventEmitterMixin",
                "module": "src/components/common/mixins/event-emitter.ts"
              }
            },
            {
              "kind": "method",
              "name": "emitEvent",
              "privacy": "private",
              "return": {
                "type": {
                  "text": "boolean"
                }
              },
              "parameters": [
                {
                  "name": "type",
                  "type": {
                    "text": "K"
                  }
                },
                {
                  "name": "eventInitDict",
                  "optional": true,
                  "type": {
                    "text": "CustomEventInit<D>"
                  }
                }
              ],
              "inheritedFrom": {
                "name": "EventEmitterMixin",
                "module": "src/components/common/mixins/event-emitter.ts"
              }
            }
          ],
          "attributes": [
            {
              "name": "type",
              "type": {
                "text": "'button' | 'reset' | 'submit'"
              },
              "default": "'button'",
              "description": "The type of the button. Defaults to `button`.",
              "fieldName": "type",
              "attribute": "type"
            },
            {
              "name": "href",
              "type": {
                "text": "string | undefined"
              },
              "description": "The URL the button points to.",
              "fieldName": "href",
              "attribute": "href"
            },
            {
              "name": "download",
              "type": {
                "text": "string | undefined"
              },
              "description": "Prompts to save the linked URL instead of navigating to it.",
              "fieldName": "download",
              "attribute": "download"
            },
            {
              "name": "target",
              "type": {
                "text": "'_blank' | '_parent' | '_self' | '_top' | undefined"
              },
              "description": "Where to display the linked URL, as the name for a browsing context.",
              "fieldName": "target",
              "attribute": "target"
            },
            {
              "name": "rel",
              "type": {
                "text": "string | undefined"
              },
              "description": "The relationship of the linked URL.\nSee https://developer.mozilla.org/en-US/docs/Web/HTML/Link_types",
              "fieldName": "rel",
              "attribute": "rel"
            },
            {
              "name": "disabled",
              "description": "The disabled state of the component",
              "fieldName": "disabled",
              "attribute": "disabled",
              "type": {
                "text": "boolean"
              }
            }
          ],
          "mixins": [
            {
              "name": "EventEmitterMixin",
              "module": "/src/components/common//mixins/event-emitter.js"
            }
          ],
          "superclass": {
            "name": "LitElement",
            "package": "lit"
          },
          "customElement": true,
          "events": [
            {
              "type": {
                "text": "CustomEvent"
              },
              "inheritedFrom": {
                "name": "EventEmitterMixin",
                "module": "src/components/common/mixins/event-emitter.ts"
              }
            }
          ]
        }
      ],
      "exports": [
        {
          "kind": "js",
          "name": "IgcButtonBaseComponent",
          "declaration": {
            "name": "IgcButtonBaseComponent",
            "module": "src/components/button/button-base.ts"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "src/components/button/button.ts",
      "declarations": [
        {
          "kind": "class",
          "description": "Represents a clickable button, used to submit forms or anywhere in a\ndocument for accessible, standard button functionality.",
          "name": "IgcButtonComponent",
          "cssParts": [
            {
              "description": "The native button element of the igc-button component.",
              "name": "base"
            },
            {
              "description": "The prefix container of the igc-button component.",
              "name": "prefix"
            },
            {
              "description": "The suffix container of the igc-button component.",
              "name": "suffix"
            }
          ],
          "slots": [
            {
              "description": "Renders the label of the button.",
              "name": ""
            },
            {
              "description": "Renders content before the label of the button.",
              "name": "prefix"
            },
            {
              "description": "Renders content after the label of the button.",
              "name": "suffix"
            }
          ],
          "members": [
            {
              "kind": "field",
              "name": "tagName",
              "type": {
                "text": "string"
              },
              "privacy": "public",
              "static": true,
              "readonly": true,
              "default": "'igc-button'"
            },
            {
              "kind": "method",
              "name": "register",
              "privacy": "public",
              "static": true,
              "return": {
                "type": {
                  "text": "void"
                }
              }
            },
            {
              "kind": "field",
              "name": "variant",
              "type": {
                "text": "ButtonVariant"
              },
              "privacy": "public",
              "default": "'contained'",
              "description": "Sets the variant of the button.",
              "attribute": "variant",
              "reflects": true,
              "expandedType": {
                "text": "'contained' | 'flat' | 'outlined' | 'fab'"
              }
            },
            {
              "kind": "method",
              "name": "renderContent",
              "privacy": "protected",
              "return": {
                "type": {
                  "text": "TemplateResult"
                }
              },
              "inheritedFrom": {
                "name": "IgcButtonBaseComponent",
                "module": "src/components/button/button-base.ts"
              }
            },
            {
              "kind": "method",
              "name": "addEventListener",
              "privacy": "public",
              "return": {
                "type": {
                  "text": "void"
                }
              },
              "parameters": [
                {
                  "name": "type",
                  "type": {
                    "text": "K"
                  }
                },
                {
                  "name": "listener",
                  "type": {
                    "text": "(this: HTMLElement, ev: M[K]) => any"
                  }
                },
                {
                  "name": "options",
                  "optional": true,
                  "type": {
                    "text": "boolean | AddEventListenerOptions"
                  }
                }
              ],
              "inheritedFrom": {
                "name": "IgcButtonBaseComponent",
                "module": "src/components/button/button-base.ts"
              }
            },
            {
              "kind": "method",
              "name": "removeEventListener",
              "privacy": "public",
              "return": {
                "type": {
                  "text": "void"
                }
              },
              "parameters": [
                {
                  "name": "type",
                  "type": {
                    "text": "K"
                  }
                },
                {
                  "name": "listener",
                  "type": {
                    "text": "(this: HTMLElement, ev: M[K]) => any"
                  }
                },
                {
                  "name": "options",
                  "optional": true,
                  "type": {
                    "text": "boolean | EventListenerOptions"
                  }
                }
              ],
              "inheritedFrom": {
                "name": "IgcButtonBaseComponent",
                "module": "src/components/button/button-base.ts"
              }
            },
            {
              "kind": "method",
              "name": "emitEvent",
              "privacy": "private",
              "return": {
                "type": {
                  "text": "boolean"
                }
              },
              "parameters": [
                {
                  "name": "type",
                  "type": {
                    "text": "K"
                  }
                },
                {
                  "name": "eventInitDict",
                  "optional": true,
                  "type": {
                    "text": "CustomEventInit<D>"
                  }
                }
              ],
              "inheritedFrom": {
                "name": "IgcButtonBaseComponent",
                "module": "src/components/button/button-base.ts"
              }
            },
            {
              "kind": "field",
              "name": "formAssociated",
              "type": {
                "text": "boolean"
              },
              "privacy": "public",
              "static": true,
              "readonly": true,
              "default": "true",
              "inheritedFrom": {
                "name": "IgcButtonBaseComponent",
                "module": "src/components/button/button-base.ts"
              }
            },
            {
              "kind": "field",
              "name": "_internals",
              "privacy": "protected",
              "readonly": true,
              "inheritedFrom": {
                "name": "IgcButtonBaseComponent",
                "module": "src/components/button/button-base.ts"
              }
            },
            {
              "kind": "field",
              "name": "_focusRingManager",
              "privacy": "private",
              "readonly": true,
              "inheritedFrom": {
                "name": "IgcButtonBaseComponent",
                "module": "src/components/button/button-base.ts"
              }
            },
            {
              "kind": "field",
              "name": "_disabled",
              "type": {
                "text": "boolean"
              },
              "privacy": "protected",
              "default": "false",
              "inheritedFrom": {
                "name": "IgcButtonBaseComponent",
                "module": "src/components/button/button-base.ts"
              }
            },
            {
              "kind": "field",
              "name": "_nativeButton",
              "type": {
                "text": "HTMLButtonElement"
              },
              "privacy": "private",
              "readonly": true,
              "inheritedFrom": {
                "name": "IgcButtonBaseComponent",
                "module": "src/components/button/button-base.ts"
              }
            },
            {
              "kind": "field",
              "name": "type",
              "type": {
                "text": "'button' | 'reset' | 'submit'"
              },
              "privacy": "public",
              "default": "'button'",
              "description": "The type of the button. Defaults to `button`.",
              "attribute": "type",
              "reflects": true,
              "inheritedFrom": {
                "name": "IgcButtonBaseComponent",
                "module": "src/components/button/button-base.ts"
              }
            },
            {
              "kind": "field",
              "name": "href",
              "type": {
                "text": "string | undefined"
              },
              "privacy": "public",
              "description": "The URL the button points to.",
              "attribute": "href",
              "inheritedFrom": {
                "name": "IgcButtonBaseComponent",
                "module": "src/components/button/button-base.ts"
              }
            },
            {
              "kind": "field",
              "name": "download",
              "type": {
                "text": "string | undefined"
              },
              "privacy": "public",
              "description": "Prompts to save the linked URL instead of navigating to it.",
              "attribute": "download",
              "inheritedFrom": {
                "name": "IgcButtonBaseComponent",
                "module": "src/components/button/button-base.ts"
              }
            },
            {
              "kind": "field",
              "name": "target",
              "type": {
                "text": "'_blank' | '_parent' | '_self' | '_top' | undefined"
              },
              "privacy": "public",
              "description": "Where to display the linked URL, as the name for a browsing context.",
              "attribute": "target",
              "inheritedFrom": {
                "name": "IgcButtonBaseComponent",
                "module": "src/components/button/button-base.ts"
              }
            },
            {
              "kind": "field",
              "name": "rel",
              "type": {
                "text": "string | undefined"
              },
              "privacy": "public",
              "description": "The relationship of the linked URL.\nSee https://developer.mozilla.org/en-US/docs/Web/HTML/Link_types",
              "attribute": "rel",
              "inheritedFrom": {
                "name": "IgcButtonBaseComponent",
                "module": "src/components/button/button-base.ts"
              }
            },
            {
              "kind": "field",
              "name": "disabled",
              "privacy": "public",
              "description": "The disabled state of the component",
              "attribute": "disabled",
              "type": {
                "text": "boolean"
              },
              "reflects": true,
              "inheritedFrom": {
                "name": "IgcButtonBaseComponent",
                "module": "src/components/button/button-base.ts"
              }
            },
            {
              "kind": "field",
              "name": "form",
              "type": {
                "text": "HTMLFormElement | null"
              },
              "privacy": "public",
              "description": "Returns the HTMLFormElement associated with this element.",
              "readonly": true,
              "inheritedFrom": {
                "name": "IgcButtonBaseComponent",
                "module": "src/components/button/button-base.ts"
              }
            },
            {
              "kind": "method",
              "name": "focus",
              "privacy": "public",
              "return": {
                "type": {
                  "text": "void"
                }
              },
              "parameters": [
                {
                  "name": "options",
                  "optional": true,
                  "type": {
                    "text": "FocusOptions"
                  }
                }
              ],
              "description": "Sets focus in the button.",
              "inheritedFrom": {
                "name": "IgcButtonBaseComponent",
                "module": "src/components/button/button-base.ts"
              }
            },
            {
              "kind": "method",
              "name": "click",
              "privacy": "public",
              "return": {
                "type": {
                  "text": "void"
                }
              },
              "description": "Simulates a mouse click on the element",
              "inheritedFrom": {
                "name": "IgcButtonBaseComponent",
                "module": "src/components/button/button-base.ts"
              }
            },
            {
              "kind": "method",
              "name": "blur",
              "privacy": "public",
              "return": {
                "type": {
                  "text": "void"
                }
              },
              "description": "Removes focus from the button.",
              "inheritedFrom": {
                "name": "IgcButtonBaseComponent",
                "module": "src/components/button/button-base.ts"
              }
            },
            {
              "kind": "method",
              "name": "_handleClick",
              "privacy": "protected",
              "return": {
                "type": {
                  "text": "void"
                }
              },
              "inheritedFrom": {
                "name": "IgcButtonBaseComponent",
                "module": "src/components/button/button-base.ts"
              }
            },
            {
              "kind": "method",
              "name": "formDisabledCallback",
              "privacy": "protected",
              "return": {
                "type": {
                  "text": "void"
                }
              },
              "parameters": [
                {
                  "name": "state",
                  "type": {
                    "text": "boolean"
                  }
                }
              ],
              "inheritedFrom": {
                "name": "IgcButtonBaseComponent",
                "module": "src/components/button/button-base.ts"
              }
            },
            {
              "kind": "method",
              "name": "renderButton",
              "privacy": "private",
              "inheritedFrom": {
                "name": "IgcButtonBaseComponent",
                "module": "src/components/button/button-base.ts"
              }
            },
            {
              "kind": "method",
              "name": "renderLinkButton",
              "privacy": "private",
              "inheritedFrom": {
                "name": "IgcButtonBaseComponent",
                "module": "src/components/button/button-base.ts"
              }
            }
          ],
          "attributes": [
            {
              "name": "variant",
              "type": {
                "text": "ButtonVariant"
              },
              "default": "'contained'",
              "description": "Sets the variant of the button.",
              "fieldName": "variant",
              "attribute": "variant",
              "expandedType": {
                "text": "'contained' | 'flat' | 'outlined' | 'fab'"
              }
            },
            {
              "name": "type",
              "type": {
                "text": "'button' | 'reset' | 'submit'"
              },
              "default": "'button'",
              "description": "The type of the button. Defaults to `button`.",
              "fieldName": "type",
              "attribute": "type",
              "inheritedFrom": {
                "name": "IgcButtonBaseComponent",
                "module": "src/components/button/button-base.ts"
              }
            },
            {
              "name": "href",
              "type": {
                "text": "string | undefined"
              },
              "description": "The URL the button points to.",
              "fieldName": "href",
              "attribute": "href",
              "inheritedFrom": {
                "name": "IgcButtonBaseComponent",
                "module": "src/components/button/button-base.ts"
              }
            },
            {
              "name": "download",
              "type": {
                "text": "string | undefined"
              },
              "description": "Prompts to save the linked URL instead of navigating to it.",
              "fieldName": "download",
              "attribute": "download",
              "inheritedFrom": {
                "name": "IgcButtonBaseComponent",
                "module": "src/components/button/button-base.ts"
              }
            },
            {
              "name": "target",
              "type": {
                "text": "'_blank' | '_parent' | '_self' | '_top' | undefined"
              },
              "description": "Where to display the linked URL, as the name for a browsing context.",
              "fieldName": "target",
              "attribute": "target",
              "inheritedFrom": {
                "name": "IgcButtonBaseComponent",
                "module": "src/components/button/button-base.ts"
              }
            },
            {
              "name": "rel",
              "type": {
                "text": "string | undefined"
              },
              "description": "The relationship of the linked URL.\nSee https://developer.mozilla.org/en-US/docs/Web/HTML/Link_types",
              "fieldName": "rel",
              "attribute": "rel",
              "inheritedFrom": {
                "name": "IgcButtonBaseComponent",
                "module": "src/components/button/button-base.ts"
              }
            },
            {
              "name": "disabled",
              "description": "The disabled state of the component",
              "fieldName": "disabled",
              "attribute": "disabled",
              "type": {
                "text": "boolean"
              },
              "inheritedFrom": {
                "name": "IgcButtonBaseComponent",
                "module": "src/components/button/button-base.ts"
              }
            }
          ],
          "superclass": {
            "name": "IgcButtonBaseComponent",
            "module": "/src/components/button/button-base.js"
          },
          "tagName": "igc-button",
          "customElement": true,
          "events": [
            {
              "type": {
                "text": "CustomEvent"
              },
              "inheritedFrom": {
                "name": "IgcButtonBaseComponent",
                "module": "src/components/button/button-base.ts"
              }
            }
          ]
        }
      ],
      "exports": [
        {
          "kind": "js",
          "name": "default",
          "declaration": {
            "name": "IgcButtonComponent",
            "module": "src/components/button/button.ts"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "src/components/banner/banner.ts",
      "declarations": [
        {
          "kind": "class",
          "description": "The `igc-banner` component displays important and concise message(s) for a user to address, that is specific to a page or feature.",
          "name": "IgcBannerComponent",
          "cssParts": [
            {
              "description": "The base wrapper of the banner component.",
              "name": "base"
            },
            {
              "description": "The inner wrapper that sets the space around the banner.",
              "name": "spacer"
            },
            {
              "description": "The part that holds the text and the illustration.",
              "name": "message"
            },
            {
              "description": "The part that holds the banner icon/illustration.",
              "name": "illustration"
            },
            {
              "description": "The part that holds the banner text content.",
              "name": "content"
            },
            {
              "description": "The part that holds the banner action buttons.",
              "name": "actions"
            }
          ],
          "slots": [
            {
              "description": "Renders the text content of the banner message.",
              "name": ""
            },
            {
              "description": "Renders additional content at the start of the message block.",
              "name": "prefix"
            },
            {
              "description": "Renders any action elements.",
              "name": "actions"
            }
          ],
          "members": [
            {
              "kind": "field",
              "name": "tagName",
              "type": {
                "text": "string"
              },
              "privacy": "public",
              "static": true,
              "readonly": true,
              "default": "'igc-banner'"
            },
            {
              "kind": "method",
              "name": "register",
              "privacy": "public",
              "static": true,
              "return": {
                "type": {
                  "text": "void"
                }
              }
            },
            {
              "kind": "field",
              "name": "_bannerRef",
              "type": {
                "text": "Ref<HTMLElement>"
              },
              "privacy": "private",
              "readonly": true
            },
            {
              "kind": "field",
              "name": "_animationPlayer",
              "privacy": "private",
              "readonly": true
            },
            {
              "kind": "field",
              "name": "open",
              "type": {
                "text": "boolean"
              },
              "privacy": "public",
              "default": "false",
              "description": "Determines whether the banner is being shown/hidden.",
              "attribute": "open",
              "reflects": true
            },
            {
              "kind": "method",
              "name": "show",
              "privacy": "public",
              "return": {
                "type": {
                  "text": "Promise<boolean>"
                }
              },
              "description": "Shows the banner if not already shown. Returns `true` when the animation has completed."
            },
            {
              "kind": "method",
              "name": "hide",
              "privacy": "public",
              "return": {
                "type": {
                  "text": "Promise<boolean>"
                }
              },
              "description": "Hides the banner if not already hidden. Returns `true` when the animation has completed."
            },
            {
              "kind": "method",
              "name": "toggle",
              "privacy": "public",
              "return": {
                "type": {
                  "text": "Promise<boolean>"
                }
              },
              "description": "Toggles between shown/hidden state. Returns `true` when the animation has completed."
            },
            {
              "kind": "method",
              "name": "toggleAnimation",
              "privacy": "private",
              "parameters": [
                {
                  "name": "dir",
                  "type": {
                    "text": "'open' | 'close'"
                  }
                }
              ]
            },
            {
              "kind": "method",
              "name": "handleClick",
              "privacy": "private"
            },
            {
              "kind": "method",
              "name": "addEventListener",
              "privacy": "public",
              "return": {
                "type": {
                  "text": "void"
                }
              },
              "parameters": [
                {
                  "name": "type",
                  "type": {
                    "text": "K"
                  }
                },
                {
                  "name": "listener",
                  "type": {
                    "text": "(this: HTMLElement, ev: M[K]) => any"
                  }
                },
                {
                  "name": "options",
                  "optional": true,
                  "type": {
                    "text": "boolean | AddEventListenerOptions"
                  }
                }
              ],
              "inheritedFrom": {
                "name": "EventEmitterMixin",
                "module": "src/components/common/mixins/event-emitter.ts"
              }
            },
            {
              "kind": "method",
              "name": "removeEventListener",
              "privacy": "public",
              "return": {
                "type": {
                  "text": "void"
                }
              },
              "parameters": [
                {
                  "name": "type",
                  "type": {
                    "text": "K"
                  }
                },
                {
                  "name": "listener",
                  "type": {
                    "text": "(this: HTMLElement, ev: M[K]) => any"
                  }
                },
                {
                  "name": "options",
                  "optional": true,
                  "type": {
                    "text": "boolean | EventListenerOptions"
                  }
                }
              ],
              "inheritedFrom": {
                "name": "EventEmitterMixin",
                "module": "src/components/common/mixins/event-emitter.ts"
              }
            },
            {
              "kind": "method",
              "name": "emitEvent",
              "privacy": "private",
              "return": {
                "type": {
                  "text": "boolean"
                }
              },
              "parameters": [
                {
                  "name": "type",
                  "type": {
                    "text": "K"
                  }
                },
                {
                  "name": "eventInitDict",
                  "optional": true,
                  "type": {
                    "text": "CustomEventInit<D>"
                  }
                }
              ],
              "inheritedFrom": {
                "name": "EventEmitterMixin",
                "module": "src/components/common/mixins/event-emitter.ts"
              }
            }
          ],
          "events": [
            {
              "description": "Emitted before closing the banner - when a user interacts (click) with the default action of the banner.",
              "name": "igcClosing"
            },
            {
              "description": "Emitted after the banner is closed - when a user interacts (click) with the default action of the banner.",
              "name": "igcClosed"
            },
            {
              "type": {
                "text": "CustomEvent"
              },
              "inheritedFrom": {
                "name": "EventEmitterMixin",
                "module": "src/components/common/mixins/event-emitter.ts"
              }
            }
          ],
          "attributes": [
            {
              "name": "open",
              "type": {
                "text": "boolean"
              },
              "default": "false",
              "description": "Determines whether the banner is being shown/hidden.",
              "fieldName": "open",
              "attribute": "open"
            }
          ],
          "mixins": [
            {
              "name": "EventEmitterMixin",
              "module": "/src/components/common/mixins/event-emitter.js"
            }
          ],
          "superclass": {
            "name": "LitElement",
            "package": "lit"
          },
          "tagName": "igc-banner",
          "customElement": true
        }
      ],
      "exports": [
        {
          "kind": "js",
          "name": "default",
          "declaration": {
            "name": "IgcBannerComponent",
            "module": "src/components/banner/banner.ts"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "src/components/common/controllers/mutation-observer.ts",
      "declarations": [
        {
          "kind": "function",
          "name": "createMutationController",
          "return": {
            "type": {
              "text": "MutationController<T>"
            }
          },
          "parameters": [
            {
              "name": "host",
              "type": {
                "text": "ReactiveControllerHost & Element"
              }
            },
            {
              "name": "config",
              "type": {
                "text": "MutationControllerConfig<T>"
              }
            }
          ],
          "description": "Creates and attaches a mutation controller with `config` to the passed in `host`.\n\nAutomatically starts/stops observing for mutation changes\nin the respective component connect/disconnect callbacks.\n\nThe mutation observer is disconnected before invoking the passed in callback and re-attached\nafter that in order to not loop itself in endless stream of changes."
        }
      ],
      "exports": [
        {
          "kind": "js",
          "name": "createMutationController",
          "declaration": {
            "name": "createMutationController",
            "module": "src/components/common/controllers/mutation-observer.ts"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "src/components/button-group/toggle-button.ts",
      "declarations": [
        {
          "kind": "class",
          "description": "The `igc-toggle-button` wraps a native button element and exposes additional `value` and `selected` properties.\nIt is used in the context of an `igc-button-group` to facilitate the creation of group/toolbar like UX behaviors.",
          "name": "IgcToggleButtonComponent",
          "cssParts": [
            {
              "description": "The native button element.",
              "name": "toggle"
            }
          ],
          "slots": [
            {
              "description": "the label/content of the button.",
              "name": "Renders"
            }
          ],
          "members": [
            {
              "kind": "field",
              "name": "tagName",
              "type": {
                "text": "string"
              },
              "privacy": "public",
              "static": true,
              "readonly": true,
              "default": "'igc-toggle-button'"
            },
            {
              "kind": "method",
              "name": "register",
              "privacy": "public",
              "static": true,
              "return": {
                "type": {
                  "text": "void"
                }
              }
            },
            {
              "kind": "field",
              "name": "_focusRingManager",
              "privacy": "private",
              "readonly": true
            },
            {
              "kind": "field",
              "name": "_nativeButton",
              "type": {
                "text": "HTMLButtonElement"
              },
              "privacy": "private",
              "readonly": true
            },
            {
              "kind": "field",
              "name": "value",
              "type": {
                "text": "string"
              },
              "privacy": "public",
              "description": "The value attribute of the control.",
              "attribute": "value"
            },
            {
              "kind": "field",
              "name": "selected",
              "type": {
                "text": "boolean"
              },
              "privacy": "public",
              "default": "false",
              "description": "Determines whether the button is selected.",
              "attribute": "selected",
              "reflects": true
            },
            {
              "kind": "field",
              "name": "disabled",
              "type": {
                "text": "boolean"
              },
              "privacy": "public",
              "default": "false",
              "description": "Determines whether the button is disabled.",
              "attribute": "disabled",
              "reflects": true
            },
            {
              "kind": "method",
              "name": "focus",
              "privacy": "public",
              "return": {
                "type": {
                  "text": "void"
                }
              },
              "parameters": [
                {
                  "name": "options",
                  "optional": true,
                  "type": {
                    "text": "FocusOptions"
                  }
                }
              ],
              "description": "Sets focus on the button."
            },
            {
              "kind": "method",
              "name": "blur",
              "privacy": "public",
              "return": {
                "type": {
                  "text": "void"
                }
              },
              "description": "Removes focus from the button."
            },
            {
              "kind": "method",
              "name": "click",
              "privacy": "public",
              "return": {
                "type": {
                  "text": "void"
                }
              },
              "description": "Simulates a mouse click on the element."
            }
          ],
          "attributes": [
            {
              "name": "value",
              "type": {
                "text": "string"
              },
              "description": "The value attribute of the control.",
              "fieldName": "value",
              "attribute": "value"
            },
            {
              "name": "selected",
              "type": {
                "text": "boolean"
              },
              "default": "false",
              "description": "Determines whether the button is selected.",
              "fieldName": "selected",
              "attribute": "selected"
            },
            {
              "name": "disabled",
              "type": {
                "text": "boolean"
              },
              "default": "false",
              "description": "Determines whether the button is disabled.",
              "fieldName": "disabled",
              "attribute": "disabled"
            }
          ],
          "superclass": {
            "name": "LitElement",
            "package": "lit"
          },
          "tagName": "igc-toggle-button",
          "customElement": true
        }
      ],
      "exports": [
        {
          "kind": "js",
          "name": "default",
          "declaration": {
            "name": "IgcToggleButtonComponent",
            "module": "src/components/button-group/toggle-button.ts"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "src/components/button-group/button-group.ts",
      "declarations": [
        {
          "kind": "class",
          "description": "The `igc-button-group` groups a series of `igc-toggle-button`s together, exposing features such as layout and selection.",
          "name": "IgcButtonGroupComponent",
          "cssParts": [
            {
              "description": "The button group container.",
              "name": "group"
            }
          ],
          "slots": [
            {
              "description": "Renders `igc-toggle-button` component.",
              "name": ""
            }
          ],
          "members": [
            {
              "kind": "field",
              "name": "tagName",
              "type": {
                "text": "string"
              },
              "privacy": "public",
              "static": true,
              "readonly": true,
              "default": "'igc-button-group'"
            },
            {
              "kind": "method",
              "name": "register",
              "privacy": "public",
              "static": true
            },
            {
              "kind": "field",
              "name": "isMultiple",
              "privacy": "private",
              "readonly": true
            },
            {
              "kind": "field",
              "name": "_selectedItems",
              "type": {
                "text": "Set<string>"
              },
              "privacy": "private",
              "default": "new Set()"
            },
            {
              "kind": "method",
              "name": "_observerCallback",
              "privacy": "private",
              "parameters": [
                {
                  "name": "{\n    changes: { added, attributes },\n  }",
                  "type": {
                    "text": "MutationControllerParams<IgcToggleButtonComponent>"
                  }
                }
              ]
            },
            {
              "kind": "field",
              "name": "_selectedButtons",
              "type": {
                "text": "Array<IgcToggleButtonComponent>"
              },
              "privacy": "private",
              "readonly": true
            },
            {
              "kind": "field",
              "name": "toggleButtons",
              "type": {
                "text": "Array<IgcToggleButtonComponent>"
              },
              "privacy": "private"
            },
            {
              "kind": "field",
              "name": "disabled",
              "type": {
                "text": "boolean"
              },
              "privacy": "public",
              "default": "false",
              "description": "Disables all buttons inside the group.",
              "attribute": "disabled",
              "reflects": true
            },
            {
              "kind": "field",
              "name": "alignment",
              "type": {
                "text": "ContentOrientation"
              },
              "privacy": "public",
              "default": "'horizontal'",
              "description": "Sets the orientation of the buttons in the group.",
              "attribute": "alignment",
              "reflects": true,
              "expandedType": {
                "text": "'horizontal' | 'vertical'"
              }
            },
            {
              "kind": "field",
              "name": "selection",
              "type": {
                "text": "ButtonGroupSelection"
              },
              "privacy": "public",
              "default": "'single'",
              "description": "Controls the mode of selection for the button group.",
              "attribute": "selection",
              "expandedType": {
                "text": "'single' | 'single-required' | 'multiple'"
              }
            },
            {
              "kind": "field",
              "name": "selectedItems",
              "type": {
                "text": "string[]"
              },
              "privacy": "public",
              "description": "Gets/Sets the currently selected buttons (their values).",
              "attribute": "selected-items"
            },
            {
              "kind": "method",
              "name": "updateDisabledState",
              "privacy": "protected"
            },
            {
              "kind": "method",
              "name": "updateSelectionState",
              "privacy": "protected"
            },
            {
              "kind": "method",
              "name": "handleClick",
              "privacy": "private",
              "parameters": [
                {
                  "name": "event",
                  "type": {
                    "text": "MouseEvent"
                  }
                }
              ]
            },
            {
              "kind": "method",
              "name": "handleSingleSelection",
              "privacy": "private",
              "parameters": [
                {
                  "name": "button",
                  "type": {
                    "text": "IgcToggleButtonComponent"
                  }
                }
              ]
            },
            {
              "kind": "method",
              "name": "handleMultipleSelection",
              "privacy": "private",
              "parameters": [
                {
                  "name": "button",
                  "type": {
                    "text": "IgcToggleButtonComponent"
                  }
                }
              ]
            },
            {
              "kind": "method",
              "name": "emitSelectEvent",
              "privacy": "private",
              "parameters": [
                {
                  "name": "button",
                  "type": {
                    "text": "IgcToggleButtonComponent"
                  }
                }
              ]
            },
            {
              "kind": "method",
              "name": "emitDeselectEvent",
              "privacy": "private",
              "parameters": [
                {
                  "name": "button",
                  "type": {
                    "text": "IgcToggleButtonComponent"
                  }
                }
              ]
            },
            {
              "kind": "method",
              "name": "setSelection",
              "privacy": "private",
              "parameters": [
                {
                  "name": "values",
                  "type": {
                    "text": "Set<string>"
                  }
                }
              ]
            },
            {
              "kind": "method",
              "name": "addEventListener",
              "privacy": "public",
              "return": {
                "type": {
                  "text": "void"
                }
              },
              "parameters": [
                {
                  "name": "type",
                  "type": {
                    "text": "K"
                  }
                },
                {
                  "name": "listener",
                  "type": {
                    "text": "(this: HTMLElement, ev: M[K]) => any"
                  }
                },
                {
                  "name": "options",
                  "optional": true,
                  "type": {
                    "text": "boolean | AddEventListenerOptions"
                  }
                }
              ],
              "inheritedFrom": {
                "name": "EventEmitterMixin",
                "module": "src/components/common/mixins/event-emitter.ts"
              }
            },
            {
              "kind": "method",
              "name": "removeEventListener",
              "privacy": "public",
              "return": {
                "type": {
                  "text": "void"
                }
              },
              "parameters": [
                {
                  "name": "type",
                  "type": {
                    "text": "K"
                  }
                },
                {
                  "name": "listener",
                  "type": {
                    "text": "(this: HTMLElement, ev: M[K]) => any"
                  }
                },
                {
                  "name": "options",
                  "optional": true,
                  "type": {
                    "text": "boolean | EventListenerOptions"
                  }
                }
              ],
              "inheritedFrom": {
                "name": "EventEmitterMixin",
                "module": "src/components/common/mixins/event-emitter.ts"
              }
            },
            {
              "kind": "method",
              "name": "emitEvent",
              "privacy": "private",
              "return": {
                "type": {
                  "text": "boolean"
                }
              },
              "parameters": [
                {
                  "name": "type",
                  "type": {
                    "text": "K"
                  }
                },
                {
                  "name": "eventInitDict",
                  "optional": true,
                  "type": {
                    "text": "CustomEventInit<D>"
                  }
                }
              ],
              "inheritedFrom": {
                "name": "EventEmitterMixin",
                "module": "src/components/common/mixins/event-emitter.ts"
              }
            }
          ],
          "events": [
            {
              "description": "Emitted when a button is selected through user interaction.",
              "name": "igcSelect"
            },
            {
              "description": "Emitted when a button is deselected through user interaction.",
              "name": "igcDeselect"
            },
            {
              "type": {
                "text": "CustomEvent"
              },
              "inheritedFrom": {
                "name": "EventEmitterMixin",
                "module": "src/components/common/mixins/event-emitter.ts"
              }
            }
          ],
          "attributes": [
            {
              "name": "disabled",
              "type": {
                "text": "boolean"
              },
              "default": "false",
              "description": "Disables all buttons inside the group.",
              "fieldName": "disabled",
              "attribute": "disabled"
            },
            {
              "name": "alignment",
              "type": {
                "text": "ContentOrientation"
              },
              "default": "'horizontal'",
              "description": "Sets the orientation of the buttons in the group.",
              "fieldName": "alignment",
              "attribute": "alignment",
              "expandedType": {
                "text": "'horizontal' | 'vertical'"
              }
            },
            {
              "name": "selection",
              "type": {
                "text": "ButtonGroupSelection"
              },
              "default": "'single'",
              "description": "Controls the mode of selection for the button group.",
              "fieldName": "selection",
              "attribute": "selection",
              "expandedType": {
                "text": "'single' | 'single-required' | 'multiple'"
              }
            },
            {
              "name": "selectedItems",
              "type": {
                "text": "string[]"
              },
              "description": "Gets/Sets the currently selected buttons (their values).",
              "fieldName": "selectedItems"
            },
            {
              "name": "selected-items",
              "type": {
                "text": "string[]"
              },
              "description": "Gets/Sets the currently selected buttons (their values).",
              "attribute": "selectedItems",
              "fieldName": "selectedItems"
            }
          ],
          "mixins": [
            {
              "name": "EventEmitterMixin",
              "module": "/src/components/common/mixins/event-emitter.js"
            }
          ],
          "superclass": {
            "name": "LitElement",
            "package": "lit"
          },
          "tagName": "igc-button-group",
          "customElement": true
        }
      ],
      "exports": [
        {
          "kind": "js",
          "name": "default",
          "declaration": {
            "name": "IgcButtonGroupComponent",
            "module": "src/components/button-group/button-group.ts"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "src/components/common/i18n/calendar.resources.ts",
      "declarations": [
        {
          "kind": "variable",
          "name": "IgcCalendarResourceStringEN",
          "type": {
            "text": "IgcCalendarResourceStrings"
          },
          "default": "{ selectMonth: 'Select month', selectYear: 'Select year', selectDate: 'Select date', selectRange: 'Select range', selectedDate: 'Selected date', startDate: 'Start', endDate: 'End', previousMonth: 'Previous month', nextMonth: 'Next month', previousYear: 'Previous year', nextYear: 'Next year', previousYears: 'Previous {0} years', nextYears: 'Next {0} years', weekLabel: 'Wk', }"
        }
      ],
      "exports": [
        {
          "kind": "js",
          "name": "IgcCalendarResourceStringEN",
          "declaration": {
            "name": "IgcCalendarResourceStringEN",
            "module": "src/components/common/i18n/calendar.resources.ts"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "src/components/common/localization/intl-formatters.ts",
      "declarations": [
        {
          "kind": "function",
          "name": "createDateTimeFormatters",
          "parameters": [
            {
              "name": "locale",
              "type": {
                "text": "string"
              }
            },
            {
              "name": "configuration",
              "type": {
                "text": "T"
              }
            }
          ]
        }
      ],
      "exports": [
        {
          "kind": "js",
          "name": "createDateTimeFormatters",
          "declaration": {
            "name": "createDateTimeFormatters",
            "module": "src/components/common/localization/intl-formatters.ts"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "src/components/common/decorators/blazorIndirectRender.ts",
      "declarations": [
        {
          "kind": "function",
          "name": "blazorIndirectRender",
          "parameters": [
            {
              "name": "_constructor",
              "type": {
                "text": "Constructor | AbstractConstructor"
              }
            }
          ],
          "description": "Indicates a class should use the indirect renderer in Blazor."
        }
      ],
      "exports": [
        {
          "kind": "js",
          "name": "blazorIndirectRender",
          "declaration": {
            "name": "blazorIndirectRender",
            "module": "src/components/common/decorators/blazorIndirectRender.ts"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "src/components/calendar/model.ts",
      "declarations": [
        {
          "kind": "variable",
          "name": "daysInWeek",
          "type": {
            "text": "number"
          },
          "default": "7"
        },
        {
          "kind": "function",
          "name": "toCalendarDay",
          "parameters": [
            {
              "name": "date",
              "type": {
                "text": "DayParameter"
              }
            }
          ]
        },
        {
          "kind": "class",
          "description": "",
          "name": "CalendarDay",
          "members": [
            {
              "kind": "field",
              "name": "_date",
              "type": {
                "text": "Date"
              },
              "privacy": "private",
              "readonly": true,
              "default": "new Date(args.year, args.month, args.date ?? 1)"
            },
            {
              "kind": "field",
              "name": "today",
              "privacy": "public",
              "static": true,
              "description": "Constructs and returns the current day.",
              "readonly": true
            },
            {
              "kind": "method",
              "name": "from",
              "privacy": "public",
              "static": true,
              "parameters": [
                {
                  "name": "date",
                  "type": {
                    "text": "Date"
                  }
                }
              ],
              "description": "Constructs a new CalendarDay instance from a Date object."
            },
            {
              "kind": "method",
              "name": "compare",
              "privacy": "public",
              "static": true,
              "parameters": [
                {
                  "name": "first",
                  "type": {
                    "text": "DayParameter"
                  }
                },
                {
                  "name": "second",
                  "type": {
                    "text": "DayParameter"
                  }
                }
              ],
              "description": "Compares the date portion of two date objects.",
              "return": {
                "type": {
                  "text": ""
                }
              }
            },
            {
              "kind": "method",
              "name": "clone",
              "privacy": "public",
              "description": "Returns a copy of this instance."
            },
            {
              "kind": "method",
              "name": "set",
              "privacy": "public",
              "parameters": [
                {
                  "name": "args",
                  "type": {
                    "text": "Partial<CalendarDayParams>"
                  }
                }
              ],
              "description": "Returns a new instance with values replaced."
            },
            {
              "kind": "method",
              "name": "add",
              "privacy": "public",
              "parameters": [
                {
                  "name": "unit",
                  "type": {
                    "text": "DayInterval"
                  }
                },
                {
                  "name": "value",
                  "type": {
                    "text": "number"
                  }
                }
              ]
            },
            {
              "kind": "field",
              "name": "day",
              "privacy": "public",
              "description": "Returns the day of the week (Sunday = 0).",
              "readonly": true
            },
            {
              "kind": "field",
              "name": "year",
              "privacy": "public",
              "description": "Returns the full year.",
              "readonly": true
            },
            {
              "kind": "field",
              "name": "month",
              "privacy": "public",
              "description": "Returns the month.",
              "readonly": true
            },
            {
              "kind": "field",
              "name": "date",
              "privacy": "public",
              "description": "Returns the date",
              "readonly": true
            },
            {
              "kind": "field",
              "name": "timestamp",
              "privacy": "public",
              "description": "Returns the timestamp since epoch in milliseconds.",
              "readonly": true
            },
            {
              "kind": "field",
              "name": "week",
              "privacy": "public",
              "description": "Returns the current week number.",
              "readonly": true
            },
            {
              "kind": "field",
              "name": "native",
              "privacy": "public",
              "description": "Returns the underlying native date instance.",
              "readonly": true
            },
            {
              "kind": "field",
              "name": "weekend",
              "privacy": "public",
              "description": "Whether the current date is a weekend day.",
              "readonly": true
            },
            {
              "kind": "method",
              "name": "equalTo",
              "privacy": "public",
              "parameters": [
                {
                  "name": "value",
                  "type": {
                    "text": "DayParameter"
                  }
                }
              ]
            },
            {
              "kind": "method",
              "name": "greaterThan",
              "privacy": "public",
              "parameters": [
                {
                  "name": "value",
                  "type": {
                    "text": "DayParameter"
                  }
                }
              ]
            },
            {
              "kind": "method",
              "name": "greaterThanOrEqual",
              "privacy": "public",
              "parameters": [
                {
                  "name": "value",
                  "type": {
                    "text": "DayParameter"
                  }
                }
              ]
            },
            {
              "kind": "method",
              "name": "lessThan",
              "privacy": "public",
              "parameters": [
                {
                  "name": "value",
                  "type": {
                    "text": "DayParameter"
                  }
                }
              ]
            },
            {
              "kind": "method",
              "name": "lessThanOrEqual",
              "privacy": "public",
              "parameters": [
                {
                  "name": "value",
                  "type": {
                    "text": "DayParameter"
                  }
                }
              ]
            },
            {
              "kind": "method",
              "name": "toString",
              "privacy": "public"
            }
          ]
        }
      ],
      "exports": [
        {
          "kind": "js",
          "name": "daysInWeek",
          "declaration": {
            "name": "daysInWeek",
            "module": "src/components/calendar/model.ts"
          }
        },
        {
          "kind": "js",
          "name": "toCalendarDay",
          "declaration": {
            "name": "toCalendarDay",
            "module": "src/components/calendar/model.ts"
          }
        },
        {
          "kind": "js",
          "name": "CalendarDay",
          "declaration": {
            "name": "CalendarDay",
            "module": "src/components/calendar/model.ts"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "src/components/calendar/types.ts",
      "declarations": [],
      "exports": []
    },
    {
      "kind": "javascript-module",
      "path": "src/components/common/controllers/root-click.ts",
      "declarations": [
        {
          "kind": "class",
          "description": "A Lit ReactiveController that manages global click listeners to hide a component\nwhen a click occurs outside of the component or its specified target.\n\nThis controller implements a singleton pattern for the document click listener,\nmeaning only one event listener is attached to `document` regardless of how many\ninstances of `RootClickController` are active. Each controller instance\nsubscribes to this single listener.",
          "name": "RootClickController",
          "members": [
            {
              "kind": "field",
              "name": "_host",
              "type": {
                "text": "RootClickControllerHost"
              },
              "privacy": "private",
              "readonly": true,
              "default": "host"
            },
            {
              "kind": "field",
              "name": "_config",
              "type": {
                "text": "RootClickControllerConfig | undefined"
              },
              "privacy": "private",
              "default": "config"
            },
            {
              "kind": "method",
              "name": "_addActiveHost",
              "privacy": "private",
              "return": {
                "type": {
                  "text": "void"
                }
              },
              "description": "Adds the host to the set of active hosts and ensures the global\ndocument click listener is active if needed."
            },
            {
              "kind": "method",
              "name": "_removeActiveHost",
              "privacy": "private",
              "return": {
                "type": {
                  "text": "void"
                }
              },
              "description": "Removes the host from the set of active hosts and removes the global\ndocument click listener if no other hosts are active."
            },
            {
              "kind": "method",
              "name": "_configureListeners",
              "privacy": "private",
              "return": {
                "type": {
                  "text": "void"
                }
              },
              "description": "Configures the active state of the controller based on the host's `open` property.\nIf `host.open` is true, the controller becomes active; otherwise, it becomes inactive."
            }
          ]
        },
        {
          "kind": "function",
          "name": "addRootClickController",
          "return": {
            "type": {
              "text": "RootClickController"
            }
          },
          "parameters": [
            {
              "name": "host",
              "type": {
                "text": "RootClickControllerHost"
              }
            },
            {
              "name": "config",
              "optional": true,
              "type": {
                "text": "RootClickControllerConfig"
              }
            }
          ],
          "description": "Creates and adds a RootClickController instance with a RootClickControllerConfig| configuration\nto the given RootClickControllerHost| host."
        }
      ],
      "exports": [
        {
          "kind": "js",
          "name": "addRootClickController",
          "declaration": {
            "name": "addRootClickController",
            "module": "src/components/common/controllers/root-click.ts"
          }
        },
        {
          "kind": "js",
          "name": "RootClickController",
          "declaration": {
            "name": "RootClickController",
            "module": "src/components/common/controllers/root-click.ts"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "src/components/common/decorators/blazorAdditionalDependencies.ts",
      "declarations": [
        {
          "kind": "function",
          "name": "blazorAdditionalDependencies",
          "parameters": [
            {
              "name": "_additionalDependencies",
              "type": {
                "text": "string"
              },
              "description": "an alternate member name to use."
            }
          ],
          "description": "Indicates additional dependencies that should be loaded by the module of a component, even if they don't appear to be dependencies."
        }
      ],
      "exports": [
        {
          "kind": "js",
          "name": "blazorAdditionalDependencies",
          "declaration": {
            "name": "blazorAdditionalDependencies",
            "module": "src/components/common/decorators/blazorAdditionalDependencies.ts"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "src/components/common/i18n/date-range-picker.resources.ts",
      "declarations": [
        {
          "kind": "variable",
          "name": "IgcDateRangePickerResourceStringsEN",
          "type": {
            "text": "IgcDateRangePickerResourceStrings"
          },
          "default": "{ separator: 'to', done: 'Done', cancel: 'Cancel', last7Days: 'Last 7 days', last30Days: 'Last 30 days', currentMonth: 'Current month', yearToDate: 'Year to date', ...IgcCalendarResourceStringEN, }"
        }
      ],
      "exports": [
        {
          "kind": "js",
          "name": "IgcDateRangePickerResourceStringsEN",
          "declaration": {
            "name": "IgcDateRangePickerResourceStringsEN",
            "module": "src/components/common/i18n/date-range-picker.resources.ts"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "src/components/common/mixins/combo-box.ts",
      "declarations": [
        {
          "kind": "class",
          "description": "",
          "name": "IgcBaseComboBoxLikeComponent",
          "members": [
            {
              "kind": "field",
              "name": "emitEvent",
              "type": {
                "text": "<\n    K extends keyof IgcBaseComboBoxEventMap,\n    D extends UnpackCustomEvent<IgcBaseComboBoxEventMap[K]>,\n  >(\n    event: K,\n    eventInitDict?: CustomEventInit<D>\n  ) => boolean"
              },
              "privacy": "public"
            },
            {
              "kind": "field",
              "name": "_rootClickController",
              "type": {
                "text": "RootClickController"
              },
              "privacy": "protected"
            },
            {
              "kind": "field",
              "name": "keepOpenOnSelect",
              "type": {
                "text": "boolean"
              },
              "privacy": "public",
              "default": "false",
              "description": "Whether the component dropdown should be kept open on selection.",
              "attribute": "keep-open-on-select",
              "reflects": true
            },
            {
              "kind": "field",
              "name": "keepOpenOnOutsideClick",
              "type": {
                "text": "boolean"
              },
              "privacy": "public",
              "default": "false",
              "description": "Whether the component dropdown should be kept open on clicking outside of it.",
              "attribute": "keep-open-on-outside-click",
              "reflects": true
            },
            {
              "kind": "field",
              "name": "open",
              "type": {
                "text": "boolean"
              },
              "privacy": "public",
              "default": "false",
              "description": "Sets the open state of the component.",
              "attribute": "open",
              "reflects": true
            },
            {
              "kind": "method",
              "name": "emitClosing",
              "privacy": "protected"
            },
            {
              "kind": "method",
              "name": "emitClosed",
              "privacy": "protected"
            },
            {
              "kind": "method",
              "name": "emitOpening",
              "privacy": "protected"
            },
            {
              "kind": "method",
              "name": "emitOpened",
              "privacy": "protected"
            },
            {
              "kind": "method",
              "name": "handleAnchorClick",
              "privacy": "protected"
            },
            {
              "kind": "method",
              "name": "_hide",
              "privacy": "protected",
              "parameters": [
                {
                  "name": "emitEvent",
                  "default": "false"
                }
              ]
            },
            {
              "kind": "method",
              "name": "_show",
              "privacy": "protected",
              "parameters": [
                {
                  "name": "emitEvent",
                  "default": "false"
                }
              ]
            },
            {
              "kind": "method",
              "name": "show",
              "privacy": "public",
              "return": {
                "type": {
                  "text": "Promise<boolean>"
                }
              },
              "description": "Shows the component."
            },
            {
              "kind": "method",
              "name": "hide",
              "privacy": "public",
              "return": {
                "type": {
                  "text": "Promise<boolean>"
                }
              },
              "description": "Hides the component."
            },
            {
              "kind": "method",
              "name": "toggle",
              "privacy": "public",
              "return": {
                "type": {
                  "text": "Promise<boolean>"
                }
              },
              "description": "Toggles the open state of the component."
            }
          ],
          "attributes": [
            {
              "name": "keep-open-on-select",
              "type": {
                "text": "boolean"
              },
              "default": "false",
              "description": "Whether the component dropdown should be kept open on selection.",
              "fieldName": "keepOpenOnSelect",
              "attribute": "keep-open-on-select"
            },
            {
              "name": "keep-open-on-outside-click",
              "type": {
                "text": "boolean"
              },
              "default": "false",
              "description": "Whether the component dropdown should be kept open on clicking outside of it.",
              "fieldName": "keepOpenOnOutsideClick",
              "attribute": "keep-open-on-outside-click"
            },
            {
              "name": "open",
              "type": {
                "text": "boolean"
              },
              "default": "false",
              "description": "Sets the open state of the component.",
              "fieldName": "open",
              "attribute": "open"
            }
          ],
          "superclass": {
            "name": "LitElement",
            "package": "lit"
          },
          "customElement": true
        },
        {
          "kind": "function",
          "name": "getItems",
          "parameters": [
            {
              "name": "root",
              "type": {
                "text": "Node"
              }
            },
            {
              "name": "tagName",
              "type": {
                "text": "string"
              }
            }
          ]
        },
        {
          "kind": "function",
          "name": "getActiveItems",
          "parameters": [
            {
              "name": "root",
              "type": {
                "text": "Node"
              }
            },
            {
              "name": "tagName",
              "type": {
                "text": "string"
              }
            }
          ]
        },
        {
          "kind": "function",
          "name": "getNextActiveItem",
          "parameters": [
            {
              "name": "items",
              "type": {
                "text": "T[]"
              }
            },
            {
              "name": "from",
              "type": {
                "text": "T"
              }
            }
          ]
        },
        {
          "kind": "function",
          "name": "getPreviousActiveItem",
          "parameters": [
            {
              "name": "items",
              "type": {
                "text": "T[]"
              }
            },
            {
              "name": "from",
              "type": {
                "text": "T"
              }
            }
          ]
        },
        {
          "kind": "function",
          "name": "setInitialSelectionState",
          "parameters": [
            {
              "name": "items",
              "type": {
                "text": "T[]"
              }
            }
          ]
        }
      ],
      "exports": [
        {
          "kind": "js",
          "name": "IgcBaseComboBoxLikeComponent",
          "declaration": {
            "name": "IgcBaseComboBoxLikeComponent",
            "module": "src/components/common/mixins/combo-box.ts"
          }
        },
        {
          "kind": "js",
          "name": "getItems",
          "declaration": {
            "name": "getItems",
            "module": "src/components/common/mixins/combo-box.ts"
          }
        },
        {
          "kind": "js",
          "name": "getActiveItems",
          "declaration": {
            "name": "getActiveItems",
            "module": "src/components/common/mixins/combo-box.ts"
          }
        },
        {
          "kind": "js",
          "name": "getNextActiveItem",
          "declaration": {
            "name": "getNextActiveItem",
            "module": "src/components/common/mixins/combo-box.ts"
          }
        },
        {
          "kind": "js",
          "name": "getPreviousActiveItem",
          "declaration": {
            "name": "getPreviousActiveItem",
            "module": "src/components/common/mixins/combo-box.ts"
          }
        },
        {
          "kind": "js",
          "name": "setInitialSelectionState",
          "declaration": {
            "name": "setInitialSelectionState",
            "module": "src/components/common/mixins/combo-box.ts"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "src/components/common/localization/validation-en.ts",
      "declarations": [],
      "exports": [
        {
          "kind": "js",
          "name": "default",
          "declaration": {
            "module": "src/components/common/localization/validation-en.ts"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "src/components/common/validators.ts",
      "declarations": [
        {
          "kind": "variable",
          "name": "requiredValidator",
          "type": {
            "text": "Validator<{\n  required: boolean;\n  value?: unknown;\n}>"
          },
          "default": "{ key: 'valueMissing', message: validatorMessages.required, isValid: ({ required, value }) => (required ? !!value : true), }"
        },
        {
          "kind": "variable",
          "name": "requiredBooleanValidator",
          "type": {
            "text": "Validator<{\n  required: boolean;\n  checked: boolean;\n}>"
          },
          "default": "{ key: 'valueMissing', message: validatorMessages.required, isValid: ({ required, checked }) => (required ? checked : true), }"
        },
        {
          "kind": "variable",
          "name": "minLengthValidator",
          "type": {
            "text": "Validator<{\n  minLength?: number;\n  value: string;\n}>"
          },
          "default": "{ key: 'tooShort', message: ({ minLength }) => formatString(validatorMessages.minLength, minLength), isValid: ({ minLength, value }) => minLength && value ? value.length >= asNumber(minLength) : true, }"
        },
        {
          "kind": "variable",
          "name": "maxLengthValidator",
          "type": {
            "text": "Validator<{\n  maxLength?: number;\n  value: string;\n}>"
          },
          "default": "{ key: 'tooLong', message: ({ maxLength }) => formatString(validatorMessages.maxLength, maxLength), isValid: ({ maxLength, value }) => maxLength && value ? value.length <= asNumber(maxLength) : true, }"
        },
        {
          "kind": "variable",
          "name": "patternValidator",
          "type": {
            "text": "Validator<{ pattern?: string; value: string }>"
          },
          "default": "{ key: 'patternMismatch', message: validatorMessages.pattern, isValid: ({ pattern, value }) => pattern && value ? new RegExp(pattern, 'u').test(value) : true, }"
        },
        {
          "kind": "variable",
          "name": "minValidator",
          "type": {
            "text": "Validator<{\n  min?: number;\n  value: number | string;\n}>"
          },
          "default": "{ key: 'rangeUnderflow', message: ({ min }) => formatString(validatorMessages.min, min), isValid: ({ min, value }) => isDefined(value) && value !== '' && isDefined(min) ? asNumber(value) >= asNumber(min) : true, }"
        },
        {
          "kind": "variable",
          "name": "maxValidator",
          "type": {
            "text": "Validator<{\n  max?: number;\n  value: number | string;\n}>"
          },
          "default": "{ key: 'rangeOverflow', message: ({ max }) => formatString(validatorMessages.max, max), isValid: ({ max, value }) => isDefined(value) && value !== '' && isDefined(max) ? asNumber(value) <= asNumber(max) : true, }"
        },
        {
          "kind": "variable",
          "name": "stepValidator",
          "type": {
            "text": "Validator<{\n  min?: number;\n  step?: number;\n  value: number | string;\n}>"
          },
          "default": "{ key: 'stepMismatch', message: 'Value does not conform to step constraint', isValid: ({ min, step, value }) => { if (isDefined(value) && value !== '' && isDefined(step)) { const _value = asNumber(value) - asNumber(min); const _step = asNumber(step); const magnitude = numberOfDecimals(_step) + 1; const rem = roundPrecise( Math.abs(_value - _step * Math.round(_value / _step)), magnitude ); return !rem; } return true; }, }"
        },
        {
          "kind": "variable",
          "name": "emailValidator",
          "type": {
            "text": "Validator<{ value: string }>"
          },
          "default": "{ key: 'typeMismatch', message: validatorMessages.email, isValid: ({ value }) => (value ? emailRegex.test(value) : true), }"
        },
        {
          "kind": "variable",
          "name": "urlValidator",
          "type": {
            "text": "Validator<{ value: string }>"
          },
          "default": "{ key: 'typeMismatch', message: validatorMessages.url, isValid: ({ value }) => (value ? URL.canParse(value) : true), }"
        },
        {
          "kind": "variable",
          "name": "minDateValidator",
          "type": {
            "text": "Validator<{\n  value?: Date | null;\n  min?: Date | null;\n}>"
          },
          "default": "{ key: 'rangeUnderflow', message: ({ min }) => formatString(validatorMessages.min, min), isValid: ({ value, min }) => value && min ? CalendarDay.compare(value, min) >= 0 : true, }"
        },
        {
          "kind": "variable",
          "name": "maxDateValidator",
          "type": {
            "text": "Validator<{\n  value?: Date | null;\n  max?: Date | null;\n}>"
          },
          "default": "{ key: 'rangeOverflow', message: ({ max }) => formatString(validatorMessages.max, max), isValid: ({ value, max }) => value && max ? CalendarDay.compare(value, max) <= 0 : true, }"
        }
      ],
      "exports": [
        {
          "kind": "js",
          "name": "requiredValidator",
          "declaration": {
            "name": "requiredValidator",
            "module": "src/components/common/validators.ts"
          }
        },
        {
          "kind": "js",
          "name": "requiredBooleanValidator",
          "declaration": {
            "name": "requiredBooleanValidator",
            "module": "src/components/common/validators.ts"
          }
        },
        {
          "kind": "js",
          "name": "minLengthValidator",
          "declaration": {
            "name": "minLengthValidator",
            "module": "src/components/common/validators.ts"
          }
        },
        {
          "kind": "js",
          "name": "maxLengthValidator",
          "declaration": {
            "name": "maxLengthValidator",
            "module": "src/components/common/validators.ts"
          }
        },
        {
          "kind": "js",
          "name": "patternValidator",
          "declaration": {
            "name": "patternValidator",
            "module": "src/components/common/validators.ts"
          }
        },
        {
          "kind": "js",
          "name": "minValidator",
          "declaration": {
            "name": "minValidator",
            "module": "src/components/common/validators.ts"
          }
        },
        {
          "kind": "js",
          "name": "maxValidator",
          "declaration": {
            "name": "maxValidator",
            "module": "src/components/common/validators.ts"
          }
        },
        {
          "kind": "js",
          "name": "stepValidator",
          "declaration": {
            "name": "stepValidator",
            "module": "src/components/common/validators.ts"
          }
        },
        {
          "kind": "js",
          "name": "emailValidator",
          "declaration": {
            "name": "emailValidator",
            "module": "src/components/common/validators.ts"
          }
        },
        {
          "kind": "js",
          "name": "urlValidator",
          "declaration": {
            "name": "urlValidator",
            "module": "src/components/common/validators.ts"
          }
        },
        {
          "kind": "js",
          "name": "minDateValidator",
          "declaration": {
            "name": "minDateValidator",
            "module": "src/components/common/validators.ts"
          }
        },
        {
          "kind": "js",
          "name": "maxDateValidator",
          "declaration": {
            "name": "maxDateValidator",
            "module": "src/components/common/validators.ts"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "src/components/common/mixins/forms/types.ts",
      "declarations": [
        {
          "kind": "class",
          "description": "",
          "name": "FormAssociatedElementInterface",
          "members": [
            {
              "kind": "field",
              "name": "defaultValue",
              "privacy": "public",
              "description": "The initial value of the component.",
              "type": {
                "text": "unknown"
              }
            },
            {
              "kind": "field",
              "name": "formAssociated",
              "type": {
                "text": "boolean"
              },
              "privacy": "public",
              "static": true,
              "readonly": true,
              "default": "true",
              "inheritedFrom": {
                "name": "BaseFormAssociatedElement",
                "module": "src/components/common/mixins/forms/associated.ts"
              }
            },
            {
              "kind": "field",
              "name": "__internals",
              "type": {
                "text": "ElementInternals"
              },
              "privacy": "private",
              "inheritedFrom": {
                "name": "BaseFormAssociatedElement",
                "module": "src/components/common/mixins/forms/associated.ts"
              }
            },
            {
              "kind": "field",
              "name": "_formValue",
              "type": {
                "text": "FormValue<unknown>"
              },
              "privacy": "protected",
              "inheritedFrom": {
                "name": "BaseFormAssociatedElement",
                "module": "src/components/common/mixins/forms/associated.ts"
              }
            },
            {
              "kind": "field",
              "name": "_disabled",
              "type": {
                "text": "boolean"
              },
              "privacy": "protected",
              "default": "false",
              "inheritedFrom": {
                "name": "BaseFormAssociatedElement",
                "module": "src/components/common/mixins/forms/associated.ts"
              }
            },
            {
              "kind": "field",
              "name": "_invalid",
              "type": {
                "text": "boolean"
              },
              "privacy": "protected",
              "default": "false",
              "inheritedFrom": {
                "name": "BaseFormAssociatedElement",
                "module": "src/components/common/mixins/forms/associated.ts"
              }
            },
            {
              "kind": "field",
              "name": "_dirty",
              "type": {
                "text": "boolean"
              },
              "privacy": "protected",
              "default": "false",
              "inheritedFrom": {
                "name": "BaseFormAssociatedElement",
                "module": "src/components/common/mixins/forms/associated.ts"
              }
            },
            {
              "kind": "field",
              "name": "_pristine",
              "type": {
                "text": "boolean"
              },
              "privacy": "protected",
              "default": "true",
              "inheritedFrom": {
                "name": "BaseFormAssociatedElement",
                "module": "src/components/common/mixins/forms/associated.ts"
              }
            },
            {
              "kind": "field",
              "name": "__validators",
              "type": {
                "text": "Validator[]"
              },
              "privacy": "protected",
              "readonly": true,
              "inheritedFrom": {
                "name": "BaseFormAssociatedElement",
                "module": "src/components/common/mixins/forms/associated.ts"
              }
            },
            {
              "kind": "field",
              "name": "name",
              "type": {
                "text": "string"
              },
              "privacy": "public",
              "description": "The name attribute of the control.",
              "attribute": "name",
              "reflects": true,
              "inheritedFrom": {
                "name": "BaseFormAssociatedElement",
                "module": "src/components/common/mixins/forms/associated.ts"
              }
            },
            {
              "kind": "field",
              "name": "disabled",
              "privacy": "public",
              "description": "The disabled state of the component.",
              "default": "false",
              "attribute": "disabled",
              "type": {
                "text": "boolean"
              },
              "reflects": true,
              "inheritedFrom": {
                "name": "BaseFormAssociatedElement",
                "module": "src/components/common/mixins/forms/associated.ts"
              }
            },
            {
              "kind": "field",
              "name": "invalid",
              "privacy": "public",
              "description": "Sets the control into invalid state (visual state only).",
              "default": "false",
              "attribute": "invalid",
              "type": {
                "text": "boolean"
              },
              "reflects": true,
              "inheritedFrom": {
                "name": "BaseFormAssociatedElement",
                "module": "src/components/common/mixins/forms/associated.ts"
              }
            },
            {
              "kind": "field",
              "name": "form",
              "type": {
                "text": "HTMLFormElement | null"
              },
              "privacy": "public",
              "description": "Returns the HTMLFormElement associated with this element.",
              "readonly": true,
              "inheritedFrom": {
                "name": "BaseFormAssociatedElement",
                "module": "src/components/common/mixins/forms/associated.ts"
              }
            },
            {
              "kind": "field",
              "name": "validity",
              "type": {
                "text": "ValidityState"
              },
              "privacy": "public",
              "description": "Returns a ValidityState object which represents the different validity states\nthe element can be in, with respect to constraint validation.",
              "readonly": true,
              "inheritedFrom": {
                "name": "BaseFormAssociatedElement",
                "module": "src/components/common/mixins/forms/associated.ts"
              }
            },
            {
              "kind": "field",
              "name": "validationMessage",
              "type": {
                "text": "string"
              },
              "privacy": "public",
              "description": "A string containing the validation message of this element.",
              "readonly": true,
              "inheritedFrom": {
                "name": "BaseFormAssociatedElement",
                "module": "src/components/common/mixins/forms/associated.ts"
              }
            },
            {
              "kind": "field",
              "name": "willValidate",
              "type": {
                "text": "boolean"
              },
              "privacy": "public",
              "description": "A boolean value which returns true if the element is a submittable element\nthat is a candidate for constraint validation.",
              "readonly": true,
              "inheritedFrom": {
                "name": "BaseFormAssociatedElement",
                "module": "src/components/common/mixins/forms/associated.ts"
              }
            },
            {
              "kind": "method",
              "name": "_handleInvalid",
              "privacy": "private",
              "parameters": [
                {
                  "name": "event",
                  "type": {
                    "text": "Event"
                  }
                }
              ],
              "inheritedFrom": {
                "name": "BaseFormAssociatedElement",
                "module": "src/components/common/mixins/forms/associated.ts"
              }
            },
            {
              "kind": "method",
              "name": "_setInvalidState",
              "privacy": "private",
              "return": {
                "type": {
                  "text": "void"
                }
              },
              "inheritedFrom": {
                "name": "BaseFormAssociatedElement",
                "module": "src/components/common/mixins/forms/associated.ts"
              }
            },
            {
              "kind": "method",
              "name": "__runValidators",
              "privacy": "private",
              "inheritedFrom": {
                "name": "BaseFormAssociatedElement",
                "module": "src/components/common/mixins/forms/associated.ts"
              }
            },
            {
              "kind": "method",
              "name": "_setDefaultValue",
              "privacy": "protected",
              "return": {
                "type": {
                  "text": "void"
                }
              },
              "parameters": [
                {
                  "name": "current",
                  "type": {
                    "text": "string | null"
                  }
                }
              ],
              "inheritedFrom": {
                "name": "BaseFormAssociatedElement",
                "module": "src/components/common/mixins/forms/associated.ts"
              }
            },
            {
              "kind": "method",
              "name": "_restoreDefaultValue",
              "privacy": "protected",
              "return": {
                "type": {
                  "text": "void"
                }
              },
              "inheritedFrom": {
                "name": "BaseFormAssociatedElement",
                "module": "src/components/common/mixins/forms/associated.ts"
              }
            },
            {
              "kind": "method",
              "name": "_validate",
              "privacy": "protected",
              "return": {
                "type": {
                  "text": "void"
                }
              },
              "parameters": [
                {
                  "name": "message",
                  "optional": true,
                  "type": {
                    "text": "string"
                  }
                }
              ],
              "inheritedFrom": {
                "name": "BaseFormAssociatedElement",
                "module": "src/components/common/mixins/forms/associated.ts"
              }
            },
            {
              "kind": "method",
              "name": "_updateValidity",
              "privacy": "protected",
              "parameters": [
                {
                  "name": "error",
                  "optional": true,
                  "type": {
                    "text": "string"
                  }
                }
              ],
              "description": "Executes the component validators and updates the internal validity state.",
              "inheritedFrom": {
                "name": "BaseFormAssociatedElement",
                "module": "src/components/common/mixins/forms/associated.ts"
              }
            },
            {
              "kind": "method",
              "name": "_setFormValue",
              "privacy": "protected",
              "return": {
                "type": {
                  "text": "void"
                }
              },
              "parameters": [
                {
                  "name": "value",
                  "type": {
                    "text": "FormValueType"
                  }
                },
                {
                  "name": "state",
                  "optional": true,
                  "type": {
                    "text": "FormValueType"
                  }
                }
              ],
              "inheritedFrom": {
                "name": "BaseFormAssociatedElement",
                "module": "src/components/common/mixins/forms/associated.ts"
              }
            },
            {
              "kind": "method",
              "name": "formAssociatedCallback",
              "privacy": "protected",
              "return": {
                "type": {
                  "text": "void"
                }
              },
              "parameters": [
                {
                  "name": "_form",
                  "type": {
                    "text": "HTMLFormElement"
                  }
                }
              ],
              "inheritedFrom": {
                "name": "BaseFormAssociatedElement",
                "module": "src/components/common/mixins/forms/associated.ts"
              }
            },
            {
              "kind": "method",
              "name": "formDisabledCallback",
              "privacy": "protected",
              "return": {
                "type": {
                  "text": "void"
                }
              },
              "parameters": [
                {
                  "name": "state",
                  "type": {
                    "text": "boolean"
                  }
                }
              ],
              "inheritedFrom": {
                "name": "BaseFormAssociatedElement",
                "module": "src/components/common/mixins/forms/associated.ts"
              }
            },
            {
              "kind": "method",
              "name": "formResetCallback",
              "privacy": "protected",
              "return": {
                "type": {
                  "text": "void"
                }
              },
              "inheritedFrom": {
                "name": "BaseFormAssociatedElement",
                "module": "src/components/common/mixins/forms/associated.ts"
              }
            },
            {
              "kind": "method",
              "name": "formStateRestoreCallback",
              "privacy": "protected",
              "return": {
                "type": {
                  "text": "void"
                }
              },
              "parameters": [
                {
                  "name": "_state",
                  "type": {
                    "text": "FormValueType"
                  }
                },
                {
                  "name": "_mode",
                  "type": {
                    "text": "FormRestoreMode"
                  }
                }
              ],
              "inheritedFrom": {
                "name": "BaseFormAssociatedElement",
                "module": "src/components/common/mixins/forms/associated.ts"
              }
            },
            {
              "kind": "method",
              "name": "reportValidity",
              "privacy": "public",
              "description": "Checks for validity of the control and shows the browser message if it invalid.",
              "inheritedFrom": {
                "name": "BaseFormAssociatedElement",
                "module": "src/components/common/mixins/forms/associated.ts"
              }
            },
            {
              "kind": "method",
              "name": "checkValidity",
              "privacy": "public",
              "description": "Checks for validity of the control and emits the invalid event if it invalid.",
              "inheritedFrom": {
                "name": "BaseFormAssociatedElement",
                "module": "src/components/common/mixins/forms/associated.ts"
              }
            },
            {
              "kind": "method",
              "name": "setCustomValidity",
              "privacy": "public",
              "parameters": [
                {
                  "name": "message",
                  "type": {
                    "text": "string"
                  }
                }
              ],
              "description": "Sets a custom validation message for the control.\nAs long as `message` is not empty, the control is considered invalid.",
              "inheritedFrom": {
                "name": "BaseFormAssociatedElement",
                "module": "src/components/common/mixins/forms/associated.ts"
              }
            }
          ],
          "superclass": {
            "name": "BaseFormAssociatedElement",
            "module": "src/components/common/mixins/forms/types.ts"
          },
          "attributes": [
            {
              "name": "name",
              "type": {
                "text": "string"
              },
              "description": "The name attribute of the control.",
              "fieldName": "name",
              "attribute": "name",
              "inheritedFrom": {
                "name": "BaseFormAssociatedElement",
                "module": "src/components/common/mixins/forms/associated.ts"
              }
            },
            {
              "name": "disabled",
              "description": "The disabled state of the component.",
              "default": "false",
              "fieldName": "disabled",
              "attribute": "disabled",
              "type": {
                "text": "boolean"
              },
              "inheritedFrom": {
                "name": "BaseFormAssociatedElement",
                "module": "src/components/common/mixins/forms/associated.ts"
              }
            },
            {
              "name": "invalid",
              "description": "Sets the control into invalid state (visual state only).",
              "default": "false",
              "fieldName": "invalid",
              "attribute": "invalid",
              "type": {
                "text": "boolean"
              },
              "inheritedFrom": {
                "name": "BaseFormAssociatedElement",
                "module": "src/components/common/mixins/forms/associated.ts"
              }
            }
          ]
        },
        {
          "kind": "class",
          "description": "",
          "name": "FormAssociatedCheckboxElementInterface",
          "members": [
            {
              "kind": "field",
              "name": "defaultChecked",
              "privacy": "public",
              "description": "The initial checked state of the component.",
              "type": {
                "text": "boolean"
              }
            },
            {
              "kind": "field",
              "name": "formAssociated",
              "type": {
                "text": "boolean"
              },
              "privacy": "public",
              "static": true,
              "readonly": true,
              "default": "true",
              "inheritedFrom": {
                "name": "BaseFormAssociatedElement",
                "module": "src/components/common/mixins/forms/associated.ts"
              }
            },
            {
              "kind": "field",
              "name": "__internals",
              "type": {
                "text": "ElementInternals"
              },
              "privacy": "private",
              "inheritedFrom": {
                "name": "BaseFormAssociatedElement",
                "module": "src/components/common/mixins/forms/associated.ts"
              }
            },
            {
              "kind": "field",
              "name": "_formValue",
              "type": {
                "text": "FormValue<unknown>"
              },
              "privacy": "protected",
              "inheritedFrom": {
                "name": "BaseFormAssociatedElement",
                "module": "src/components/common/mixins/forms/associated.ts"
              }
            },
            {
              "kind": "field",
              "name": "_disabled",
              "type": {
                "text": "boolean"
              },
              "privacy": "protected",
              "default": "false",
              "inheritedFrom": {
                "name": "BaseFormAssociatedElement",
                "module": "src/components/common/mixins/forms/associated.ts"
              }
            },
            {
              "kind": "field",
              "name": "_invalid",
              "type": {
                "text": "boolean"
              },
              "privacy": "protected",
              "default": "false",
              "inheritedFrom": {
                "name": "BaseFormAssociatedElement",
                "module": "src/components/common/mixins/forms/associated.ts"
              }
            },
            {
              "kind": "field",
              "name": "_dirty",
              "type": {
                "text": "boolean"
              },
              "privacy": "protected",
              "default": "false",
              "inheritedFrom": {
                "name": "BaseFormAssociatedElement",
                "module": "src/components/common/mixins/forms/associated.ts"
              }
            },
            {
              "kind": "field",
              "name": "_pristine",
              "type": {
                "text": "boolean"
              },
              "privacy": "protected",
              "default": "true",
              "inheritedFrom": {
                "name": "BaseFormAssociatedElement",
                "module": "src/components/common/mixins/forms/associated.ts"
              }
            },
            {
              "kind": "field",
              "name": "__validators",
              "type": {
                "text": "Validator[]"
              },
              "privacy": "protected",
              "readonly": true,
              "inheritedFrom": {
                "name": "BaseFormAssociatedElement",
                "module": "src/components/common/mixins/forms/associated.ts"
              }
            },
            {
              "kind": "field",
              "name": "name",
              "type": {
                "text": "string"
              },
              "privacy": "public",
              "description": "The name attribute of the control.",
              "attribute": "name",
              "reflects": true,
              "inheritedFrom": {
                "name": "BaseFormAssociatedElement",
                "module": "src/components/common/mixins/forms/associated.ts"
              }
            },
            {
              "kind": "field",
              "name": "disabled",
              "privacy": "public",
              "description": "The disabled state of the component.",
              "default": "false",
              "attribute": "disabled",
              "type": {
                "text": "boolean"
              },
              "reflects": true,
              "inheritedFrom": {
                "name": "BaseFormAssociatedElement",
                "module": "src/components/common/mixins/forms/associated.ts"
              }
            },
            {
              "kind": "field",
              "name": "invalid",
              "privacy": "public",
              "description": "Sets the control into invalid state (visual state only).",
              "default": "false",
              "attribute": "invalid",
              "type": {
                "text": "boolean"
              },
              "reflects": true,
              "inheritedFrom": {
                "name": "BaseFormAssociatedElement",
                "module": "src/components/common/mixins/forms/associated.ts"
              }
            },
            {
              "kind": "field",
              "name": "form",
              "type": {
                "text": "HTMLFormElement | null"
              },
              "privacy": "public",
              "description": "Returns the HTMLFormElement associated with this element.",
              "readonly": true,
              "inheritedFrom": {
                "name": "BaseFormAssociatedElement",
                "module": "src/components/common/mixins/forms/associated.ts"
              }
            },
            {
              "kind": "field",
              "name": "validity",
              "type": {
                "text": "ValidityState"
              },
              "privacy": "public",
              "description": "Returns a ValidityState object which represents the different validity states\nthe element can be in, with respect to constraint validation.",
              "readonly": true,
              "inheritedFrom": {
                "name": "BaseFormAssociatedElement",
                "module": "src/components/common/mixins/forms/associated.ts"
              }
            },
            {
              "kind": "field",
              "name": "validationMessage",
              "type": {
                "text": "string"
              },
              "privacy": "public",
              "description": "A string containing the validation message of this element.",
              "readonly": true,
              "inheritedFrom": {
                "name": "BaseFormAssociatedElement",
                "module": "src/components/common/mixins/forms/associated.ts"
              }
            },
            {
              "kind": "field",
              "name": "willValidate",
              "type": {
                "text": "boolean"
              },
              "privacy": "public",
              "description": "A boolean value which returns true if the element is a submittable element\nthat is a candidate for constraint validation.",
              "readonly": true,
              "inheritedFrom": {
                "name": "BaseFormAssociatedElement",
                "module": "src/components/common/mixins/forms/associated.ts"
              }
            },
            {
              "kind": "method",
              "name": "_handleInvalid",
              "privacy": "private",
              "parameters": [
                {
                  "name": "event",
                  "type": {
                    "text": "Event"
                  }
                }
              ],
              "inheritedFrom": {
                "name": "BaseFormAssociatedElement",
                "module": "src/components/common/mixins/forms/associated.ts"
              }
            },
            {
              "kind": "method",
              "name": "_setInvalidState",
              "privacy": "private",
              "return": {
                "type": {
                  "text": "void"
                }
              },
              "inheritedFrom": {
                "name": "BaseFormAssociatedElement",
                "module": "src/components/common/mixins/forms/associated.ts"
              }
            },
            {
              "kind": "method",
              "name": "__runValidators",
              "privacy": "private",
              "inheritedFrom": {
                "name": "BaseFormAssociatedElement",
                "module": "src/components/common/mixins/forms/associated.ts"
              }
            },
            {
              "kind": "method",
              "name": "_setDefaultValue",
              "privacy": "protected",
              "return": {
                "type": {
                  "text": "void"
                }
              },
              "parameters": [
                {
                  "name": "current",
                  "type": {
                    "text": "string | null"
                  }
                }
              ],
              "inheritedFrom": {
                "name": "BaseFormAssociatedElement",
                "module": "src/components/common/mixins/forms/associated.ts"
              }
            },
            {
              "kind": "method",
              "name": "_restoreDefaultValue",
              "privacy": "protected",
              "return": {
                "type": {
                  "text": "void"
                }
              },
              "inheritedFrom": {
                "name": "BaseFormAssociatedElement",
                "module": "src/components/common/mixins/forms/associated.ts"
              }
            },
            {
              "kind": "method",
              "name": "_validate",
              "privacy": "protected",
              "return": {
                "type": {
                  "text": "void"
                }
              },
              "parameters": [
                {
                  "name": "message",
                  "optional": true,
                  "type": {
                    "text": "string"
                  }
                }
              ],
              "inheritedFrom": {
                "name": "BaseFormAssociatedElement",
                "module": "src/components/common/mixins/forms/associated.ts"
              }
            },
            {
              "kind": "method",
              "name": "_updateValidity",
              "privacy": "protected",
              "parameters": [
                {
                  "name": "error",
                  "optional": true,
                  "type": {
                    "text": "string"
                  }
                }
              ],
              "description": "Executes the component validators and updates the internal validity state.",
              "inheritedFrom": {
                "name": "BaseFormAssociatedElement",
                "module": "src/components/common/mixins/forms/associated.ts"
              }
            },
            {
              "kind": "method",
              "name": "_setFormValue",
              "privacy": "protected",
              "return": {
                "type": {
                  "text": "void"
                }
              },
              "parameters": [
                {
                  "name": "value",
                  "type": {
                    "text": "FormValueType"
                  }
                },
                {
                  "name": "state",
                  "optional": true,
                  "type": {
                    "text": "FormValueType"
                  }
                }
              ],
              "inheritedFrom": {
                "name": "BaseFormAssociatedElement",
                "module": "src/components/common/mixins/forms/associated.ts"
              }
            },
            {
              "kind": "method",
              "name": "formAssociatedCallback",
              "privacy": "protected",
              "return": {
                "type": {
                  "text": "void"
                }
              },
              "parameters": [
                {
                  "name": "_form",
                  "type": {
                    "text": "HTMLFormElement"
                  }
                }
              ],
              "inheritedFrom": {
                "name": "BaseFormAssociatedElement",
                "module": "src/components/common/mixins/forms/associated.ts"
              }
            },
            {
              "kind": "method",
              "name": "formDisabledCallback",
              "privacy": "protected",
              "return": {
                "type": {
                  "text": "void"
                }
              },
              "parameters": [
                {
                  "name": "state",
                  "type": {
                    "text": "boolean"
                  }
                }
              ],
              "inheritedFrom": {
                "name": "BaseFormAssociatedElement",
                "module": "src/components/common/mixins/forms/associated.ts"
              }
            },
            {
              "kind": "method",
              "name": "formResetCallback",
              "privacy": "protected",
              "return": {
                "type": {
                  "text": "void"
                }
              },
              "inheritedFrom": {
                "name": "BaseFormAssociatedElement",
                "module": "src/components/common/mixins/forms/associated.ts"
              }
            },
            {
              "kind": "method",
              "name": "formStateRestoreCallback",
              "privacy": "protected",
              "return": {
                "type": {
                  "text": "void"
                }
              },
              "parameters": [
                {
                  "name": "_state",
                  "type": {
                    "text": "FormValueType"
                  }
                },
                {
                  "name": "_mode",
                  "type": {
                    "text": "FormRestoreMode"
                  }
                }
              ],
              "inheritedFrom": {
                "name": "BaseFormAssociatedElement",
                "module": "src/components/common/mixins/forms/associated.ts"
              }
            },
            {
              "kind": "method",
              "name": "reportValidity",
              "privacy": "public",
              "description": "Checks for validity of the control and shows the browser message if it invalid.",
              "inheritedFrom": {
                "name": "BaseFormAssociatedElement",
                "module": "src/components/common/mixins/forms/associated.ts"
              }
            },
            {
              "kind": "method",
              "name": "checkValidity",
              "privacy": "public",
              "description": "Checks for validity of the control and emits the invalid event if it invalid.",
              "inheritedFrom": {
                "name": "BaseFormAssociatedElement",
                "module": "src/components/common/mixins/forms/associated.ts"
              }
            },
            {
              "kind": "method",
              "name": "setCustomValidity",
              "privacy": "public",
              "parameters": [
                {
                  "name": "message",
                  "type": {
                    "text": "string"
                  }
                }
              ],
              "description": "Sets a custom validation message for the control.\nAs long as `message` is not empty, the control is considered invalid.",
              "inheritedFrom": {
                "name": "BaseFormAssociatedElement",
                "module": "src/components/common/mixins/forms/associated.ts"
              }
            }
          ],
          "superclass": {
            "name": "BaseFormAssociatedElement",
            "module": "src/components/common/mixins/forms/types.ts"
          },
          "attributes": [
            {
              "name": "name",
              "type": {
                "text": "string"
              },
              "description": "The name attribute of the control.",
              "fieldName": "name",
              "attribute": "name",
              "inheritedFrom": {
                "name": "BaseFormAssociatedElement",
                "module": "src/components/common/mixins/forms/associated.ts"
              }
            },
            {
              "name": "disabled",
              "description": "The disabled state of the component.",
              "default": "false",
              "fieldName": "disabled",
              "attribute": "disabled",
              "type": {
                "text": "boolean"
              },
              "inheritedFrom": {
                "name": "BaseFormAssociatedElement",
                "module": "src/components/common/mixins/forms/associated.ts"
              }
            },
            {
              "name": "invalid",
              "description": "Sets the control into invalid state (visual state only).",
              "default": "false",
              "fieldName": "invalid",
              "attribute": "invalid",
              "type": {
                "text": "boolean"
              },
              "inheritedFrom": {
                "name": "BaseFormAssociatedElement",
                "module": "src/components/common/mixins/forms/associated.ts"
              }
            }
          ]
        },
        {
          "kind": "class",
          "description": "",
          "name": "FormRequiredInterface",
          "members": [
            {
              "kind": "field",
              "name": "_required",
              "type": {
                "text": "boolean"
              },
              "privacy": "protected"
            },
            {
              "kind": "field",
              "name": "required",
              "privacy": "public",
              "description": "When set, makes the component a required field for validation.",
              "default": "false",
              "attribute": "required",
              "type": {
                "text": "boolean"
              }
            }
          ],
          "attributes": [
            {
              "name": "required",
              "description": "When set, makes the component a required field for validation.",
              "default": "false",
              "fieldName": "required"
            }
          ]
        }
      ],
      "exports": [
        {
          "kind": "js",
          "name": "FormAssociatedElementInterface",
          "declaration": {
            "name": "FormAssociatedElementInterface",
            "module": "src/components/common/mixins/forms/types.ts"
          }
        },
        {
          "kind": "js",
          "name": "FormAssociatedCheckboxElementInterface",
          "declaration": {
            "name": "FormAssociatedCheckboxElementInterface",
            "module": "src/components/common/mixins/forms/types.ts"
          }
        },
        {
          "kind": "js",
          "name": "FormRequiredInterface",
          "declaration": {
            "name": "FormRequiredInterface",
            "module": "src/components/common/mixins/forms/types.ts"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "src/components/common/mixins/forms/form-value.ts",
      "declarations": [
        {
          "kind": "variable",
          "name": "defaultBooleanTransformers",
          "type": {
            "text": "Partial<\n  FormValueTransformers<boolean>\n>"
          },
          "default": "{ setValue: Boolean, setDefaultValue: Boolean, setFormValue: (checked, host) => { return checked && 'value' in host ? (host.value as string) || 'on' : null; }, }"
        },
        {
          "kind": "variable",
          "name": "defaultNumberTransformers",
          "type": {
            "text": "Partial<FormValueTransformers<number>>"
          },
          "default": "{ setValue: asNumber, setDefaultValue: asNumber, setFormValue: (value) => value.toString(), }"
        },
        {
          "kind": "variable",
          "name": "defaultDateTimeTransformers",
          "type": {
            "text": "Partial<\n  FormValueTransformers<Date | null>\n>"
          },
          "default": "{ setValue: convertToDate, setDefaultValue: convertToDate, setFormValue: getDateFormValue, }"
        },
        {
          "kind": "variable",
          "name": "defaultFileListTransformer",
          "type": {
            "text": "Partial<\n  FormValueTransformers<FileList | null>\n>"
          },
          "default": "{ setValue: (value) => value || null, getValue: (value) => value, setDefaultValue: (value) => value || null, getDefaultValue: (value) => value, setFormValue: (files: FileList | null, host: IgcFormControl) => { if (!host.name || !files) { return null; } const data = new FormData(); for (const file of Array.from(files)) { data.append(host.name, file); } return data; }, }"
        },
        {
          "kind": "function",
          "name": "getDateRangeFormValue",
          "return": {
            "type": {
              "text": "FormValueType"
            }
          },
          "parameters": [
            {
              "name": "value",
              "type": {
                "text": "DateRangeValue | null"
              }
            },
            {
              "name": "host",
              "type": {
                "text": "IgcFormControl"
              }
            }
          ],
          "description": "Converts a DateDateRangeValue object to FormData with\nstart and end Date values as ISO 8601 strings.\nThe keys are prefixed with the host name\nand suffixed with 'start' or 'end' accordingly.\nIn case the host does not have a name, it does not participate in form submission.\n\nIf the date values are null or undefined, the form data values\nare empty strings ''."
        },
        {
          "kind": "variable",
          "name": "defaultDateRangeTransformers",
          "type": {
            "text": "Partial<\n  FormValueTransformers<DateRangeValue | null>\n>"
          },
          "default": "{ setValue: convertToDateRange, setDefaultValue: convertToDateRange, setFormValue: getDateRangeFormValue, }"
        },
        {
          "kind": "class",
          "description": "",
          "name": "FormValue",
          "members": [
            {
              "kind": "field",
              "name": "setFormValueKey",
              "privacy": "private",
              "static": true,
              "readonly": true,
              "default": "'_setFormValue'",
              "type": {
                "text": "'_setFormValue'"
              }
            },
            {
              "kind": "field",
              "name": "_host",
              "type": {
                "text": "IgcFormControl"
              },
              "privacy": "private",
              "default": "host"
            },
            {
              "kind": "field",
              "name": "_value",
              "type": {
                "text": "T"
              },
              "privacy": "private"
            },
            {
              "kind": "field",
              "name": "_defaultValue",
              "type": {
                "text": "T"
              },
              "privacy": "private"
            },
            {
              "kind": "field",
              "name": "_transformers",
              "type": {
                "text": "FormValueTransformers<T>"
              },
              "privacy": "private",
              "default": "{ ...defaultTransformers, ...config.transformers, }"
            },
            {
              "kind": "field",
              "name": "_setFormValue",
              "type": {
                "text": "IgcFormControl[typeof FormValue.setFormValueKey]"
              },
              "privacy": "private",
              "default": "host[FormValue.setFormValueKey]"
            },
            {
              "kind": "method",
              "name": "setValueAndFormState",
              "privacy": "public",
              "return": {
                "type": {
                  "text": "void"
                }
              },
              "parameters": [
                {
                  "name": "value",
                  "type": {
                    "text": "T"
                  }
                }
              ]
            },
            {
              "kind": "field",
              "name": "defaultValue",
              "privacy": "public",
              "type": {
                "text": "T"
              }
            },
            {
              "kind": "field",
              "name": "value",
              "privacy": "public",
              "type": {
                "text": "T"
              }
            }
          ]
        },
        {
          "kind": "function",
          "name": "createFormValueState",
          "return": {
            "type": {
              "text": "FormValue<T>"
            }
          },
          "parameters": [
            {
              "name": "host",
              "type": {
                "text": "IgcFormControl"
              }
            },
            {
              "name": "config",
              "type": {
                "text": "FormValueConfig<T>"
              }
            }
          ]
        }
      ],
      "exports": [
        {
          "kind": "js",
          "name": "defaultBooleanTransformers",
          "declaration": {
            "name": "defaultBooleanTransformers",
            "module": "src/components/common/mixins/forms/form-value.ts"
          }
        },
        {
          "kind": "js",
          "name": "defaultNumberTransformers",
          "declaration": {
            "name": "defaultNumberTransformers",
            "module": "src/components/common/mixins/forms/form-value.ts"
          }
        },
        {
          "kind": "js",
          "name": "defaultDateTimeTransformers",
          "declaration": {
            "name": "defaultDateTimeTransformers",
            "module": "src/components/common/mixins/forms/form-value.ts"
          }
        },
        {
          "kind": "js",
          "name": "defaultFileListTransformer",
          "declaration": {
            "name": "defaultFileListTransformer",
            "module": "src/components/common/mixins/forms/form-value.ts"
          }
        },
        {
          "kind": "js",
          "name": "getDateRangeFormValue",
          "declaration": {
            "name": "getDateRangeFormValue",
            "module": "src/components/common/mixins/forms/form-value.ts"
          }
        },
        {
          "kind": "js",
          "name": "defaultDateRangeTransformers",
          "declaration": {
            "name": "defaultDateRangeTransformers",
            "module": "src/components/common/mixins/forms/form-value.ts"
          }
        },
        {
          "kind": "js",
          "name": "FormValue",
          "declaration": {
            "name": "FormValue",
            "module": "src/components/common/mixins/forms/form-value.ts"
          }
        },
        {
          "kind": "js",
          "name": "createFormValueState",
          "declaration": {
            "name": "createFormValueState",
            "module": "src/components/common/mixins/forms/form-value.ts"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "src/components/common/mixins/forms/associated.ts",
      "declarations": [
        {
          "kind": "mixin",
          "description": "Mixes the passed in class and turns it into a form associated custom element.",
          "name": "FormAssociatedMixin",
          "members": [
            {
              "kind": "field",
              "name": "defaultValue",
              "privacy": "public"
            },
            {
              "kind": "field",
              "name": "formAssociated",
              "type": {
                "text": "boolean"
              },
              "privacy": "public",
              "static": true,
              "readonly": true,
              "default": "true",
              "inheritedFrom": {
                "name": "BaseFormAssociated",
                "module": "src/components/common/mixins/forms/associated.ts"
              }
            },
            {
              "kind": "field",
              "name": "__internals",
              "type": {
                "text": "ElementInternals"
              },
              "privacy": "private",
              "inheritedFrom": {
                "name": "BaseFormAssociated",
                "module": "src/components/common/mixins/forms/associated.ts"
              }
            },
            {
              "kind": "field",
              "name": "_formValue",
              "type": {
                "text": "FormValue<unknown>"
              },
              "privacy": "protected",
              "inheritedFrom": {
                "name": "BaseFormAssociated",
                "module": "src/components/common/mixins/forms/associated.ts"
              }
            },
            {
              "kind": "field",
              "name": "_disabled",
              "type": {
                "text": "boolean"
              },
              "privacy": "protected",
              "default": "false",
              "inheritedFrom": {
                "name": "BaseFormAssociated",
                "module": "src/components/common/mixins/forms/associated.ts"
              }
            },
            {
              "kind": "field",
              "name": "_invalid",
              "type": {
                "text": "boolean"
              },
              "privacy": "protected",
              "default": "false",
              "inheritedFrom": {
                "name": "BaseFormAssociated",
                "module": "src/components/common/mixins/forms/associated.ts"
              }
            },
            {
              "kind": "field",
              "name": "_dirty",
              "type": {
                "text": "boolean"
              },
              "privacy": "protected",
              "default": "false",
              "inheritedFrom": {
                "name": "BaseFormAssociated",
                "module": "src/components/common/mixins/forms/associated.ts"
              }
            },
            {
              "kind": "field",
              "name": "_pristine",
              "type": {
                "text": "boolean"
              },
              "privacy": "protected",
              "default": "true",
              "inheritedFrom": {
                "name": "BaseFormAssociated",
                "module": "src/components/common/mixins/forms/associated.ts"
              }
            },
            {
              "kind": "field",
              "name": "__validators",
              "type": {
                "text": "Validator[]"
              },
              "privacy": "protected",
              "readonly": true,
              "inheritedFrom": {
                "name": "BaseFormAssociated",
                "module": "src/components/common/mixins/forms/associated.ts"
              }
            },
            {
              "kind": "field",
              "name": "name",
              "type": {
                "text": "string"
              },
              "privacy": "public",
              "description": "The name attribute of the control.",
              "attribute": "name",
              "reflects": true,
              "inheritedFrom": {
                "name": "BaseFormAssociated",
                "module": "src/components/common/mixins/forms/associated.ts"
              }
            },
            {
              "kind": "field",
              "name": "disabled",
              "privacy": "public",
              "description": "The disabled state of the component.",
              "default": "false",
              "attribute": "disabled",
              "type": {
                "text": "boolean"
              },
              "reflects": true,
              "inheritedFrom": {
                "name": "BaseFormAssociated",
                "module": "src/components/common/mixins/forms/associated.ts"
              }
            },
            {
              "kind": "field",
              "name": "invalid",
              "privacy": "public",
              "description": "Sets the control into invalid state (visual state only).",
              "default": "false",
              "attribute": "invalid",
              "type": {
                "text": "boolean"
              },
              "reflects": true,
              "inheritedFrom": {
                "name": "BaseFormAssociated",
                "module": "src/components/common/mixins/forms/associated.ts"
              }
            },
            {
              "kind": "field",
              "name": "form",
              "type": {
                "text": "HTMLFormElement | null"
              },
              "privacy": "public",
              "description": "Returns the HTMLFormElement associated with this element.",
              "readonly": true,
              "inheritedFrom": {
                "name": "BaseFormAssociated",
                "module": "src/components/common/mixins/forms/associated.ts"
              }
            },
            {
              "kind": "field",
              "name": "validity",
              "type": {
                "text": "ValidityState"
              },
              "privacy": "public",
              "description": "Returns a ValidityState object which represents the different validity states\nthe element can be in, with respect to constraint validation.",
              "readonly": true,
              "inheritedFrom": {
                "name": "BaseFormAssociated",
                "module": "src/components/common/mixins/forms/associated.ts"
              }
            },
            {
              "kind": "field",
              "name": "validationMessage",
              "type": {
                "text": "string"
              },
              "privacy": "public",
              "description": "A string containing the validation message of this element.",
              "readonly": true,
              "inheritedFrom": {
                "name": "BaseFormAssociated",
                "module": "src/components/common/mixins/forms/associated.ts"
              }
            },
            {
              "kind": "field",
              "name": "willValidate",
              "type": {
                "text": "boolean"
              },
              "privacy": "public",
              "description": "A boolean value which returns true if the element is a submittable element\nthat is a candidate for constraint validation.",
              "readonly": true,
              "inheritedFrom": {
                "name": "BaseFormAssociated",
                "module": "src/components/common/mixins/forms/associated.ts"
              }
            },
            {
              "kind": "method",
              "name": "_handleInvalid",
              "privacy": "private",
              "parameters": [
                {
                  "name": "event",
                  "type": {
                    "text": "Event"
                  }
                }
              ],
              "inheritedFrom": {
                "name": "BaseFormAssociated",
                "module": "src/components/common/mixins/forms/associated.ts"
              }
            },
            {
              "kind": "method",
              "name": "_setInvalidState",
              "privacy": "private",
              "return": {
                "type": {
                  "text": "void"
                }
              },
              "inheritedFrom": {
                "name": "BaseFormAssociated",
                "module": "src/components/common/mixins/forms/associated.ts"
              }
            },
            {
              "kind": "method",
              "name": "__runValidators",
              "privacy": "private",
              "inheritedFrom": {
                "name": "BaseFormAssociated",
                "module": "src/components/common/mixins/forms/associated.ts"
              }
            },
            {
              "kind": "method",
              "name": "_setDefaultValue",
              "privacy": "protected",
              "return": {
                "type": {
                  "text": "void"
                }
              },
              "parameters": [
                {
                  "name": "current",
                  "type": {
                    "text": "string | null"
                  }
                }
              ],
              "inheritedFrom": {
                "name": "BaseFormAssociated",
                "module": "src/components/common/mixins/forms/associated.ts"
              }
            },
            {
              "kind": "method",
              "name": "_restoreDefaultValue",
              "privacy": "protected",
              "return": {
                "type": {
                  "text": "void"
                }
              },
              "inheritedFrom": {
                "name": "BaseFormAssociated",
                "module": "src/components/common/mixins/forms/associated.ts"
              }
            },
            {
              "kind": "method",
              "name": "_validate",
              "privacy": "protected",
              "return": {
                "type": {
                  "text": "void"
                }
              },
              "parameters": [
                {
                  "name": "message",
                  "optional": true,
                  "type": {
                    "text": "string"
                  }
                }
              ],
              "inheritedFrom": {
                "name": "BaseFormAssociated",
                "module": "src/components/common/mixins/forms/associated.ts"
              }
            },
            {
              "kind": "method",
              "name": "_updateValidity",
              "privacy": "protected",
              "parameters": [
                {
                  "name": "error",
                  "optional": true,
                  "type": {
                    "text": "string"
                  }
                }
              ],
              "description": "Executes the component validators and updates the internal validity state.",
              "inheritedFrom": {
                "name": "BaseFormAssociated",
                "module": "src/components/common/mixins/forms/associated.ts"
              }
            },
            {
              "kind": "method",
              "name": "_setFormValue",
              "privacy": "protected",
              "return": {
                "type": {
                  "text": "void"
                }
              },
              "parameters": [
                {
                  "name": "value",
                  "type": {
                    "text": "FormValueType"
                  }
                },
                {
                  "name": "state",
                  "optional": true,
                  "type": {
                    "text": "FormValueType"
                  }
                }
              ],
              "inheritedFrom": {
                "name": "BaseFormAssociated",
                "module": "src/components/common/mixins/forms/associated.ts"
              }
            },
            {
              "kind": "method",
              "name": "formAssociatedCallback",
              "privacy": "protected",
              "return": {
                "type": {
                  "text": "void"
                }
              },
              "parameters": [
                {
                  "name": "_form",
                  "type": {
                    "text": "HTMLFormElement"
                  }
                }
              ],
              "inheritedFrom": {
                "name": "BaseFormAssociated",
                "module": "src/components/common/mixins/forms/associated.ts"
              }
            },
            {
              "kind": "method",
              "name": "formDisabledCallback",
              "privacy": "protected",
              "return": {
                "type": {
                  "text": "void"
                }
              },
              "parameters": [
                {
                  "name": "state",
                  "type": {
                    "text": "boolean"
                  }
                }
              ],
              "inheritedFrom": {
                "name": "BaseFormAssociated",
                "module": "src/components/common/mixins/forms/associated.ts"
              }
            },
            {
              "kind": "method",
              "name": "formResetCallback",
              "privacy": "protected",
              "return": {
                "type": {
                  "text": "void"
                }
              },
              "inheritedFrom": {
                "name": "BaseFormAssociated",
                "module": "src/components/common/mixins/forms/associated.ts"
              }
            },
            {
              "kind": "method",
              "name": "formStateRestoreCallback",
              "privacy": "protected",
              "return": {
                "type": {
                  "text": "void"
                }
              },
              "parameters": [
                {
                  "name": "_state",
                  "type": {
                    "text": "FormValueType"
                  }
                },
                {
                  "name": "_mode",
                  "type": {
                    "text": "FormRestoreMode"
                  }
                }
              ],
              "inheritedFrom": {
                "name": "BaseFormAssociated",
                "module": "src/components/common/mixins/forms/associated.ts"
              }
            },
            {
              "kind": "method",
              "name": "reportValidity",
              "privacy": "public",
              "description": "Checks for validity of the control and shows the browser message if it invalid.",
              "inheritedFrom": {
                "name": "BaseFormAssociated",
                "module": "src/components/common/mixins/forms/associated.ts"
              }
            },
            {
              "kind": "method",
              "name": "checkValidity",
              "privacy": "public",
              "description": "Checks for validity of the control and emits the invalid event if it invalid.",
              "inheritedFrom": {
                "name": "BaseFormAssociated",
                "module": "src/components/common/mixins/forms/associated.ts"
              }
            },
            {
              "kind": "method",
              "name": "setCustomValidity",
              "privacy": "public",
              "parameters": [
                {
                  "name": "message",
                  "type": {
                    "text": "string"
                  }
                }
              ],
              "description": "Sets a custom validation message for the control.\nAs long as `message` is not empty, the control is considered invalid.",
              "inheritedFrom": {
                "name": "BaseFormAssociated",
                "module": "src/components/common/mixins/forms/associated.ts"
              }
            }
          ],
          "mixins": [
            {
              "name": "BaseFormAssociated",
              "module": "src/components/common/mixins/forms/associated.ts"
            }
          ],
          "parameters": [
            {
              "name": "base",
              "type": {
                "text": "T"
              }
            }
          ],
          "attributes": [
            {
              "name": "name",
              "type": {
                "text": "string"
              },
              "description": "The name attribute of the control.",
              "fieldName": "name",
              "attribute": "name",
              "inheritedFrom": {
                "name": "BaseFormAssociated",
                "module": "src/components/common/mixins/forms/associated.ts"
              }
            },
            {
              "name": "disabled",
              "description": "The disabled state of the component.",
              "default": "false",
              "fieldName": "disabled",
              "attribute": "disabled",
              "type": {
                "text": "boolean"
              },
              "inheritedFrom": {
                "name": "BaseFormAssociated",
                "module": "src/components/common/mixins/forms/associated.ts"
              }
            },
            {
              "name": "invalid",
              "description": "Sets the control into invalid state (visual state only).",
              "default": "false",
              "fieldName": "invalid",
              "attribute": "invalid",
              "type": {
                "text": "boolean"
              },
              "inheritedFrom": {
                "name": "BaseFormAssociated",
                "module": "src/components/common/mixins/forms/associated.ts"
              }
            }
          ]
        },
        {
          "kind": "mixin",
          "description": "Mixes the passed in class and turns it into a form associated custom element.",
          "name": "FormAssociatedCheckboxMixin",
          "members": [
            {
              "kind": "field",
              "name": "defaultChecked",
              "privacy": "public",
              "type": {
                "text": "boolean"
              }
            },
            {
              "kind": "field",
              "name": "formAssociated",
              "type": {
                "text": "boolean"
              },
              "privacy": "public",
              "static": true,
              "readonly": true,
              "default": "true",
              "inheritedFrom": {
                "name": "BaseFormAssociated",
                "module": "src/components/common/mixins/forms/associated.ts"
              }
            },
            {
              "kind": "field",
              "name": "__internals",
              "type": {
                "text": "ElementInternals"
              },
              "privacy": "private",
              "inheritedFrom": {
                "name": "BaseFormAssociated",
                "module": "src/components/common/mixins/forms/associated.ts"
              }
            },
            {
              "kind": "field",
              "name": "_formValue",
              "type": {
                "text": "FormValue<unknown>"
              },
              "privacy": "protected",
              "inheritedFrom": {
                "name": "BaseFormAssociated",
                "module": "src/components/common/mixins/forms/associated.ts"
              }
            },
            {
              "kind": "field",
              "name": "_disabled",
              "type": {
                "text": "boolean"
              },
              "privacy": "protected",
              "default": "false",
              "inheritedFrom": {
                "name": "BaseFormAssociated",
                "module": "src/components/common/mixins/forms/associated.ts"
              }
            },
            {
              "kind": "field",
              "name": "_invalid",
              "type": {
                "text": "boolean"
              },
              "privacy": "protected",
              "default": "false",
              "inheritedFrom": {
                "name": "BaseFormAssociated",
                "module": "src/components/common/mixins/forms/associated.ts"
              }
            },
            {
              "kind": "field",
              "name": "_dirty",
              "type": {
                "text": "boolean"
              },
              "privacy": "protected",
              "default": "false",
              "inheritedFrom": {
                "name": "BaseFormAssociated",
                "module": "src/components/common/mixins/forms/associated.ts"
              }
            },
            {
              "kind": "field",
              "name": "_pristine",
              "type": {
                "text": "boolean"
              },
              "privacy": "protected",
              "default": "true",
              "inheritedFrom": {
                "name": "BaseFormAssociated",
                "module": "src/components/common/mixins/forms/associated.ts"
              }
            },
            {
              "kind": "field",
              "name": "__validators",
              "type": {
                "text": "Validator[]"
              },
              "privacy": "protected",
              "readonly": true,
              "inheritedFrom": {
                "name": "BaseFormAssociated",
                "module": "src/components/common/mixins/forms/associated.ts"
              }
            },
            {
              "kind": "field",
              "name": "name",
              "type": {
                "text": "string"
              },
              "privacy": "public",
              "description": "The name attribute of the control.",
              "attribute": "name",
              "reflects": true,
              "inheritedFrom": {
                "name": "BaseFormAssociated",
                "module": "src/components/common/mixins/forms/associated.ts"
              }
            },
            {
              "kind": "field",
              "name": "disabled",
              "privacy": "public",
              "description": "The disabled state of the component.",
              "default": "false",
              "attribute": "disabled",
              "type": {
                "text": "boolean"
              },
              "reflects": true,
              "inheritedFrom": {
                "name": "BaseFormAssociated",
                "module": "src/components/common/mixins/forms/associated.ts"
              }
            },
            {
              "kind": "field",
              "name": "invalid",
              "privacy": "public",
              "description": "Sets the control into invalid state (visual state only).",
              "default": "false",
              "attribute": "invalid",
              "type": {
                "text": "boolean"
              },
              "reflects": true,
              "inheritedFrom": {
                "name": "BaseFormAssociated",
                "module": "src/components/common/mixins/forms/associated.ts"
              }
            },
            {
              "kind": "field",
              "name": "form",
              "type": {
                "text": "HTMLFormElement | null"
              },
              "privacy": "public",
              "description": "Returns the HTMLFormElement associated with this element.",
              "readonly": true,
              "inheritedFrom": {
                "name": "BaseFormAssociated",
                "module": "src/components/common/mixins/forms/associated.ts"
              }
            },
            {
              "kind": "field",
              "name": "validity",
              "type": {
                "text": "ValidityState"
              },
              "privacy": "public",
              "description": "Returns a ValidityState object which represents the different validity states\nthe element can be in, with respect to constraint validation.",
              "readonly": true,
              "inheritedFrom": {
                "name": "BaseFormAssociated",
                "module": "src/components/common/mixins/forms/associated.ts"
              }
            },
            {
              "kind": "field",
              "name": "validationMessage",
              "type": {
                "text": "string"
              },
              "privacy": "public",
              "description": "A string containing the validation message of this element.",
              "readonly": true,
              "inheritedFrom": {
                "name": "BaseFormAssociated",
                "module": "src/components/common/mixins/forms/associated.ts"
              }
            },
            {
              "kind": "field",
              "name": "willValidate",
              "type": {
                "text": "boolean"
              },
              "privacy": "public",
              "description": "A boolean value which returns true if the element is a submittable element\nthat is a candidate for constraint validation.",
              "readonly": true,
              "inheritedFrom": {
                "name": "BaseFormAssociated",
                "module": "src/components/common/mixins/forms/associated.ts"
              }
            },
            {
              "kind": "method",
              "name": "_handleInvalid",
              "privacy": "private",
              "parameters": [
                {
                  "name": "event",
                  "type": {
                    "text": "Event"
                  }
                }
              ],
              "inheritedFrom": {
                "name": "BaseFormAssociated",
                "module": "src/components/common/mixins/forms/associated.ts"
              }
            },
            {
              "kind": "method",
              "name": "_setInvalidState",
              "privacy": "private",
              "return": {
                "type": {
                  "text": "void"
                }
              },
              "inheritedFrom": {
                "name": "BaseFormAssociated",
                "module": "src/components/common/mixins/forms/associated.ts"
              }
            },
            {
              "kind": "method",
              "name": "__runValidators",
              "privacy": "private",
              "inheritedFrom": {
                "name": "BaseFormAssociated",
                "module": "src/components/common/mixins/forms/associated.ts"
              }
            },
            {
              "kind": "method",
              "name": "_setDefaultValue",
              "privacy": "protected",
              "return": {
                "type": {
                  "text": "void"
                }
              },
              "parameters": [
                {
                  "name": "current",
                  "type": {
                    "text": "string | null"
                  }
                }
              ],
              "inheritedFrom": {
                "name": "BaseFormAssociated",
                "module": "src/components/common/mixins/forms/associated.ts"
              }
            },
            {
              "kind": "method",
              "name": "_restoreDefaultValue",
              "privacy": "protected",
              "return": {
                "type": {
                  "text": "void"
                }
              },
              "inheritedFrom": {
                "name": "BaseFormAssociated",
                "module": "src/components/common/mixins/forms/associated.ts"
              }
            },
            {
              "kind": "method",
              "name": "_validate",
              "privacy": "protected",
              "return": {
                "type": {
                  "text": "void"
                }
              },
              "parameters": [
                {
                  "name": "message",
                  "optional": true,
                  "type": {
                    "text": "string"
                  }
                }
              ],
              "inheritedFrom": {
                "name": "BaseFormAssociated",
                "module": "src/components/common/mixins/forms/associated.ts"
              }
            },
            {
              "kind": "method",
              "name": "_updateValidity",
              "privacy": "protected",
              "parameters": [
                {
                  "name": "error",
                  "optional": true,
                  "type": {
                    "text": "string"
                  }
                }
              ],
              "description": "Executes the component validators and updates the internal validity state.",
              "inheritedFrom": {
                "name": "BaseFormAssociated",
                "module": "src/components/common/mixins/forms/associated.ts"
              }
            },
            {
              "kind": "method",
              "name": "_setFormValue",
              "privacy": "protected",
              "return": {
                "type": {
                  "text": "void"
                }
              },
              "parameters": [
                {
                  "name": "value",
                  "type": {
                    "text": "FormValueType"
                  }
                },
                {
                  "name": "state",
                  "optional": true,
                  "type": {
                    "text": "FormValueType"
                  }
                }
              ],
              "inheritedFrom": {
                "name": "BaseFormAssociated",
                "module": "src/components/common/mixins/forms/associated.ts"
              }
            },
            {
              "kind": "method",
              "name": "formAssociatedCallback",
              "privacy": "protected",
              "return": {
                "type": {
                  "text": "void"
                }
              },
              "parameters": [
                {
                  "name": "_form",
                  "type": {
                    "text": "HTMLFormElement"
                  }
                }
              ],
              "inheritedFrom": {
                "name": "BaseFormAssociated",
                "module": "src/components/common/mixins/forms/associated.ts"
              }
            },
            {
              "kind": "method",
              "name": "formDisabledCallback",
              "privacy": "protected",
              "return": {
                "type": {
                  "text": "void"
                }
              },
              "parameters": [
                {
                  "name": "state",
                  "type": {
                    "text": "boolean"
                  }
                }
              ],
              "inheritedFrom": {
                "name": "BaseFormAssociated",
                "module": "src/components/common/mixins/forms/associated.ts"
              }
            },
            {
              "kind": "method",
              "name": "formResetCallback",
              "privacy": "protected",
              "return": {
                "type": {
                  "text": "void"
                }
              },
              "inheritedFrom": {
                "name": "BaseFormAssociated",
                "module": "src/components/common/mixins/forms/associated.ts"
              }
            },
            {
              "kind": "method",
              "name": "formStateRestoreCallback",
              "privacy": "protected",
              "return": {
                "type": {
                  "text": "void"
                }
              },
              "parameters": [
                {
                  "name": "_state",
                  "type": {
                    "text": "FormValueType"
                  }
                },
                {
                  "name": "_mode",
                  "type": {
                    "text": "FormRestoreMode"
                  }
                }
              ],
              "inheritedFrom": {
                "name": "BaseFormAssociated",
                "module": "src/components/common/mixins/forms/associated.ts"
              }
            },
            {
              "kind": "method",
              "name": "reportValidity",
              "privacy": "public",
              "description": "Checks for validity of the control and shows the browser message if it invalid.",
              "inheritedFrom": {
                "name": "BaseFormAssociated",
                "module": "src/components/common/mixins/forms/associated.ts"
              }
            },
            {
              "kind": "method",
              "name": "checkValidity",
              "privacy": "public",
              "description": "Checks for validity of the control and emits the invalid event if it invalid.",
              "inheritedFrom": {
                "name": "BaseFormAssociated",
                "module": "src/components/common/mixins/forms/associated.ts"
              }
            },
            {
              "kind": "method",
              "name": "setCustomValidity",
              "privacy": "public",
              "parameters": [
                {
                  "name": "message",
                  "type": {
                    "text": "string"
                  }
                }
              ],
              "description": "Sets a custom validation message for the control.\nAs long as `message` is not empty, the control is considered invalid.",
              "inheritedFrom": {
                "name": "BaseFormAssociated",
                "module": "src/components/common/mixins/forms/associated.ts"
              }
            }
          ],
          "mixins": [
            {
              "name": "BaseFormAssociated",
              "module": "src/components/common/mixins/forms/associated.ts"
            }
          ],
          "parameters": [
            {
              "name": "base",
              "type": {
                "text": "T"
              }
            }
          ],
          "attributes": [
            {
              "name": "name",
              "type": {
                "text": "string"
              },
              "description": "The name attribute of the control.",
              "fieldName": "name",
              "attribute": "name",
              "inheritedFrom": {
                "name": "BaseFormAssociated",
                "module": "src/components/common/mixins/forms/associated.ts"
              }
            },
            {
              "name": "disabled",
              "description": "The disabled state of the component.",
              "default": "false",
              "fieldName": "disabled",
              "attribute": "disabled",
              "type": {
                "text": "boolean"
              },
              "inheritedFrom": {
                "name": "BaseFormAssociated",
                "module": "src/components/common/mixins/forms/associated.ts"
              }
            },
            {
              "name": "invalid",
              "description": "Sets the control into invalid state (visual state only).",
              "default": "false",
              "fieldName": "invalid",
              "attribute": "invalid",
              "type": {
                "text": "boolean"
              },
              "inheritedFrom": {
                "name": "BaseFormAssociated",
                "module": "src/components/common/mixins/forms/associated.ts"
              }
            }
          ]
        }
      ],
      "exports": [
        {
          "kind": "js",
          "name": "FormAssociatedMixin",
          "declaration": {
            "name": "FormAssociatedMixin",
            "module": "src/components/common/mixins/forms/associated.ts"
          }
        },
        {
          "kind": "js",
          "name": "FormAssociatedCheckboxMixin",
          "declaration": {
            "name": "FormAssociatedCheckboxMixin",
            "module": "src/components/common/mixins/forms/associated.ts"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "src/components/common/mixins/forms/associated-required.ts",
      "declarations": [
        {
          "kind": "mixin",
          "description": "Mixes the passed class into a form associated custom element with an\nadditional `required` attribute.",
          "name": "FormAssociatedRequiredMixin",
          "members": [
            {
              "kind": "field",
              "name": "_required",
              "type": {
                "text": "boolean"
              },
              "privacy": "protected",
              "default": "false"
            },
            {
              "kind": "field",
              "name": "required",
              "privacy": "public",
              "description": "When set, makes the component a required field for validation.",
              "default": "false",
              "attribute": "required",
              "type": {
                "text": "boolean"
              },
              "reflects": true
            },
            {
              "kind": "field",
              "name": "defaultValue",
              "privacy": "public",
              "inheritedFrom": {
                "name": "FormAssociatedMixin",
                "module": "src/components/common/mixins/forms/associated.ts"
              }
            },
            {
              "kind": "field",
              "name": "formAssociated",
              "type": {
                "text": "boolean"
              },
              "privacy": "public",
              "static": true,
              "readonly": true,
              "default": "true",
              "inheritedFrom": {
                "name": "BaseFormAssociated",
                "module": "src/components/common/mixins/forms/associated.ts"
              }
            },
            {
              "kind": "field",
              "name": "__internals",
              "type": {
                "text": "ElementInternals"
              },
              "privacy": "private",
              "inheritedFrom": {
                "name": "BaseFormAssociated",
                "module": "src/components/common/mixins/forms/associated.ts"
              }
            },
            {
              "kind": "field",
              "name": "_formValue",
              "type": {
                "text": "FormValue<unknown>"
              },
              "privacy": "protected",
              "inheritedFrom": {
                "name": "BaseFormAssociated",
                "module": "src/components/common/mixins/forms/associated.ts"
              }
            },
            {
              "kind": "field",
              "name": "_disabled",
              "type": {
                "text": "boolean"
              },
              "privacy": "protected",
              "default": "false",
              "inheritedFrom": {
                "name": "BaseFormAssociated",
                "module": "src/components/common/mixins/forms/associated.ts"
              }
            },
            {
              "kind": "field",
              "name": "_invalid",
              "type": {
                "text": "boolean"
              },
              "privacy": "protected",
              "default": "false",
              "inheritedFrom": {
                "name": "BaseFormAssociated",
                "module": "src/components/common/mixins/forms/associated.ts"
              }
            },
            {
              "kind": "field",
              "name": "_dirty",
              "type": {
                "text": "boolean"
              },
              "privacy": "protected",
              "default": "false",
              "inheritedFrom": {
                "name": "BaseFormAssociated",
                "module": "src/components/common/mixins/forms/associated.ts"
              }
            },
            {
              "kind": "field",
              "name": "_pristine",
              "type": {
                "text": "boolean"
              },
              "privacy": "protected",
              "default": "true",
              "inheritedFrom": {
                "name": "BaseFormAssociated",
                "module": "src/components/common/mixins/forms/associated.ts"
              }
            },
            {
              "kind": "field",
              "name": "__validators",
              "type": {
                "text": "Validator[]"
              },
              "privacy": "protected",
              "readonly": true,
              "inheritedFrom": {
                "name": "BaseFormAssociated",
                "module": "src/components/common/mixins/forms/associated.ts"
              }
            },
            {
              "kind": "field",
              "name": "name",
              "type": {
                "text": "string"
              },
              "privacy": "public",
              "description": "The name attribute of the control.",
              "attribute": "name",
              "reflects": true,
              "inheritedFrom": {
                "name": "BaseFormAssociated",
                "module": "src/components/common/mixins/forms/associated.ts"
              }
            },
            {
              "kind": "field",
              "name": "disabled",
              "privacy": "public",
              "description": "The disabled state of the component.",
              "default": "false",
              "attribute": "disabled",
              "type": {
                "text": "boolean"
              },
              "reflects": true,
              "inheritedFrom": {
                "name": "BaseFormAssociated",
                "module": "src/components/common/mixins/forms/associated.ts"
              }
            },
            {
              "kind": "field",
              "name": "invalid",
              "privacy": "public",
              "description": "Sets the control into invalid state (visual state only).",
              "default": "false",
              "attribute": "invalid",
              "type": {
                "text": "boolean"
              },
              "reflects": true,
              "inheritedFrom": {
                "name": "BaseFormAssociated",
                "module": "src/components/common/mixins/forms/associated.ts"
              }
            },
            {
              "kind": "field",
              "name": "form",
              "type": {
                "text": "HTMLFormElement | null"
              },
              "privacy": "public",
              "description": "Returns the HTMLFormElement associated with this element.",
              "readonly": true,
              "inheritedFrom": {
                "name": "BaseFormAssociated",
                "module": "src/components/common/mixins/forms/associated.ts"
              }
            },
            {
              "kind": "field",
              "name": "validity",
              "type": {
                "text": "ValidityState"
              },
              "privacy": "public",
              "description": "Returns a ValidityState object which represents the different validity states\nthe element can be in, with respect to constraint validation.",
              "readonly": true,
              "inheritedFrom": {
                "name": "BaseFormAssociated",
                "module": "src/components/common/mixins/forms/associated.ts"
              }
            },
            {
              "kind": "field",
              "name": "validationMessage",
              "type": {
                "text": "string"
              },
              "privacy": "public",
              "description": "A string containing the validation message of this element.",
              "readonly": true,
              "inheritedFrom": {
                "name": "BaseFormAssociated",
                "module": "src/components/common/mixins/forms/associated.ts"
              }
            },
            {
              "kind": "field",
              "name": "willValidate",
              "type": {
                "text": "boolean"
              },
              "privacy": "public",
              "description": "A boolean value which returns true if the element is a submittable element\nthat is a candidate for constraint validation.",
              "readonly": true,
              "inheritedFrom": {
                "name": "BaseFormAssociated",
                "module": "src/components/common/mixins/forms/associated.ts"
              }
            },
            {
              "kind": "method",
              "name": "_handleInvalid",
              "privacy": "private",
              "parameters": [
                {
                  "name": "event",
                  "type": {
                    "text": "Event"
                  }
                }
              ],
              "inheritedFrom": {
                "name": "BaseFormAssociated",
                "module": "src/components/common/mixins/forms/associated.ts"
              }
            },
            {
              "kind": "method",
              "name": "_setInvalidState",
              "privacy": "private",
              "return": {
                "type": {
                  "text": "void"
                }
              },
              "inheritedFrom": {
                "name": "BaseFormAssociated",
                "module": "src/components/common/mixins/forms/associated.ts"
              }
            },
            {
              "kind": "method",
              "name": "__runValidators",
              "privacy": "private",
              "inheritedFrom": {
                "name": "BaseFormAssociated",
                "module": "src/components/common/mixins/forms/associated.ts"
              }
            },
            {
              "kind": "method",
              "name": "_setDefaultValue",
              "privacy": "protected",
              "return": {
                "type": {
                  "text": "void"
                }
              },
              "parameters": [
                {
                  "name": "current",
                  "type": {
                    "text": "string | null"
                  }
                }
              ],
              "inheritedFrom": {
                "name": "BaseFormAssociated",
                "module": "src/components/common/mixins/forms/associated.ts"
              }
            },
            {
              "kind": "method",
              "name": "_restoreDefaultValue",
              "privacy": "protected",
              "return": {
                "type": {
                  "text": "void"
                }
              },
              "inheritedFrom": {
                "name": "BaseFormAssociated",
                "module": "src/components/common/mixins/forms/associated.ts"
              }
            },
            {
              "kind": "method",
              "name": "_validate",
              "privacy": "protected",
              "return": {
                "type": {
                  "text": "void"
                }
              },
              "parameters": [
                {
                  "name": "message",
                  "optional": true,
                  "type": {
                    "text": "string"
                  }
                }
              ],
              "inheritedFrom": {
                "name": "BaseFormAssociated",
                "module": "src/components/common/mixins/forms/associated.ts"
              }
            },
            {
              "kind": "method",
              "name": "_updateValidity",
              "privacy": "protected",
              "parameters": [
                {
                  "name": "error",
                  "optional": true,
                  "type": {
                    "text": "string"
                  }
                }
              ],
              "description": "Executes the component validators and updates the internal validity state.",
              "inheritedFrom": {
                "name": "BaseFormAssociated",
                "module": "src/components/common/mixins/forms/associated.ts"
              }
            },
            {
              "kind": "method",
              "name": "_setFormValue",
              "privacy": "protected",
              "return": {
                "type": {
                  "text": "void"
                }
              },
              "parameters": [
                {
                  "name": "value",
                  "type": {
                    "text": "FormValueType"
                  }
                },
                {
                  "name": "state",
                  "optional": true,
                  "type": {
                    "text": "FormValueType"
                  }
                }
              ],
              "inheritedFrom": {
                "name": "BaseFormAssociated",
                "module": "src/components/common/mixins/forms/associated.ts"
              }
            },
            {
              "kind": "method",
              "name": "formAssociatedCallback",
              "privacy": "protected",
              "return": {
                "type": {
                  "text": "void"
                }
              },
              "parameters": [
                {
                  "name": "_form",
                  "type": {
                    "text": "HTMLFormElement"
                  }
                }
              ],
              "inheritedFrom": {
                "name": "BaseFormAssociated",
                "module": "src/components/common/mixins/forms/associated.ts"
              }
            },
            {
              "kind": "method",
              "name": "formDisabledCallback",
              "privacy": "protected",
              "return": {
                "type": {
                  "text": "void"
                }
              },
              "parameters": [
                {
                  "name": "state",
                  "type": {
                    "text": "boolean"
                  }
                }
              ],
              "inheritedFrom": {
                "name": "BaseFormAssociated",
                "module": "src/components/common/mixins/forms/associated.ts"
              }
            },
            {
              "kind": "method",
              "name": "formResetCallback",
              "privacy": "protected",
              "return": {
                "type": {
                  "text": "void"
                }
              },
              "inheritedFrom": {
                "name": "BaseFormAssociated",
                "module": "src/components/common/mixins/forms/associated.ts"
              }
            },
            {
              "kind": "method",
              "name": "formStateRestoreCallback",
              "privacy": "protected",
              "return": {
                "type": {
                  "text": "void"
                }
              },
              "parameters": [
                {
                  "name": "_state",
                  "type": {
                    "text": "FormValueType"
                  }
                },
                {
                  "name": "_mode",
                  "type": {
                    "text": "FormRestoreMode"
                  }
                }
              ],
              "inheritedFrom": {
                "name": "BaseFormAssociated",
                "module": "src/components/common/mixins/forms/associated.ts"
              }
            },
            {
              "kind": "method",
              "name": "reportValidity",
              "privacy": "public",
              "description": "Checks for validity of the control and shows the browser message if it invalid.",
              "inheritedFrom": {
                "name": "BaseFormAssociated",
                "module": "src/components/common/mixins/forms/associated.ts"
              }
            },
            {
              "kind": "method",
              "name": "checkValidity",
              "privacy": "public",
              "description": "Checks for validity of the control and emits the invalid event if it invalid.",
              "inheritedFrom": {
                "name": "BaseFormAssociated",
                "module": "src/components/common/mixins/forms/associated.ts"
              }
            },
            {
              "kind": "method",
              "name": "setCustomValidity",
              "privacy": "public",
              "parameters": [
                {
                  "name": "message",
                  "type": {
                    "text": "string"
                  }
                }
              ],
              "description": "Sets a custom validation message for the control.\nAs long as `message` is not empty, the control is considered invalid.",
              "inheritedFrom": {
                "name": "BaseFormAssociated",
                "module": "src/components/common/mixins/forms/associated.ts"
              }
            }
          ],
          "attributes": [
            {
              "name": "required",
              "description": "When set, makes the component a required field for validation.",
              "default": "false",
              "fieldName": "required",
              "attribute": "required",
              "type": {
                "text": "boolean"
              }
            },
            {
              "name": "name",
              "type": {
                "text": "string"
              },
              "description": "The name attribute of the control.",
              "fieldName": "name",
              "attribute": "name",
              "inheritedFrom": {
                "name": "BaseFormAssociated",
                "module": "src/components/common/mixins/forms/associated.ts"
              }
            },
            {
              "name": "disabled",
              "description": "The disabled state of the component.",
              "default": "false",
              "fieldName": "disabled",
              "attribute": "disabled",
              "type": {
                "text": "boolean"
              },
              "inheritedFrom": {
                "name": "BaseFormAssociated",
                "module": "src/components/common/mixins/forms/associated.ts"
              }
            },
            {
              "name": "invalid",
              "description": "Sets the control into invalid state (visual state only).",
              "default": "false",
              "fieldName": "invalid",
              "attribute": "invalid",
              "type": {
                "text": "boolean"
              },
              "inheritedFrom": {
                "name": "BaseFormAssociated",
                "module": "src/components/common/mixins/forms/associated.ts"
              }
            }
          ],
          "mixins": [
            {
              "name": "FormAssociatedMixin",
              "module": "/src/components/common/mixins/forms/associated.js"
            }
          ],
          "parameters": [
            {
              "name": "base",
              "type": {
                "text": "T"
              }
            }
          ]
        },
        {
          "kind": "mixin",
          "description": "Mixes the passed class into a form associated custom element with an\nadditional `required` attribute.",
          "name": "FormAssociatedCheckboxRequiredMixin",
          "members": [
            {
              "kind": "field",
              "name": "_required",
              "type": {
                "text": "boolean"
              },
              "privacy": "protected",
              "default": "false"
            },
            {
              "kind": "field",
              "name": "required",
              "privacy": "public",
              "description": "When set, makes the component a required field for validation.",
              "default": "false",
              "attribute": "required",
              "type": {
                "text": "boolean"
              },
              "reflects": true
            },
            {
              "kind": "field",
              "name": "defaultChecked",
              "privacy": "public",
              "type": {
                "text": "boolean"
              },
              "inheritedFrom": {
                "name": "FormAssociatedCheckboxMixin",
                "module": "src/components/common/mixins/forms/associated.ts"
              }
            },
            {
              "kind": "field",
              "name": "formAssociated",
              "type": {
                "text": "boolean"
              },
              "privacy": "public",
              "static": true,
              "readonly": true,
              "default": "true",
              "inheritedFrom": {
                "name": "BaseFormAssociated",
                "module": "src/components/common/mixins/forms/associated.ts"
              }
            },
            {
              "kind": "field",
              "name": "__internals",
              "type": {
                "text": "ElementInternals"
              },
              "privacy": "private",
              "inheritedFrom": {
                "name": "BaseFormAssociated",
                "module": "src/components/common/mixins/forms/associated.ts"
              }
            },
            {
              "kind": "field",
              "name": "_formValue",
              "type": {
                "text": "FormValue<unknown>"
              },
              "privacy": "protected",
              "inheritedFrom": {
                "name": "BaseFormAssociated",
                "module": "src/components/common/mixins/forms/associated.ts"
              }
            },
            {
              "kind": "field",
              "name": "_disabled",
              "type": {
                "text": "boolean"
              },
              "privacy": "protected",
              "default": "false",
              "inheritedFrom": {
                "name": "BaseFormAssociated",
                "module": "src/components/common/mixins/forms/associated.ts"
              }
            },
            {
              "kind": "field",
              "name": "_invalid",
              "type": {
                "text": "boolean"
              },
              "privacy": "protected",
              "default": "false",
              "inheritedFrom": {
                "name": "BaseFormAssociated",
                "module": "src/components/common/mixins/forms/associated.ts"
              }
            },
            {
              "kind": "field",
              "name": "_dirty",
              "type": {
                "text": "boolean"
              },
              "privacy": "protected",
              "default": "false",
              "inheritedFrom": {
                "name": "BaseFormAssociated",
                "module": "src/components/common/mixins/forms/associated.ts"
              }
            },
            {
              "kind": "field",
              "name": "_pristine",
              "type": {
                "text": "boolean"
              },
              "privacy": "protected",
              "default": "true",
              "inheritedFrom": {
                "name": "BaseFormAssociated",
                "module": "src/components/common/mixins/forms/associated.ts"
              }
            },
            {
              "kind": "field",
              "name": "__validators",
              "type": {
                "text": "Validator[]"
              },
              "privacy": "protected",
              "readonly": true,
              "inheritedFrom": {
                "name": "BaseFormAssociated",
                "module": "src/components/common/mixins/forms/associated.ts"
              }
            },
            {
              "kind": "field",
              "name": "name",
              "type": {
                "text": "string"
              },
              "privacy": "public",
              "description": "The name attribute of the control.",
              "attribute": "name",
              "reflects": true,
              "inheritedFrom": {
                "name": "BaseFormAssociated",
                "module": "src/components/common/mixins/forms/associated.ts"
              }
            },
            {
              "kind": "field",
              "name": "disabled",
              "privacy": "public",
              "description": "The disabled state of the component.",
              "default": "false",
              "attribute": "disabled",
              "type": {
                "text": "boolean"
              },
              "reflects": true,
              "inheritedFrom": {
                "name": "BaseFormAssociated",
                "module": "src/components/common/mixins/forms/associated.ts"
              }
            },
            {
              "kind": "field",
              "name": "invalid",
              "privacy": "public",
              "description": "Sets the control into invalid state (visual state only).",
              "default": "false",
              "attribute": "invalid",
              "type": {
                "text": "boolean"
              },
              "reflects": true,
              "inheritedFrom": {
                "name": "BaseFormAssociated",
                "module": "src/components/common/mixins/forms/associated.ts"
              }
            },
            {
              "kind": "field",
              "name": "form",
              "type": {
                "text": "HTMLFormElement | null"
              },
              "privacy": "public",
              "description": "Returns the HTMLFormElement associated with this element.",
              "readonly": true,
              "inheritedFrom": {
                "name": "BaseFormAssociated",
                "module": "src/components/common/mixins/forms/associated.ts"
              }
            },
            {
              "kind": "field",
              "name": "validity",
              "type": {
                "text": "ValidityState"
              },
              "privacy": "public",
              "description": "Returns a ValidityState object which represents the different validity states\nthe element can be in, with respect to constraint validation.",
              "readonly": true,
              "inheritedFrom": {
                "name": "BaseFormAssociated",
                "module": "src/components/common/mixins/forms/associated.ts"
              }
            },
            {
              "kind": "field",
              "name": "validationMessage",
              "type": {
                "text": "string"
              },
              "privacy": "public",
              "description": "A string containing the validation message of this element.",
              "readonly": true,
              "inheritedFrom": {
                "name": "BaseFormAssociated",
                "module": "src/components/common/mixins/forms/associated.ts"
              }
            },
            {
              "kind": "field",
              "name": "willValidate",
              "type": {
                "text": "boolean"
              },
              "privacy": "public",
              "description": "A boolean value which returns true if the element is a submittable element\nthat is a candidate for constraint validation.",
              "readonly": true,
              "inheritedFrom": {
                "name": "BaseFormAssociated",
                "module": "src/components/common/mixins/forms/associated.ts"
              }
            },
            {
              "kind": "method",
              "name": "_handleInvalid",
              "privacy": "private",
              "parameters": [
                {
                  "name": "event",
                  "type": {
                    "text": "Event"
                  }
                }
              ],
              "inheritedFrom": {
                "name": "BaseFormAssociated",
                "module": "src/components/common/mixins/forms/associated.ts"
              }
            },
            {
              "kind": "method",
              "name": "_setInvalidState",
              "privacy": "private",
              "return": {
                "type": {
                  "text": "void"
                }
              },
              "inheritedFrom": {
                "name": "BaseFormAssociated",
                "module": "src/components/common/mixins/forms/associated.ts"
              }
            },
            {
              "kind": "method",
              "name": "__runValidators",
              "privacy": "private",
              "inheritedFrom": {
                "name": "BaseFormAssociated",
                "module": "src/components/common/mixins/forms/associated.ts"
              }
            },
            {
              "kind": "method",
              "name": "_setDefaultValue",
              "privacy": "protected",
              "return": {
                "type": {
                  "text": "void"
                }
              },
              "parameters": [
                {
                  "name": "current",
                  "type": {
                    "text": "string | null"
                  }
                }
              ],
              "inheritedFrom": {
                "name": "BaseFormAssociated",
                "module": "src/components/common/mixins/forms/associated.ts"
              }
            },
            {
              "kind": "method",
              "name": "_restoreDefaultValue",
              "privacy": "protected",
              "return": {
                "type": {
                  "text": "void"
                }
              },
              "inheritedFrom": {
                "name": "BaseFormAssociated",
                "module": "src/components/common/mixins/forms/associated.ts"
              }
            },
            {
              "kind": "method",
              "name": "_validate",
              "privacy": "protected",
              "return": {
                "type": {
                  "text": "void"
                }
              },
              "parameters": [
                {
                  "name": "message",
                  "optional": true,
                  "type": {
                    "text": "string"
                  }
                }
              ],
              "inheritedFrom": {
                "name": "BaseFormAssociated",
                "module": "src/components/common/mixins/forms/associated.ts"
              }
            },
            {
              "kind": "method",
              "name": "_updateValidity",
              "privacy": "protected",
              "parameters": [
                {
                  "name": "error",
                  "optional": true,
                  "type": {
                    "text": "string"
                  }
                }
              ],
              "description": "Executes the component validators and updates the internal validity state.",
              "inheritedFrom": {
                "name": "BaseFormAssociated",
                "module": "src/components/common/mixins/forms/associated.ts"
              }
            },
            {
              "kind": "method",
              "name": "_setFormValue",
              "privacy": "protected",
              "return": {
                "type": {
                  "text": "void"
                }
              },
              "parameters": [
                {
                  "name": "value",
                  "type": {
                    "text": "FormValueType"
                  }
                },
                {
                  "name": "state",
                  "optional": true,
                  "type": {
                    "text": "FormValueType"
                  }
                }
              ],
              "inheritedFrom": {
                "name": "BaseFormAssociated",
                "module": "src/components/common/mixins/forms/associated.ts"
              }
            },
            {
              "kind": "method",
              "name": "formAssociatedCallback",
              "privacy": "protected",
              "return": {
                "type": {
                  "text": "void"
                }
              },
              "parameters": [
                {
                  "name": "_form",
                  "type": {
                    "text": "HTMLFormElement"
                  }
                }
              ],
              "inheritedFrom": {
                "name": "BaseFormAssociated",
                "module": "src/components/common/mixins/forms/associated.ts"
              }
            },
            {
              "kind": "method",
              "name": "formDisabledCallback",
              "privacy": "protected",
              "return": {
                "type": {
                  "text": "void"
                }
              },
              "parameters": [
                {
                  "name": "state",
                  "type": {
                    "text": "boolean"
                  }
                }
              ],
              "inheritedFrom": {
                "name": "BaseFormAssociated",
                "module": "src/components/common/mixins/forms/associated.ts"
              }
            },
            {
              "kind": "method",
              "name": "formResetCallback",
              "privacy": "protected",
              "return": {
                "type": {
                  "text": "void"
                }
              },
              "inheritedFrom": {
                "name": "BaseFormAssociated",
                "module": "src/components/common/mixins/forms/associated.ts"
              }
            },
            {
              "kind": "method",
              "name": "formStateRestoreCallback",
              "privacy": "protected",
              "return": {
                "type": {
                  "text": "void"
                }
              },
              "parameters": [
                {
                  "name": "_state",
                  "type": {
                    "text": "FormValueType"
                  }
                },
                {
                  "name": "_mode",
                  "type": {
                    "text": "FormRestoreMode"
                  }
                }
              ],
              "inheritedFrom": {
                "name": "BaseFormAssociated",
                "module": "src/components/common/mixins/forms/associated.ts"
              }
            },
            {
              "kind": "method",
              "name": "reportValidity",
              "privacy": "public",
              "description": "Checks for validity of the control and shows the browser message if it invalid.",
              "inheritedFrom": {
                "name": "BaseFormAssociated",
                "module": "src/components/common/mixins/forms/associated.ts"
              }
            },
            {
              "kind": "method",
              "name": "checkValidity",
              "privacy": "public",
              "description": "Checks for validity of the control and emits the invalid event if it invalid.",
              "inheritedFrom": {
                "name": "BaseFormAssociated",
                "module": "src/components/common/mixins/forms/associated.ts"
              }
            },
            {
              "kind": "method",
              "name": "setCustomValidity",
              "privacy": "public",
              "parameters": [
                {
                  "name": "message",
                  "type": {
                    "text": "string"
                  }
                }
              ],
              "description": "Sets a custom validation message for the control.\nAs long as `message` is not empty, the control is considered invalid.",
              "inheritedFrom": {
                "name": "BaseFormAssociated",
                "module": "src/components/common/mixins/forms/associated.ts"
              }
            }
          ],
          "attributes": [
            {
              "name": "required",
              "description": "When set, makes the component a required field for validation.",
              "default": "false",
              "fieldName": "required",
              "attribute": "required",
              "type": {
                "text": "boolean"
              }
            },
            {
              "name": "name",
              "type": {
                "text": "string"
              },
              "description": "The name attribute of the control.",
              "fieldName": "name",
              "attribute": "name",
              "inheritedFrom": {
                "name": "BaseFormAssociated",
                "module": "src/components/common/mixins/forms/associated.ts"
              }
            },
            {
              "name": "disabled",
              "description": "The disabled state of the component.",
              "default": "false",
              "fieldName": "disabled",
              "attribute": "disabled",
              "type": {
                "text": "boolean"
              },
              "inheritedFrom": {
                "name": "BaseFormAssociated",
                "module": "src/components/common/mixins/forms/associated.ts"
              }
            },
            {
              "name": "invalid",
              "description": "Sets the control into invalid state (visual state only).",
              "default": "false",
              "fieldName": "invalid",
              "attribute": "invalid",
              "type": {
                "text": "boolean"
              },
              "inheritedFrom": {
                "name": "BaseFormAssociated",
                "module": "src/components/common/mixins/forms/associated.ts"
              }
            }
          ],
          "mixins": [
            {
              "name": "FormAssociatedCheckboxMixin",
              "module": "/src/components/common/mixins/forms/associated.js"
            }
          ],
          "parameters": [
            {
              "name": "base",
              "type": {
                "text": "T"
              }
            }
          ]
        }
      ],
      "exports": [
        {
          "kind": "js",
          "name": "FormAssociatedRequiredMixin",
          "declaration": {
            "name": "FormAssociatedRequiredMixin",
            "module": "src/components/common/mixins/forms/associated-required.ts"
          }
        },
        {
          "kind": "js",
          "name": "FormAssociatedCheckboxRequiredMixin",
          "declaration": {
            "name": "FormAssociatedCheckboxRequiredMixin",
            "module": "src/components/common/mixins/forms/associated-required.ts"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "src/components/validation-container/validation-container.ts",
      "declarations": [
        {
          "kind": "class",
          "description": "",
          "name": "IgcValidationContainerComponent",
          "cssParts": [
            {
              "description": "The base wrapper",
              "name": "helper-text"
            },
            {
              "description": "The validation error message container",
              "name": "validation-message"
            },
            {
              "description": "The validation error icon",
              "name": "validation-icon"
            }
          ],
          "members": [
            {
              "kind": "field",
              "name": "tagName",
              "type": {
                "text": "string"
              },
              "privacy": "public",
              "static": true,
              "readonly": true,
              "default": "'igc-validator'"
            },
            {
              "kind": "method",
              "name": "register",
              "privacy": "public",
              "static": true,
              "return": {
                "type": {
                  "text": "void"
                }
              }
            },
            {
              "kind": "method",
              "name": "create",
              "privacy": "public",
              "static": true,
              "return": {
                "type": {
                  "text": "TemplateResult"
                }
              },
              "parameters": [
                {
                  "name": "host",
                  "type": {
                    "text": "IgcFormControl"
                  }
                },
                {
                  "name": "config",
                  "default": "{\n      id: 'helper-text',\n      hasHelperText: true,\n    }",
                  "type": {
                    "text": "ValidationContainerConfig"
                  }
                }
              ]
            },
            {
              "kind": "field",
              "name": "_target",
              "type": {
                "text": "IgcFormControl"
              },
              "privacy": "private"
            },
            {
              "kind": "field",
              "name": "_hasSlottedContent",
              "type": {
                "text": "boolean"
              },
              "privacy": "private",
              "default": "false"
            },
            {
              "kind": "field",
              "name": "invalid",
              "type": {
                "text": "boolean"
              },
              "privacy": "public",
              "default": "false",
              "attribute": "invalid"
            },
            {
              "kind": "field",
              "name": "target",
              "privacy": "public",
              "type": {
                "text": "IgcFormControl"
              }
            },
            {
              "kind": "method",
              "name": "_renderValidationMessage",
              "privacy": "protected",
              "return": {
                "type": {
                  "text": "TemplateResult"
                }
              },
              "parameters": [
                {
                  "name": "slotName",
                  "type": {
                    "text": "string"
                  }
                }
              ]
            },
            {
              "kind": "method",
              "name": "_renderValidationSlots",
              "privacy": "protected",
              "return": {
                "type": {
                  "text": "Generator<TemplateResult>"
                }
              },
              "parameters": [
                {
                  "name": "validity",
                  "type": {
                    "text": "ValidityState"
                  }
                },
                {
                  "name": "projected",
                  "default": "false"
                }
              ]
            },
            {
              "kind": "method",
              "name": "_renderHelper",
              "privacy": "protected",
              "return": {
                "type": {
                  "text": "TemplateResult | typeof nothing"
                }
              }
            }
          ],
          "attributes": [
            {
              "name": "invalid",
              "type": {
                "text": "boolean"
              },
              "default": "false",
              "fieldName": "invalid"
            }
          ],
          "superclass": {
            "name": "LitElement",
            "package": "lit"
          },
          "tagName": "igc-validator",
          "customElement": true
        }
      ],
      "exports": [
        {
          "kind": "js",
          "name": "default",
          "declaration": {
            "name": "IgcValidationContainerComponent",
            "module": "src/components/validation-container/validation-container.ts"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "src/components/input/input-base.ts",
      "declarations": [
        {
          "kind": "class",
          "description": "",
          "name": "IgcInputBaseComponent",
          "members": [
            {
              "kind": "field",
              "name": "increment",
              "privacy": "private",
              "static": true,
              "readonly": true
            },
            {
              "kind": "field",
              "name": "_themes",
              "privacy": "protected",
              "readonly": true
            },
            {
              "kind": "field",
              "name": "inputId",
              "privacy": "protected",
              "default": "`input-${IgcInputBaseComponent.increment()}`"
            },
            {
              "kind": "field",
              "name": "value",
              "type": {
                "text": "string | Date | null"
              },
              "privacy": "public",
              "description": "The value attribute of the control."
            },
            {
              "kind": "field",
              "name": "input",
              "type": {
                "text": "HTMLInputElement"
              },
              "privacy": "protected"
            },
            {
              "kind": "field",
              "name": "_helperText",
              "type": {
                "text": "Array<HTMLElement>"
              },
              "privacy": "protected"
            },
            {
              "kind": "field",
              "name": "prefixes",
              "type": {
                "text": "Array<HTMLElement>"
              },
              "privacy": "protected"
            },
            {
              "kind": "field",
              "name": "suffixes",
              "type": {
                "text": "Array<HTMLElement>"
              },
              "privacy": "protected"
            },
            {
              "kind": "field",
              "name": "outlined",
              "type": {
                "text": "boolean"
              },
              "privacy": "public",
              "default": "false",
              "description": "Whether the control will have outlined appearance.",
              "attribute": "outlined",
              "reflects": true
            },
            {
              "kind": "field",
              "name": "readOnly",
              "type": {
                "text": "boolean"
              },
              "privacy": "public",
              "default": "false",
              "description": "Makes the control a readonly field.",
              "attribute": "readonly",
              "reflects": true
            },
            {
              "kind": "field",
              "name": "placeholder",
              "type": {
                "text": "string"
              },
              "privacy": "public",
              "description": "The placeholder attribute of the control.",
              "attribute": "placeholder"
            },
            {
              "kind": "field",
              "name": "label",
              "type": {
                "text": "string"
              },
              "privacy": "public",
              "description": "The label for the control.",
              "attribute": "label"
            },
            {
              "kind": "method",
              "name": "focus",
              "privacy": "public",
              "parameters": [
                {
                  "name": "options",
                  "optional": true,
                  "type": {
                    "text": "FocusOptions"
                  }
                }
              ],
              "description": "Sets focus on the control."
            },
            {
              "kind": "method",
              "name": "blur",
              "privacy": "public",
              "description": "Removes focus from the control."
            },
            {
              "kind": "method",
              "name": "renderInput",
              "privacy": "protected",
              "return": {
                "type": {
                  "text": "TemplateResult"
                }
              }
            },
            {
              "kind": "method",
              "name": "renderValidatorContainer",
              "privacy": "protected",
              "return": {
                "type": {
                  "text": "TemplateResult"
                }
              }
            },
            {
              "kind": "method",
              "name": "resolvePartNames",
              "privacy": "protected",
              "parameters": [
                {
                  "name": "base",
                  "type": {
                    "text": "string"
                  }
                }
              ]
            },
            {
              "kind": "method",
              "name": "renderFileParts",
              "privacy": "protected",
              "return": {
                "type": {
                  "text": "TemplateResult | typeof nothing"
                }
              }
            },
            {
              "kind": "method",
              "name": "setSelectionRange",
              "privacy": "public",
              "parameters": [
                {
                  "name": "start",
                  "type": {
                    "text": "number"
                  }
                },
                {
                  "name": "end",
                  "type": {
                    "text": "number"
                  }
                },
                {
                  "name": "direction",
                  "default": "'none'",
                  "type": {
                    "text": "SelectionRangeDirection"
                  }
                }
              ],
              "description": "Sets the text selection range of the control"
            },
            {
              "kind": "method",
              "name": "setRangeText",
              "privacy": "public",
              "parameters": [
                {
                  "name": "replacement",
                  "type": {
                    "text": "string"
                  }
                },
                {
                  "name": "start",
                  "type": {
                    "text": "number"
                  }
                },
                {
                  "name": "end",
                  "type": {
                    "text": "number"
                  }
                },
                {
                  "name": "selectMode",
                  "default": "'preserve'",
                  "type": {
                    "text": "RangeTextSelectMode"
                  }
                }
              ],
              "description": "Replaces the selected text in the input."
            },
            {
              "kind": "method",
              "name": "renderPrefix",
              "privacy": "private"
            },
            {
              "kind": "method",
              "name": "renderSuffix",
              "privacy": "private"
            },
            {
              "kind": "method",
              "name": "renderLabel",
              "privacy": "private"
            },
            {
              "kind": "method",
              "name": "renderMaterial",
              "privacy": "private"
            },
            {
              "kind": "method",
              "name": "renderStandard",
              "privacy": "private"
            },
            {
              "kind": "field",
              "name": "_required",
              "type": {
                "text": "boolean"
              },
              "privacy": "protected",
              "default": "false",
              "inheritedFrom": {
                "name": "FormAssociatedRequiredMixin",
                "module": "src/components/common/mixins/forms/associated-required.ts"
              }
            },
            {
              "kind": "field",
              "name": "required",
              "privacy": "public",
              "description": "When set, makes the component a required field for validation.",
              "default": "false",
              "attribute": "required",
              "type": {
                "text": "boolean"
              },
              "reflects": true,
              "inheritedFrom": {
                "name": "FormAssociatedRequiredMixin",
                "module": "src/components/common/mixins/forms/associated-required.ts"
              }
            },
            {
              "kind": "field",
              "name": "defaultValue",
              "privacy": "public",
              "inheritedFrom": {
                "name": "FormAssociatedMixin",
                "module": "src/components/common/mixins/forms/associated.ts"
              }
            },
            {
              "kind": "field",
              "name": "formAssociated",
              "type": {
                "text": "boolean"
              },
              "privacy": "public",
              "static": true,
              "readonly": true,
              "default": "true",
              "inheritedFrom": {
                "name": "BaseFormAssociated",
                "module": "src/components/common/mixins/forms/associated.ts"
              }
            },
            {
              "kind": "field",
              "name": "__internals",
              "type": {
                "text": "ElementInternals"
              },
              "privacy": "private",
              "inheritedFrom": {
                "name": "BaseFormAssociated",
                "module": "src/components/common/mixins/forms/associated.ts"
              }
            },
            {
              "kind": "field",
              "name": "_formValue",
              "type": {
                "text": "FormValue<unknown>"
              },
              "privacy": "protected",
              "inheritedFrom": {
                "name": "BaseFormAssociated",
                "module": "src/components/common/mixins/forms/associated.ts"
              }
            },
            {
              "kind": "field",
              "name": "_disabled",
              "type": {
                "text": "boolean"
              },
              "privacy": "protected",
              "default": "false",
              "inheritedFrom": {
                "name": "BaseFormAssociated",
                "module": "src/components/common/mixins/forms/associated.ts"
              }
            },
            {
              "kind": "field",
              "name": "_invalid",
              "type": {
                "text": "boolean"
              },
              "privacy": "protected",
              "default": "false",
              "inheritedFrom": {
                "name": "BaseFormAssociated",
                "module": "src/components/common/mixins/forms/associated.ts"
              }
            },
            {
              "kind": "field",
              "name": "_dirty",
              "type": {
                "text": "boolean"
              },
              "privacy": "protected",
              "default": "false",
              "inheritedFrom": {
                "name": "BaseFormAssociated",
                "module": "src/components/common/mixins/forms/associated.ts"
              }
            },
            {
              "kind": "field",
              "name": "_pristine",
              "type": {
                "text": "boolean"
              },
              "privacy": "protected",
              "default": "true",
              "inheritedFrom": {
                "name": "BaseFormAssociated",
                "module": "src/components/common/mixins/forms/associated.ts"
              }
            },
            {
              "kind": "field",
              "name": "__validators",
              "type": {
                "text": "Validator[]"
              },
              "privacy": "protected",
              "readonly": true,
              "inheritedFrom": {
                "name": "BaseFormAssociated",
                "module": "src/components/common/mixins/forms/associated.ts"
              }
            },
            {
              "kind": "field",
              "name": "name",
              "type": {
                "text": "string"
              },
              "privacy": "public",
              "description": "The name attribute of the control.",
              "attribute": "name",
              "reflects": true,
              "inheritedFrom": {
                "name": "BaseFormAssociated",
                "module": "src/components/common/mixins/forms/associated.ts"
              }
            },
            {
              "kind": "field",
              "name": "disabled",
              "privacy": "public",
              "description": "The disabled state of the component.",
              "default": "false",
              "attribute": "disabled",
              "type": {
                "text": "boolean"
              },
              "reflects": true,
              "inheritedFrom": {
                "name": "BaseFormAssociated",
                "module": "src/components/common/mixins/forms/associated.ts"
              }
            },
            {
              "kind": "field",
              "name": "invalid",
              "privacy": "public",
              "description": "Sets the control into invalid state (visual state only).",
              "default": "false",
              "attribute": "invalid",
              "type": {
                "text": "boolean"
              },
              "reflects": true,
              "inheritedFrom": {
                "name": "BaseFormAssociated",
                "module": "src/components/common/mixins/forms/associated.ts"
              }
            },
            {
              "kind": "field",
              "name": "form",
              "type": {
                "text": "HTMLFormElement | null"
              },
              "privacy": "public",
              "description": "Returns the HTMLFormElement associated with this element.",
              "readonly": true,
              "inheritedFrom": {
                "name": "BaseFormAssociated",
                "module": "src/components/common/mixins/forms/associated.ts"
              }
            },
            {
              "kind": "field",
              "name": "validity",
              "type": {
                "text": "ValidityState"
              },
              "privacy": "public",
              "description": "Returns a ValidityState object which represents the different validity states\nthe element can be in, with respect to constraint validation.",
              "readonly": true,
              "inheritedFrom": {
                "name": "BaseFormAssociated",
                "module": "src/components/common/mixins/forms/associated.ts"
              }
            },
            {
              "kind": "field",
              "name": "validationMessage",
              "type": {
                "text": "string"
              },
              "privacy": "public",
              "description": "A string containing the validation message of this element.",
              "readonly": true,
              "inheritedFrom": {
                "name": "BaseFormAssociated",
                "module": "src/components/common/mixins/forms/associated.ts"
              }
            },
            {
              "kind": "field",
              "name": "willValidate",
              "type": {
                "text": "boolean"
              },
              "privacy": "public",
              "description": "A boolean value which returns true if the element is a submittable element\nthat is a candidate for constraint validation.",
              "readonly": true,
              "inheritedFrom": {
                "name": "BaseFormAssociated",
                "module": "src/components/common/mixins/forms/associated.ts"
              }
            },
            {
              "kind": "method",
              "name": "_handleInvalid",
              "privacy": "private",
              "parameters": [
                {
                  "name": "event",
                  "type": {
                    "text": "Event"
                  }
                }
              ],
              "inheritedFrom": {
                "name": "BaseFormAssociated",
                "module": "src/components/common/mixins/forms/associated.ts"
              }
            },
            {
              "kind": "method",
              "name": "_setInvalidState",
              "privacy": "private",
              "return": {
                "type": {
                  "text": "void"
                }
              },
              "inheritedFrom": {
                "name": "BaseFormAssociated",
                "module": "src/components/common/mixins/forms/associated.ts"
              }
            },
            {
              "kind": "method",
              "name": "__runValidators",
              "privacy": "private",
              "inheritedFrom": {
                "name": "BaseFormAssociated",
                "module": "src/components/common/mixins/forms/associated.ts"
              }
            },
            {
              "kind": "method",
              "name": "_setDefaultValue",
              "privacy": "protected",
              "return": {
                "type": {
                  "text": "void"
                }
              },
              "parameters": [
                {
                  "name": "current",
                  "type": {
                    "text": "string | null"
                  }
                }
              ],
              "inheritedFrom": {
                "name": "BaseFormAssociated",
                "module": "src/components/common/mixins/forms/associated.ts"
              }
            },
            {
              "kind": "method",
              "name": "_restoreDefaultValue",
              "privacy": "protected",
              "return": {
                "type": {
                  "text": "void"
                }
              },
              "inheritedFrom": {
                "name": "BaseFormAssociated",
                "module": "src/components/common/mixins/forms/associated.ts"
              }
            },
            {
              "kind": "method",
              "name": "_validate",
              "privacy": "protected",
              "return": {
                "type": {
                  "text": "void"
                }
              },
              "parameters": [
                {
                  "name": "message",
                  "optional": true,
                  "type": {
                    "text": "string"
                  }
                }
              ],
              "inheritedFrom": {
                "name": "BaseFormAssociated",
                "module": "src/components/common/mixins/forms/associated.ts"
              }
            },
            {
              "kind": "method",
              "name": "_updateValidity",
              "privacy": "protected",
              "parameters": [
                {
                  "name": "error",
                  "optional": true,
                  "type": {
                    "text": "string"
                  }
                }
              ],
              "description": "Executes the component validators and updates the internal validity state.",
              "inheritedFrom": {
                "name": "BaseFormAssociated",
                "module": "src/components/common/mixins/forms/associated.ts"
              }
            },
            {
              "kind": "method",
              "name": "_setFormValue",
              "privacy": "protected",
              "return": {
                "type": {
                  "text": "void"
                }
              },
              "parameters": [
                {
                  "name": "value",
                  "type": {
                    "text": "FormValueType"
                  }
                },
                {
                  "name": "state",
                  "optional": true,
                  "type": {
                    "text": "FormValueType"
                  }
                }
              ],
              "inheritedFrom": {
                "name": "BaseFormAssociated",
                "module": "src/components/common/mixins/forms/associated.ts"
              }
            },
            {
              "kind": "method",
              "name": "formAssociatedCallback",
              "privacy": "protected",
              "return": {
                "type": {
                  "text": "void"
                }
              },
              "parameters": [
                {
                  "name": "_form",
                  "type": {
                    "text": "HTMLFormElement"
                  }
                }
              ],
              "inheritedFrom": {
                "name": "BaseFormAssociated",
                "module": "src/components/common/mixins/forms/associated.ts"
              }
            },
            {
              "kind": "method",
              "name": "formDisabledCallback",
              "privacy": "protected",
              "return": {
                "type": {
                  "text": "void"
                }
              },
              "parameters": [
                {
                  "name": "state",
                  "type": {
                    "text": "boolean"
                  }
                }
              ],
              "inheritedFrom": {
                "name": "BaseFormAssociated",
                "module": "src/components/common/mixins/forms/associated.ts"
              }
            },
            {
              "kind": "method",
              "name": "formResetCallback",
              "privacy": "protected",
              "return": {
                "type": {
                  "text": "void"
                }
              },
              "inheritedFrom": {
                "name": "BaseFormAssociated",
                "module": "src/components/common/mixins/forms/associated.ts"
              }
            },
            {
              "kind": "method",
              "name": "formStateRestoreCallback",
              "privacy": "protected",
              "return": {
                "type": {
                  "text": "void"
                }
              },
              "parameters": [
                {
                  "name": "_state",
                  "type": {
                    "text": "FormValueType"
                  }
                },
                {
                  "name": "_mode",
                  "type": {
                    "text": "FormRestoreMode"
                  }
                }
              ],
              "inheritedFrom": {
                "name": "BaseFormAssociated",
                "module": "src/components/common/mixins/forms/associated.ts"
              }
            },
            {
              "kind": "method",
              "name": "reportValidity",
              "privacy": "public",
              "description": "Checks for validity of the control and shows the browser message if it invalid.",
              "inheritedFrom": {
                "name": "BaseFormAssociated",
                "module": "src/components/common/mixins/forms/associated.ts"
              }
            },
            {
              "kind": "method",
              "name": "checkValidity",
              "privacy": "public",
              "description": "Checks for validity of the control and emits the invalid event if it invalid.",
              "inheritedFrom": {
                "name": "BaseFormAssociated",
                "module": "src/components/common/mixins/forms/associated.ts"
              }
            },
            {
              "kind": "method",
              "name": "setCustomValidity",
              "privacy": "public",
              "parameters": [
                {
                  "name": "message",
                  "type": {
                    "text": "string"
                  }
                }
              ],
              "description": "Sets a custom validation message for the control.\nAs long as `message` is not empty, the control is considered invalid.",
              "inheritedFrom": {
                "name": "BaseFormAssociated",
                "module": "src/components/common/mixins/forms/associated.ts"
              }
            },
            {
              "kind": "method",
              "name": "addEventListener",
              "privacy": "public",
              "return": {
                "type": {
                  "text": "void"
                }
              },
              "parameters": [
                {
                  "name": "type",
                  "type": {
                    "text": "K"
                  }
                },
                {
                  "name": "listener",
                  "type": {
                    "text": "(this: HTMLElement, ev: M[K]) => any"
                  }
                },
                {
                  "name": "options",
                  "optional": true,
                  "type": {
                    "text": "boolean | AddEventListenerOptions"
                  }
                }
              ],
              "inheritedFrom": {
                "name": "EventEmitterMixin",
                "module": "src/components/common/mixins/event-emitter.ts"
              }
            },
            {
              "kind": "method",
              "name": "removeEventListener",
              "privacy": "public",
              "return": {
                "type": {
                  "text": "void"
                }
              },
              "parameters": [
                {
                  "name": "type",
                  "type": {
                    "text": "K"
                  }
                },
                {
                  "name": "listener",
                  "type": {
                    "text": "(this: HTMLElement, ev: M[K]) => any"
                  }
                },
                {
                  "name": "options",
                  "optional": true,
                  "type": {
                    "text": "boolean | EventListenerOptions"
                  }
                }
              ],
              "inheritedFrom": {
                "name": "EventEmitterMixin",
                "module": "src/components/common/mixins/event-emitter.ts"
              }
            },
            {
              "kind": "method",
              "name": "emitEvent",
              "privacy": "private",
              "return": {
                "type": {
                  "text": "boolean"
                }
              },
              "parameters": [
                {
                  "name": "type",
                  "type": {
                    "text": "K"
                  }
                },
                {
                  "name": "eventInitDict",
                  "optional": true,
                  "type": {
                    "text": "CustomEventInit<D>"
                  }
                }
              ],
              "inheritedFrom": {
                "name": "EventEmitterMixin",
                "module": "src/components/common/mixins/event-emitter.ts"
              }
            }
          ],
          "attributes": [
            {
              "name": "outlined",
              "type": {
                "text": "boolean"
              },
              "default": "false",
              "description": "Whether the control will have outlined appearance.",
              "fieldName": "outlined",
              "attribute": "outlined"
            },
            {
              "name": "readonly",
              "type": {
                "text": "boolean"
              },
              "default": "false",
              "description": "Makes the control a readonly field.",
              "fieldName": "readOnly",
              "attribute": "readonly"
            },
            {
              "name": "placeholder",
              "type": {
                "text": "string"
              },
              "description": "The placeholder attribute of the control.",
              "fieldName": "placeholder",
              "attribute": "placeholder"
            },
            {
              "name": "label",
              "type": {
                "text": "string"
              },
              "description": "The label for the control.",
              "fieldName": "label",
              "attribute": "label"
            },
            {
              "name": "required",
              "description": "When set, makes the component a required field for validation.",
              "default": "false",
              "fieldName": "required",
              "attribute": "required",
              "type": {
                "text": "boolean"
              },
              "inheritedFrom": {
                "name": "FormAssociatedRequiredMixin",
                "module": "src/components/common/mixins/forms/associated-required.ts"
              }
            },
            {
              "name": "name",
              "type": {
                "text": "string"
              },
              "description": "The name attribute of the control.",
              "fieldName": "name",
              "attribute": "name",
              "inheritedFrom": {
                "name": "BaseFormAssociated",
                "module": "src/components/common/mixins/forms/associated.ts"
              }
            },
            {
              "name": "disabled",
              "description": "The disabled state of the component.",
              "default": "false",
              "fieldName": "disabled",
              "attribute": "disabled",
              "type": {
                "text": "boolean"
              },
              "inheritedFrom": {
                "name": "BaseFormAssociated",
                "module": "src/components/common/mixins/forms/associated.ts"
              }
            },
            {
              "name": "invalid",
              "description": "Sets the control into invalid state (visual state only).",
              "default": "false",
              "fieldName": "invalid",
              "attribute": "invalid",
              "type": {
                "text": "boolean"
              },
              "inheritedFrom": {
                "name": "BaseFormAssociated",
                "module": "src/components/common/mixins/forms/associated.ts"
              }
            }
          ],
          "mixins": [
            {
              "name": "FormAssociatedRequiredMixin",
              "module": "/src/components/common/mixins/forms/associated-required.js"
            },
            {
              "name": "EventEmitterMixin",
              "module": "/src/components/common/mixins/event-emitter.js"
            }
          ],
          "superclass": {
            "name": "LitElement",
            "package": "lit"
          },
          "customElement": true,
          "events": [
            {
              "type": {
                "text": "CustomEvent"
              },
              "inheritedFrom": {
                "name": "EventEmitterMixin",
                "module": "src/components/common/mixins/event-emitter.ts"
              }
            }
          ]
        }
      ],
      "exports": [
        {
          "kind": "js",
          "name": "IgcInputBaseComponent",
          "declaration": {
            "name": "IgcInputBaseComponent",
            "module": "src/components/input/input-base.ts"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "src/components/mask-input/mask-parser.ts",
      "declarations": [
        {
          "kind": "class",
          "description": "A class for parsing and applying masks to strings, typically for input fields.\nIt handles mask definitions, literals, character validation, and cursor positioning.",
          "name": "MaskParser",
          "members": [
            {
              "kind": "field",
              "name": "_options",
              "type": {
                "text": "MaskOptions"
              },
              "privacy": "protected",
              "readonly": true,
              "default": "{ ...MaskDefaultOptions, ...options }"
            },
            {
              "kind": "field",
              "name": "_literals",
              "privacy": "protected",
              "readonly": true,
              "default": "new Map<number, string>()",
              "description": "Stores literal characters and their original positions in the mask (e.g., '(', ')', '-')."
            },
            {
              "kind": "field",
              "name": "_literalPositions",
              "privacy": "protected",
              "default": "new Set<number>()",
              "description": "A Set of positions where literals occur in the `_escapedMask`."
            },
            {
              "kind": "field",
              "name": "_escapedMask",
              "type": {
                "text": "string"
              },
              "privacy": "protected",
              "default": "''",
              "description": "The mask format after processing escape characters"
            },
            {
              "kind": "field",
              "name": "literalPositions",
              "type": {
                "text": "Set<number>"
              },
              "privacy": "public",
              "description": "Returns a set of the all the literal positions in the mask.\nThese positions are fixed characters that are not part of the input.",
              "readonly": true
            },
            {
              "kind": "field",
              "name": "escapedMask",
              "type": {
                "text": "string"
              },
              "privacy": "public",
              "description": "Returns the escaped mask string.\nThis is the mask after processing any escape sequences.",
              "readonly": true
            },
            {
              "kind": "field",
              "name": "mask",
              "type": {
                "text": "string"
              },
              "privacy": "public",
              "description": "Sets the mask of the parser.\nWhen the mask is set, it triggers a re-parsing of the mask literals and escaped mask."
            },
            {
              "kind": "field",
              "name": "prompt",
              "type": {
                "text": "string"
              },
              "privacy": "public",
              "description": "Sets the prompt character. Only the first character of the provided string is used."
            },
            {
              "kind": "method",
              "name": "_parseMaskLiterals",
              "privacy": "protected",
              "return": {
                "type": {
                  "text": "void"
                }
              },
              "description": "Parses the mask format string to identify literal characters and\ncreate the escaped mask. This method is called whenever the mask format changes."
            },
            {
              "kind": "method",
              "name": "_getRequiredNonLiteralPositions",
              "privacy": "protected",
              "return": {
                "type": {
                  "text": "number[]"
                }
              },
              "description": "Gets an array of positions in the escaped mask that correspond to\nrequired input flags (e.g., '0', 'L') and are not literal characters.\n\nThese positions must be filled for the masked string to be valid."
            },
            {
              "kind": "method",
              "name": "getPreviousNonLiteralPosition",
              "privacy": "public",
              "return": {
                "type": {
                  "text": "number"
                }
              },
              "parameters": [
                {
                  "name": "start",
                  "type": {
                    "text": "number"
                  }
                }
              ],
              "description": "Finds the closest non-literal position in the mask *before* the given start position.\nUseful for backward navigation (e.g., backspace)."
            },
            {
              "kind": "method",
              "name": "getNextNonLiteralPosition",
              "privacy": "public",
              "return": {
                "type": {
                  "text": "number"
                }
              },
              "parameters": [
                {
                  "name": "start",
                  "type": {
                    "text": "number"
                  }
                }
              ],
              "description": "Finds the closest non-literal position in the mask *after* the given start position.\nUseful for forward navigation (e.g., arrow keys, delete key or initial cursor placement)."
            },
            {
              "kind": "method",
              "name": "replace",
              "privacy": "public",
              "return": {
                "type": {
                  "text": "MaskReplaceResult"
                }
              },
              "parameters": [
                {
                  "name": "maskString",
                  "type": {
                    "text": "string"
                  }
                },
                {
                  "name": "value",
                  "type": {
                    "text": "string"
                  }
                },
                {
                  "name": "start",
                  "type": {
                    "text": "number"
                  }
                },
                {
                  "name": "end",
                  "type": {
                    "text": "number"
                  }
                }
              ],
              "description": "Replaces a segment of the masked string with new input, simulating typing or pasting.\nIt handles clearing the selected range and inserting new characters according to the mask."
            },
            {
              "kind": "method",
              "name": "parse",
              "privacy": "public",
              "return": {
                "type": {
                  "text": "string"
                }
              },
              "parameters": [
                {
                  "name": "masked",
                  "default": "''"
                }
              ],
              "description": "Parses the masked string, extracting only the valid input characters.\nThis effectively \"unmasks\" the string, removing prompts and literals."
            },
            {
              "kind": "method",
              "name": "isValidString",
              "privacy": "public",
              "return": {
                "type": {
                  "text": "boolean"
                }
              },
              "parameters": [
                {
                  "name": "input",
                  "default": "''"
                }
              ],
              "description": "Checks if the masked string is valid, specifically if all required mask positions are filled\nwith valid, non-prompt characters."
            },
            {
              "kind": "method",
              "name": "apply",
              "privacy": "public",
              "return": {
                "type": {
                  "text": "string"
                }
              },
              "parameters": [
                {
                  "name": "input",
                  "default": "''"
                }
              ],
              "description": "Applies the mask format to an input string. This attempts to fit the input\ninto the mask from left to right, filling valid positions and skipping invalid\ninput characters."
            }
          ]
        }
      ],
      "exports": [
        {
          "kind": "js",
          "name": "MaskParser",
          "declaration": {
            "name": "MaskParser",
            "module": "src/components/mask-input/mask-parser.ts"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "src/components/mask-input/mask-input-base.ts",
      "declarations": [
        {
          "kind": "class",
          "description": "",
          "name": "IgcMaskInputBaseComponent",
          "members": [
            {
              "kind": "field",
              "name": "parser",
              "privacy": "protected",
              "default": "new MaskParser()"
            },
            {
              "kind": "field",
              "name": "selection",
              "type": {
                "text": "MaskRange"
              },
              "privacy": "protected",
              "default": "{ start: 0, end: 0 }"
            },
            {
              "kind": "field",
              "name": "compositionStart",
              "type": {
                "text": "number"
              },
              "privacy": "protected",
              "default": "0"
            },
            {
              "kind": "field",
              "name": "focused",
              "type": {
                "text": "boolean"
              },
              "privacy": "protected",
              "default": "false"
            },
            {
              "kind": "field",
              "name": "maskedValue",
              "type": {
                "text": "string"
              },
              "privacy": "protected",
              "default": "''"
            },
            {
              "kind": "field",
              "name": "_mask",
              "type": {
                "text": "string"
              },
              "privacy": "protected",
              "default": "''"
            },
            {
              "kind": "field",
              "name": "prompt",
              "type": {
                "text": "string"
              },
              "privacy": "public",
              "description": "The prompt symbol to use for unfilled parts of the mask.",
              "attribute": "prompt"
            },
            {
              "kind": "field",
              "name": "inputSelection",
              "type": {
                "text": "MaskRange"
              },
              "privacy": "protected",
              "readonly": true
            },
            {
              "kind": "field",
              "name": "emptyMask",
              "type": {
                "text": "string"
              },
              "privacy": "protected",
              "readonly": true
            },
            {
              "kind": "method",
              "name": "select",
              "privacy": "public",
              "description": "Selects all text within the input."
            },
            {
              "kind": "method",
              "name": "handleInput",
              "privacy": "protected",
              "parameters": [
                {
                  "name": "{ inputType, isComposing }",
                  "type": {
                    "text": "InputEvent"
                  }
                }
              ]
            },
            {
              "kind": "method",
              "name": "handleKeydown",
              "privacy": "protected",
              "parameters": [
                {
                  "name": "{ key }",
                  "type": {
                    "text": "KeyboardEvent"
                  }
                }
              ]
            },
            {
              "kind": "method",
              "name": "handleCut",
              "privacy": "protected"
            },
            {
              "kind": "method",
              "name": "handleDragStart",
              "privacy": "protected"
            },
            {
              "kind": "method",
              "name": "handleCompositionStart",
              "privacy": "protected"
            },
            {
              "kind": "method",
              "name": "handleCompositionEnd",
              "privacy": "protected",
              "parameters": [
                {
                  "name": "{ data }",
                  "type": {
                    "text": "CompositionEvent"
                  }
                }
              ]
            },
            {
              "kind": "method",
              "name": "handleClick",
              "privacy": "protected"
            },
            {
              "kind": "method",
              "name": "setSelectionRange",
              "privacy": "public",
              "parameters": [
                {
                  "name": "start",
                  "type": {
                    "text": "number"
                  }
                },
                {
                  "name": "end",
                  "type": {
                    "text": "number"
                  }
                },
                {
                  "name": "direction",
                  "optional": true,
                  "type": {
                    "text": "SelectionRangeDirection"
                  }
                }
              ],
              "description": "Sets the text selection range of the control",
              "return": {
                "type": {
                  "text": "void"
                }
              },
              "inheritedFrom": {
                "name": "IgcInputBaseComponent",
                "module": "src/components/input/input-base.ts"
              }
            },
            {
              "kind": "method",
              "name": "setRangeText",
              "privacy": "public",
              "parameters": [
                {
                  "name": "replacement",
                  "type": {
                    "text": "string"
                  }
                },
                {
                  "name": "start",
                  "optional": true,
                  "type": {
                    "text": "number"
                  }
                },
                {
                  "name": "end",
                  "optional": true,
                  "type": {
                    "text": "number"
                  }
                },
                {
                  "name": "selectMode",
                  "optional": true,
                  "type": {
                    "text": "RangeTextSelectMode"
                  }
                }
              ],
              "description": "Replaces the selected text in the control and re-applies the mask",
              "inheritedFrom": {
                "name": "IgcInputBaseComponent",
                "module": "src/components/input/input-base.ts"
              }
            },
            {
              "kind": "method",
              "name": "_updateSetRangeTextValue",
              "privacy": "protected",
              "return": {
                "type": {
                  "text": "void"
                }
              }
            },
            {
              "kind": "method",
              "name": "updateInput",
              "privacy": "protected",
              "return": {
                "type": {
                  "text": "void"
                }
              },
              "parameters": [
                {
                  "name": "string",
                  "type": {
                    "text": "string"
                  }
                },
                {
                  "name": "range",
                  "type": {
                    "text": "MaskRange"
                  }
                }
              ]
            },
            {
              "kind": "field",
              "name": "_required",
              "type": {
                "text": "boolean"
              },
              "privacy": "protected",
              "default": "false",
              "inheritedFrom": {
                "name": "IgcInputBaseComponent",
                "module": "src/components/input/input-base.ts"
              }
            },
            {
              "kind": "field",
              "name": "required",
              "privacy": "public",
              "description": "When set, makes the component a required field for validation.",
              "default": "false",
              "attribute": "required",
              "type": {
                "text": "boolean"
              },
              "reflects": true,
              "inheritedFrom": {
                "name": "IgcInputBaseComponent",
                "module": "src/components/input/input-base.ts"
              }
            },
            {
              "kind": "field",
              "name": "defaultValue",
              "privacy": "public",
              "inheritedFrom": {
                "name": "IgcInputBaseComponent",
                "module": "src/components/input/input-base.ts"
              }
            },
            {
              "kind": "field",
              "name": "formAssociated",
              "type": {
                "text": "boolean"
              },
              "privacy": "public",
              "static": true,
              "readonly": true,
              "default": "true",
              "inheritedFrom": {
                "name": "IgcInputBaseComponent",
                "module": "src/components/input/input-base.ts"
              }
            },
            {
              "kind": "field",
              "name": "__internals",
              "type": {
                "text": "ElementInternals"
              },
              "privacy": "private",
              "inheritedFrom": {
                "name": "IgcInputBaseComponent",
                "module": "src/components/input/input-base.ts"
              }
            },
            {
              "kind": "field",
              "name": "_formValue",
              "type": {
                "text": "FormValue<unknown>"
              },
              "privacy": "protected",
              "inheritedFrom": {
                "name": "IgcInputBaseComponent",
                "module": "src/components/input/input-base.ts"
              }
            },
            {
              "kind": "field",
              "name": "_disabled",
              "type": {
                "text": "boolean"
              },
              "privacy": "protected",
              "default": "false",
              "inheritedFrom": {
                "name": "IgcInputBaseComponent",
                "module": "src/components/input/input-base.ts"
              }
            },
            {
              "kind": "field",
              "name": "_invalid",
              "type": {
                "text": "boolean"
              },
              "privacy": "protected",
              "default": "false",
              "inheritedFrom": {
                "name": "IgcInputBaseComponent",
                "module": "src/components/input/input-base.ts"
              }
            },
            {
              "kind": "field",
              "name": "_dirty",
              "type": {
                "text": "boolean"
              },
              "privacy": "protected",
              "default": "false",
              "inheritedFrom": {
                "name": "IgcInputBaseComponent",
                "module": "src/components/input/input-base.ts"
              }
            },
            {
              "kind": "field",
              "name": "_pristine",
              "type": {
                "text": "boolean"
              },
              "privacy": "protected",
              "default": "true",
              "inheritedFrom": {
                "name": "IgcInputBaseComponent",
                "module": "src/components/input/input-base.ts"
              }
            },
            {
              "kind": "field",
              "name": "__validators",
              "type": {
                "text": "Validator[]"
              },
              "privacy": "protected",
              "readonly": true,
              "inheritedFrom": {
                "name": "IgcInputBaseComponent",
                "module": "src/components/input/input-base.ts"
              }
            },
            {
              "kind": "field",
              "name": "name",
              "type": {
                "text": "string"
              },
              "privacy": "public",
              "description": "The name attribute of the control.",
              "attribute": "name",
              "reflects": true,
              "inheritedFrom": {
                "name": "IgcInputBaseComponent",
                "module": "src/components/input/input-base.ts"
              }
            },
            {
              "kind": "field",
              "name": "disabled",
              "privacy": "public",
              "description": "The disabled state of the component.",
              "default": "false",
              "attribute": "disabled",
              "type": {
                "text": "boolean"
              },
              "reflects": true,
              "inheritedFrom": {
                "name": "IgcInputBaseComponent",
                "module": "src/components/input/input-base.ts"
              }
            },
            {
              "kind": "field",
              "name": "invalid",
              "privacy": "public",
              "description": "Sets the control into invalid state (visual state only).",
              "default": "false",
              "attribute": "invalid",
              "type": {
                "text": "boolean"
              },
              "reflects": true,
              "inheritedFrom": {
                "name": "IgcInputBaseComponent",
                "module": "src/components/input/input-base.ts"
              }
            },
            {
              "kind": "field",
              "name": "form",
              "type": {
                "text": "HTMLFormElement | null"
              },
              "privacy": "public",
              "description": "Returns the HTMLFormElement associated with this element.",
              "readonly": true,
              "inheritedFrom": {
                "name": "IgcInputBaseComponent",
                "module": "src/components/input/input-base.ts"
              }
            },
            {
              "kind": "field",
              "name": "validity",
              "type": {
                "text": "ValidityState"
              },
              "privacy": "public",
              "description": "Returns a ValidityState object which represents the different validity states\nthe element can be in, with respect to constraint validation.",
              "readonly": true,
              "inheritedFrom": {
                "name": "IgcInputBaseComponent",
                "module": "src/components/input/input-base.ts"
              }
            },
            {
              "kind": "field",
              "name": "validationMessage",
              "type": {
                "text": "string"
              },
              "privacy": "public",
              "description": "A string containing the validation message of this element.",
              "readonly": true,
              "inheritedFrom": {
                "name": "IgcInputBaseComponent",
                "module": "src/components/input/input-base.ts"
              }
            },
            {
              "kind": "field",
              "name": "willValidate",
              "type": {
                "text": "boolean"
              },
              "privacy": "public",
              "description": "A boolean value which returns true if the element is a submittable element\nthat is a candidate for constraint validation.",
              "readonly": true,
              "inheritedFrom": {
                "name": "IgcInputBaseComponent",
                "module": "src/components/input/input-base.ts"
              }
            },
            {
              "kind": "method",
              "name": "_handleInvalid",
              "privacy": "private",
              "parameters": [
                {
                  "name": "event",
                  "type": {
                    "text": "Event"
                  }
                }
              ],
              "inheritedFrom": {
                "name": "IgcInputBaseComponent",
                "module": "src/components/input/input-base.ts"
              }
            },
            {
              "kind": "method",
              "name": "_setInvalidState",
              "privacy": "private",
              "return": {
                "type": {
                  "text": "void"
                }
              },
              "inheritedFrom": {
                "name": "IgcInputBaseComponent",
                "module": "src/components/input/input-base.ts"
              }
            },
            {
              "kind": "method",
              "name": "__runValidators",
              "privacy": "private",
              "inheritedFrom": {
                "name": "IgcInputBaseComponent",
                "module": "src/components/input/input-base.ts"
              }
            },
            {
              "kind": "method",
              "name": "_setDefaultValue",
              "privacy": "protected",
              "return": {
                "type": {
                  "text": "void"
                }
              },
              "parameters": [
                {
                  "name": "current",
                  "type": {
                    "text": "string | null"
                  }
                }
              ],
              "inheritedFrom": {
                "name": "IgcInputBaseComponent",
                "module": "src/components/input/input-base.ts"
              }
            },
            {
              "kind": "method",
              "name": "_restoreDefaultValue",
              "privacy": "protected",
              "return": {
                "type": {
                  "text": "void"
                }
              },
              "inheritedFrom": {
                "name": "IgcInputBaseComponent",
                "module": "src/components/input/input-base.ts"
              }
            },
            {
              "kind": "method",
              "name": "_validate",
              "privacy": "protected",
              "return": {
                "type": {
                  "text": "void"
                }
              },
              "parameters": [
                {
                  "name": "message",
                  "optional": true,
                  "type": {
                    "text": "string"
                  }
                }
              ],
              "inheritedFrom": {
                "name": "IgcInputBaseComponent",
                "module": "src/components/input/input-base.ts"
              }
            },
            {
              "kind": "method",
              "name": "_updateValidity",
              "privacy": "protected",
              "parameters": [
                {
                  "name": "error",
                  "optional": true,
                  "type": {
                    "text": "string"
                  }
                }
              ],
              "description": "Executes the component validators and updates the internal validity state.",
              "inheritedFrom": {
                "name": "IgcInputBaseComponent",
                "module": "src/components/input/input-base.ts"
              }
            },
            {
              "kind": "method",
              "name": "_setFormValue",
              "privacy": "protected",
              "return": {
                "type": {
                  "text": "void"
                }
              },
              "parameters": [
                {
                  "name": "value",
                  "type": {
                    "text": "FormValueType"
                  }
                },
                {
                  "name": "state",
                  "optional": true,
                  "type": {
                    "text": "FormValueType"
                  }
                }
              ],
              "inheritedFrom": {
                "name": "IgcInputBaseComponent",
                "module": "src/components/input/input-base.ts"
              }
            },
            {
              "kind": "method",
              "name": "formAssociatedCallback",
              "privacy": "protected",
              "return": {
                "type": {
                  "text": "void"
                }
              },
              "parameters": [
                {
                  "name": "_form",
                  "type": {
                    "text": "HTMLFormElement"
                  }
                }
              ],
              "inheritedFrom": {
                "name": "IgcInputBaseComponent",
                "module": "src/components/input/input-base.ts"
              }
            },
            {
              "kind": "method",
              "name": "formDisabledCallback",
              "privacy": "protected",
              "return": {
                "type": {
                  "text": "void"
                }
              },
              "parameters": [
                {
                  "name": "state",
                  "type": {
                    "text": "boolean"
                  }
                }
              ],
              "inheritedFrom": {
                "name": "IgcInputBaseComponent",
                "module": "src/components/input/input-base.ts"
              }
            },
            {
              "kind": "method",
              "name": "formResetCallback",
              "privacy": "protected",
              "return": {
                "type": {
                  "text": "void"
                }
              },
              "inheritedFrom": {
                "name": "IgcInputBaseComponent",
                "module": "src/components/input/input-base.ts"
              }
            },
            {
              "kind": "method",
              "name": "formStateRestoreCallback",
              "privacy": "protected",
              "return": {
                "type": {
                  "text": "void"
                }
              },
              "parameters": [
                {
                  "name": "_state",
                  "type": {
                    "text": "FormValueType"
                  }
                },
                {
                  "name": "_mode",
                  "type": {
                    "text": "FormRestoreMode"
                  }
                }
              ],
              "inheritedFrom": {
                "name": "IgcInputBaseComponent",
                "module": "src/components/input/input-base.ts"
              }
            },
            {
              "kind": "method",
              "name": "reportValidity",
              "privacy": "public",
              "description": "Checks for validity of the control and shows the browser message if it invalid.",
              "inheritedFrom": {
                "name": "IgcInputBaseComponent",
                "module": "src/components/input/input-base.ts"
              }
            },
            {
              "kind": "method",
              "name": "checkValidity",
              "privacy": "public",
              "description": "Checks for validity of the control and emits the invalid event if it invalid.",
              "inheritedFrom": {
                "name": "IgcInputBaseComponent",
                "module": "src/components/input/input-base.ts"
              }
            },
            {
              "kind": "method",
              "name": "setCustomValidity",
              "privacy": "public",
              "parameters": [
                {
                  "name": "message",
                  "type": {
                    "text": "string"
                  }
                }
              ],
              "description": "Sets a custom validation message for the control.\nAs long as `message` is not empty, the control is considered invalid.",
              "inheritedFrom": {
                "name": "IgcInputBaseComponent",
                "module": "src/components/input/input-base.ts"
              }
            },
            {
              "kind": "method",
              "name": "addEventListener",
              "privacy": "public",
              "return": {
                "type": {
                  "text": "void"
                }
              },
              "parameters": [
                {
                  "name": "type",
                  "type": {
                    "text": "K"
                  }
                },
                {
                  "name": "listener",
                  "type": {
                    "text": "(this: HTMLElement, ev: M[K]) => any"
                  }
                },
                {
                  "name": "options",
                  "optional": true,
                  "type": {
                    "text": "boolean | AddEventListenerOptions"
                  }
                }
              ],
              "inheritedFrom": {
                "name": "IgcInputBaseComponent",
                "module": "src/components/input/input-base.ts"
              }
            },
            {
              "kind": "method",
              "name": "removeEventListener",
              "privacy": "public",
              "return": {
                "type": {
                  "text": "void"
                }
              },
              "parameters": [
                {
                  "name": "type",
                  "type": {
                    "text": "K"
                  }
                },
                {
                  "name": "listener",
                  "type": {
                    "text": "(this: HTMLElement, ev: M[K]) => any"
                  }
                },
                {
                  "name": "options",
                  "optional": true,
                  "type": {
                    "text": "boolean | EventListenerOptions"
                  }
                }
              ],
              "inheritedFrom": {
                "name": "IgcInputBaseComponent",
                "module": "src/components/input/input-base.ts"
              }
            },
            {
              "kind": "method",
              "name": "emitEvent",
              "privacy": "private",
              "return": {
                "type": {
                  "text": "boolean"
                }
              },
              "parameters": [
                {
                  "name": "type",
                  "type": {
                    "text": "K"
                  }
                },
                {
                  "name": "eventInitDict",
                  "optional": true,
                  "type": {
                    "text": "CustomEventInit<D>"
                  }
                }
              ],
              "inheritedFrom": {
                "name": "IgcInputBaseComponent",
                "module": "src/components/input/input-base.ts"
              }
            },
            {
              "kind": "field",
              "name": "increment",
              "privacy": "private",
              "static": true,
              "readonly": true,
              "inheritedFrom": {
                "name": "IgcInputBaseComponent",
                "module": "src/components/input/input-base.ts"
              }
            },
            {
              "kind": "field",
              "name": "_themes",
              "privacy": "protected",
              "readonly": true,
              "inheritedFrom": {
                "name": "IgcInputBaseComponent",
                "module": "src/components/input/input-base.ts"
              }
            },
            {
              "kind": "field",
              "name": "inputId",
              "privacy": "protected",
              "default": "`input-${IgcInputBaseComponent.increment()}`",
              "inheritedFrom": {
                "name": "IgcInputBaseComponent",
                "module": "src/components/input/input-base.ts"
              }
            },
            {
              "kind": "field",
              "name": "value",
              "type": {
                "text": "string | Date | null"
              },
              "privacy": "public",
              "description": "The value attribute of the control.",
              "inheritedFrom": {
                "name": "IgcInputBaseComponent",
                "module": "src/components/input/input-base.ts"
              }
            },
            {
              "kind": "field",
              "name": "input",
              "type": {
                "text": "HTMLInputElement"
              },
              "privacy": "protected",
              "inheritedFrom": {
                "name": "IgcInputBaseComponent",
                "module": "src/components/input/input-base.ts"
              }
            },
            {
              "kind": "field",
              "name": "_helperText",
              "type": {
                "text": "Array<HTMLElement>"
              },
              "privacy": "protected",
              "inheritedFrom": {
                "name": "IgcInputBaseComponent",
                "module": "src/components/input/input-base.ts"
              }
            },
            {
              "kind": "field",
              "name": "prefixes",
              "type": {
                "text": "Array<HTMLElement>"
              },
              "privacy": "protected",
              "inheritedFrom": {
                "name": "IgcInputBaseComponent",
                "module": "src/components/input/input-base.ts"
              }
            },
            {
              "kind": "field",
              "name": "suffixes",
              "type": {
                "text": "Array<HTMLElement>"
              },
              "privacy": "protected",
              "inheritedFrom": {
                "name": "IgcInputBaseComponent",
                "module": "src/components/input/input-base.ts"
              }
            },
            {
              "kind": "field",
              "name": "outlined",
              "type": {
                "text": "boolean"
              },
              "privacy": "public",
              "default": "false",
              "description": "Whether the control will have outlined appearance.",
              "attribute": "outlined",
              "reflects": true,
              "inheritedFrom": {
                "name": "IgcInputBaseComponent",
                "module": "src/components/input/input-base.ts"
              }
            },
            {
              "kind": "field",
              "name": "readOnly",
              "type": {
                "text": "boolean"
              },
              "privacy": "public",
              "default": "false",
              "description": "Makes the control a readonly field.",
              "attribute": "readonly",
              "reflects": true,
              "inheritedFrom": {
                "name": "IgcInputBaseComponent",
                "module": "src/components/input/input-base.ts"
              }
            },
            {
              "kind": "field",
              "name": "placeholder",
              "type": {
                "text": "string"
              },
              "privacy": "public",
              "description": "The placeholder attribute of the control.",
              "attribute": "placeholder",
              "inheritedFrom": {
                "name": "IgcInputBaseComponent",
                "module": "src/components/input/input-base.ts"
              }
            },
            {
              "kind": "field",
              "name": "label",
              "type": {
                "text": "string"
              },
              "privacy": "public",
              "description": "The label for the control.",
              "attribute": "label",
              "inheritedFrom": {
                "name": "IgcInputBaseComponent",
                "module": "src/components/input/input-base.ts"
              }
            },
            {
              "kind": "method",
              "name": "focus",
              "privacy": "public",
              "parameters": [
                {
                  "name": "options",
                  "optional": true,
                  "type": {
                    "text": "FocusOptions"
                  }
                }
              ],
              "description": "Sets focus on the control.",
              "inheritedFrom": {
                "name": "IgcInputBaseComponent",
                "module": "src/components/input/input-base.ts"
              }
            },
            {
              "kind": "method",
              "name": "blur",
              "privacy": "public",
              "description": "Removes focus from the control.",
              "inheritedFrom": {
                "name": "IgcInputBaseComponent",
                "module": "src/components/input/input-base.ts"
              }
            },
            {
              "kind": "method",
              "name": "renderInput",
              "privacy": "protected",
              "return": {
                "type": {
                  "text": "TemplateResult"
                }
              },
              "inheritedFrom": {
                "name": "IgcInputBaseComponent",
                "module": "src/components/input/input-base.ts"
              }
            },
            {
              "kind": "method",
              "name": "renderValidatorContainer",
              "privacy": "protected",
              "return": {
                "type": {
                  "text": "TemplateResult"
                }
              },
              "inheritedFrom": {
                "name": "IgcInputBaseComponent",
                "module": "src/components/input/input-base.ts"
              }
            },
            {
              "kind": "method",
              "name": "resolvePartNames",
              "privacy": "protected",
              "parameters": [
                {
                  "name": "base",
                  "type": {
                    "text": "string"
                  }
                }
              ],
              "inheritedFrom": {
                "name": "IgcInputBaseComponent",
                "module": "src/components/input/input-base.ts"
              }
            },
            {
              "kind": "method",
              "name": "renderFileParts",
              "privacy": "protected",
              "return": {
                "type": {
                  "text": "TemplateResult | typeof nothing"
                }
              },
              "inheritedFrom": {
                "name": "IgcInputBaseComponent",
                "module": "src/components/input/input-base.ts"
              }
            },
            {
              "kind": "method",
              "name": "renderPrefix",
              "privacy": "private",
              "inheritedFrom": {
                "name": "IgcInputBaseComponent",
                "module": "src/components/input/input-base.ts"
              }
            },
            {
              "kind": "method",
              "name": "renderSuffix",
              "privacy": "private",
              "inheritedFrom": {
                "name": "IgcInputBaseComponent",
                "module": "src/components/input/input-base.ts"
              }
            },
            {
              "kind": "method",
              "name": "renderLabel",
              "privacy": "private",
              "inheritedFrom": {
                "name": "IgcInputBaseComponent",
                "module": "src/components/input/input-base.ts"
              }
            },
            {
              "kind": "method",
              "name": "renderMaterial",
              "privacy": "private",
              "inheritedFrom": {
                "name": "IgcInputBaseComponent",
                "module": "src/components/input/input-base.ts"
              }
            },
            {
              "kind": "method",
              "name": "renderStandard",
              "privacy": "private",
              "inheritedFrom": {
                "name": "IgcInputBaseComponent",
                "module": "src/components/input/input-base.ts"
              }
            }
          ],
          "attributes": [
            {
              "name": "prompt",
              "type": {
                "text": "string"
              },
              "description": "The prompt symbol to use for unfilled parts of the mask.",
              "fieldName": "prompt"
            },
            {
              "name": "required",
              "description": "When set, makes the component a required field for validation.",
              "default": "false",
              "fieldName": "required",
              "attribute": "required",
              "type": {
                "text": "boolean"
              },
              "inheritedFrom": {
                "name": "IgcInputBaseComponent",
                "module": "src/components/input/input-base.ts"
              }
            },
            {
              "name": "name",
              "type": {
                "text": "string"
              },
              "description": "The name attribute of the control.",
              "fieldName": "name",
              "attribute": "name",
              "inheritedFrom": {
                "name": "IgcInputBaseComponent",
                "module": "src/components/input/input-base.ts"
              }
            },
            {
              "name": "disabled",
              "description": "The disabled state of the component.",
              "default": "false",
              "fieldName": "disabled",
              "attribute": "disabled",
              "type": {
                "text": "boolean"
              },
              "inheritedFrom": {
                "name": "IgcInputBaseComponent",
                "module": "src/components/input/input-base.ts"
              }
            },
            {
              "name": "invalid",
              "description": "Sets the control into invalid state (visual state only).",
              "default": "false",
              "fieldName": "invalid",
              "attribute": "invalid",
              "type": {
                "text": "boolean"
              },
              "inheritedFrom": {
                "name": "IgcInputBaseComponent",
                "module": "src/components/input/input-base.ts"
              }
            },
            {
              "name": "outlined",
              "type": {
                "text": "boolean"
              },
              "default": "false",
              "description": "Whether the control will have outlined appearance.",
              "fieldName": "outlined",
              "attribute": "outlined",
              "inheritedFrom": {
                "name": "IgcInputBaseComponent",
                "module": "src/components/input/input-base.ts"
              }
            },
            {
              "name": "readonly",
              "type": {
                "text": "boolean"
              },
              "default": "false",
              "description": "Makes the control a readonly field.",
              "fieldName": "readOnly",
              "attribute": "readonly",
              "inheritedFrom": {
                "name": "IgcInputBaseComponent",
                "module": "src/components/input/input-base.ts"
              }
            },
            {
              "name": "placeholder",
              "type": {
                "text": "string"
              },
              "description": "The placeholder attribute of the control.",
              "fieldName": "placeholder",
              "attribute": "placeholder",
              "inheritedFrom": {
                "name": "IgcInputBaseComponent",
                "module": "src/components/input/input-base.ts"
              }
            },
            {
              "name": "label",
              "type": {
                "text": "string"
              },
              "description": "The label for the control.",
              "fieldName": "label",
              "attribute": "label",
              "inheritedFrom": {
                "name": "IgcInputBaseComponent",
                "module": "src/components/input/input-base.ts"
              }
            }
          ],
          "superclass": {
            "name": "IgcInputBaseComponent",
            "module": "/src/components/input/input-base.js"
          },
          "events": [
            {
              "type": {
                "text": "CustomEvent"
              },
              "inheritedFrom": {
                "name": "IgcInputBaseComponent",
                "module": "src/components/input/input-base.ts"
              }
            }
          ]
        }
      ],
      "exports": [
        {
          "kind": "js",
          "name": "IgcMaskInputBaseComponent",
          "declaration": {
            "name": "IgcMaskInputBaseComponent",
            "module": "src/components/mask-input/mask-input-base.ts"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "src/components/date-time-input/date-util.ts",
      "declarations": [
        {
          "kind": "class",
          "description": "",
          "name": "DateTimeUtil",
          "members": [
            {
              "kind": "field",
              "name": "DEFAULT_INPUT_FORMAT",
              "type": {
                "text": "string"
              },
              "privacy": "public",
              "static": true,
              "readonly": true,
              "default": "'MM/dd/yyyy'"
            },
            {
              "kind": "field",
              "name": "DEFAULT_TIME_INPUT_FORMAT",
              "type": {
                "text": "string"
              },
              "privacy": "public",
              "static": true,
              "readonly": true,
              "default": "'hh:mm tt'"
            },
            {
              "kind": "field",
              "name": "SEPARATOR",
              "type": {
                "text": "string"
              },
              "privacy": "private",
              "static": true,
              "readonly": true,
              "default": "'literal'"
            },
            {
              "kind": "field",
              "name": "DEFAULT_LOCALE",
              "type": {
                "text": "string"
              },
              "privacy": "private",
              "static": true,
              "readonly": true,
              "default": "'en'"
            },
            {
              "kind": "field",
              "name": "PREDEFINED_FORMATS",
              "privacy": "private",
              "static": true,
              "readonly": true,
              "default": "new Set([ 'short', 'medium', 'long', 'full', ])"
            },
            {
              "kind": "field",
              "name": "_parser",
              "privacy": "private",
              "static": true,
              "default": "new MaskParser()"
            },
            {
              "kind": "method",
              "name": "parseValueFromMask",
              "privacy": "public",
              "static": true,
              "return": {
                "type": {
                  "text": "Date | null"
                }
              },
              "parameters": [
                {
                  "name": "inputData",
                  "type": {
                    "text": "string"
                  }
                },
                {
                  "name": "dateTimeParts",
                  "type": {
                    "text": "DatePartInfo[]"
                  }
                },
                {
                  "name": "promptChar",
                  "optional": true,
                  "type": {
                    "text": "string"
                  }
                }
              ]
            },
            {
              "kind": "method",
              "name": "getDefaultMask",
              "privacy": "public",
              "static": true,
              "return": {
                "type": {
                  "text": "string"
                }
              },
              "parameters": [
                {
                  "name": "locale",
                  "type": {
                    "text": "string"
                  }
                }
              ]
            },
            {
              "kind": "method",
              "name": "parseDateTimeFormat",
              "privacy": "public",
              "static": true,
              "return": {
                "type": {
                  "text": "DatePartInfo[]"
                }
              },
              "parameters": [
                {
                  "name": "mask",
                  "type": {
                    "text": "string"
                  }
                },
                {
                  "name": "locale",
                  "default": "DateTimeUtil.DEFAULT_LOCALE",
                  "type": {
                    "text": "string"
                  }
                },
                {
                  "name": "noLeadingZero",
                  "default": "false"
                }
              ]
            },
            {
              "kind": "method",
              "name": "parseIsoDate",
              "privacy": "public",
              "static": true,
              "return": {
                "type": {
                  "text": "Date | null"
                }
              },
              "parameters": [
                {
                  "name": "value",
                  "type": {
                    "text": "string"
                  }
                }
              ]
            },
            {
              "kind": "method",
              "name": "isValidDate",
              "privacy": "public",
              "static": true,
              "return": {
                "type": {
                  "text": "value is Date"
                }
              },
              "parameters": [
                {
                  "name": "value",
                  "type": {
                    "text": "any"
                  }
                }
              ]
            },
            {
              "kind": "method",
              "name": "formatDate",
              "privacy": "public",
              "static": true,
              "return": {
                "type": {
                  "text": "string"
                }
              },
              "parameters": [
                {
                  "name": "value",
                  "type": {
                    "text": "Date"
                  }
                },
                {
                  "name": "locale",
                  "type": {
                    "text": "string"
                  }
                },
                {
                  "name": "format",
                  "type": {
                    "text": "string"
                  }
                },
                {
                  "name": "noLeadingZero",
                  "default": "false"
                }
              ]
            },
            {
              "kind": "method",
              "name": "getPartValue",
              "privacy": "public",
              "static": true,
              "return": {
                "type": {
                  "text": "string"
                }
              },
              "parameters": [
                {
                  "name": "datePartInfo",
                  "type": {
                    "text": "DatePartInfo"
                  }
                },
                {
                  "name": "partLength",
                  "type": {
                    "text": "number"
                  }
                },
                {
                  "name": "_dateValue",
                  "type": {
                    "text": "Date | null"
                  }
                }
              ]
            },
            {
              "kind": "method",
              "name": "spinYear",
              "privacy": "public",
              "static": true,
              "return": {
                "type": {
                  "text": "Date"
                }
              },
              "parameters": [
                {
                  "name": "delta",
                  "type": {
                    "text": "number"
                  }
                },
                {
                  "name": "newDate",
                  "type": {
                    "text": "Date"
                  }
                }
              ]
            },
            {
              "kind": "method",
              "name": "spinMonth",
              "privacy": "public",
              "static": true,
              "return": {
                "type": {
                  "text": "void"
                }
              },
              "parameters": [
                {
                  "name": "delta",
                  "type": {
                    "text": "number"
                  }
                },
                {
                  "name": "newDate",
                  "type": {
                    "text": "Date"
                  }
                },
                {
                  "name": "spinLoop",
                  "type": {
                    "text": "boolean"
                  }
                }
              ]
            },
            {
              "kind": "method",
              "name": "spinDate",
              "privacy": "public",
              "static": true,
              "return": {
                "type": {
                  "text": "void"
                }
              },
              "parameters": [
                {
                  "name": "delta",
                  "type": {
                    "text": "number"
                  }
                },
                {
                  "name": "newDate",
                  "type": {
                    "text": "Date"
                  }
                },
                {
                  "name": "spinLoop",
                  "type": {
                    "text": "boolean"
                  }
                }
              ]
            },
            {
              "kind": "method",
              "name": "spinHours",
              "privacy": "public",
              "static": true,
              "return": {
                "type": {
                  "text": "void"
                }
              },
              "parameters": [
                {
                  "name": "delta",
                  "type": {
                    "text": "number"
                  }
                },
                {
                  "name": "newDate",
                  "type": {
                    "text": "Date"
                  }
                },
                {
                  "name": "spinLoop",
                  "type": {
                    "text": "boolean"
                  }
                }
              ]
            },
            {
              "kind": "method",
              "name": "spinMinutes",
              "privacy": "public",
              "static": true,
              "return": {
                "type": {
                  "text": "void"
                }
              },
              "parameters": [
                {
                  "name": "delta",
                  "type": {
                    "text": "number"
                  }
                },
                {
                  "name": "newDate",
                  "type": {
                    "text": "Date"
                  }
                },
                {
                  "name": "spinLoop",
                  "type": {
                    "text": "boolean"
                  }
                }
              ]
            },
            {
              "kind": "method",
              "name": "spinSeconds",
              "privacy": "public",
              "static": true,
              "return": {
                "type": {
                  "text": "void"
                }
              },
              "parameters": [
                {
                  "name": "delta",
                  "type": {
                    "text": "number"
                  }
                },
                {
                  "name": "newDate",
                  "type": {
                    "text": "Date"
                  }
                },
                {
                  "name": "spinLoop",
                  "type": {
                    "text": "boolean"
                  }
                }
              ]
            },
            {
              "kind": "method",
              "name": "spinAmPm",
              "privacy": "public",
              "static": true,
              "return": {
                "type": {
                  "text": "Date"
                }
              },
              "parameters": [
                {
                  "name": "newDate",
                  "type": {
                    "text": "Date"
                  }
                },
                {
                  "name": "currentDate",
                  "type": {
                    "text": "Date"
                  }
                },
                {
                  "name": "amPmFromMask",
                  "type": {
                    "text": "string"
                  }
                }
              ]
            },
            {
              "kind": "method",
              "name": "greaterThanMaxValue",
              "privacy": "public",
              "static": true,
              "return": {
                "type": {
                  "text": "boolean"
                }
              },
              "parameters": [
                {
                  "name": "value",
                  "type": {
                    "text": "Date"
                  }
                },
                {
                  "name": "maxValue",
                  "type": {
                    "text": "Date"
                  }
                },
                {
                  "name": "includeTime",
                  "default": "true"
                },
                {
                  "name": "includeDate",
                  "default": "true"
                }
              ]
            },
            {
              "kind": "method",
              "name": "lessThanMinValue",
              "privacy": "public",
              "static": true,
              "return": {
                "type": {
                  "text": ""
                }
              },
              "parameters": [
                {
                  "name": "value",
                  "type": {
                    "text": "Date"
                  }
                },
                {
                  "name": "minValue",
                  "type": {
                    "text": "Date"
                  }
                },
                {
                  "name": "includeTime",
                  "default": "true",
                  "description": "set to false if you want to exclude time portion of the two dates"
                },
                {
                  "name": "includeDate",
                  "default": "true",
                  "description": "set to false if you want to exclude the date portion of the two dates"
                }
              ],
              "description": "Determines whether the provided value is less than the provided min value."
            },
            {
              "kind": "method",
              "name": "validateMinMax",
              "privacy": "public",
              "static": true,
              "parameters": [
                {
                  "name": "value",
                  "type": {
                    "text": "Date"
                  },
                  "description": "The value to validate"
                },
                {
                  "name": "minValue",
                  "type": {
                    "text": "Date | string"
                  },
                  "description": "The lowest possible value that `value` can take"
                },
                {
                  "name": "maxValue",
                  "type": {
                    "text": "Date | string"
                  },
                  "description": "The largest possible value that `value` can take"
                },
                {
                  "name": "includeTime",
                  "default": "true"
                },
                {
                  "name": "includeDate",
                  "default": "true"
                }
              ],
              "description": "Validates a value within a given min and max value range."
            },
            {
              "kind": "method",
              "name": "predefinedToDateDisplayFormat",
              "privacy": "public",
              "static": true,
              "parameters": [
                {
                  "name": "format",
                  "optional": true,
                  "type": {
                    "text": "string"
                  },
                  "description": "The format to check and transform"
                }
              ],
              "description": "Transforms the predefined format to a display format containing only date parts."
            },
            {
              "kind": "method",
              "name": "setDisplayFormatOptions",
              "privacy": "private",
              "static": true,
              "parameters": [
                {
                  "name": "value",
                  "type": {
                    "text": "Date"
                  }
                },
                {
                  "name": "format",
                  "type": {
                    "text": "string"
                  }
                },
                {
                  "name": "locale",
                  "type": {
                    "text": "string"
                  }
                },
                {
                  "name": "noLeadingZero",
                  "default": "false"
                }
              ]
            },
            {
              "kind": "method",
              "name": "getMask",
              "privacy": "private",
              "static": true,
              "return": {
                "type": {
                  "text": "string"
                }
              },
              "parameters": [
                {
                  "name": "dateStruct",
                  "type": {
                    "text": "any[]"
                  }
                }
              ]
            },
            {
              "kind": "method",
              "name": "addCurrentPart",
              "privacy": "private",
              "static": true,
              "return": {
                "type": {
                  "text": "void"
                }
              },
              "parameters": [
                {
                  "name": "currentPart",
                  "type": {
                    "text": "DatePartInfo"
                  }
                },
                {
                  "name": "dateTimeParts",
                  "type": {
                    "text": "DatePartInfo[]"
                  }
                },
                {
                  "name": "noLeadingZero",
                  "default": "false"
                }
              ]
            },
            {
              "kind": "method",
              "name": "ensureLeadingZero",
              "privacy": "private",
              "static": true,
              "parameters": [
                {
                  "name": "part",
                  "type": {
                    "text": "DatePartInfo"
                  }
                },
                {
                  "name": "noLeadingZero",
                  "default": "false"
                }
              ]
            },
            {
              "kind": "method",
              "name": "determineDatePart",
              "privacy": "private",
              "static": true,
              "return": {
                "type": {
                  "text": "DateParts"
                }
              },
              "parameters": [
                {
                  "name": "char",
                  "type": {
                    "text": "string"
                  }
                }
              ]
            },
            {
              "kind": "method",
              "name": "getDefaultLocaleMask",
              "privacy": "private",
              "static": true,
              "parameters": [
                {
                  "name": "locale",
                  "type": {
                    "text": "string"
                  }
                }
              ]
            },
            {
              "kind": "method",
              "name": "fillDatePartsPositions",
              "privacy": "private",
              "static": true,
              "return": {
                "type": {
                  "text": "void"
                }
              },
              "parameters": [
                {
                  "name": "dateArray",
                  "type": {
                    "text": "any[]"
                  }
                }
              ]
            },
            {
              "kind": "method",
              "name": "getCleanVal",
              "privacy": "private",
              "static": true,
              "return": {
                "type": {
                  "text": "string"
                }
              },
              "parameters": [
                {
                  "name": "inputData",
                  "type": {
                    "text": "string"
                  }
                },
                {
                  "name": "datePart",
                  "type": {
                    "text": "DatePartInfo"
                  }
                },
                {
                  "name": "prompt",
                  "optional": true,
                  "type": {
                    "text": "string"
                  }
                }
              ]
            },
            {
              "kind": "method",
              "name": "escapeRegExp",
              "privacy": "private",
              "static": true,
              "parameters": [
                {
                  "name": "string",
                  "type": {
                    "text": "string"
                  }
                }
              ]
            },
            {
              "kind": "method",
              "name": "trimEmptyPlaceholders",
              "privacy": "private",
              "static": true,
              "return": {
                "type": {
                  "text": "string"
                }
              },
              "parameters": [
                {
                  "name": "value",
                  "type": {
                    "text": "string"
                  }
                },
                {
                  "name": "prompt",
                  "optional": true,
                  "type": {
                    "text": "string"
                  }
                }
              ]
            },
            {
              "kind": "method",
              "name": "daysInMonth",
              "privacy": "private",
              "static": true,
              "return": {
                "type": {
                  "text": "number"
                }
              },
              "parameters": [
                {
                  "name": "fullYear",
                  "type": {
                    "text": "number"
                  }
                },
                {
                  "name": "month",
                  "type": {
                    "text": "number"
                  }
                }
              ]
            },
            {
              "kind": "method",
              "name": "prependValue",
              "privacy": "private",
              "static": true,
              "return": {
                "type": {
                  "text": "string"
                }
              },
              "parameters": [
                {
                  "name": "value",
                  "type": {
                    "text": "number"
                  }
                },
                {
                  "name": "partLength",
                  "type": {
                    "text": "number"
                  }
                },
                {
                  "name": "prependChar",
                  "type": {
                    "text": "string"
                  }
                }
              ]
            },
            {
              "kind": "method",
              "name": "toTwelveHourFormat",
              "privacy": "private",
              "static": true,
              "return": {
                "type": {
                  "text": "number"
                }
              },
              "parameters": [
                {
                  "name": "value",
                  "type": {
                    "text": "string"
                  }
                }
              ]
            }
          ]
        }
      ],
      "exports": [
        {
          "kind": "js",
          "name": "DateTimeUtil",
          "declaration": {
            "name": "DateTimeUtil",
            "module": "src/components/date-time-input/date-util.ts"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "src/components/date-time-input/validators.ts",
      "declarations": [
        {
          "kind": "variable",
          "name": "dateTimeInputValidators",
          "type": {
            "text": "Validator<IgcDateTimeInputComponent>[]"
          },
          "default": "[ requiredValidator, { ...minDateValidator, isValid: (host) => host.value && host.min ? !DateTimeUtil.lessThanMinValue( host.value || new Date(), host.min, // @ts-expect-error - private access host.hasTimeParts, // @ts-expect-error - private access host.hasDateParts ) : true, }, { ...maxDateValidator, isValid: (host) => host.value && host.max ? !DateTimeUtil.greaterThanMaxValue( host.value || new Date(), host.max, // @ts-expect-error - private access host.hasTimeParts, // @ts-expect-error - private access host.hasDateParts ) : true, }, ]"
        }
      ],
      "exports": [
        {
          "kind": "js",
          "name": "dateTimeInputValidators",
          "declaration": {
            "name": "dateTimeInputValidators",
            "module": "src/components/date-time-input/validators.ts"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "src/components/date-time-input/date-time-input.ts",
      "declarations": [
        {
          "kind": "class",
          "description": "A date time input is an input field that lets you set and edit the date and time in a chosen input element\nusing customizable display and input formats.",
          "name": "IgcDateTimeInputComponent",
          "cssParts": [
            {
              "description": "The main wrapper that holds all main input elements.",
              "name": "container"
            },
            {
              "description": "The native input element.",
              "name": "input"
            },
            {
              "description": "The native label element.",
              "name": "label"
            },
            {
              "description": "The prefix wrapper.",
              "name": "prefix"
            },
            {
              "description": "The suffix wrapper.",
              "name": "suffix"
            },
            {
              "description": "The helper text wrapper.",
              "name": "helper-text"
            }
          ],
          "slots": [
            {
              "description": "Renders content before the input.",
              "name": "prefix"
            },
            {
              "description": "Renders content after input.",
              "name": "suffix"
            },
            {
              "description": "Renders content below the input.",
              "name": "helper-text"
            },
            {
              "description": "Renders content when the required validation fails.",
              "name": "value-missing"
            },
            {
              "description": "Renders content when the max validation fails.",
              "name": "range-overflow"
            },
            {
              "description": "Renders content when the min validation fails.",
              "name": "range-underflow"
            },
            {
              "description": "Renders content when setCustomValidity(message) is set.",
              "name": "custom-error"
            },
            {
              "description": "Renders content when the component is in invalid state (validity.valid = false).",
              "name": "invalid"
            }
          ],
          "members": [
            {
              "kind": "field",
              "name": "tagName",
              "type": {
                "text": "string"
              },
              "privacy": "public",
              "static": true,
              "readonly": true,
              "default": "'igc-date-time-input'"
            },
            {
              "kind": "method",
              "name": "register",
              "privacy": "public",
              "static": true
            },
            {
              "kind": "field",
              "name": "__validators",
              "type": {
                "text": "Validator[]"
              },
              "privacy": "protected",
              "readonly": true,
              "inheritedFrom": {
                "name": "IgcInputBaseComponent",
                "module": "src/components/input/input-base.ts"
              }
            },
            {
              "kind": "field",
              "name": "_formValue",
              "type": {
                "text": "FormValue<unknown>"
              },
              "privacy": "protected",
              "inheritedFrom": {
                "name": "IgcInputBaseComponent",
                "module": "src/components/input/input-base.ts"
              },
              "readonly": true
            },
            {
              "kind": "field",
              "name": "_defaultMask",
              "type": {
                "text": "string"
              },
              "privacy": "protected"
            },
            {
              "kind": "field",
              "name": "_oldValue",
              "type": {
                "text": "Date | null"
              },
              "privacy": "private",
              "default": "null"
            },
            {
              "kind": "field",
              "name": "_min",
              "type": {
                "text": "Date | null"
              },
              "privacy": "private",
              "default": "null"
            },
            {
              "kind": "field",
              "name": "_max",
              "type": {
                "text": "Date | null"
              },
              "privacy": "private",
              "default": "null"
            },
            {
              "kind": "field",
              "name": "_inputDateParts",
              "type": {
                "text": "DatePartInfo[]"
              },
              "privacy": "private"
            },
            {
              "kind": "field",
              "name": "_inputFormat",
              "type": {
                "text": "string"
              },
              "privacy": "private"
            },
            {
              "kind": "field",
              "name": "_datePartDeltas",
              "type": {
                "text": "DatePartDeltas"
              },
              "privacy": "private",
              "default": "{ date: 1, month: 1, year: 1, hours: 1, minutes: 1, seconds: 1, }"
            },
            {
              "kind": "field",
              "name": "inputFormat",
              "type": {
                "text": "string"
              },
              "privacy": "public",
              "description": "The date format to apply on the input.",
              "attribute": "input-format"
            },
            {
              "kind": "field",
              "name": "value",
              "type": {
                "text": "string | Date | null"
              },
              "privacy": "public",
              "description": "The value of the input.",
              "inheritedFrom": {
                "name": "IgcInputBaseComponent",
                "module": "src/components/input/input-base.ts"
              },
              "attribute": "value"
            },
            {
              "kind": "field",
              "name": "min",
              "privacy": "public",
              "description": "The minimum value required for the input to remain valid.",
              "attribute": "min",
              "type": {
                "text": "Date | null"
              }
            },
            {
              "kind": "field",
              "name": "max",
              "privacy": "public",
              "description": "The maximum value required for the input to remain valid.",
              "attribute": "max",
              "type": {
                "text": "Date | null"
              }
            },
            {
              "kind": "field",
              "name": "displayFormat",
              "type": {
                "text": "string"
              },
              "privacy": "public",
              "description": "Format to display the value in when not editing.\nDefaults to the input format if not set.",
              "attribute": "display-format"
            },
            {
              "kind": "field",
              "name": "spinDelta",
              "type": {
                "text": "DatePartDeltas"
              },
              "privacy": "public",
              "description": "Delta values used to increment or decrement each date part on step actions.\nAll values default to `1`."
            },
            {
              "kind": "field",
              "name": "spinLoop",
              "type": {
                "text": "boolean"
              },
              "privacy": "public",
              "default": "true",
              "description": "Sets whether to loop over the currently spun segment.",
              "attribute": "spin-loop"
            },
            {
              "kind": "field",
              "name": "locale",
              "type": {
                "text": "string"
              },
              "privacy": "public",
              "default": "'en'",
              "description": "The locale settings used to display the value.",
              "attribute": "locale"
            },
            {
              "kind": "method",
              "name": "setDefaultMask",
              "privacy": "protected",
              "return": {
                "type": {
                  "text": "void"
                }
              }
            },
            {
              "kind": "method",
              "name": "setDisplayFormat",
              "privacy": "protected",
              "return": {
                "type": {
                  "text": "void"
                }
              }
            },
            {
              "kind": "method",
              "name": "promptChange",
              "privacy": "protected",
              "return": {
                "type": {
                  "text": "void"
                }
              }
            },
            {
              "kind": "field",
              "name": "hasDateParts",
              "type": {
                "text": "boolean"
              },
              "privacy": "protected",
              "readonly": true
            },
            {
              "kind": "field",
              "name": "hasTimeParts",
              "type": {
                "text": "boolean"
              },
              "privacy": "protected",
              "readonly": true
            },
            {
              "kind": "field",
              "name": "targetDatePart",
              "type": {
                "text": "DatePart | undefined"
              },
              "privacy": "private",
              "readonly": true,
              "expandedType": {
                "text": "'month' | 'year' | 'date' | 'hours' | 'minutes' | 'seconds' | 'amPm' | undefined"
              }
            },
            {
              "kind": "field",
              "name": "datePartDeltas",
              "type": {
                "text": "DatePartDeltas"
              },
              "privacy": "private",
              "readonly": true
            },
            {
              "kind": "method",
              "name": "stepUp",
              "privacy": "public",
              "return": {
                "type": {
                  "text": "void"
                }
              },
              "parameters": [
                {
                  "name": "datePart",
                  "optional": true,
                  "type": {
                    "text": "DatePart"
                  }
                },
                {
                  "name": "delta",
                  "optional": true,
                  "type": {
                    "text": "number"
                  }
                }
              ],
              "description": "Increments a date/time portion."
            },
            {
              "kind": "method",
              "name": "stepDown",
              "privacy": "public",
              "return": {
                "type": {
                  "text": "void"
                }
              },
              "parameters": [
                {
                  "name": "datePart",
                  "optional": true,
                  "type": {
                    "text": "DatePart"
                  }
                },
                {
                  "name": "delta",
                  "optional": true,
                  "type": {
                    "text": "number"
                  }
                }
              ],
              "description": "Decrements a date/time portion."
            },
            {
              "kind": "method",
              "name": "clear",
              "privacy": "public",
              "return": {
                "type": {
                  "text": "void"
                }
              },
              "description": "Clears the input element of user input."
            },
            {
              "kind": "method",
              "name": "setToday",
              "privacy": "protected"
            },
            {
              "kind": "method",
              "name": "updateMask",
              "privacy": "protected"
            },
            {
              "kind": "method",
              "name": "handleInput",
              "privacy": "protected",
              "parameters": [
                {
                  "name": "{ inputType, isComposing }",
                  "type": {
                    "text": "InputEvent"
                  }
                }
              ],
              "inheritedFrom": {
                "name": "IgcMaskInputBaseComponent",
                "module": "src/components/mask-input/mask-input-base.ts"
              }
            },
            {
              "kind": "method",
              "name": "handleDragLeave",
              "privacy": "protected"
            },
            {
              "kind": "method",
              "name": "handleDragEnter",
              "privacy": "protected"
            },
            {
              "kind": "method",
              "name": "updateInput",
              "privacy": "protected",
              "return": {
                "type": {
                  "text": "void"
                }
              },
              "parameters": [
                {
                  "name": "string",
                  "type": {
                    "text": "string"
                  }
                },
                {
                  "name": "range",
                  "type": {
                    "text": "MaskRange"
                  }
                }
              ],
              "inheritedFrom": {
                "name": "IgcMaskInputBaseComponent",
                "module": "src/components/mask-input/mask-input-base.ts"
              }
            },
            {
              "kind": "method",
              "name": "trySpinValue",
              "privacy": "private",
              "return": {
                "type": {
                  "text": "Date"
                }
              },
              "parameters": [
                {
                  "name": "datePart",
                  "type": {
                    "text": "DatePart"
                  }
                },
                {
                  "name": "delta",
                  "optional": true,
                  "type": {
                    "text": "number"
                  }
                },
                {
                  "name": "negative",
                  "default": "false"
                }
              ]
            },
            {
              "kind": "method",
              "name": "spinValue",
              "privacy": "private",
              "return": {
                "type": {
                  "text": "Date"
                }
              },
              "parameters": [
                {
                  "name": "datePart",
                  "type": {
                    "text": "DatePart"
                  }
                },
                {
                  "name": "delta",
                  "type": {
                    "text": "number"
                  }
                }
              ]
            },
            {
              "kind": "method",
              "name": "onWheel",
              "privacy": "private",
              "parameters": [
                {
                  "name": "event",
                  "type": {
                    "text": "WheelEvent"
                  }
                }
              ]
            },
            {
              "kind": "method",
              "name": "updateDefaultMask",
              "privacy": "private",
              "return": {
                "type": {
                  "text": "void"
                }
              }
            },
            {
              "kind": "method",
              "name": "setMask",
              "privacy": "private",
              "return": {
                "type": {
                  "text": "void"
                }
              },
              "parameters": [
                {
                  "name": "string",
                  "type": {
                    "text": "string"
                  }
                }
              ]
            },
            {
              "kind": "method",
              "name": "parseDate",
              "privacy": "private",
              "parameters": [
                {
                  "name": "val",
                  "type": {
                    "text": "string"
                  }
                }
              ]
            },
            {
              "kind": "method",
              "name": "getMaskedValue",
              "privacy": "private",
              "return": {
                "type": {
                  "text": "string"
                }
              }
            },
            {
              "kind": "method",
              "name": "isComplete",
              "privacy": "private",
              "return": {
                "type": {
                  "text": "boolean"
                }
              }
            },
            {
              "kind": "method",
              "name": "updateValue",
              "privacy": "private",
              "return": {
                "type": {
                  "text": "void"
                }
              }
            },
            {
              "kind": "method",
              "name": "_updateSetRangeTextValue",
              "privacy": "protected",
              "return": {
                "type": {
                  "text": "void"
                }
              },
              "inheritedFrom": {
                "name": "IgcMaskInputBaseComponent",
                "module": "src/components/mask-input/mask-input-base.ts"
              }
            },
            {
              "kind": "method",
              "name": "getNewPosition",
              "privacy": "private",
              "return": {
                "type": {
                  "text": "number"
                }
              },
              "parameters": [
                {
                  "name": "value",
                  "type": {
                    "text": "string"
                  }
                },
                {
                  "name": "direction",
                  "default": "0"
                }
              ]
            },
            {
              "kind": "method",
              "name": "handleFocus",
              "privacy": "protected"
            },
            {
              "kind": "method",
              "name": "handleBlur",
              "privacy": "protected"
            },
            {
              "kind": "method",
              "name": "navigateParts",
              "privacy": "protected",
              "parameters": [
                {
                  "name": "delta",
                  "type": {
                    "text": "number"
                  }
                }
              ]
            },
            {
              "kind": "method",
              "name": "keyboardSpin",
              "privacy": "protected",
              "parameters": [
                {
                  "name": "direction",
                  "type": {
                    "text": "'up' | 'down'"
                  }
                }
              ]
            },
            {
              "kind": "method",
              "name": "renderInput",
              "privacy": "protected",
              "return": {
                "type": {
                  "text": "TemplateResult"
                }
              },
              "inheritedFrom": {
                "name": "IgcInputBaseComponent",
                "module": "src/components/input/input-base.ts"
              }
            },
            {
              "kind": "method",
              "name": "addEventListener",
              "privacy": "public",
              "return": {
                "type": {
                  "text": "void"
                }
              },
              "parameters": [
                {
                  "name": "type",
                  "type": {
                    "text": "K"
                  }
                },
                {
                  "name": "listener",
                  "type": {
                    "text": "(this: HTMLElement, ev: M[K]) => any"
                  }
                },
                {
                  "name": "options",
                  "optional": true,
                  "type": {
                    "text": "boolean | AddEventListenerOptions"
                  }
                }
              ],
              "inheritedFrom": {
                "name": "IgcInputBaseComponent",
                "module": "src/components/input/input-base.ts"
              }
            },
            {
              "kind": "method",
              "name": "removeEventListener",
              "privacy": "public",
              "return": {
                "type": {
                  "text": "void"
                }
              },
              "parameters": [
                {
                  "name": "type",
                  "type": {
                    "text": "K"
                  }
                },
                {
                  "name": "listener",
                  "type": {
                    "text": "(this: HTMLElement, ev: M[K]) => any"
                  }
                },
                {
                  "name": "options",
                  "optional": true,
                  "type": {
                    "text": "boolean | EventListenerOptions"
                  }
                }
              ],
              "inheritedFrom": {
                "name": "IgcInputBaseComponent",
                "module": "src/components/input/input-base.ts"
              }
            },
            {
              "kind": "method",
              "name": "emitEvent",
              "privacy": "private",
              "return": {
                "type": {
                  "text": "boolean"
                }
              },
              "parameters": [
                {
                  "name": "type",
                  "type": {
                    "text": "K"
                  }
                },
                {
                  "name": "eventInitDict",
                  "optional": true,
                  "type": {
                    "text": "CustomEventInit<D>"
                  }
                }
              ],
              "inheritedFrom": {
                "name": "IgcInputBaseComponent",
                "module": "src/components/input/input-base.ts"
              }
            },
            {
              "kind": "field",
              "name": "parser",
              "privacy": "protected",
              "default": "new MaskParser()",
              "inheritedFrom": {
                "name": "IgcMaskInputBaseComponent",
                "module": "src/components/mask-input/mask-input-base.ts"
              }
            },
            {
              "kind": "field",
              "name": "selection",
              "type": {
                "text": "MaskRange"
              },
              "privacy": "protected",
              "default": "{ start: 0, end: 0 }",
              "inheritedFrom": {
                "name": "IgcMaskInputBaseComponent",
                "module": "src/components/mask-input/mask-input-base.ts"
              }
            },
            {
              "kind": "field",
              "name": "compositionStart",
              "type": {
                "text": "number"
              },
              "privacy": "protected",
              "default": "0",
              "inheritedFrom": {
                "name": "IgcMaskInputBaseComponent",
                "module": "src/components/mask-input/mask-input-base.ts"
              }
            },
            {
              "kind": "field",
              "name": "focused",
              "type": {
                "text": "boolean"
              },
              "privacy": "protected",
              "default": "false",
              "inheritedFrom": {
                "name": "IgcMaskInputBaseComponent",
                "module": "src/components/mask-input/mask-input-base.ts"
              }
            },
            {
              "kind": "field",
              "name": "maskedValue",
              "type": {
                "text": "string"
              },
              "privacy": "protected",
              "default": "''",
              "inheritedFrom": {
                "name": "IgcMaskInputBaseComponent",
                "module": "src/components/mask-input/mask-input-base.ts"
              }
            },
            {
              "kind": "field",
              "name": "_mask",
              "type": {
                "text": "string"
              },
              "privacy": "protected",
              "default": "''",
              "inheritedFrom": {
                "name": "IgcMaskInputBaseComponent",
                "module": "src/components/mask-input/mask-input-base.ts"
              }
            },
            {
              "kind": "field",
              "name": "prompt",
              "type": {
                "text": "string"
              },
              "privacy": "public",
              "description": "The prompt symbol to use for unfilled parts of the mask.",
              "attribute": "prompt",
              "inheritedFrom": {
                "name": "IgcMaskInputBaseComponent",
                "module": "src/components/mask-input/mask-input-base.ts"
              }
            },
            {
              "kind": "field",
              "name": "inputSelection",
              "type": {
                "text": "MaskRange"
              },
              "privacy": "protected",
              "readonly": true,
              "inheritedFrom": {
                "name": "IgcMaskInputBaseComponent",
                "module": "src/components/mask-input/mask-input-base.ts"
              }
            },
            {
              "kind": "field",
              "name": "emptyMask",
              "type": {
                "text": "string"
              },
              "privacy": "protected",
              "readonly": true,
              "inheritedFrom": {
                "name": "IgcMaskInputBaseComponent",
                "module": "src/components/mask-input/mask-input-base.ts"
              }
            },
            {
              "kind": "method",
              "name": "select",
              "privacy": "public",
              "description": "Selects all text within the input.",
              "inheritedFrom": {
                "name": "IgcMaskInputBaseComponent",
                "module": "src/components/mask-input/mask-input-base.ts"
              }
            },
            {
              "kind": "method",
              "name": "handleKeydown",
              "privacy": "protected",
              "parameters": [
                {
                  "name": "{ key }",
                  "type": {
                    "text": "KeyboardEvent"
                  }
                }
              ],
              "inheritedFrom": {
                "name": "IgcMaskInputBaseComponent",
                "module": "src/components/mask-input/mask-input-base.ts"
              }
            },
            {
              "kind": "method",
              "name": "handleCut",
              "privacy": "protected",
              "inheritedFrom": {
                "name": "IgcMaskInputBaseComponent",
                "module": "src/components/mask-input/mask-input-base.ts"
              }
            },
            {
              "kind": "method",
              "name": "handleDragStart",
              "privacy": "protected",
              "inheritedFrom": {
                "name": "IgcMaskInputBaseComponent",
                "module": "src/components/mask-input/mask-input-base.ts"
              }
            },
            {
              "kind": "method",
              "name": "handleCompositionStart",
              "privacy": "protected",
              "inheritedFrom": {
                "name": "IgcMaskInputBaseComponent",
                "module": "src/components/mask-input/mask-input-base.ts"
              }
            },
            {
              "kind": "method",
              "name": "handleCompositionEnd",
              "privacy": "protected",
              "parameters": [
                {
                  "name": "{ data }",
                  "type": {
                    "text": "CompositionEvent"
                  }
                }
              ],
              "inheritedFrom": {
                "name": "IgcMaskInputBaseComponent",
                "module": "src/components/mask-input/mask-input-base.ts"
              }
            },
            {
              "kind": "method",
              "name": "handleClick",
              "privacy": "protected",
              "inheritedFrom": {
                "name": "IgcMaskInputBaseComponent",
                "module": "src/components/mask-input/mask-input-base.ts"
              }
            },
            {
              "kind": "method",
              "name": "setSelectionRange",
              "privacy": "public",
              "parameters": [
                {
                  "name": "start",
                  "type": {
                    "text": "number"
                  }
                },
                {
                  "name": "end",
                  "type": {
                    "text": "number"
                  }
                },
                {
                  "name": "direction",
                  "optional": true,
                  "type": {
                    "text": "SelectionRangeDirection"
                  }
                }
              ],
              "description": "Sets the text selection range of the control",
              "return": {
                "type": {
                  "text": "void"
                }
              },
              "inheritedFrom": {
                "name": "IgcInputBaseComponent",
                "module": "src/components/input/input-base.ts"
              }
            },
            {
              "kind": "method",
              "name": "setRangeText",
              "privacy": "public",
              "parameters": [
                {
                  "name": "replacement",
                  "type": {
                    "text": "string"
                  }
                },
                {
                  "name": "start",
                  "optional": true,
                  "type": {
                    "text": "number"
                  }
                },
                {
                  "name": "end",
                  "optional": true,
                  "type": {
                    "text": "number"
                  }
                },
                {
                  "name": "selectMode",
                  "optional": true,
                  "type": {
                    "text": "RangeTextSelectMode"
                  }
                }
              ],
              "description": "Replaces the selected text in the control and re-applies the mask",
              "inheritedFrom": {
                "name": "IgcInputBaseComponent",
                "module": "src/components/input/input-base.ts"
              }
            },
            {
              "kind": "field",
              "name": "_required",
              "type": {
                "text": "boolean"
              },
              "privacy": "protected",
              "default": "false",
              "inheritedFrom": {
                "name": "IgcInputBaseComponent",
                "module": "src/components/input/input-base.ts"
              }
            },
            {
              "kind": "field",
              "name": "required",
              "privacy": "public",
              "description": "When set, makes the component a required field for validation.",
              "default": "false",
              "attribute": "required",
              "type": {
                "text": "boolean"
              },
              "reflects": true,
              "inheritedFrom": {
                "name": "IgcInputBaseComponent",
                "module": "src/components/input/input-base.ts"
              }
            },
            {
              "kind": "field",
              "name": "defaultValue",
              "privacy": "public",
              "inheritedFrom": {
                "name": "IgcInputBaseComponent",
                "module": "src/components/input/input-base.ts"
              }
            },
            {
              "kind": "field",
              "name": "formAssociated",
              "type": {
                "text": "boolean"
              },
              "privacy": "public",
              "static": true,
              "readonly": true,
              "default": "true",
              "inheritedFrom": {
                "name": "IgcInputBaseComponent",
                "module": "src/components/input/input-base.ts"
              }
            },
            {
              "kind": "field",
              "name": "__internals",
              "type": {
                "text": "ElementInternals"
              },
              "privacy": "private",
              "inheritedFrom": {
                "name": "IgcInputBaseComponent",
                "module": "src/components/input/input-base.ts"
              }
            },
            {
              "kind": "field",
              "name": "_disabled",
              "type": {
                "text": "boolean"
              },
              "privacy": "protected",
              "default": "false",
              "inheritedFrom": {
                "name": "IgcInputBaseComponent",
                "module": "src/components/input/input-base.ts"
              }
            },
            {
              "kind": "field",
              "name": "_invalid",
              "type": {
                "text": "boolean"
              },
              "privacy": "protected",
              "default": "false",
              "inheritedFrom": {
                "name": "IgcInputBaseComponent",
                "module": "src/components/input/input-base.ts"
              }
            },
            {
              "kind": "field",
              "name": "_dirty",
              "type": {
                "text": "boolean"
              },
              "privacy": "protected",
              "default": "false",
              "inheritedFrom": {
                "name": "IgcInputBaseComponent",
                "module": "src/components/input/input-base.ts"
              }
            },
            {
              "kind": "field",
              "name": "_pristine",
              "type": {
                "text": "boolean"
              },
              "privacy": "protected",
              "default": "true",
              "inheritedFrom": {
                "name": "IgcInputBaseComponent",
                "module": "src/components/input/input-base.ts"
              }
            },
            {
              "kind": "field",
              "name": "name",
              "type": {
                "text": "string"
              },
              "privacy": "public",
              "description": "The name attribute of the control.",
              "attribute": "name",
              "reflects": true,
              "inheritedFrom": {
                "name": "IgcInputBaseComponent",
                "module": "src/components/input/input-base.ts"
              }
            },
            {
              "kind": "field",
              "name": "disabled",
              "privacy": "public",
              "description": "The disabled state of the component.",
              "default": "false",
              "attribute": "disabled",
              "type": {
                "text": "boolean"
              },
              "reflects": true,
              "inheritedFrom": {
                "name": "IgcInputBaseComponent",
                "module": "src/components/input/input-base.ts"
              }
            },
            {
              "kind": "field",
              "name": "invalid",
              "privacy": "public",
              "description": "Sets the control into invalid state (visual state only).",
              "default": "false",
              "attribute": "invalid",
              "type": {
                "text": "boolean"
              },
              "reflects": true,
              "inheritedFrom": {
                "name": "IgcInputBaseComponent",
                "module": "src/components/input/input-base.ts"
              }
            },
            {
              "kind": "field",
              "name": "form",
              "type": {
                "text": "HTMLFormElement | null"
              },
              "privacy": "public",
              "description": "Returns the HTMLFormElement associated with this element.",
              "readonly": true,
              "inheritedFrom": {
                "name": "IgcInputBaseComponent",
                "module": "src/components/input/input-base.ts"
              }
            },
            {
              "kind": "field",
              "name": "validity",
              "type": {
                "text": "ValidityState"
              },
              "privacy": "public",
              "description": "Returns a ValidityState object which represents the different validity states\nthe element can be in, with respect to constraint validation.",
              "readonly": true,
              "inheritedFrom": {
                "name": "IgcInputBaseComponent",
                "module": "src/components/input/input-base.ts"
              }
            },
            {
              "kind": "field",
              "name": "validationMessage",
              "type": {
                "text": "string"
              },
              "privacy": "public",
              "description": "A string containing the validation message of this element.",
              "readonly": true,
              "inheritedFrom": {
                "name": "IgcInputBaseComponent",
                "module": "src/components/input/input-base.ts"
              }
            },
            {
              "kind": "field",
              "name": "willValidate",
              "type": {
                "text": "boolean"
              },
              "privacy": "public",
              "description": "A boolean value which returns true if the element is a submittable element\nthat is a candidate for constraint validation.",
              "readonly": true,
              "inheritedFrom": {
                "name": "IgcInputBaseComponent",
                "module": "src/components/input/input-base.ts"
              }
            },
            {
              "kind": "method",
              "name": "_handleInvalid",
              "privacy": "private",
              "parameters": [
                {
                  "name": "event",
                  "type": {
                    "text": "Event"
                  }
                }
              ],
              "inheritedFrom": {
                "name": "IgcInputBaseComponent",
                "module": "src/components/input/input-base.ts"
              }
            },
            {
              "kind": "method",
              "name": "_setInvalidState",
              "privacy": "private",
              "return": {
                "type": {
                  "text": "void"
                }
              },
              "inheritedFrom": {
                "name": "IgcInputBaseComponent",
                "module": "src/components/input/input-base.ts"
              }
            },
            {
              "kind": "method",
              "name": "__runValidators",
              "privacy": "private",
              "inheritedFrom": {
                "name": "IgcInputBaseComponent",
                "module": "src/components/input/input-base.ts"
              }
            },
            {
              "kind": "method",
              "name": "_setDefaultValue",
              "privacy": "protected",
              "return": {
                "type": {
                  "text": "void"
                }
              },
              "parameters": [
                {
                  "name": "current",
                  "type": {
                    "text": "string | null"
                  }
                }
              ],
              "inheritedFrom": {
                "name": "IgcInputBaseComponent",
                "module": "src/components/input/input-base.ts"
              }
            },
            {
              "kind": "method",
              "name": "_restoreDefaultValue",
              "privacy": "protected",
              "return": {
                "type": {
                  "text": "void"
                }
              },
              "inheritedFrom": {
                "name": "IgcInputBaseComponent",
                "module": "src/components/input/input-base.ts"
              }
            },
            {
              "kind": "method",
              "name": "_validate",
              "privacy": "protected",
              "return": {
                "type": {
                  "text": "void"
                }
              },
              "parameters": [
                {
                  "name": "message",
                  "optional": true,
                  "type": {
                    "text": "string"
                  }
                }
              ],
              "inheritedFrom": {
                "name": "IgcInputBaseComponent",
                "module": "src/components/input/input-base.ts"
              }
            },
            {
              "kind": "method",
              "name": "_updateValidity",
              "privacy": "protected",
              "parameters": [
                {
                  "name": "error",
                  "optional": true,
                  "type": {
                    "text": "string"
                  }
                }
              ],
              "description": "Executes the component validators and updates the internal validity state.",
              "inheritedFrom": {
                "name": "IgcInputBaseComponent",
                "module": "src/components/input/input-base.ts"
              }
            },
            {
              "kind": "method",
              "name": "_setFormValue",
              "privacy": "protected",
              "return": {
                "type": {
                  "text": "void"
                }
              },
              "parameters": [
                {
                  "name": "value",
                  "type": {
                    "text": "FormValueType"
                  }
                },
                {
                  "name": "state",
                  "optional": true,
                  "type": {
                    "text": "FormValueType"
                  }
                }
              ],
              "inheritedFrom": {
                "name": "IgcInputBaseComponent",
                "module": "src/components/input/input-base.ts"
              }
            },
            {
              "kind": "method",
              "name": "formAssociatedCallback",
              "privacy": "protected",
              "return": {
                "type": {
                  "text": "void"
                }
              },
              "parameters": [
                {
                  "name": "_form",
                  "type": {
                    "text": "HTMLFormElement"
                  }
                }
              ],
              "inheritedFrom": {
                "name": "IgcInputBaseComponent",
                "module": "src/components/input/input-base.ts"
              }
            },
            {
              "kind": "method",
              "name": "formDisabledCallback",
              "privacy": "protected",
              "return": {
                "type": {
                  "text": "void"
                }
              },
              "parameters": [
                {
                  "name": "state",
                  "type": {
                    "text": "boolean"
                  }
                }
              ],
              "inheritedFrom": {
                "name": "IgcInputBaseComponent",
                "module": "src/components/input/input-base.ts"
              }
            },
            {
              "kind": "method",
              "name": "formResetCallback",
              "privacy": "protected",
              "return": {
                "type": {
                  "text": "void"
                }
              },
              "inheritedFrom": {
                "name": "IgcInputBaseComponent",
                "module": "src/components/input/input-base.ts"
              }
            },
            {
              "kind": "method",
              "name": "formStateRestoreCallback",
              "privacy": "protected",
              "return": {
                "type": {
                  "text": "void"
                }
              },
              "parameters": [
                {
                  "name": "_state",
                  "type": {
                    "text": "FormValueType"
                  }
                },
                {
                  "name": "_mode",
                  "type": {
                    "text": "FormRestoreMode"
                  }
                }
              ],
              "inheritedFrom": {
                "name": "IgcInputBaseComponent",
                "module": "src/components/input/input-base.ts"
              }
            },
            {
              "kind": "method",
              "name": "reportValidity",
              "privacy": "public",
              "description": "Checks for validity of the control and shows the browser message if it invalid.",
              "inheritedFrom": {
                "name": "IgcInputBaseComponent",
                "module": "src/components/input/input-base.ts"
              }
            },
            {
              "kind": "method",
              "name": "checkValidity",
              "privacy": "public",
              "description": "Checks for validity of the control and emits the invalid event if it invalid.",
              "inheritedFrom": {
                "name": "IgcInputBaseComponent",
                "module": "src/components/input/input-base.ts"
              }
            },
            {
              "kind": "method",
              "name": "setCustomValidity",
              "privacy": "public",
              "parameters": [
                {
                  "name": "message",
                  "type": {
                    "text": "string"
                  }
                }
              ],
              "description": "Sets a custom validation message for the control.\nAs long as `message` is not empty, the control is considered invalid.",
              "inheritedFrom": {
                "name": "IgcInputBaseComponent",
                "module": "src/components/input/input-base.ts"
              }
            },
            {
              "kind": "field",
              "name": "increment",
              "privacy": "private",
              "static": true,
              "readonly": true,
              "inheritedFrom": {
                "name": "IgcInputBaseComponent",
                "module": "src/components/input/input-base.ts"
              }
            },
            {
              "kind": "field",
              "name": "_themes",
              "privacy": "protected",
              "readonly": true,
              "inheritedFrom": {
                "name": "IgcInputBaseComponent",
                "module": "src/components/input/input-base.ts"
              }
            },
            {
              "kind": "field",
              "name": "inputId",
              "privacy": "protected",
              "default": "`input-${IgcInputBaseComponent.increment()}`",
              "inheritedFrom": {
                "name": "IgcInputBaseComponent",
                "module": "src/components/input/input-base.ts"
              }
            },
            {
              "kind": "field",
              "name": "input",
              "type": {
                "text": "HTMLInputElement"
              },
              "privacy": "protected",
              "inheritedFrom": {
                "name": "IgcInputBaseComponent",
                "module": "src/components/input/input-base.ts"
              }
            },
            {
              "kind": "field",
              "name": "_helperText",
              "type": {
                "text": "Array<HTMLElement>"
              },
              "privacy": "protected",
              "inheritedFrom": {
                "name": "IgcInputBaseComponent",
                "module": "src/components/input/input-base.ts"
              }
            },
            {
              "kind": "field",
              "name": "prefixes",
              "type": {
                "text": "Array<HTMLElement>"
              },
              "privacy": "protected",
              "inheritedFrom": {
                "name": "IgcInputBaseComponent",
                "module": "src/components/input/input-base.ts"
              }
            },
            {
              "kind": "field",
              "name": "suffixes",
              "type": {
                "text": "Array<HTMLElement>"
              },
              "privacy": "protected",
              "inheritedFrom": {
                "name": "IgcInputBaseComponent",
                "module": "src/components/input/input-base.ts"
              }
            },
            {
              "kind": "field",
              "name": "outlined",
              "type": {
                "text": "boolean"
              },
              "privacy": "public",
              "default": "false",
              "description": "Whether the control will have outlined appearance.",
              "attribute": "outlined",
              "reflects": true,
              "inheritedFrom": {
                "name": "IgcInputBaseComponent",
                "module": "src/components/input/input-base.ts"
              }
            },
            {
              "kind": "field",
              "name": "readOnly",
              "type": {
                "text": "boolean"
              },
              "privacy": "public",
              "default": "false",
              "description": "Makes the control a readonly field.",
              "attribute": "readonly",
              "reflects": true,
              "inheritedFrom": {
                "name": "IgcInputBaseComponent",
                "module": "src/components/input/input-base.ts"
              }
            },
            {
              "kind": "field",
              "name": "placeholder",
              "type": {
                "text": "string"
              },
              "privacy": "public",
              "description": "The placeholder attribute of the control.",
              "attribute": "placeholder",
              "inheritedFrom": {
                "name": "IgcInputBaseComponent",
                "module": "src/components/input/input-base.ts"
              }
            },
            {
              "kind": "field",
              "name": "label",
              "type": {
                "text": "string"
              },
              "privacy": "public",
              "description": "The label for the control.",
              "attribute": "label",
              "inheritedFrom": {
                "name": "IgcInputBaseComponent",
                "module": "src/components/input/input-base.ts"
              }
            },
            {
              "kind": "method",
              "name": "focus",
              "privacy": "public",
              "parameters": [
                {
                  "name": "options",
                  "optional": true,
                  "type": {
                    "text": "FocusOptions"
                  }
                }
              ],
              "description": "Sets focus on the control.",
              "inheritedFrom": {
                "name": "IgcInputBaseComponent",
                "module": "src/components/input/input-base.ts"
              }
            },
            {
              "kind": "method",
              "name": "blur",
              "privacy": "public",
              "description": "Removes focus from the control.",
              "inheritedFrom": {
                "name": "IgcInputBaseComponent",
                "module": "src/components/input/input-base.ts"
              }
            },
            {
              "kind": "method",
              "name": "renderValidatorContainer",
              "privacy": "protected",
              "return": {
                "type": {
                  "text": "TemplateResult"
                }
              },
              "inheritedFrom": {
                "name": "IgcInputBaseComponent",
                "module": "src/components/input/input-base.ts"
              }
            },
            {
              "kind": "method",
              "name": "resolvePartNames",
              "privacy": "protected",
              "parameters": [
                {
                  "name": "base",
                  "type": {
                    "text": "string"
                  }
                }
              ],
              "inheritedFrom": {
                "name": "IgcInputBaseComponent",
                "module": "src/components/input/input-base.ts"
              }
            },
            {
              "kind": "method",
              "name": "renderFileParts",
              "privacy": "protected",
              "return": {
                "type": {
                  "text": "TemplateResult | typeof nothing"
                }
              },
              "inheritedFrom": {
                "name": "IgcInputBaseComponent",
                "module": "src/components/input/input-base.ts"
              }
            },
            {
              "kind": "method",
              "name": "renderPrefix",
              "privacy": "private",
              "inheritedFrom": {
                "name": "IgcInputBaseComponent",
                "module": "src/components/input/input-base.ts"
              }
            },
            {
              "kind": "method",
              "name": "renderSuffix",
              "privacy": "private",
              "inheritedFrom": {
                "name": "IgcInputBaseComponent",
                "module": "src/components/input/input-base.ts"
              }
            },
            {
              "kind": "method",
              "name": "renderLabel",
              "privacy": "private",
              "inheritedFrom": {
                "name": "IgcInputBaseComponent",
                "module": "src/components/input/input-base.ts"
              }
            },
            {
              "kind": "method",
              "name": "renderMaterial",
              "privacy": "private",
              "inheritedFrom": {
                "name": "IgcInputBaseComponent",
                "module": "src/components/input/input-base.ts"
              }
            },
            {
              "kind": "method",
              "name": "renderStandard",
              "privacy": "private",
              "inheritedFrom": {
                "name": "IgcInputBaseComponent",
                "module": "src/components/input/input-base.ts"
              }
            }
          ],
          "events": [
            {
              "description": "Emitted when the control input receives user input.",
              "name": "igcInput"
            },
            {
              "description": "Emitted when the control's checked state changes.",
              "name": "igcChange"
            },
            {
              "type": {
                "text": "CustomEvent"
              },
              "inheritedFrom": {
                "name": "IgcInputBaseComponent",
                "module": "src/components/input/input-base.ts"
              }
            }
          ],
          "attributes": [
            {
              "name": "input-format",
              "type": {
                "text": "string"
              },
              "description": "The date format to apply on the input.",
              "fieldName": "inputFormat",
              "attribute": "input-format"
            },
            {
              "name": "value",
              "description": "The value of the input.",
              "fieldName": "value",
              "type": {
                "text": "Date | null"
              },
              "attribute": "value"
            },
            {
              "name": "min",
              "description": "The minimum value required for the input to remain valid.",
              "fieldName": "min",
              "attribute": "min",
              "type": {
                "text": "Date | null"
              }
            },
            {
              "name": "max",
              "description": "The maximum value required for the input to remain valid.",
              "fieldName": "max",
              "attribute": "max",
              "type": {
                "text": "Date | null"
              }
            },
            {
              "name": "display-format",
              "type": {
                "text": "string"
              },
              "description": "Format to display the value in when not editing.\nDefaults to the input format if not set.",
              "fieldName": "displayFormat",
              "attribute": "display-format"
            },
            {
              "name": "spin-loop",
              "type": {
                "text": "boolean"
              },
              "default": "true",
              "description": "Sets whether to loop over the currently spun segment.",
              "fieldName": "spinLoop",
              "attribute": "spin-loop"
            },
            {
              "name": "locale",
              "type": {
                "text": "string"
              },
              "default": "'en'",
              "description": "The locale settings used to display the value.",
              "fieldName": "locale",
              "attribute": "locale"
            },
            {
              "name": "prompt",
              "type": {
                "text": "string"
              },
              "description": "The prompt symbol to use for unfilled parts of the mask.",
              "fieldName": "prompt",
              "inheritedFrom": {
                "name": "IgcMaskInputBaseComponent",
                "module": "src/components/mask-input/mask-input-base.ts"
              }
            },
            {
              "name": "required",
              "description": "When set, makes the component a required field for validation.",
              "default": "false",
              "fieldName": "required",
              "attribute": "required",
              "type": {
                "text": "boolean"
              },
              "inheritedFrom": {
                "name": "IgcInputBaseComponent",
                "module": "src/components/input/input-base.ts"
              }
            },
            {
              "name": "name",
              "type": {
                "text": "string"
              },
              "description": "The name attribute of the control.",
              "fieldName": "name",
              "attribute": "name",
              "inheritedFrom": {
                "name": "IgcInputBaseComponent",
                "module": "src/components/input/input-base.ts"
              }
            },
            {
              "name": "disabled",
              "description": "The disabled state of the component.",
              "default": "false",
              "fieldName": "disabled",
              "attribute": "disabled",
              "type": {
                "text": "boolean"
              },
              "inheritedFrom": {
                "name": "IgcInputBaseComponent",
                "module": "src/components/input/input-base.ts"
              }
            },
            {
              "name": "invalid",
              "description": "Sets the control into invalid state (visual state only).",
              "default": "false",
              "fieldName": "invalid",
              "attribute": "invalid",
              "type": {
                "text": "boolean"
              },
              "inheritedFrom": {
                "name": "IgcInputBaseComponent",
                "module": "src/components/input/input-base.ts"
              }
            },
            {
              "name": "outlined",
              "type": {
                "text": "boolean"
              },
              "default": "false",
              "description": "Whether the control will have outlined appearance.",
              "fieldName": "outlined",
              "attribute": "outlined",
              "inheritedFrom": {
                "name": "IgcInputBaseComponent",
                "module": "src/components/input/input-base.ts"
              }
            },
            {
              "name": "readonly",
              "type": {
                "text": "boolean"
              },
              "default": "false",
              "description": "Makes the control a readonly field.",
              "fieldName": "readOnly",
              "attribute": "readonly",
              "inheritedFrom": {
                "name": "IgcInputBaseComponent",
                "module": "src/components/input/input-base.ts"
              }
            },
            {
              "name": "placeholder",
              "type": {
                "text": "string"
              },
              "description": "The placeholder attribute of the control.",
              "fieldName": "placeholder",
              "attribute": "placeholder",
              "inheritedFrom": {
                "name": "IgcInputBaseComponent",
                "module": "src/components/input/input-base.ts"
              }
            },
            {
              "name": "label",
              "type": {
                "text": "string"
              },
              "description": "The label for the control.",
              "fieldName": "label",
              "attribute": "label",
              "inheritedFrom": {
                "name": "IgcInputBaseComponent",
                "module": "src/components/input/input-base.ts"
              }
            }
          ],
          "mixins": [
            {
              "name": "EventEmitterMixin",
              "module": "/src/components/common/mixins/event-emitter.js"
            }
          ],
          "superclass": {
            "name": "IgcMaskInputBaseComponent",
            "module": "/src/components/mask-input/mask-input-base.js"
          },
          "tagName": "igc-date-time-input",
          "customElement": true
        }
      ],
      "exports": [
        {
          "kind": "js",
          "name": "default",
          "declaration": {
            "name": "IgcDateTimeInputComponent",
            "module": "src/components/date-time-input/date-time-input.ts"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "src/animations/presets/fade/index.ts",
      "declarations": [
        {
          "kind": "function",
          "name": "fadeIn",
          "parameters": [
            {
              "name": "options",
              "default": "baseOptions"
            }
          ]
        },
        {
          "kind": "function",
          "name": "fadeOut",
          "parameters": [
            {
              "name": "options",
              "default": "baseOptions"
            }
          ]
        }
      ],
      "exports": [
        {
          "kind": "js",
          "name": "fadeIn",
          "declaration": {
            "name": "fadeIn",
            "module": "src/animations/presets/fade/index.ts"
          }
        },
        {
          "kind": "js",
          "name": "fadeOut",
          "declaration": {
            "name": "fadeOut",
            "module": "src/animations/presets/fade/index.ts"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "src/components/dialog/dialog.ts",
      "declarations": [
        {
          "kind": "class",
          "description": "Represents a Dialog component.",
          "name": "IgcDialogComponent",
          "cssParts": [
            {
              "description": "The base wrapper of the dialog.",
              "name": "base"
            },
            {
              "description": "The title container.",
              "name": "title"
            },
            {
              "description": "The footer container.",
              "name": "footer"
            },
            {
              "description": "The overlay.",
              "name": "overlay"
            }
          ],
          "slots": [
            {
              "description": "Renders content inside the default slot.",
              "name": ""
            },
            {
              "description": "Renders the title of the dialog header.",
              "name": "title"
            },
            {
              "description": "Renders the message content of the dialog.",
              "name": "message"
            },
            {
              "description": "Renders the dialog footer.",
              "name": "footer"
            }
          ],
          "members": [
            {
              "kind": "field",
              "name": "tagName",
              "type": {
                "text": "string"
              },
              "privacy": "public",
              "static": true,
              "readonly": true,
              "default": "'igc-dialog'"
            },
            {
              "kind": "method",
              "name": "register",
              "privacy": "public",
              "static": true
            },
            {
              "kind": "field",
              "name": "increment",
              "privacy": "private",
              "static": true,
              "readonly": true
            },
            {
              "kind": "field",
              "name": "titleId",
              "privacy": "private",
              "default": "`title-${IgcDialogComponent.increment()}`"
            },
            {
              "kind": "field",
              "name": "dialogRef",
              "type": {
                "text": "Ref<HTMLDialogElement>"
              },
              "privacy": "private"
            },
            {
              "kind": "field",
              "name": "animationPlayer",
              "privacy": "private"
            },
            {
              "kind": "field",
              "name": "animating",
              "type": {
                "text": "boolean"
              },
              "privacy": "private",
              "default": "false",
              "description": "Backdrop animation helper."
            },
            {
              "kind": "field",
              "name": "dialog",
              "privacy": "private",
              "readonly": true
            },
            {
              "kind": "field",
              "name": "titleElements",
              "type": {
                "text": "Array<HTMLElement>"
              },
              "privacy": "private"
            },
            {
              "kind": "field",
              "name": "messageElements",
              "type": {
                "text": "Array<HTMLElement>"
              },
              "privacy": "private"
            },
            {
              "kind": "field",
              "name": "footerElements",
              "type": {
                "text": "Array<HTMLElement>"
              },
              "privacy": "private"
            },
            {
              "kind": "field",
              "name": "keepOpenOnEscape",
              "type": {
                "text": "boolean"
              },
              "privacy": "public",
              "default": "false",
              "description": "Whether the dialog should be kept open when pressing the 'ESCAPE' button.",
              "attribute": "keep-open-on-escape"
            },
            {
              "kind": "field",
              "name": "closeOnOutsideClick",
              "type": {
                "text": "boolean"
              },
              "privacy": "public",
              "default": "false",
              "description": "Whether the dialog should be closed when clicking outside of it.",
              "attribute": "close-on-outside-click"
            },
            {
              "kind": "field",
              "name": "hideDefaultAction",
              "type": {
                "text": "boolean"
              },
              "privacy": "public",
              "default": "false",
              "description": "Whether to hide the default action button for the dialog.\n\nWhen there is projected content in the `footer` slot this property\nhas no effect.",
              "attribute": "hide-default-action"
            },
            {
              "kind": "field",
              "name": "open",
              "type": {
                "text": "boolean"
              },
              "privacy": "public",
              "default": "false",
              "description": "Whether the dialog is opened.",
              "attribute": "open",
              "reflects": true
            },
            {
              "kind": "field",
              "name": "title",
              "type": {
                "text": "string"
              },
              "privacy": "public",
              "description": "Sets the title of the dialog.",
              "attribute": "title"
            },
            {
              "kind": "field",
              "name": "returnValue",
              "type": {
                "text": "string"
              },
              "privacy": "public",
              "description": "Sets the return value for the dialog."
            },
            {
              "kind": "method",
              "name": "handleOpenState",
              "privacy": "protected"
            },
            {
              "kind": "method",
              "name": "toggleAnimation",
              "privacy": "private",
              "parameters": [
                {
                  "name": "dir",
                  "type": {
                    "text": "'open' | 'close'"
                  }
                }
              ]
            },
            {
              "kind": "method",
              "name": "_hide",
              "privacy": "private",
              "parameters": [
                {
                  "name": "emitEvent",
                  "default": "false"
                }
              ]
            },
            {
              "kind": "method",
              "name": "show",
              "privacy": "public",
              "return": {
                "type": {
                  "text": "Promise<boolean>"
                }
              },
              "description": "Opens the dialog."
            },
            {
              "kind": "method",
              "name": "hide",
              "privacy": "public",
              "return": {
                "type": {
                  "text": "Promise<boolean>"
                }
              },
              "description": "Closes the dialog."
            },
            {
              "kind": "method",
              "name": "toggle",
              "privacy": "public",
              "return": {
                "type": {
                  "text": "Promise<boolean>"
                }
              },
              "description": "Toggles the open state of the dialog."
            },
            {
              "kind": "method",
              "name": "handleCancel",
              "privacy": "private",
              "parameters": [
                {
                  "name": "event",
                  "type": {
                    "text": "Event"
                  }
                }
              ]
            },
            {
              "kind": "method",
              "name": "handleClick",
              "privacy": "private",
              "parameters": [
                {
                  "name": "{ clientX, clientY, target }",
                  "type": {
                    "text": "PointerEvent"
                  }
                }
              ]
            },
            {
              "kind": "method",
              "name": "emitClosing",
              "privacy": "private",
              "return": {
                "type": {
                  "text": "boolean"
                }
              }
            },
            {
              "kind": "field",
              "name": "formSubmitHandler",
              "privacy": "protected"
            },
            {
              "kind": "method",
              "name": "handleContentChange",
              "privacy": "private"
            },
            {
              "kind": "method",
              "name": "addEventListener",
              "privacy": "public",
              "return": {
                "type": {
                  "text": "void"
                }
              },
              "parameters": [
                {
                  "name": "type",
                  "type": {
                    "text": "K"
                  }
                },
                {
                  "name": "listener",
                  "type": {
                    "text": "(this: HTMLElement, ev: M[K]) => any"
                  }
                },
                {
                  "name": "options",
                  "optional": true,
                  "type": {
                    "text": "boolean | AddEventListenerOptions"
                  }
                }
              ],
              "inheritedFrom": {
                "name": "EventEmitterMixin",
                "module": "src/components/common/mixins/event-emitter.ts"
              }
            },
            {
              "kind": "method",
              "name": "removeEventListener",
              "privacy": "public",
              "return": {
                "type": {
                  "text": "void"
                }
              },
              "parameters": [
                {
                  "name": "type",
                  "type": {
                    "text": "K"
                  }
                },
                {
                  "name": "listener",
                  "type": {
                    "text": "(this: HTMLElement, ev: M[K]) => any"
                  }
                },
                {
                  "name": "options",
                  "optional": true,
                  "type": {
                    "text": "boolean | EventListenerOptions"
                  }
                }
              ],
              "inheritedFrom": {
                "name": "EventEmitterMixin",
                "module": "src/components/common/mixins/event-emitter.ts"
              }
            },
            {
              "kind": "method",
              "name": "emitEvent",
              "privacy": "private",
              "return": {
                "type": {
                  "text": "boolean"
                }
              },
              "parameters": [
                {
                  "name": "type",
                  "type": {
                    "text": "K"
                  }
                },
                {
                  "name": "eventInitDict",
                  "optional": true,
                  "type": {
                    "text": "CustomEventInit<D>"
                  }
                }
              ],
              "inheritedFrom": {
                "name": "EventEmitterMixin",
                "module": "src/components/common/mixins/event-emitter.ts"
              }
            }
          ],
          "events": [
            {
              "description": "Emitter just before the dialog is closed.",
              "name": "igcClosing"
            },
            {
              "description": "Emitted after closing the dialog.",
              "name": "igcClosed"
            },
            {
              "type": {
                "text": "CustomEvent"
              },
              "inheritedFrom": {
                "name": "EventEmitterMixin",
                "module": "src/components/common/mixins/event-emitter.ts"
              }
            }
          ],
          "attributes": [
            {
              "name": "keep-open-on-escape",
              "type": {
                "text": "boolean"
              },
              "default": "false",
              "description": "Whether the dialog should be kept open when pressing the 'ESCAPE' button.",
              "fieldName": "keepOpenOnEscape",
              "attribute": "keep-open-on-escape"
            },
            {
              "name": "close-on-outside-click",
              "type": {
                "text": "boolean"
              },
              "default": "false",
              "description": "Whether the dialog should be closed when clicking outside of it.",
              "fieldName": "closeOnOutsideClick",
              "attribute": "close-on-outside-click"
            },
            {
              "name": "hide-default-action",
              "type": {
                "text": "boolean"
              },
              "default": "false",
              "description": "Whether to hide the default action button for the dialog.\n\nWhen there is projected content in the `footer` slot this property\nhas no effect.",
              "fieldName": "hideDefaultAction",
              "attribute": "hide-default-action"
            },
            {
              "name": "open",
              "type": {
                "text": "boolean"
              },
              "default": "false",
              "description": "Whether the dialog is opened.",
              "fieldName": "open",
              "attribute": "open"
            },
            {
              "name": "title",
              "type": {
                "text": "string"
              },
              "description": "Sets the title of the dialog.",
              "fieldName": "title",
              "attribute": "title"
            }
          ],
          "mixins": [
            {
              "name": "EventEmitterMixin",
              "module": "/src/components/common/mixins/event-emitter.js"
            }
          ],
          "superclass": {
            "name": "LitElement",
            "package": "lit"
          },
          "tagName": "igc-dialog",
          "customElement": true
        }
      ],
      "exports": [
        {
          "kind": "js",
          "name": "default",
          "declaration": {
            "name": "IgcDialogComponent",
            "module": "src/components/dialog/dialog.ts"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "src/components/focus-trap/focus-trap.ts",
      "declarations": [
        {
          "kind": "class",
          "description": "",
          "name": "IgcFocusTrapComponent",
          "slots": [
            {
              "description": "The content of the focus trap component",
              "name": ""
            }
          ],
          "members": [
            {
              "kind": "field",
              "name": "tagName",
              "type": {
                "text": "string"
              },
              "privacy": "public",
              "static": true,
              "readonly": true,
              "default": "'igc-focus-trap'"
            },
            {
              "kind": "method",
              "name": "register",
              "privacy": "public",
              "static": true
            },
            {
              "kind": "field",
              "name": "_focused",
              "type": {
                "text": "boolean"
              },
              "privacy": "protected",
              "default": "false"
            },
            {
              "kind": "field",
              "name": "disabled",
              "type": {
                "text": "boolean"
              },
              "privacy": "public",
              "default": "false",
              "description": "Whether to manage focus state for the slotted children.",
              "attribute": "disabled",
              "reflects": true
            },
            {
              "kind": "field",
              "name": "focused",
              "privacy": "public",
              "description": "Whether focus in currently inside the trap component.",
              "readonly": true
            },
            {
              "kind": "field",
              "name": "focusableElements",
              "privacy": "public",
              "description": "An array of focusable elements including elements in Shadow roots",
              "readonly": true
            },
            {
              "kind": "method",
              "name": "onFocusIn",
              "privacy": "private"
            },
            {
              "kind": "method",
              "name": "onFocusOut",
              "privacy": "private"
            },
            {
              "kind": "method",
              "name": "focusFirstElement",
              "privacy": "public"
            },
            {
              "kind": "method",
              "name": "focusLastElement",
              "privacy": "public"
            }
          ],
          "attributes": [
            {
              "name": "disabled",
              "type": {
                "text": "boolean"
              },
              "default": "false",
              "description": "Whether to manage focus state for the slotted children.",
              "fieldName": "disabled",
              "attribute": "disabled"
            }
          ],
          "superclass": {
            "name": "LitElement",
            "package": "lit"
          },
          "tagName": "igc-focus-trap",
          "customElement": true
        }
      ],
      "exports": [
        {
          "kind": "js",
          "name": "default",
          "declaration": {
            "name": "IgcFocusTrapComponent",
            "module": "src/components/focus-trap/focus-trap.ts"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "src/components/input/validators.ts",
      "declarations": [
        {
          "kind": "variable",
          "name": "stringValidators",
          "type": {
            "text": "Validator<IgcInputComponent>[]"
          },
          "default": "[ requiredValidator, minLengthValidator, maxLengthValidator, patternValidator, { key: 'typeMismatch', isValid: (host) => { switch (host.type) { case 'email': return emailValidator.isValid(host); case 'url': return urlValidator.isValid(host); default: return true; } }, message: (host) => (host.type === 'email' ? emailValidator.message : urlValidator.message) as string, }, ]"
        },
        {
          "kind": "variable",
          "name": "numberValidators",
          "type": {
            "text": "Validator<IgcInputComponent>[]"
          },
          "default": "[ requiredValidator, minValidator, maxValidator, stepValidator, ]"
        }
      ],
      "exports": [
        {
          "kind": "js",
          "name": "stringValidators",
          "declaration": {
            "name": "stringValidators",
            "module": "src/components/input/validators.ts"
          }
        },
        {
          "kind": "js",
          "name": "numberValidators",
          "declaration": {
            "name": "numberValidators",
            "module": "src/components/input/validators.ts"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "src/components/input/input.ts",
      "declarations": [
        {
          "kind": "class",
          "description": "",
          "name": "IgcInputComponent",
          "cssParts": [
            {
              "description": "The main wrapper that holds all main input elements.",
              "name": "container"
            },
            {
              "description": "The native input element.",
              "name": "input"
            },
            {
              "description": "The native label element.",
              "name": "label"
            },
            {
              "description": "The prefix wrapper.",
              "name": "prefix"
            },
            {
              "description": "The suffix wrapper.",
              "name": "suffix"
            },
            {
              "description": "The helper text wrapper.",
              "name": "helper-text"
            }
          ],
          "slots": [
            {
              "description": "Renders content before the input.",
              "name": "prefix"
            },
            {
              "description": "Renders content after input.",
              "name": "suffix"
            },
            {
              "description": "Renders content below the input.",
              "name": "helper-text"
            },
            {
              "description": "Renders content when the required validation fails.",
              "name": "value-missing"
            },
            {
              "description": "Renders content when the a type url/email input pattern validation fails.",
              "name": "type-mismatch"
            },
            {
              "description": "Renders content when the pattern validation fails.",
              "name": "pattern-mismatch"
            },
            {
              "description": "Renders content when the maxlength validation fails.",
              "name": "too-long"
            },
            {
              "description": "Renders content when the minlength validation fails.",
              "name": "too-short"
            },
            {
              "description": "Renders content when the max validation fails.",
              "name": "range-overflow"
            },
            {
              "description": "Renders content when the min validation fails.",
              "name": "range-underflow"
            },
            {
              "description": "Renders content when the step validation fails.",
              "name": "step-mismatch"
            },
            {
              "description": "Renders content when setCustomValidity(message) is set.",
              "name": "custom-error"
            },
            {
              "description": "Renders content when the component is in invalid state (validity.valid = false).",
              "name": "invalid"
            }
          ],
          "members": [
            {
              "kind": "field",
              "name": "tagName",
              "type": {
                "text": "string"
              },
              "privacy": "public",
              "static": true,
              "readonly": true,
              "default": "'igc-input'"
            },
            {
              "kind": "method",
              "name": "register",
              "privacy": "public",
              "static": true
            },
            {
              "kind": "field",
              "name": "_formValue",
              "type": {
                "text": "FormValue<unknown>"
              },
              "privacy": "protected",
              "inheritedFrom": {
                "name": "IgcInputBaseComponent",
                "module": "src/components/input/input-base.ts"
              },
              "readonly": true
            },
            {
              "kind": "field",
              "name": "__validators",
              "type": {
                "text": "Validator[]"
              },
              "privacy": "protected",
              "readonly": true,
              "inheritedFrom": {
                "name": "IgcInputBaseComponent",
                "module": "src/components/input/input-base.ts"
              }
            },
            {
              "kind": "field",
              "name": "_min",
              "type": {
                "text": "number | undefined"
              },
              "privacy": "private"
            },
            {
              "kind": "field",
              "name": "_max",
              "type": {
                "text": "number | undefined"
              },
              "privacy": "private"
            },
            {
              "kind": "field",
              "name": "_minLength",
              "type": {
                "text": "number | undefined"
              },
              "privacy": "private"
            },
            {
              "kind": "field",
              "name": "_maxLength",
              "type": {
                "text": "number | undefined"
              },
              "privacy": "private"
            },
            {
              "kind": "field",
              "name": "_pattern",
              "type": {
                "text": "string | undefined"
              },
              "privacy": "private"
            },
            {
              "kind": "field",
              "name": "_step",
              "type": {
                "text": "number | undefined"
              },
              "privacy": "private"
            },
            {
              "kind": "field",
              "name": "value",
              "type": {
                "text": "string | Date | null"
              },
              "privacy": "public",
              "description": "The value of the control.",
              "attribute": "value",
              "inheritedFrom": {
                "name": "IgcInputBaseComponent",
                "module": "src/components/input/input-base.ts"
              }
            },
            {
              "kind": "field",
              "name": "type",
              "type": {
                "text": "InputType"
              },
              "privacy": "public",
              "default": "'text'",
              "description": "The type attribute of the control.",
              "attribute": "type",
              "reflects": true,
              "expandedType": {
                "text": "'text' | 'email' | 'number' | 'password' | 'search' | 'tel' | 'url'"
              }
            },
            {
              "kind": "field",
              "name": "inputMode",
              "type": {
                "text": "string"
              },
              "privacy": "public",
              "description": "The input mode attribute of the control.\nSee [relevant MDN article](https://developer.mozilla.org/en-US/docs/Web/HTML/Global_attributes/inputmode)",
              "attribute": "inputmode"
            },
            {
              "kind": "field",
              "name": "pattern",
              "privacy": "public",
              "description": "The pattern attribute of the control.",
              "attribute": "pattern",
              "type": {
                "text": "string | undefined"
              }
            },
            {
              "kind": "field",
              "name": "minLength",
              "privacy": "public",
              "description": "The minimum string length required by the control.",
              "attribute": "minlength",
              "type": {
                "text": "number | undefined"
              }
            },
            {
              "kind": "field",
              "name": "maxLength",
              "privacy": "public",
              "description": "The maximum string length of the control.",
              "attribute": "maxlength",
              "type": {
                "text": "number | undefined"
              }
            },
            {
              "kind": "field",
              "name": "min",
              "privacy": "public",
              "description": "The min attribute of the control.",
              "attribute": "min",
              "type": {
                "text": "number | undefined"
              }
            },
            {
              "kind": "field",
              "name": "max",
              "privacy": "public",
              "description": "The max attribute of the control.",
              "attribute": "max",
              "type": {
                "text": "number | undefined"
              }
            },
            {
              "kind": "field",
              "name": "step",
              "privacy": "public",
              "description": "The step attribute of the control.",
              "attribute": "step",
              "type": {
                "text": "number | undefined"
              }
            },
            {
              "kind": "field",
              "name": "autofocus",
              "type": {
                "text": "boolean"
              },
              "privacy": "public",
              "description": "The autofocus attribute of the control.",
              "attribute": "autofocus"
            },
            {
              "kind": "field",
              "name": "autocomplete",
              "type": {
                "text": "string"
              },
              "privacy": "public",
              "description": "The autocomplete attribute of the control.",
              "attribute": "autocomplete"
            },
            {
              "kind": "field",
              "name": "validateOnly",
              "type": {
                "text": "boolean"
              },
              "privacy": "public",
              "default": "false",
              "description": "Enables validation rules to be evaluated without restricting user input. This applies to the `maxLength` property for\nstring-type inputs or allows spin buttons to exceed the predefined `min/max` limits for number-type inputs.",
              "attribute": "validate-only",
              "reflects": true
            },
            {
              "kind": "method",
              "name": "setRangeText",
              "privacy": "public",
              "parameters": [
                {
                  "name": "replacement",
                  "type": {
                    "text": "string"
                  }
                },
                {
                  "name": "start",
                  "type": {
                    "text": "number"
                  }
                },
                {
                  "name": "end",
                  "type": {
                    "text": "number"
                  }
                },
                {
                  "name": "selectMode",
                  "default": "'preserve'",
                  "type": {
                    "text": "RangeTextSelectMode"
                  }
                }
              ],
              "description": "Replaces the selected text in the input.",
              "inheritedFrom": {
                "name": "IgcInputBaseComponent",
                "module": "src/components/input/input-base.ts"
              }
            },
            {
              "kind": "method",
              "name": "select",
              "privacy": "public",
              "description": "Selects all text within the input."
            },
            {
              "kind": "method",
              "name": "stepUp",
              "privacy": "public",
              "parameters": [
                {
                  "name": "n",
                  "optional": true,
                  "type": {
                    "text": "number"
                  }
                }
              ],
              "description": "Increments the numeric value of the input by one or more steps."
            },
            {
              "kind": "method",
              "name": "stepDown",
              "privacy": "public",
              "parameters": [
                {
                  "name": "n",
                  "optional": true,
                  "type": {
                    "text": "number"
                  }
                }
              ],
              "description": "Decrements the numeric value of the input by one or more steps."
            },
            {
              "kind": "method",
              "name": "handleInput",
              "privacy": "private"
            },
            {
              "kind": "method",
              "name": "handleChange",
              "privacy": "private"
            },
            {
              "kind": "method",
              "name": "handleFocus",
              "privacy": "protected",
              "return": {
                "type": {
                  "text": "void"
                }
              }
            },
            {
              "kind": "method",
              "name": "handleBlur",
              "privacy": "protected",
              "return": {
                "type": {
                  "text": "void"
                }
              }
            },
            {
              "kind": "method",
              "name": "renderInput",
              "privacy": "protected",
              "return": {
                "type": {
                  "text": "TemplateResult"
                }
              },
              "inheritedFrom": {
                "name": "IgcInputBaseComponent",
                "module": "src/components/input/input-base.ts"
              }
            },
            {
              "kind": "field",
              "name": "_required",
              "type": {
                "text": "boolean"
              },
              "privacy": "protected",
              "default": "false",
              "inheritedFrom": {
                "name": "IgcInputBaseComponent",
                "module": "src/components/input/input-base.ts"
              }
            },
            {
              "kind": "field",
              "name": "required",
              "privacy": "public",
              "description": "When set, makes the component a required field for validation.",
              "default": "false",
              "attribute": "required",
              "type": {
                "text": "boolean"
              },
              "reflects": true,
              "inheritedFrom": {
                "name": "IgcInputBaseComponent",
                "module": "src/components/input/input-base.ts"
              }
            },
            {
              "kind": "field",
              "name": "defaultValue",
              "privacy": "public",
              "inheritedFrom": {
                "name": "IgcInputBaseComponent",
                "module": "src/components/input/input-base.ts"
              }
            },
            {
              "kind": "field",
              "name": "formAssociated",
              "type": {
                "text": "boolean"
              },
              "privacy": "public",
              "static": true,
              "readonly": true,
              "default": "true",
              "inheritedFrom": {
                "name": "IgcInputBaseComponent",
                "module": "src/components/input/input-base.ts"
              }
            },
            {
              "kind": "field",
              "name": "__internals",
              "type": {
                "text": "ElementInternals"
              },
              "privacy": "private",
              "inheritedFrom": {
                "name": "IgcInputBaseComponent",
                "module": "src/components/input/input-base.ts"
              }
            },
            {
              "kind": "field",
              "name": "_disabled",
              "type": {
                "text": "boolean"
              },
              "privacy": "protected",
              "default": "false",
              "inheritedFrom": {
                "name": "IgcInputBaseComponent",
                "module": "src/components/input/input-base.ts"
              }
            },
            {
              "kind": "field",
              "name": "_invalid",
              "type": {
                "text": "boolean"
              },
              "privacy": "protected",
              "default": "false",
              "inheritedFrom": {
                "name": "IgcInputBaseComponent",
                "module": "src/components/input/input-base.ts"
              }
            },
            {
              "kind": "field",
              "name": "_dirty",
              "type": {
                "text": "boolean"
              },
              "privacy": "protected",
              "default": "false",
              "inheritedFrom": {
                "name": "IgcInputBaseComponent",
                "module": "src/components/input/input-base.ts"
              }
            },
            {
              "kind": "field",
              "name": "_pristine",
              "type": {
                "text": "boolean"
              },
              "privacy": "protected",
              "default": "true",
              "inheritedFrom": {
                "name": "IgcInputBaseComponent",
                "module": "src/components/input/input-base.ts"
              }
            },
            {
              "kind": "field",
              "name": "name",
              "type": {
                "text": "string"
              },
              "privacy": "public",
              "description": "The name attribute of the control.",
              "attribute": "name",
              "reflects": true,
              "inheritedFrom": {
                "name": "IgcInputBaseComponent",
                "module": "src/components/input/input-base.ts"
              }
            },
            {
              "kind": "field",
              "name": "disabled",
              "privacy": "public",
              "description": "The disabled state of the component.",
              "default": "false",
              "attribute": "disabled",
              "type": {
                "text": "boolean"
              },
              "reflects": true,
              "inheritedFrom": {
                "name": "IgcInputBaseComponent",
                "module": "src/components/input/input-base.ts"
              }
            },
            {
              "kind": "field",
              "name": "invalid",
              "privacy": "public",
              "description": "Sets the control into invalid state (visual state only).",
              "default": "false",
              "attribute": "invalid",
              "type": {
                "text": "boolean"
              },
              "reflects": true,
              "inheritedFrom": {
                "name": "IgcInputBaseComponent",
                "module": "src/components/input/input-base.ts"
              }
            },
            {
              "kind": "field",
              "name": "form",
              "type": {
                "text": "HTMLFormElement | null"
              },
              "privacy": "public",
              "description": "Returns the HTMLFormElement associated with this element.",
              "readonly": true,
              "inheritedFrom": {
                "name": "IgcInputBaseComponent",
                "module": "src/components/input/input-base.ts"
              }
            },
            {
              "kind": "field",
              "name": "validity",
              "type": {
                "text": "ValidityState"
              },
              "privacy": "public",
              "description": "Returns a ValidityState object which represents the different validity states\nthe element can be in, with respect to constraint validation.",
              "readonly": true,
              "inheritedFrom": {
                "name": "IgcInputBaseComponent",
                "module": "src/components/input/input-base.ts"
              }
            },
            {
              "kind": "field",
              "name": "validationMessage",
              "type": {
                "text": "string"
              },
              "privacy": "public",
              "description": "A string containing the validation message of this element.",
              "readonly": true,
              "inheritedFrom": {
                "name": "IgcInputBaseComponent",
                "module": "src/components/input/input-base.ts"
              }
            },
            {
              "kind": "field",
              "name": "willValidate",
              "type": {
                "text": "boolean"
              },
              "privacy": "public",
              "description": "A boolean value which returns true if the element is a submittable element\nthat is a candidate for constraint validation.",
              "readonly": true,
              "inheritedFrom": {
                "name": "IgcInputBaseComponent",
                "module": "src/components/input/input-base.ts"
              }
            },
            {
              "kind": "method",
              "name": "_handleInvalid",
              "privacy": "private",
              "parameters": [
                {
                  "name": "event",
                  "type": {
                    "text": "Event"
                  }
                }
              ],
              "inheritedFrom": {
                "name": "IgcInputBaseComponent",
                "module": "src/components/input/input-base.ts"
              }
            },
            {
              "kind": "method",
              "name": "_setInvalidState",
              "privacy": "private",
              "return": {
                "type": {
                  "text": "void"
                }
              },
              "inheritedFrom": {
                "name": "IgcInputBaseComponent",
                "module": "src/components/input/input-base.ts"
              }
            },
            {
              "kind": "method",
              "name": "__runValidators",
              "privacy": "private",
              "inheritedFrom": {
                "name": "IgcInputBaseComponent",
                "module": "src/components/input/input-base.ts"
              }
            },
            {
              "kind": "method",
              "name": "_setDefaultValue",
              "privacy": "protected",
              "return": {
                "type": {
                  "text": "void"
                }
              },
              "parameters": [
                {
                  "name": "current",
                  "type": {
                    "text": "string | null"
                  }
                }
              ],
              "inheritedFrom": {
                "name": "IgcInputBaseComponent",
                "module": "src/components/input/input-base.ts"
              }
            },
            {
              "kind": "method",
              "name": "_restoreDefaultValue",
              "privacy": "protected",
              "return": {
                "type": {
                  "text": "void"
                }
              },
              "inheritedFrom": {
                "name": "IgcInputBaseComponent",
                "module": "src/components/input/input-base.ts"
              }
            },
            {
              "kind": "method",
              "name": "_validate",
              "privacy": "protected",
              "return": {
                "type": {
                  "text": "void"
                }
              },
              "parameters": [
                {
                  "name": "message",
                  "optional": true,
                  "type": {
                    "text": "string"
                  }
                }
              ],
              "inheritedFrom": {
                "name": "IgcInputBaseComponent",
                "module": "src/components/input/input-base.ts"
              }
            },
            {
              "kind": "method",
              "name": "_updateValidity",
              "privacy": "protected",
              "parameters": [
                {
                  "name": "error",
                  "optional": true,
                  "type": {
                    "text": "string"
                  }
                }
              ],
              "description": "Executes the component validators and updates the internal validity state.",
              "inheritedFrom": {
                "name": "IgcInputBaseComponent",
                "module": "src/components/input/input-base.ts"
              }
            },
            {
              "kind": "method",
              "name": "_setFormValue",
              "privacy": "protected",
              "return": {
                "type": {
                  "text": "void"
                }
              },
              "parameters": [
                {
                  "name": "value",
                  "type": {
                    "text": "FormValueType"
                  }
                },
                {
                  "name": "state",
                  "optional": true,
                  "type": {
                    "text": "FormValueType"
                  }
                }
              ],
              "inheritedFrom": {
                "name": "IgcInputBaseComponent",
                "module": "src/components/input/input-base.ts"
              }
            },
            {
              "kind": "method",
              "name": "formAssociatedCallback",
              "privacy": "protected",
              "return": {
                "type": {
                  "text": "void"
                }
              },
              "parameters": [
                {
                  "name": "_form",
                  "type": {
                    "text": "HTMLFormElement"
                  }
                }
              ],
              "inheritedFrom": {
                "name": "IgcInputBaseComponent",
                "module": "src/components/input/input-base.ts"
              }
            },
            {
              "kind": "method",
              "name": "formDisabledCallback",
              "privacy": "protected",
              "return": {
                "type": {
                  "text": "void"
                }
              },
              "parameters": [
                {
                  "name": "state",
                  "type": {
                    "text": "boolean"
                  }
                }
              ],
              "inheritedFrom": {
                "name": "IgcInputBaseComponent",
                "module": "src/components/input/input-base.ts"
              }
            },
            {
              "kind": "method",
              "name": "formResetCallback",
              "privacy": "protected",
              "return": {
                "type": {
                  "text": "void"
                }
              },
              "inheritedFrom": {
                "name": "IgcInputBaseComponent",
                "module": "src/components/input/input-base.ts"
              }
            },
            {
              "kind": "method",
              "name": "formStateRestoreCallback",
              "privacy": "protected",
              "return": {
                "type": {
                  "text": "void"
                }
              },
              "parameters": [
                {
                  "name": "_state",
                  "type": {
                    "text": "FormValueType"
                  }
                },
                {
                  "name": "_mode",
                  "type": {
                    "text": "FormRestoreMode"
                  }
                }
              ],
              "inheritedFrom": {
                "name": "IgcInputBaseComponent",
                "module": "src/components/input/input-base.ts"
              }
            },
            {
              "kind": "method",
              "name": "reportValidity",
              "privacy": "public",
              "description": "Checks for validity of the control and shows the browser message if it invalid.",
              "inheritedFrom": {
                "name": "IgcInputBaseComponent",
                "module": "src/components/input/input-base.ts"
              }
            },
            {
              "kind": "method",
              "name": "checkValidity",
              "privacy": "public",
              "description": "Checks for validity of the control and emits the invalid event if it invalid.",
              "inheritedFrom": {
                "name": "IgcInputBaseComponent",
                "module": "src/components/input/input-base.ts"
              }
            },
            {
              "kind": "method",
              "name": "setCustomValidity",
              "privacy": "public",
              "parameters": [
                {
                  "name": "message",
                  "type": {
                    "text": "string"
                  }
                }
              ],
              "description": "Sets a custom validation message for the control.\nAs long as `message` is not empty, the control is considered invalid.",
              "inheritedFrom": {
                "name": "IgcInputBaseComponent",
                "module": "src/components/input/input-base.ts"
              }
            },
            {
              "kind": "method",
              "name": "addEventListener",
              "privacy": "public",
              "return": {
                "type": {
                  "text": "void"
                }
              },
              "parameters": [
                {
                  "name": "type",
                  "type": {
                    "text": "K"
                  }
                },
                {
                  "name": "listener",
                  "type": {
                    "text": "(this: HTMLElement, ev: M[K]) => any"
                  }
                },
                {
                  "name": "options",
                  "optional": true,
                  "type": {
                    "text": "boolean | AddEventListenerOptions"
                  }
                }
              ],
              "inheritedFrom": {
                "name": "IgcInputBaseComponent",
                "module": "src/components/input/input-base.ts"
              }
            },
            {
              "kind": "method",
              "name": "removeEventListener",
              "privacy": "public",
              "return": {
                "type": {
                  "text": "void"
                }
              },
              "parameters": [
                {
                  "name": "type",
                  "type": {
                    "text": "K"
                  }
                },
                {
                  "name": "listener",
                  "type": {
                    "text": "(this: HTMLElement, ev: M[K]) => any"
                  }
                },
                {
                  "name": "options",
                  "optional": true,
                  "type": {
                    "text": "boolean | EventListenerOptions"
                  }
                }
              ],
              "inheritedFrom": {
                "name": "IgcInputBaseComponent",
                "module": "src/components/input/input-base.ts"
              }
            },
            {
              "kind": "method",
              "name": "emitEvent",
              "privacy": "private",
              "return": {
                "type": {
                  "text": "boolean"
                }
              },
              "parameters": [
                {
                  "name": "type",
                  "type": {
                    "text": "K"
                  }
                },
                {
                  "name": "eventInitDict",
                  "optional": true,
                  "type": {
                    "text": "CustomEventInit<D>"
                  }
                }
              ],
              "inheritedFrom": {
                "name": "IgcInputBaseComponent",
                "module": "src/components/input/input-base.ts"
              }
            },
            {
              "kind": "field",
              "name": "increment",
              "privacy": "private",
              "static": true,
              "readonly": true,
              "inheritedFrom": {
                "name": "IgcInputBaseComponent",
                "module": "src/components/input/input-base.ts"
              }
            },
            {
              "kind": "field",
              "name": "_themes",
              "privacy": "protected",
              "readonly": true,
              "inheritedFrom": {
                "name": "IgcInputBaseComponent",
                "module": "src/components/input/input-base.ts"
              }
            },
            {
              "kind": "field",
              "name": "inputId",
              "privacy": "protected",
              "default": "`input-${IgcInputBaseComponent.increment()}`",
              "inheritedFrom": {
                "name": "IgcInputBaseComponent",
                "module": "src/components/input/input-base.ts"
              }
            },
            {
              "kind": "field",
              "name": "input",
              "type": {
                "text": "HTMLInputElement"
              },
              "privacy": "protected",
              "inheritedFrom": {
                "name": "IgcInputBaseComponent",
                "module": "src/components/input/input-base.ts"
              }
            },
            {
              "kind": "field",
              "name": "_helperText",
              "type": {
                "text": "Array<HTMLElement>"
              },
              "privacy": "protected",
              "inheritedFrom": {
                "name": "IgcInputBaseComponent",
                "module": "src/components/input/input-base.ts"
              }
            },
            {
              "kind": "field",
              "name": "prefixes",
              "type": {
                "text": "Array<HTMLElement>"
              },
              "privacy": "protected",
              "inheritedFrom": {
                "name": "IgcInputBaseComponent",
                "module": "src/components/input/input-base.ts"
              }
            },
            {
              "kind": "field",
              "name": "suffixes",
              "type": {
                "text": "Array<HTMLElement>"
              },
              "privacy": "protected",
              "inheritedFrom": {
                "name": "IgcInputBaseComponent",
                "module": "src/components/input/input-base.ts"
              }
            },
            {
              "kind": "field",
              "name": "outlined",
              "type": {
                "text": "boolean"
              },
              "privacy": "public",
              "default": "false",
              "description": "Whether the control will have outlined appearance.",
              "attribute": "outlined",
              "reflects": true,
              "inheritedFrom": {
                "name": "IgcInputBaseComponent",
                "module": "src/components/input/input-base.ts"
              }
            },
            {
              "kind": "field",
              "name": "readOnly",
              "type": {
                "text": "boolean"
              },
              "privacy": "public",
              "default": "false",
              "description": "Makes the control a readonly field.",
              "attribute": "readonly",
              "reflects": true,
              "inheritedFrom": {
                "name": "IgcInputBaseComponent",
                "module": "src/components/input/input-base.ts"
              }
            },
            {
              "kind": "field",
              "name": "placeholder",
              "type": {
                "text": "string"
              },
              "privacy": "public",
              "description": "The placeholder attribute of the control.",
              "attribute": "placeholder",
              "inheritedFrom": {
                "name": "IgcInputBaseComponent",
                "module": "src/components/input/input-base.ts"
              }
            },
            {
              "kind": "field",
              "name": "label",
              "type": {
                "text": "string"
              },
              "privacy": "public",
              "description": "The label for the control.",
              "attribute": "label",
              "inheritedFrom": {
                "name": "IgcInputBaseComponent",
                "module": "src/components/input/input-base.ts"
              }
            },
            {
              "kind": "method",
              "name": "focus",
              "privacy": "public",
              "parameters": [
                {
                  "name": "options",
                  "optional": true,
                  "type": {
                    "text": "FocusOptions"
                  }
                }
              ],
              "description": "Sets focus on the control.",
              "inheritedFrom": {
                "name": "IgcInputBaseComponent",
                "module": "src/components/input/input-base.ts"
              }
            },
            {
              "kind": "method",
              "name": "blur",
              "privacy": "public",
              "description": "Removes focus from the control.",
              "inheritedFrom": {
                "name": "IgcInputBaseComponent",
                "module": "src/components/input/input-base.ts"
              }
            },
            {
              "kind": "method",
              "name": "renderValidatorContainer",
              "privacy": "protected",
              "return": {
                "type": {
                  "text": "TemplateResult"
                }
              },
              "inheritedFrom": {
                "name": "IgcInputBaseComponent",
                "module": "src/components/input/input-base.ts"
              }
            },
            {
              "kind": "method",
              "name": "resolvePartNames",
              "privacy": "protected",
              "parameters": [
                {
                  "name": "base",
                  "type": {
                    "text": "string"
                  }
                }
              ],
              "inheritedFrom": {
                "name": "IgcInputBaseComponent",
                "module": "src/components/input/input-base.ts"
              }
            },
            {
              "kind": "method",
              "name": "renderFileParts",
              "privacy": "protected",
              "return": {
                "type": {
                  "text": "TemplateResult | typeof nothing"
                }
              },
              "inheritedFrom": {
                "name": "IgcInputBaseComponent",
                "module": "src/components/input/input-base.ts"
              }
            },
            {
              "kind": "method",
              "name": "setSelectionRange",
              "privacy": "public",
              "parameters": [
                {
                  "name": "start",
                  "type": {
                    "text": "number"
                  }
                },
                {
                  "name": "end",
                  "type": {
                    "text": "number"
                  }
                },
                {
                  "name": "direction",
                  "default": "'none'",
                  "type": {
                    "text": "SelectionRangeDirection"
                  }
                }
              ],
              "description": "Sets the text selection range of the control",
              "inheritedFrom": {
                "name": "IgcInputBaseComponent",
                "module": "src/components/input/input-base.ts"
              }
            },
            {
              "kind": "method",
              "name": "renderPrefix",
              "privacy": "private",
              "inheritedFrom": {
                "name": "IgcInputBaseComponent",
                "module": "src/components/input/input-base.ts"
              }
            },
            {
              "kind": "method",
              "name": "renderSuffix",
              "privacy": "private",
              "inheritedFrom": {
                "name": "IgcInputBaseComponent",
                "module": "src/components/input/input-base.ts"
              }
            },
            {
              "kind": "method",
              "name": "renderLabel",
              "privacy": "private",
              "inheritedFrom": {
                "name": "IgcInputBaseComponent",
                "module": "src/components/input/input-base.ts"
              }
            },
            {
              "kind": "method",
              "name": "renderMaterial",
              "privacy": "private",
              "inheritedFrom": {
                "name": "IgcInputBaseComponent",
                "module": "src/components/input/input-base.ts"
              }
            },
            {
              "kind": "method",
              "name": "renderStandard",
              "privacy": "private",
              "inheritedFrom": {
                "name": "IgcInputBaseComponent",
                "module": "src/components/input/input-base.ts"
              }
            }
          ],
          "events": [
            {
              "description": "Emitted when the control input receives user input.",
              "name": "igcInput"
            },
            {
              "description": "Emitted when the control's checked state changes.",
              "name": "igcChange"
            },
            {
              "type": {
                "text": "CustomEvent"
              },
              "inheritedFrom": {
                "name": "IgcInputBaseComponent",
                "module": "src/components/input/input-base.ts"
              }
            }
          ],
          "attributes": [
            {
              "name": "value",
              "description": "The value of the control.",
              "fieldName": "value",
              "attribute": "value",
              "type": {
                "text": "string"
              }
            },
            {
              "name": "type",
              "type": {
                "text": "InputType"
              },
              "default": "'text'",
              "description": "The type attribute of the control.",
              "fieldName": "type",
              "attribute": "type",
              "expandedType": {
                "text": "'text' | 'email' | 'number' | 'password' | 'search' | 'tel' | 'url'"
              }
            },
            {
              "name": "inputmode",
              "type": {
                "text": "string"
              },
              "description": "The input mode attribute of the control.\nSee [relevant MDN article](https://developer.mozilla.org/en-US/docs/Web/HTML/Global_attributes/inputmode)",
              "fieldName": "inputMode",
              "attribute": "inputmode"
            },
            {
              "name": "pattern",
              "description": "The pattern attribute of the control.",
              "fieldName": "pattern",
              "attribute": "pattern",
              "type": {
                "text": "string | undefined"
              }
            },
            {
              "name": "minlength",
              "description": "The minimum string length required by the control.",
              "fieldName": "minLength",
              "attribute": "minlength",
              "type": {
                "text": "number | undefined"
              }
            },
            {
              "name": "maxlength",
              "description": "The maximum string length of the control.",
              "fieldName": "maxLength",
              "attribute": "maxlength",
              "type": {
                "text": "number | undefined"
              }
            },
            {
              "name": "min",
              "description": "The min attribute of the control.",
              "fieldName": "min",
              "attribute": "min",
              "type": {
                "text": "number | undefined"
              }
            },
            {
              "name": "max",
              "description": "The max attribute of the control.",
              "fieldName": "max",
              "attribute": "max",
              "type": {
                "text": "number | undefined"
              }
            },
            {
              "name": "step",
              "description": "The step attribute of the control.",
              "fieldName": "step",
              "attribute": "step",
              "type": {
                "text": "number | undefined"
              }
            },
            {
              "name": "autofocus",
              "type": {
                "text": "boolean"
              },
              "description": "The autofocus attribute of the control.",
              "fieldName": "autofocus",
              "attribute": "autofocus"
            },
            {
              "name": "autocomplete",
              "type": {
                "text": "string"
              },
              "description": "The autocomplete attribute of the control.",
              "fieldName": "autocomplete",
              "attribute": "autocomplete"
            },
            {
              "name": "validate-only",
              "type": {
                "text": "boolean"
              },
              "default": "false",
              "description": "Enables validation rules to be evaluated without restricting user input. This applies to the `maxLength` property for\nstring-type inputs or allows spin buttons to exceed the predefined `min/max` limits for number-type inputs.",
              "fieldName": "validateOnly",
              "attribute": "validate-only"
            },
            {
              "name": "required",
              "description": "When set, makes the component a required field for validation.",
              "default": "false",
              "fieldName": "required",
              "attribute": "required",
              "type": {
                "text": "boolean"
              },
              "inheritedFrom": {
                "name": "IgcInputBaseComponent",
                "module": "src/components/input/input-base.ts"
              }
            },
            {
              "name": "name",
              "type": {
                "text": "string"
              },
              "description": "The name attribute of the control.",
              "fieldName": "name",
              "attribute": "name",
              "inheritedFrom": {
                "name": "IgcInputBaseComponent",
                "module": "src/components/input/input-base.ts"
              }
            },
            {
              "name": "disabled",
              "description": "The disabled state of the component.",
              "default": "false",
              "fieldName": "disabled",
              "attribute": "disabled",
              "type": {
                "text": "boolean"
              },
              "inheritedFrom": {
                "name": "IgcInputBaseComponent",
                "module": "src/components/input/input-base.ts"
              }
            },
            {
              "name": "invalid",
              "description": "Sets the control into invalid state (visual state only).",
              "default": "false",
              "fieldName": "invalid",
              "attribute": "invalid",
              "type": {
                "text": "boolean"
              },
              "inheritedFrom": {
                "name": "IgcInputBaseComponent",
                "module": "src/components/input/input-base.ts"
              }
            },
            {
              "name": "outlined",
              "type": {
                "text": "boolean"
              },
              "default": "false",
              "description": "Whether the control will have outlined appearance.",
              "fieldName": "outlined",
              "attribute": "outlined",
              "inheritedFrom": {
                "name": "IgcInputBaseComponent",
                "module": "src/components/input/input-base.ts"
              }
            },
            {
              "name": "readonly",
              "type": {
                "text": "boolean"
              },
              "default": "false",
              "description": "Makes the control a readonly field.",
              "fieldName": "readOnly",
              "attribute": "readonly",
              "inheritedFrom": {
                "name": "IgcInputBaseComponent",
                "module": "src/components/input/input-base.ts"
              }
            },
            {
              "name": "placeholder",
              "type": {
                "text": "string"
              },
              "description": "The placeholder attribute of the control.",
              "fieldName": "placeholder",
              "attribute": "placeholder",
              "inheritedFrom": {
                "name": "IgcInputBaseComponent",
                "module": "src/components/input/input-base.ts"
              }
            },
            {
              "name": "label",
              "type": {
                "text": "string"
              },
              "description": "The label for the control.",
              "fieldName": "label",
              "attribute": "label",
              "inheritedFrom": {
                "name": "IgcInputBaseComponent",
                "module": "src/components/input/input-base.ts"
              }
            }
          ],
          "superclass": {
            "name": "IgcInputBaseComponent",
            "module": "/src/components/input/input-base.js"
          },
          "tagName": "igc-input",
          "customElement": true
        }
      ],
      "exports": [
        {
          "kind": "js",
          "name": "default",
          "declaration": {
            "name": "IgcInputComponent",
            "module": "src/components/input/input.ts"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "src/components/popover/popover.ts",
      "declarations": [
        {
          "kind": "class",
          "description": "",
          "name": "IgcPopoverComponent",
          "cssParts": [
            {
              "description": "The container wrapping the slotted content in the popover.",
              "name": "container"
            }
          ],
          "slots": [
            {
              "description": "Content of the popover.",
              "name": ""
            },
            {
              "description": "The element the popover will be anchored to.",
              "name": "anchor"
            }
          ],
          "members": [
            {
              "kind": "field",
              "name": "tagName",
              "type": {
                "text": "string"
              },
              "privacy": "public",
              "static": true,
              "readonly": true,
              "default": "'igc-popover'"
            },
            {
              "kind": "method",
              "name": "register",
              "privacy": "public",
              "static": true
            },
            {
              "kind": "field",
              "name": "dispose",
              "type": {
                "text": "ReturnType<typeof autoUpdate> | undefined"
              },
              "privacy": "private"
            },
            {
              "kind": "field",
              "name": "target",
              "type": {
                "text": "Element | undefined"
              },
              "privacy": "private"
            },
            {
              "kind": "field",
              "name": "_container",
              "type": {
                "text": "HTMLElement"
              },
              "privacy": "private"
            },
            {
              "kind": "field",
              "name": "_anchors",
              "type": {
                "text": "HTMLElement[]"
              },
              "privacy": "private"
            },
            {
              "kind": "field",
              "name": "anchor",
              "type": {
                "text": "Element | string | undefined"
              },
              "privacy": "public",
              "description": "Pass an IDREF or an DOM element reference to use as the\nanchor target for the floating element.",
              "attribute": "anchor"
            },
            {
              "kind": "field",
              "name": "arrow",
              "type": {
                "text": "HTMLElement | null"
              },
              "privacy": "public",
              "default": "null",
              "description": "Element to render as an \"arrow\" element for the current popover."
            },
            {
              "kind": "field",
              "name": "arrowOffset",
              "type": {
                "text": "number"
              },
              "privacy": "public",
              "default": "0",
              "description": "Additional offset to apply to the arrow element if enabled.",
              "attribute": "arrow-offset"
            },
            {
              "kind": "field",
              "name": "inline",
              "type": {
                "text": "boolean"
              },
              "privacy": "public",
              "default": "false",
              "description": "Improves positioning for inline reference elements that span over multiple lines.\nUseful for tooltips or similar components.",
              "attribute": "inline",
              "reflects": true
            },
            {
              "kind": "field",
              "name": "flip",
              "type": {
                "text": "boolean"
              },
              "privacy": "public",
              "default": "false",
              "description": "When enabled this changes the placement of the floating element in order to keep it\nin view along the main axis.",
              "attribute": "flip",
              "reflects": true
            },
            {
              "kind": "field",
              "name": "offset",
              "type": {
                "text": "number"
              },
              "privacy": "public",
              "default": "0",
              "description": "Placement modifier which translates the floating element along the main axis.",
              "attribute": "offset"
            },
            {
              "kind": "field",
              "name": "open",
              "type": {
                "text": "boolean"
              },
              "privacy": "public",
              "default": "false",
              "description": "The visibility state of the popover component.",
              "attribute": "open",
              "reflects": true
            },
            {
              "kind": "field",
              "name": "placement",
              "type": {
                "text": "PopoverPlacement"
              },
              "privacy": "public",
              "default": "'bottom-start'",
              "description": "Where to place the floating element relative to the parent anchor element.",
              "attribute": "placement",
              "expandedType": {
                "text": "'top' | 'top-start' | 'top-end' | 'bottom' | 'bottom-start' | 'bottom-end' | 'right' | 'right-start' | 'right-end' | 'left' | 'left-start' | 'left-end'"
              }
            },
            {
              "kind": "field",
              "name": "sameWidth",
              "type": {
                "text": "boolean"
              },
              "privacy": "public",
              "default": "false",
              "description": "When enabled the floating element will match the width of its parent anchor element.",
              "attribute": "same-width",
              "reflects": true
            },
            {
              "kind": "field",
              "name": "shift",
              "type": {
                "text": "boolean"
              },
              "privacy": "public",
              "default": "false",
              "description": "When enabled this tries to shift the floating element along the main axis\nkeeping it in view, preventing overflow while maintaining the desired placement.",
              "attribute": "shift",
              "reflects": true
            },
            {
              "kind": "field",
              "name": "shiftPadding",
              "type": {
                "text": "number"
              },
              "privacy": "public",
              "default": "0",
              "description": "Virtual padding for the resolved overflow detection offsets in pixels.",
              "attribute": "shift-padding"
            },
            {
              "kind": "method",
              "name": "anchorChange",
              "privacy": "protected"
            },
            {
              "kind": "method",
              "name": "openChange",
              "privacy": "protected"
            },
            {
              "kind": "method",
              "name": "floatingPropChange",
              "privacy": "protected"
            },
            {
              "kind": "method",
              "name": "show",
              "privacy": "protected"
            },
            {
              "kind": "method",
              "name": "hide",
              "privacy": "protected",
              "return": {
                "type": {
                  "text": "Promise<void>"
                }
              }
            },
            {
              "kind": "method",
              "name": "_showPopover",
              "privacy": "private"
            },
            {
              "kind": "method",
              "name": "_hidePopover",
              "privacy": "private"
            },
            {
              "kind": "method",
              "name": "_createMiddleware",
              "privacy": "private",
              "return": {
                "type": {
                  "text": "Middleware[]"
                }
              }
            },
            {
              "kind": "method",
              "name": "_updateState",
              "privacy": "private"
            },
            {
              "kind": "method",
              "name": "_updatePosition",
              "privacy": "private"
            },
            {
              "kind": "method",
              "name": "_positionArrow",
              "privacy": "private",
              "parameters": [
                {
                  "name": "placement",
                  "type": {
                    "text": "Placement"
                  }
                },
                {
                  "name": "data",
                  "type": {
                    "text": "MiddlewareData"
                  }
                }
              ]
            },
            {
              "kind": "method",
              "name": "_anchorSlotChange",
              "privacy": "private"
            }
          ],
          "attributes": [
            {
              "name": "anchor",
              "type": {
                "text": "Element | string | undefined"
              },
              "description": "Pass an IDREF or an DOM element reference to use as the\nanchor target for the floating element.",
              "fieldName": "anchor"
            },
            {
              "name": "arrow-offset",
              "type": {
                "text": "number"
              },
              "default": "0",
              "description": "Additional offset to apply to the arrow element if enabled.",
              "fieldName": "arrowOffset"
            },
            {
              "name": "inline",
              "type": {
                "text": "boolean"
              },
              "default": "false",
              "description": "Improves positioning for inline reference elements that span over multiple lines.\nUseful for tooltips or similar components.",
              "fieldName": "inline"
            },
            {
              "name": "flip",
              "type": {
                "text": "boolean"
              },
              "default": "false",
              "description": "When enabled this changes the placement of the floating element in order to keep it\nin view along the main axis.",
              "fieldName": "flip"
            },
            {
              "name": "offset",
              "type": {
                "text": "number"
              },
              "default": "0",
              "description": "Placement modifier which translates the floating element along the main axis.",
              "fieldName": "offset"
            },
            {
              "name": "open",
              "type": {
                "text": "boolean"
              },
              "default": "false",
              "description": "The visibility state of the popover component.",
              "fieldName": "open"
            },
            {
              "name": "placement",
              "type": {
                "text": "PopoverPlacement"
              },
              "default": "'bottom-start'",
              "description": "Where to place the floating element relative to the parent anchor element.",
              "fieldName": "placement",
              "expandedType": {
                "text": "'top' | 'top-start' | 'top-end' | 'bottom' | 'bottom-start' | 'bottom-end' | 'right' | 'right-start' | 'right-end' | 'left' | 'left-start' | 'left-end'"
              }
            },
            {
              "name": "same-width",
              "type": {
                "text": "boolean"
              },
              "default": "false",
              "description": "When enabled the floating element will match the width of its parent anchor element.",
              "fieldName": "sameWidth"
            },
            {
              "name": "shift",
              "type": {
                "text": "boolean"
              },
              "default": "false",
              "description": "When enabled this tries to shift the floating element along the main axis\nkeeping it in view, preventing overflow while maintaining the desired placement.",
              "fieldName": "shift"
            },
            {
              "name": "shift-padding",
              "type": {
                "text": "number"
              },
              "default": "0",
              "description": "Virtual padding for the resolved overflow detection offsets in pixels.",
              "fieldName": "shiftPadding"
            }
          ],
          "superclass": {
            "name": "LitElement",
            "package": "lit"
          },
          "tagName": "igc-popover",
          "customElement": true
        }
      ],
      "exports": [
        {
          "kind": "js",
          "name": "default",
          "declaration": {
            "name": "IgcPopoverComponent",
            "module": "src/components/popover/popover.ts"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "src/components/chip/chip.ts",
      "declarations": [
        {
          "kind": "class",
          "description": "Chips help people enter information, make selections, filter content, or trigger actions.",
          "name": "IgcChipComponent",
          "cssParts": [
            {
              "description": "The base wrapper of the chip.",
              "name": "base"
            },
            {
              "description": "The prefix container of the chip.",
              "name": "prefix"
            },
            {
              "description": "The suffix container of the chip.",
              "name": "suffix"
            }
          ],
          "slots": [
            {
              "description": "Renders the chip data.",
              "name": ""
            },
            {
              "description": "Renders content before the data of the chip.",
              "name": "prefix"
            },
            {
              "description": "Renders content after the data of the chip.",
              "name": "suffix"
            }
          ],
          "members": [
            {
              "kind": "field",
              "name": "tagName",
              "type": {
                "text": "string"
              },
              "privacy": "public",
              "static": true,
              "readonly": true,
              "default": "'igc-chip'"
            },
            {
              "kind": "method",
              "name": "register",
              "privacy": "public",
              "static": true
            },
            {
              "kind": "field",
              "name": "_removePartRef",
              "type": {
                "text": "Ref<HTMLSlotElement>"
              },
              "privacy": "private"
            },
            {
              "kind": "field",
              "name": "disabled",
              "type": {
                "text": "boolean"
              },
              "privacy": "public",
              "default": "false",
              "description": "Sets the disabled state for the chip.",
              "attribute": "disabled",
              "reflects": true
            },
            {
              "kind": "field",
              "name": "removable",
              "type": {
                "text": "boolean"
              },
              "privacy": "public",
              "default": "false",
              "description": "Defines if the chip is removable or not.",
              "attribute": "removable",
              "reflects": true
            },
            {
              "kind": "field",
              "name": "selectable",
              "type": {
                "text": "boolean"
              },
              "privacy": "public",
              "default": "false",
              "description": "Defines if the chip is selectable or not.",
              "attribute": "selectable",
              "reflects": true
            },
            {
              "kind": "field",
              "name": "selected",
              "type": {
                "text": "boolean"
              },
              "privacy": "public",
              "default": "false",
              "description": "Defines if the chip is selected or not.",
              "attribute": "selected",
              "reflects": true
            },
            {
              "kind": "field",
              "name": "variant",
              "type": {
                "text": "StyleVariant"
              },
              "privacy": "public",
              "description": "A property that sets the color variant of the chip component.",
              "attribute": "variant",
              "reflects": true,
              "expandedType": {
                "text": "'primary' | 'info' | 'success' | 'warning' | 'danger'"
              }
            },
            {
              "kind": "field",
              "name": "prefixes",
              "type": {
                "text": "Array<HTMLElement>"
              },
              "privacy": "protected"
            },
            {
              "kind": "field",
              "name": "contentStart",
              "type": {
                "text": "Array<HTMLElement>"
              },
              "privacy": "protected"
            },
            {
              "kind": "field",
              "name": "suffixes",
              "type": {
                "text": "Array<HTMLElement>"
              },
              "privacy": "protected"
            },
            {
              "kind": "field",
              "name": "contentEnd",
              "type": {
                "text": "Array<HTMLElement>"
              },
              "privacy": "protected"
            },
            {
              "kind": "method",
              "name": "handleSelect",
              "privacy": "protected"
            },
            {
              "kind": "method",
              "name": "handleRemove",
              "privacy": "protected",
              "parameters": [
                {
                  "name": "e",
                  "type": {
                    "text": "Event"
                  }
                }
              ]
            },
            {
              "kind": "method",
              "name": "addEventListener",
              "privacy": "public",
              "return": {
                "type": {
                  "text": "void"
                }
              },
              "parameters": [
                {
                  "name": "type",
                  "type": {
                    "text": "K"
                  }
                },
                {
                  "name": "listener",
                  "type": {
                    "text": "(this: HTMLElement, ev: M[K]) => any"
                  }
                },
                {
                  "name": "options",
                  "optional": true,
                  "type": {
                    "text": "boolean | AddEventListenerOptions"
                  }
                }
              ],
              "inheritedFrom": {
                "name": "EventEmitterMixin",
                "module": "src/components/common/mixins/event-emitter.ts"
              }
            },
            {
              "kind": "method",
              "name": "removeEventListener",
              "privacy": "public",
              "return": {
                "type": {
                  "text": "void"
                }
              },
              "parameters": [
                {
                  "name": "type",
                  "type": {
                    "text": "K"
                  }
                },
                {
                  "name": "listener",
                  "type": {
                    "text": "(this: HTMLElement, ev: M[K]) => any"
                  }
                },
                {
                  "name": "options",
                  "optional": true,
                  "type": {
                    "text": "boolean | EventListenerOptions"
                  }
                }
              ],
              "inheritedFrom": {
                "name": "EventEmitterMixin",
                "module": "src/components/common/mixins/event-emitter.ts"
              }
            },
            {
              "kind": "method",
              "name": "emitEvent",
              "privacy": "private",
              "return": {
                "type": {
                  "text": "boolean"
                }
              },
              "parameters": [
                {
                  "name": "type",
                  "type": {
                    "text": "K"
                  }
                },
                {
                  "name": "eventInitDict",
                  "optional": true,
                  "type": {
                    "text": "CustomEventInit<D>"
                  }
                }
              ],
              "inheritedFrom": {
                "name": "EventEmitterMixin",
                "module": "src/components/common/mixins/event-emitter.ts"
              }
            }
          ],
          "events": [
            {
              "description": "Emits an event when the chip component is removed. Returns the removed chip component.",
              "name": "igcRemove"
            },
            {
              "description": "Emits event when the chip component is selected/deselected and any related animations and transitions also end.",
              "name": "igcSelect"
            },
            {
              "type": {
                "text": "CustomEvent"
              },
              "inheritedFrom": {
                "name": "EventEmitterMixin",
                "module": "src/components/common/mixins/event-emitter.ts"
              }
            }
          ],
          "attributes": [
            {
              "name": "disabled",
              "type": {
                "text": "boolean"
              },
              "default": "false",
              "description": "Sets the disabled state for the chip.",
              "fieldName": "disabled",
              "attribute": "disabled"
            },
            {
              "name": "removable",
              "type": {
                "text": "boolean"
              },
              "default": "false",
              "description": "Defines if the chip is removable or not.",
              "fieldName": "removable",
              "attribute": "removable"
            },
            {
              "name": "selectable",
              "type": {
                "text": "boolean"
              },
              "default": "false",
              "description": "Defines if the chip is selectable or not.",
              "fieldName": "selectable",
              "attribute": "selectable"
            },
            {
              "name": "selected",
              "type": {
                "text": "boolean"
              },
              "default": "false",
              "description": "Defines if the chip is selected or not.",
              "fieldName": "selected",
              "attribute": "selected"
            },
            {
              "name": "variant",
              "type": {
                "text": "StyleVariant"
              },
              "description": "A property that sets the color variant of the chip component.",
              "fieldName": "variant",
              "attribute": "variant",
              "expandedType": {
                "text": "'primary' | 'info' | 'success' | 'warning' | 'danger'"
              }
            }
          ],
          "mixins": [
            {
              "name": "EventEmitterMixin",
              "module": "/src/components/common/mixins/event-emitter.js"
            }
          ],
          "superclass": {
            "name": "LitElement",
            "package": "lit"
          },
          "tagName": "igc-chip",
          "customElement": true
        }
      ],
      "exports": [
        {
          "kind": "js",
          "name": "default",
          "declaration": {
            "name": "IgcChipComponent",
            "module": "src/components/chip/chip.ts"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "src/components/date-range-picker/predefined-ranges-area.ts",
      "declarations": [
        {
          "kind": "class",
          "description": "The predefined ranges area component is used within the `igc-date-range picker` element and it\ndisplays a set of chips with predefined date ranges. The component allows users to quickly select\na predefined date range value. Users can also provide custom ranges to be displayed as chips.",
          "name": "IgcPredefinedRangesAreaComponent",
          "members": [
            {
              "kind": "field",
              "name": "tagName",
              "type": {
                "text": "string"
              },
              "privacy": "public",
              "static": true,
              "readonly": true,
              "default": "'igc-predefined-ranges-area'"
            },
            {
              "kind": "method",
              "name": "register",
              "privacy": "public",
              "static": true,
              "return": {
                "type": {
                  "text": "void"
                }
              }
            },
            {
              "kind": "field",
              "name": "_predefinedRanges",
              "type": {
                "text": "CustomDateRange[]"
              },
              "privacy": "private",
              "default": "[]"
            },
            {
              "kind": "field",
              "name": "usePredefinedRanges",
              "type": {
                "text": "boolean"
              },
              "privacy": "public",
              "default": "false",
              "description": "Whether the control will show chips with predefined ranges.",
              "attribute": "use-predefined-ranges",
              "reflects": true
            },
            {
              "kind": "field",
              "name": "customRanges",
              "type": {
                "text": "CustomDateRange[]"
              },
              "privacy": "public",
              "default": "[]",
              "description": "Renders chips with custom ranges based on the elements of the array."
            },
            {
              "kind": "field",
              "name": "resourceStrings",
              "type": {
                "text": "IgcDateRangePickerResourceStrings"
              },
              "privacy": "public",
              "default": "IgcDateRangePickerResourceStringsEN",
              "description": "The resource strings of the date range area component."
            },
            {
              "kind": "method",
              "name": "_updatePredefinedRanges",
              "privacy": "protected",
              "return": {
                "type": {
                  "text": "void"
                }
              }
            },
            {
              "kind": "method",
              "name": "_handleRangeSelect",
              "privacy": "private",
              "return": {
                "type": {
                  "text": "void"
                }
              },
              "parameters": [
                {
                  "name": "range",
                  "type": {
                    "text": "DateRangeValue"
                  }
                }
              ]
            },
            {
              "kind": "method",
              "name": "_renderDateRanges",
              "privacy": "protected"
            }
          ],
          "events": [
            {
              "name": "igcRangeSelect",
              "type": {
                "text": "CustomEvent"
              }
            }
          ],
          "attributes": [
            {
              "name": "use-predefined-ranges",
              "type": {
                "text": "boolean"
              },
              "default": "false",
              "description": "Whether the control will show chips with predefined ranges.",
              "fieldName": "usePredefinedRanges",
              "attribute": "use-predefined-ranges"
            }
          ],
          "superclass": {
            "name": "LitElement",
            "package": "lit"
          },
          "tagName": "igc-predefined-ranges-area",
          "customElement": true
        }
      ],
      "exports": [
        {
          "kind": "js",
          "name": "default",
          "declaration": {
            "name": "IgcPredefinedRangesAreaComponent",
            "module": "src/components/date-range-picker/predefined-ranges-area.ts"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "src/components/date-range-picker/validators.ts",
      "declarations": [
        {
          "kind": "variable",
          "name": "minDateRangeValidator",
          "type": {
            "text": "Validator<{\n  value?: DateRangeValue | null;\n  min?: Date | null;\n}>"
          },
          "default": "{ key: 'rangeUnderflow', message: ({ min }) => formatString(messages.min, min), isValid: ({ value, min }) => { if (!min) { return true; } const isStartInvalid = value?.start && CalendarDay.compare(value.start, min) < 0; const isEndInvalid = value?.end && CalendarDay.compare(value.end, min) < 0; return !(isStartInvalid || isEndInvalid); }, }"
        },
        {
          "kind": "variable",
          "name": "maxDateRangeValidator",
          "type": {
            "text": "Validator<{\n  value?: DateRangeValue | null;\n  max?: Date | null;\n}>"
          },
          "default": "{ key: 'rangeOverflow', message: ({ max }) => formatString(messages.max, max), isValid: ({ value, max }) => { if (!max) { return true; } const isStartInvalid = value?.start && CalendarDay.compare(value.start, max) > 0; const isEndInvalid = value?.end && CalendarDay.compare(value.end, max) > 0; return !(isStartInvalid || isEndInvalid); }, }"
        },
        {
          "kind": "variable",
          "name": "requiredDateRangeValidator",
          "type": {
            "text": "Validator<{\n  required: boolean;\n  value: DateRangeValue | null;\n}>"
          },
          "default": "{ key: 'valueMissing', message: messages.required, isValid: ({ required, value }) => { return required ? isCompleteDateRange(value) : true; }, }"
        },
        {
          "kind": "variable",
          "name": "badInputDateRangeValidator",
          "type": {
            "text": "Validator<{\n  required: boolean;\n  value: DateRangeValue | null;\n  disabledDates?: DateRangeDescriptor[];\n}>"
          },
          "default": "{ key: 'badInput', message: ({ value }) => formatString(messages.disabledDate, value), isValid: ({ value, disabledDates }) => { if ( !isCompleteDateRange(value) || !disabledDates || isEmpty(disabledDates) ) { return true; } return Array.from( calendarRange({ start: value.start, end: value.end, inclusive: true }) ).every((date) => !isDateInRanges(date, disabledDates)); }, }"
        },
        {
          "kind": "variable",
          "name": "dateRangeValidators",
          "type": {
            "text": "Validator<IgcDateRangePickerComponent>[]"
          },
          "default": "[ requiredDateRangeValidator, minDateRangeValidator, maxDateRangeValidator, badInputDateRangeValidator, ]"
        },
        {
          "kind": "function",
          "name": "isCompleteDateRange",
          "return": {
            "type": {
              "text": "value is { start: Date; end: Date }"
            }
          },
          "parameters": [
            {
              "name": "value",
              "type": {
                "text": "DateRangeValue | null"
              }
            }
          ]
        }
      ],
      "exports": [
        {
          "kind": "js",
          "name": "minDateRangeValidator",
          "declaration": {
            "name": "minDateRangeValidator",
            "module": "src/components/date-range-picker/validators.ts"
          }
        },
        {
          "kind": "js",
          "name": "maxDateRangeValidator",
          "declaration": {
            "name": "maxDateRangeValidator",
            "module": "src/components/date-range-picker/validators.ts"
          }
        },
        {
          "kind": "js",
          "name": "requiredDateRangeValidator",
          "declaration": {
            "name": "requiredDateRangeValidator",
            "module": "src/components/date-range-picker/validators.ts"
          }
        },
        {
          "kind": "js",
          "name": "badInputDateRangeValidator",
          "declaration": {
            "name": "badInputDateRangeValidator",
            "module": "src/components/date-range-picker/validators.ts"
          }
        },
        {
          "kind": "js",
          "name": "dateRangeValidators",
          "declaration": {
            "name": "dateRangeValidators",
            "module": "src/components/date-range-picker/validators.ts"
          }
        },
        {
          "kind": "js",
          "name": "isCompleteDateRange",
          "declaration": {
            "name": "isCompleteDateRange",
            "module": "src/components/date-range-picker/validators.ts"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "src/components/date-range-picker/date-range-picker.ts",
      "declarations": [
        {
          "kind": "class",
          "description": "The igc-date-range-picker allows the user to select a range of dates.",
          "name": "IgcDateRangePickerComponent",
          "cssParts": [
            {
              "description": "The separator element between the two inputs.",
              "name": "separator"
            },
            {
              "description": "The wrapper that renders the custom and predefined ranges.",
              "name": "ranges"
            },
            {
              "description": "The label wrapper that renders content above the target input.",
              "name": "label"
            },
            {
              "description": "The calendar icon wrapper for closed state (single input).",
              "name": "calendar-icon"
            },
            {
              "description": "The calendar icon wrapper for closed state for the start input (two inputs).",
              "name": "calendar-icon-start"
            },
            {
              "description": "The calendar icon wrapper for closed state for the end input (two inputs).",
              "name": "calendar-icon-end"
            },
            {
              "description": "The calendar icon wrapper for opened state (single input).",
              "name": "calendar-icon-open"
            },
            {
              "description": "The calendar icon wrapper for opened state for the start input (two inputs).",
              "name": "calendar-icon-open-start"
            },
            {
              "description": "The calendar icon wrapper for opened state for the end input (two inputs).",
              "name": "calendar-icon-open-end"
            },
            {
              "description": "The clear icon wrapper (single input).",
              "name": "clear-icon"
            },
            {
              "description": "The clear icon wrapper for the start input (two inputs).",
              "name": "clear-icon-start"
            },
            {
              "description": "The clear icon wrapper for the end input (two inputs).",
              "name": "clear-icon-end"
            },
            {
              "description": "The wrapper for the custom actions area.",
              "name": "actions"
            },
            {
              "description": "The clear icon wrapper.",
              "name": "clear-icon"
            },
            {
              "description": "The native input element.",
              "name": "input"
            },
            {
              "description": "The prefix wrapper.",
              "name": "prefix"
            },
            {
              "description": "The suffix wrapper.",
              "name": "suffix"
            },
            {
              "description": "The helper-text wrapper that renders content below the target input.",
              "name": "helper-text"
            },
            {
              "description": "The calendar header element.",
              "name": "header"
            },
            {
              "description": "The calendar header title element.",
              "name": "header-title"
            },
            {
              "description": "The calendar header date element.",
              "name": "header-date"
            },
            {
              "description": "The calendar content element which contains the views and navigation elements.",
              "name": "calendar-content"
            },
            {
              "description": "The calendar navigation container element.",
              "name": "navigation"
            },
            {
              "description": "The calendar months navigation button element.",
              "name": "months-navigation"
            },
            {
              "description": "The calendar years navigation button element.",
              "name": "years-navigation"
            },
            {
              "description": "The calendar years range element.",
              "name": "years-range"
            },
            {
              "description": "The calendar navigation buttons container.",
              "name": "navigation-buttons"
            },
            {
              "description": "The calendar previous/next navigation button.",
              "name": "navigation-button"
            },
            {
              "description": "The calendar days view container element.",
              "name": "days-view-container"
            },
            {
              "description": "The calendar days view element.",
              "name": "days-view"
            },
            {
              "description": "The calendar months view element.",
              "name": "months-view"
            },
            {
              "description": "The calendar years view element.",
              "name": "years-view"
            },
            {
              "description": "The calendar days row element.",
              "name": "days-row"
            },
            {
              "description": "The calendar week header label element.",
              "name": "calendar-label"
            },
            {
              "description": "The calendar week number element.",
              "name": "week-number"
            },
            {
              "description": "The calendar week number inner element.",
              "name": "week-number-inner"
            },
            {
              "description": "The calendar date element.",
              "name": "date"
            },
            {
              "description": "The calendar date inner element.",
              "name": "date-inner"
            },
            {
              "description": "The calendar first selected date element in range selection.",
              "name": "first"
            },
            {
              "description": "The calendar last selected date element in range selection.",
              "name": "last"
            },
            {
              "description": "The calendar inactive date element.",
              "name": "inactive"
            },
            {
              "description": "The calendar hidden date element.",
              "name": "hidden"
            },
            {
              "description": "The calendar weekend date element.",
              "name": "weekend"
            },
            {
              "description": "The calendar range selected element.",
              "name": "range"
            },
            {
              "description": "The calendar special date element.",
              "name": "special"
            },
            {
              "description": "The calendar disabled date element.",
              "name": "disabled"
            },
            {
              "description": "The calendar single selected date element.",
              "name": "single"
            },
            {
              "description": "The calendar range selection preview date element.",
              "name": "preview"
            },
            {
              "description": "The calendar month element.",
              "name": "month"
            },
            {
              "description": "The calendar month inner element.",
              "name": "month-inner"
            },
            {
              "description": "The calendar year element.",
              "name": "year"
            },
            {
              "description": "The calendar year inner element.",
              "name": "year-inner"
            },
            {
              "description": "The calendar selected state for element(s). Applies to date, month and year elements.",
              "name": "selected"
            },
            {
              "description": "The calendar current state for element(s). Applies to date, month and year elements.",
              "name": "current"
            }
          ],
          "slots": [
            {
              "description": "Renders content before the input (single input).",
              "name": "prefix"
            },
            {
              "description": "Renders content before the start input (two inputs).",
              "name": "prefix-start"
            },
            {
              "description": "Renders content before the end input (two inputs).",
              "name": "prefix-end"
            },
            {
              "description": "Renders content after the input (single input).",
              "name": "suffix"
            },
            {
              "description": "Renders content after the start input (single input).",
              "name": "suffix-start"
            },
            {
              "description": "Renders content after the end input (single input).",
              "name": "suffix-end"
            },
            {
              "description": "Renders content below the input.",
              "name": "helper-text"
            },
            {
              "description": "Renders content when the value is in the disabledDates ranges.",
              "name": "bad-input"
            },
            {
              "description": "Renders content when the required validation fails.",
              "name": "value-missing"
            },
            {
              "description": "Renders content when the max validation fails.",
              "name": "range-overflow"
            },
            {
              "description": "Renders content when the min validation fails.",
              "name": "range-underflow"
            },
            {
              "description": "Renders content when setCustomValidity(message) is set.",
              "name": "custom-error"
            },
            {
              "description": "Renders content when the component is in invalid state (validity.valid = false).",
              "name": "invalid"
            },
            {
              "description": "Renders content in the calendar title.",
              "name": "title"
            },
            {
              "description": "Renders content instead of the current date/range in the calendar header.",
              "name": "header-date"
            },
            {
              "description": "Renders a clear icon template.",
              "name": "clear-icon"
            },
            {
              "description": "Renders a clear icon template for the start input (two inputs).",
              "name": "clear-icon-start"
            },
            {
              "description": "Renders a clear icon template for the end input (two inputs).",
              "name": "clear-icon-end"
            },
            {
              "description": "Renders the icon/content for the calendar picker.",
              "name": "calendar-icon"
            },
            {
              "description": "Renders the icon/content for the calendar picker for the start input (two inputs).",
              "name": "calendar-icon-start"
            },
            {
              "description": "Renders the icon/content for the calendar picker for the end input (two inputs).",
              "name": "calendar-icon-end"
            },
            {
              "description": "Renders the icon/content for the picker in open state.",
              "name": "calendar-icon-open"
            },
            {
              "description": "Renders the icon/content for the picker in open state for the start input (two inputs).",
              "name": "calendar-icon-open-start"
            },
            {
              "description": "Renders the icon/content for the picker in open state for the end input (two inputs).",
              "name": "calendar-icon-open-end"
            },
            {
              "description": "Renders content in the action part of the picker in open state.",
              "name": "actions"
            },
            {
              "description": "Renders the separator element between the two inputs.",
              "name": "separator"
            }
          ],
          "members": [
            {
              "kind": "field",
              "name": "tagName",
              "type": {
                "text": "string"
              },
              "privacy": "public",
              "static": true,
              "readonly": true,
              "default": "'igc-date-range-picker'"
            },
            {
              "kind": "method",
              "name": "register",
              "privacy": "public",
              "static": true,
              "return": {
                "type": {
                  "text": "void"
                }
              }
            },
            {
              "kind": "field",
              "name": "_increment",
              "privacy": "private",
              "static": true,
              "readonly": true
            },
            {
              "kind": "field",
              "name": "_inputId",
              "privacy": "protected",
              "readonly": true,
              "default": "`date-range-picker-${IgcDateRangePickerComponent._increment()}`"
            },
            {
              "kind": "field",
              "name": "_themes",
              "privacy": "private",
              "readonly": true
            },
            {
              "kind": "field",
              "name": "_formValue",
              "type": {
                "text": "FormValue<unknown>"
              },
              "privacy": "protected",
              "readonly": true,
              "inheritedFrom": {
                "name": "BaseFormAssociated",
                "module": "src/components/common/mixins/forms/associated.ts"
              }
            },
            {
              "kind": "field",
              "name": "_rootClickController",
              "type": {
                "text": "RootClickController"
              },
              "privacy": "protected",
              "readonly": true,
              "inheritedFrom": {
                "name": "IgcBaseComboBoxLikeComponent",
                "module": "src/components/common/mixins/combo-box.ts"
              }
            },
            {
              "kind": "field",
              "name": "_activeDate",
              "type": {
                "text": "Date | null"
              },
              "privacy": "private",
              "default": "null"
            },
            {
              "kind": "field",
              "name": "_min",
              "type": {
                "text": "Date | null"
              },
              "privacy": "private",
              "default": "null"
            },
            {
              "kind": "field",
              "name": "_max",
              "type": {
                "text": "Date | null"
              },
              "privacy": "private",
              "default": "null"
            },
            {
              "kind": "field",
              "name": "_disabledDates",
              "type": {
                "text": "DateRangeDescriptor[]"
              },
              "privacy": "private",
              "default": "[]"
            },
            {
              "kind": "field",
              "name": "_dateConstraints",
              "type": {
                "text": "DateRangeDescriptor[]"
              },
              "privacy": "private",
              "default": "[]"
            },
            {
              "kind": "field",
              "name": "_displayFormat",
              "type": {
                "text": "string | undefined"
              },
              "privacy": "private"
            },
            {
              "kind": "field",
              "name": "_inputFormat",
              "type": {
                "text": "string | undefined"
              },
              "privacy": "private"
            },
            {
              "kind": "field",
              "name": "_placeholder",
              "type": {
                "text": "string | undefined"
              },
              "privacy": "private"
            },
            {
              "kind": "field",
              "name": "_defaultMask",
              "type": {
                "text": "string"
              },
              "privacy": "private"
            },
            {
              "kind": "field",
              "name": "_oldValue",
              "type": {
                "text": "DateRangeValue | null"
              },
              "privacy": "private",
              "default": "null"
            },
            {
              "kind": "field",
              "name": "_visibleMonths",
              "type": {
                "text": "number"
              },
              "privacy": "private",
              "default": "2"
            },
            {
              "kind": "field",
              "name": "__validators",
              "type": {
                "text": "Validator[]"
              },
              "privacy": "protected",
              "readonly": true,
              "inheritedFrom": {
                "name": "BaseFormAssociated",
                "module": "src/components/common/mixins/forms/associated.ts"
              }
            },
            {
              "kind": "field",
              "name": "_isDropDown",
              "type": {
                "text": "boolean"
              },
              "privacy": "private",
              "readonly": true
            },
            {
              "kind": "field",
              "name": "_firstDefinedInRange",
              "type": {
                "text": "Date | null"
              },
              "privacy": "private",
              "readonly": true
            },
            {
              "kind": "field",
              "name": "_maskedRangeValue",
              "type": {
                "text": "string"
              },
              "privacy": "private",
              "default": "''"
            },
            {
              "kind": "field",
              "name": "_inputs",
              "type": {
                "text": "IgcDateTimeInputComponent[]"
              },
              "privacy": "private",
              "readonly": true
            },
            {
              "kind": "field",
              "name": "_input",
              "type": {
                "text": "IgcInputComponent"
              },
              "privacy": "private",
              "readonly": true
            },
            {
              "kind": "field",
              "name": "_calendar",
              "type": {
                "text": "IgcCalendarComponent"
              },
              "privacy": "private",
              "readonly": true
            },
            {
              "kind": "field",
              "name": "_prefixes",
              "type": {
                "text": "HTMLElement[]"
              },
              "privacy": "private",
              "readonly": true
            },
            {
              "kind": "field",
              "name": "_startPrefixes",
              "type": {
                "text": "HTMLElement[]"
              },
              "privacy": "private",
              "readonly": true
            },
            {
              "kind": "field",
              "name": "_endPrefixes",
              "type": {
                "text": "HTMLElement[]"
              },
              "privacy": "private",
              "readonly": true
            },
            {
              "kind": "field",
              "name": "_suffixes",
              "type": {
                "text": "HTMLElement[]"
              },
              "privacy": "private",
              "readonly": true
            },
            {
              "kind": "field",
              "name": "_startSuffixes",
              "type": {
                "text": "HTMLElement[]"
              },
              "privacy": "private",
              "readonly": true
            },
            {
              "kind": "field",
              "name": "_endSuffixes",
              "type": {
                "text": "HTMLElement[]"
              },
              "privacy": "private",
              "readonly": true
            },
            {
              "kind": "field",
              "name": "_actions",
              "type": {
                "text": "HTMLElement[]"
              },
              "privacy": "private",
              "readonly": true
            },
            {
              "kind": "field",
              "name": "_headerDateSlotItems",
              "type": {
                "text": "HTMLElement[]"
              },
              "privacy": "private",
              "readonly": true
            },
            {
              "kind": "field",
              "name": "value",
              "privacy": "public",
              "type": {
                "text": "DateRangeValue | null"
              },
              "attribute": "value"
            },
            {
              "kind": "field",
              "name": "customRanges",
              "type": {
                "text": "CustomDateRange[]"
              },
              "privacy": "public",
              "default": "[]",
              "description": "Renders chips with custom ranges based on the elements of the array."
            },
            {
              "kind": "field",
              "name": "mode",
              "type": {
                "text": "PickerMode"
              },
              "privacy": "public",
              "default": "'dropdown'",
              "description": "Determines whether the calendar is opened in a dropdown or a modal dialog",
              "attribute": "mode",
              "expandedType": {
                "text": "'dropdown' | 'dialog'"
              }
            },
            {
              "kind": "field",
              "name": "useTwoInputs",
              "type": {
                "text": "boolean"
              },
              "privacy": "public",
              "default": "false",
              "description": "Use two inputs to display the date range values. Makes the input editable in dropdown mode.",
              "attribute": "use-two-inputs",
              "reflects": true
            },
            {
              "kind": "field",
              "name": "usePredefinedRanges",
              "type": {
                "text": "boolean"
              },
              "privacy": "public",
              "default": "false",
              "description": "Whether the control will show chips with predefined ranges.",
              "attribute": "use-predefined-ranges",
              "reflects": true
            },
            {
              "kind": "field",
              "name": "locale",
              "type": {
                "text": "string"
              },
              "privacy": "public",
              "default": "'en'",
              "description": "The locale settings used to display the value.",
              "attribute": "locale"
            },
            {
              "kind": "field",
              "name": "resourceStrings",
              "privacy": "public",
              "default": "IgcDateRangePickerResourceStringsEN",
              "description": "The resource strings of the date range picker."
            },
            {
              "kind": "field",
              "name": "readOnly",
              "type": {
                "text": "boolean"
              },
              "privacy": "public",
              "default": "false",
              "description": "Makes the control a readonly field.",
              "attribute": "readonly",
              "reflects": true
            },
            {
              "kind": "field",
              "name": "nonEditable",
              "type": {
                "text": "boolean"
              },
              "privacy": "public",
              "default": "false",
              "description": "Whether to allow typing in the input.",
              "attribute": "non-editable",
              "reflects": true
            },
            {
              "kind": "field",
              "name": "outlined",
              "type": {
                "text": "boolean"
              },
              "privacy": "public",
              "default": "false",
              "description": "Whether the control will have outlined appearance.",
              "attribute": "outlined",
              "reflects": true
            },
            {
              "kind": "field",
              "name": "label",
              "type": {
                "text": "string"
              },
              "privacy": "public",
              "description": "The label of the control (single input).",
              "attribute": "label"
            },
            {
              "kind": "field",
              "name": "labelStart",
              "type": {
                "text": "string"
              },
              "privacy": "public",
              "default": "''",
              "description": "The label attribute of the start input.",
              "attribute": "label-start"
            },
            {
              "kind": "field",
              "name": "labelEnd",
              "type": {
                "text": "string"
              },
              "privacy": "public",
              "default": "''",
              "description": "The label attribute of the end input.",
              "attribute": "label-end"
            },
            {
              "kind": "field",
              "name": "placeholder",
              "privacy": "public",
              "description": "The placeholder attribute of the control (single input).",
              "attribute": "placeholder",
              "type": {
                "text": "string"
              }
            },
            {
              "kind": "field",
              "name": "placeholderStart",
              "type": {
                "text": "string"
              },
              "privacy": "public",
              "default": "''",
              "description": "The placeholder attribute of the start input.",
              "attribute": "placeholder-start"
            },
            {
              "kind": "field",
              "name": "placeholderEnd",
              "type": {
                "text": "string"
              },
              "privacy": "public",
              "default": "''",
              "description": "The placeholder attribute of the end input.",
              "attribute": "placeholder-end"
            },
            {
              "kind": "field",
              "name": "prompt",
              "type": {
                "text": "string"
              },
              "privacy": "public",
              "default": "'_'",
              "description": "The prompt symbol to use for unfilled parts of the mask.",
              "attribute": "prompt"
            },
            {
              "kind": "field",
              "name": "displayFormat",
              "privacy": "public",
              "description": "Format to display the value in when not editing.\nDefaults to the input format if not set.",
              "attribute": "display-format",
              "type": {
                "text": "string"
              }
            },
            {
              "kind": "field",
              "name": "inputFormat",
              "privacy": "public",
              "description": "The date format to apply on the inputs.\nDefaults to the current locale Intl.DateTimeFormat",
              "attribute": "input-format",
              "type": {
                "text": "string"
              }
            },
            {
              "kind": "field",
              "name": "min",
              "privacy": "public",
              "description": "The minimum value required for the date range picker to remain valid.",
              "attribute": "min",
              "type": {
                "text": "Date | null"
              }
            },
            {
              "kind": "field",
              "name": "max",
              "privacy": "public",
              "description": "The maximum value required for the date range picker to remain valid.",
              "attribute": "max",
              "type": {
                "text": "Date | null"
              }
            },
            {
              "kind": "field",
              "name": "disabledDates",
              "privacy": "public",
              "description": "Gets/sets disabled dates."
            },
            {
              "kind": "field",
              "name": "visibleMonths",
              "type": {
                "text": "number"
              },
              "privacy": "public",
              "description": "The number of months displayed in the calendar.",
              "attribute": "visible-months"
            },
            {
              "kind": "field",
              "name": "headerOrientation",
              "type": {
                "text": "ContentOrientation"
              },
              "privacy": "public",
              "default": "'horizontal'",
              "description": "The orientation of the calendar header.",
              "attribute": "header-orientation",
              "reflects": true,
              "expandedType": {
                "text": "'horizontal' | 'vertical'"
              }
            },
            {
              "kind": "field",
              "name": "orientation",
              "type": {
                "text": "ContentOrientation"
              },
              "privacy": "public",
              "default": "'horizontal'",
              "description": "The orientation of the multiple months displayed in the calendar's days view.",
              "attribute": "orientation",
              "expandedType": {
                "text": "'horizontal' | 'vertical'"
              }
            },
            {
              "kind": "field",
              "name": "hideHeader",
              "type": {
                "text": "boolean"
              },
              "privacy": "public",
              "default": "false",
              "description": "Determines whether the calendar hides its header.",
              "attribute": "hide-header",
              "reflects": true
            },
            {
              "kind": "field",
              "name": "activeDate",
              "privacy": "public",
              "description": "Gets/Sets the date which is shown in the calendar picker and is highlighted.\nBy default it is the current date.",
              "type": {
                "text": "Date"
              },
              "attribute": "active-date"
            },
            {
              "kind": "field",
              "name": "showWeekNumbers",
              "type": {
                "text": "boolean"
              },
              "privacy": "public",
              "default": "false",
              "description": "Whether to show the number of the week in the calendar.",
              "attribute": "show-week-numbers",
              "reflects": true
            },
            {
              "kind": "field",
              "name": "hideOutsideDays",
              "type": {
                "text": "boolean"
              },
              "privacy": "public",
              "default": "false",
              "description": "Controls the visibility of the dates that do not belong to the current month.",
              "attribute": "hide-outside-days",
              "reflects": true
            },
            {
              "kind": "field",
              "name": "specialDates",
              "type": {
                "text": "DateRangeDescriptor[]"
              },
              "privacy": "public",
              "description": "Gets/sets special dates."
            },
            {
              "kind": "field",
              "name": "weekStart",
              "type": {
                "text": "WeekDays"
              },
              "privacy": "public",
              "default": "'sunday'",
              "description": "Sets the start day of the week for the calendar.",
              "attribute": "week-start",
              "expandedType": {
                "text": "'sunday' | 'monday' | 'tuesday' | 'wednesday' | 'thursday' | 'friday' | 'saturday'"
              }
            },
            {
              "kind": "method",
              "name": "formResetCallback",
              "privacy": "protected",
              "return": {
                "type": {
                  "text": "void"
                }
              },
              "inheritedFrom": {
                "name": "BaseFormAssociated",
                "module": "src/components/common/mixins/forms/associated.ts"
              }
            },
            {
              "kind": "method",
              "name": "clear",
              "privacy": "public",
              "description": "Clears the input parts of the component of any user input"
            },
            {
              "kind": "method",
              "name": "select",
              "privacy": "public",
              "return": {
                "type": {
                  "text": "void"
                }
              },
              "parameters": [
                {
                  "name": "value",
                  "type": {
                    "text": "DateRangeValue | null"
                  }
                }
              ],
              "description": "Selects a date range value in the picker"
            },
            {
              "kind": "method",
              "name": "_openChange",
              "privacy": "protected"
            },
            {
              "kind": "method",
              "name": "_updateDefaultMask",
              "privacy": "protected",
              "return": {
                "type": {
                  "text": "void"
                }
              }
            },
            {
              "kind": "method",
              "name": "_updateDateRange",
              "privacy": "protected"
            },
            {
              "kind": "method",
              "name": "_modeChanged",
              "privacy": "protected"
            },
            {
              "kind": "method",
              "name": "_handleClosing",
              "privacy": "protected"
            },
            {
              "kind": "method",
              "name": "_handleDialogClosing",
              "privacy": "protected",
              "parameters": [
                {
                  "name": "event",
                  "type": {
                    "text": "Event"
                  }
                }
              ]
            },
            {
              "kind": "method",
              "name": "_handleDialogClosed",
              "privacy": "protected",
              "parameters": [
                {
                  "name": "event",
                  "type": {
                    "text": "Event"
                  }
                }
              ]
            },
            {
              "kind": "method",
              "name": "_dialogCancel",
              "privacy": "protected"
            },
            {
              "kind": "method",
              "name": "_dialogDone",
              "privacy": "protected"
            },
            {
              "kind": "method",
              "name": "_handleInputEvent",
              "privacy": "protected",
              "parameters": [
                {
                  "name": "event",
                  "type": {
                    "text": "CustomEvent<Date | null>"
                  }
                }
              ]
            },
            {
              "kind": "method",
              "name": "_handleInputChangeEvent",
              "privacy": "protected",
              "parameters": [
                {
                  "name": "event",
                  "type": {
                    "text": "CustomEvent<Date | null>"
                  }
                }
              ]
            },
            {
              "kind": "method",
              "name": "_handleFocusIn",
              "privacy": "protected"
            },
            {
              "kind": "method",
              "name": "_handleFocusOut",
              "privacy": "protected",
              "parameters": [
                {
                  "name": "{ relatedTarget }",
                  "type": {
                    "text": "FocusEvent"
                  }
                }
              ]
            },
            {
              "kind": "method",
              "name": "_handleInputClick",
              "privacy": "protected",
              "parameters": [
                {
                  "name": "event",
                  "type": {
                    "text": "Event"
                  }
                }
              ]
            },
            {
              "kind": "method",
              "name": "_onEscapeKey",
              "privacy": "protected"
            },
            {
              "kind": "method",
              "name": "handleAnchorClick",
              "privacy": "protected",
              "inheritedFrom": {
                "name": "IgcBaseComboBoxLikeComponent",
                "module": "src/components/common/mixins/combo-box.ts"
              }
            },
            {
              "kind": "method",
              "name": "_handleCalendarChangeEvent",
              "privacy": "protected",
              "parameters": [
                {
                  "name": "event",
                  "type": {
                    "text": "CustomEvent<Date>"
                  }
                }
              ]
            },
            {
              "kind": "method",
              "name": "_handleCalendarIconSlotPointerDown",
              "privacy": "protected",
              "parameters": [
                {
                  "name": "event",
                  "type": {
                    "text": "PointerEvent"
                  }
                }
              ]
            },
            {
              "kind": "method",
              "name": "_revertValue",
              "privacy": "protected"
            },
            {
              "kind": "method",
              "name": "_setCalendarActiveDateAndViewIndex",
              "privacy": "private",
              "description": "Sets the active date of the calendar based on current selection, if any,\nor its current active date and its active day view index to always be the first one."
            },
            {
              "kind": "method",
              "name": "_getUpdatedDateRange",
              "privacy": "private",
              "return": {
                "type": {
                  "text": "DateRangeValue"
                }
              },
              "parameters": [
                {
                  "name": "input",
                  "type": {
                    "text": "IgcDateTimeInputComponent"
                  }
                },
                {
                  "name": "newValue",
                  "type": {
                    "text": "Date | null"
                  }
                }
              ]
            },
            {
              "kind": "method",
              "name": "_delegateInputsValidity",
              "privacy": "private"
            },
            {
              "kind": "method",
              "name": "_setDateConstraints",
              "privacy": "private"
            },
            {
              "kind": "method",
              "name": "_updateMaskedRangeValue",
              "privacy": "private"
            },
            {
              "kind": "method",
              "name": "_setCalendarRangeValues",
              "privacy": "private"
            },
            {
              "kind": "method",
              "name": "_swapDates",
              "privacy": "private",
              "return": {
                "type": {
                  "text": "DateRangeValue"
                }
              },
              "parameters": [
                {
                  "name": "range",
                  "type": {
                    "text": "DateRangeValue"
                  }
                }
              ]
            },
            {
              "kind": "method",
              "name": "_shouldCloseCalendarDropdown",
              "privacy": "private"
            },
            {
              "kind": "method",
              "name": "_select",
              "privacy": "private",
              "parameters": [
                {
                  "name": "value",
                  "type": {
                    "text": "DateRangeValue | null"
                  }
                },
                {
                  "name": "emitEvent",
                  "default": "false"
                }
              ]
            },
            {
              "kind": "method",
              "name": "_renderClearIcon",
              "privacy": "private",
              "parameters": [
                {
                  "name": "picker",
                  "default": "'start'",
                  "type": {
                    "text": "DateRangePickerInput"
                  }
                }
              ]
            },
            {
              "kind": "method",
              "name": "_renderCalendarIcon",
              "privacy": "private",
              "parameters": [
                {
                  "name": "picker",
                  "default": "'start'",
                  "type": {
                    "text": "DateRangePickerInput"
                  }
                }
              ]
            },
            {
              "kind": "method",
              "name": "_renderCalendarSlots",
              "privacy": "private"
            },
            {
              "kind": "method",
              "name": "_renderCalendar",
              "privacy": "private",
              "parameters": [
                {
                  "name": "id",
                  "type": {
                    "text": "string"
                  }
                }
              ]
            },
            {
              "kind": "method",
              "name": "_renderActions",
              "privacy": "protected"
            },
            {
              "kind": "method",
              "name": "_renderPredefinedRanges",
              "privacy": "protected"
            },
            {
              "kind": "method",
              "name": "_renderPicker",
              "privacy": "protected",
              "parameters": [
                {
                  "name": "id",
                  "type": {
                    "text": "string"
                  }
                }
              ]
            },
            {
              "kind": "method",
              "name": "_renderHelperText",
              "privacy": "private",
              "return": {
                "type": {
                  "text": "TemplateResult"
                }
              }
            },
            {
              "kind": "method",
              "name": "_renderInput",
              "privacy": "protected",
              "parameters": [
                {
                  "name": "id",
                  "type": {
                    "text": "string"
                  }
                },
                {
                  "name": "picker",
                  "default": "'start'",
                  "type": {
                    "text": "DateRangePickerInput"
                  }
                }
              ]
            },
            {
              "kind": "method",
              "name": "_renderInputs",
              "privacy": "private",
              "parameters": [
                {
                  "name": "idStart",
                  "type": {
                    "text": "string"
                  }
                },
                {
                  "name": "idEnd",
                  "type": {
                    "text": "string"
                  }
                }
              ]
            },
            {
              "kind": "method",
              "name": "_renderSingleInput",
              "privacy": "private",
              "parameters": [
                {
                  "name": "id",
                  "type": {
                    "text": "string"
                  }
                }
              ]
            },
            {
              "kind": "field",
              "name": "_required",
              "type": {
                "text": "boolean"
              },
              "privacy": "protected",
              "default": "false",
              "inheritedFrom": {
                "name": "FormAssociatedRequiredMixin",
                "module": "src/components/common/mixins/forms/associated-required.ts"
              }
            },
            {
              "kind": "field",
              "name": "required",
              "privacy": "public",
              "description": "When set, makes the component a required field for validation.",
              "default": "false",
              "attribute": "required",
              "type": {
                "text": "boolean"
              },
              "reflects": true,
              "inheritedFrom": {
                "name": "FormAssociatedRequiredMixin",
                "module": "src/components/common/mixins/forms/associated-required.ts"
              }
            },
            {
              "kind": "field",
              "name": "defaultValue",
              "privacy": "public",
              "inheritedFrom": {
                "name": "FormAssociatedMixin",
                "module": "src/components/common/mixins/forms/associated.ts"
              }
            },
            {
              "kind": "field",
              "name": "formAssociated",
              "type": {
                "text": "boolean"
              },
              "privacy": "public",
              "static": true,
              "readonly": true,
              "default": "true",
              "inheritedFrom": {
                "name": "BaseFormAssociated",
                "module": "src/components/common/mixins/forms/associated.ts"
              }
            },
            {
              "kind": "field",
              "name": "__internals",
              "type": {
                "text": "ElementInternals"
              },
              "privacy": "private",
              "inheritedFrom": {
                "name": "BaseFormAssociated",
                "module": "src/components/common/mixins/forms/associated.ts"
              }
            },
            {
              "kind": "field",
              "name": "_disabled",
              "type": {
                "text": "boolean"
              },
              "privacy": "protected",
              "default": "false",
              "inheritedFrom": {
                "name": "BaseFormAssociated",
                "module": "src/components/common/mixins/forms/associated.ts"
              }
            },
            {
              "kind": "field",
              "name": "_invalid",
              "type": {
                "text": "boolean"
              },
              "privacy": "protected",
              "default": "false",
              "inheritedFrom": {
                "name": "BaseFormAssociated",
                "module": "src/components/common/mixins/forms/associated.ts"
              }
            },
            {
              "kind": "field",
              "name": "_dirty",
              "type": {
                "text": "boolean"
              },
              "privacy": "protected",
              "default": "false",
              "inheritedFrom": {
                "name": "BaseFormAssociated",
                "module": "src/components/common/mixins/forms/associated.ts"
              }
            },
            {
              "kind": "field",
              "name": "_pristine",
              "type": {
                "text": "boolean"
              },
              "privacy": "protected",
              "default": "true",
              "inheritedFrom": {
                "name": "BaseFormAssociated",
                "module": "src/components/common/mixins/forms/associated.ts"
              }
            },
            {
              "kind": "field",
              "name": "name",
              "type": {
                "text": "string"
              },
              "privacy": "public",
              "description": "The name attribute of the control.",
              "attribute": "name",
              "reflects": true,
              "inheritedFrom": {
                "name": "BaseFormAssociated",
                "module": "src/components/common/mixins/forms/associated.ts"
              }
            },
            {
              "kind": "field",
              "name": "disabled",
              "privacy": "public",
              "description": "The disabled state of the component.",
              "default": "false",
              "attribute": "disabled",
              "type": {
                "text": "boolean"
              },
              "reflects": true,
              "inheritedFrom": {
                "name": "BaseFormAssociated",
                "module": "src/components/common/mixins/forms/associated.ts"
              }
            },
            {
              "kind": "field",
              "name": "invalid",
              "privacy": "public",
              "description": "Sets the control into invalid state (visual state only).",
              "default": "false",
              "attribute": "invalid",
              "type": {
                "text": "boolean"
              },
              "reflects": true,
              "inheritedFrom": {
                "name": "BaseFormAssociated",
                "module": "src/components/common/mixins/forms/associated.ts"
              }
            },
            {
              "kind": "field",
              "name": "form",
              "type": {
                "text": "HTMLFormElement | null"
              },
              "privacy": "public",
              "description": "Returns the HTMLFormElement associated with this element.",
              "readonly": true,
              "inheritedFrom": {
                "name": "BaseFormAssociated",
                "module": "src/components/common/mixins/forms/associated.ts"
              }
            },
            {
              "kind": "field",
              "name": "validity",
              "type": {
                "text": "ValidityState"
              },
              "privacy": "public",
              "description": "Returns a ValidityState object which represents the different validity states\nthe element can be in, with respect to constraint validation.",
              "readonly": true,
              "inheritedFrom": {
                "name": "BaseFormAssociated",
                "module": "src/components/common/mixins/forms/associated.ts"
              }
            },
            {
              "kind": "field",
              "name": "validationMessage",
              "type": {
                "text": "string"
              },
              "privacy": "public",
              "description": "A string containing the validation message of this element.",
              "readonly": true,
              "inheritedFrom": {
                "name": "BaseFormAssociated",
                "module": "src/components/common/mixins/forms/associated.ts"
              }
            },
            {
              "kind": "field",
              "name": "willValidate",
              "type": {
                "text": "boolean"
              },
              "privacy": "public",
              "description": "A boolean value which returns true if the element is a submittable element\nthat is a candidate for constraint validation.",
              "readonly": true,
              "inheritedFrom": {
                "name": "BaseFormAssociated",
                "module": "src/components/common/mixins/forms/associated.ts"
              }
            },
            {
              "kind": "method",
              "name": "_handleInvalid",
              "privacy": "private",
              "parameters": [
                {
                  "name": "event",
                  "type": {
                    "text": "Event"
                  }
                }
              ],
              "inheritedFrom": {
                "name": "BaseFormAssociated",
                "module": "src/components/common/mixins/forms/associated.ts"
              }
            },
            {
              "kind": "method",
              "name": "_setInvalidState",
              "privacy": "private",
              "return": {
                "type": {
                  "text": "void"
                }
              },
              "inheritedFrom": {
                "name": "BaseFormAssociated",
                "module": "src/components/common/mixins/forms/associated.ts"
              }
            },
            {
              "kind": "method",
              "name": "__runValidators",
              "privacy": "private",
              "inheritedFrom": {
                "name": "BaseFormAssociated",
                "module": "src/components/common/mixins/forms/associated.ts"
              }
            },
            {
              "kind": "method",
              "name": "_setDefaultValue",
              "privacy": "protected",
              "return": {
                "type": {
                  "text": "void"
                }
              },
              "parameters": [
                {
                  "name": "current",
                  "type": {
                    "text": "string | null"
                  }
                }
              ],
              "inheritedFrom": {
                "name": "BaseFormAssociated",
                "module": "src/components/common/mixins/forms/associated.ts"
              }
            },
            {
              "kind": "method",
              "name": "_restoreDefaultValue",
              "privacy": "protected",
              "return": {
                "type": {
                  "text": "void"
                }
              },
              "inheritedFrom": {
                "name": "BaseFormAssociated",
                "module": "src/components/common/mixins/forms/associated.ts"
              }
            },
            {
              "kind": "method",
              "name": "_validate",
              "privacy": "protected",
              "return": {
                "type": {
                  "text": "void"
                }
              },
              "parameters": [
                {
                  "name": "message",
                  "optional": true,
                  "type": {
                    "text": "string"
                  }
                }
              ],
              "inheritedFrom": {
                "name": "BaseFormAssociated",
                "module": "src/components/common/mixins/forms/associated.ts"
              }
            },
            {
              "kind": "method",
              "name": "_updateValidity",
              "privacy": "protected",
              "parameters": [
                {
                  "name": "error",
                  "optional": true,
                  "type": {
                    "text": "string"
                  }
                }
              ],
              "description": "Executes the component validators and updates the internal validity state.",
              "inheritedFrom": {
                "name": "BaseFormAssociated",
                "module": "src/components/common/mixins/forms/associated.ts"
              }
            },
            {
              "kind": "method",
              "name": "_setFormValue",
              "privacy": "protected",
              "return": {
                "type": {
                  "text": "void"
                }
              },
              "parameters": [
                {
                  "name": "value",
                  "type": {
                    "text": "FormValueType"
                  }
                },
                {
                  "name": "state",
                  "optional": true,
                  "type": {
                    "text": "FormValueType"
                  }
                }
              ],
              "inheritedFrom": {
                "name": "BaseFormAssociated",
                "module": "src/components/common/mixins/forms/associated.ts"
              }
            },
            {
              "kind": "method",
              "name": "formAssociatedCallback",
              "privacy": "protected",
              "return": {
                "type": {
                  "text": "void"
                }
              },
              "parameters": [
                {
                  "name": "_form",
                  "type": {
                    "text": "HTMLFormElement"
                  }
                }
              ],
              "inheritedFrom": {
                "name": "BaseFormAssociated",
                "module": "src/components/common/mixins/forms/associated.ts"
              }
            },
            {
              "kind": "method",
              "name": "formDisabledCallback",
              "privacy": "protected",
              "return": {
                "type": {
                  "text": "void"
                }
              },
              "parameters": [
                {
                  "name": "state",
                  "type": {
                    "text": "boolean"
                  }
                }
              ],
              "inheritedFrom": {
                "name": "BaseFormAssociated",
                "module": "src/components/common/mixins/forms/associated.ts"
              }
            },
            {
              "kind": "method",
              "name": "formStateRestoreCallback",
              "privacy": "protected",
              "return": {
                "type": {
                  "text": "void"
                }
              },
              "parameters": [
                {
                  "name": "_state",
                  "type": {
                    "text": "FormValueType"
                  }
                },
                {
                  "name": "_mode",
                  "type": {
                    "text": "FormRestoreMode"
                  }
                }
              ],
              "inheritedFrom": {
                "name": "BaseFormAssociated",
                "module": "src/components/common/mixins/forms/associated.ts"
              }
            },
            {
              "kind": "method",
              "name": "reportValidity",
              "privacy": "public",
              "description": "Checks for validity of the control and shows the browser message if it invalid.",
              "inheritedFrom": {
                "name": "BaseFormAssociated",
                "module": "src/components/common/mixins/forms/associated.ts"
              }
            },
            {
              "kind": "method",
              "name": "checkValidity",
              "privacy": "public",
              "description": "Checks for validity of the control and emits the invalid event if it invalid.",
              "inheritedFrom": {
                "name": "BaseFormAssociated",
                "module": "src/components/common/mixins/forms/associated.ts"
              }
            },
            {
              "kind": "method",
              "name": "setCustomValidity",
              "privacy": "public",
              "parameters": [
                {
                  "name": "message",
                  "type": {
                    "text": "string"
                  }
                }
              ],
              "description": "Sets a custom validation message for the control.\nAs long as `message` is not empty, the control is considered invalid.",
              "inheritedFrom": {
                "name": "BaseFormAssociated",
                "module": "src/components/common/mixins/forms/associated.ts"
              }
            },
            {
              "kind": "method",
              "name": "addEventListener",
              "privacy": "public",
              "return": {
                "type": {
                  "text": "void"
                }
              },
              "parameters": [
                {
                  "name": "type",
                  "type": {
                    "text": "K"
                  }
                },
                {
                  "name": "listener",
                  "type": {
                    "text": "(this: HTMLElement, ev: M[K]) => any"
                  }
                },
                {
                  "name": "options",
                  "optional": true,
                  "type": {
                    "text": "boolean | AddEventListenerOptions"
                  }
                }
              ],
              "inheritedFrom": {
                "name": "EventEmitterMixin",
                "module": "src/components/common/mixins/event-emitter.ts"
              }
            },
            {
              "kind": "method",
              "name": "removeEventListener",
              "privacy": "public",
              "return": {
                "type": {
                  "text": "void"
                }
              },
              "parameters": [
                {
                  "name": "type",
                  "type": {
                    "text": "K"
                  }
                },
                {
                  "name": "listener",
                  "type": {
                    "text": "(this: HTMLElement, ev: M[K]) => any"
                  }
                },
                {
                  "name": "options",
                  "optional": true,
                  "type": {
                    "text": "boolean | EventListenerOptions"
                  }
                }
              ],
              "inheritedFrom": {
                "name": "EventEmitterMixin",
                "module": "src/components/common/mixins/event-emitter.ts"
              }
            },
            {
              "kind": "method",
              "name": "emitEvent",
              "type": {
                "text": "<\n    K extends keyof IgcBaseComboBoxEventMap,\n    D extends UnpackCustomEvent<IgcBaseComboBoxEventMap[K]>,\n  >(\n    event: K,\n    eventInitDict?: CustomEventInit<D>\n  ) => boolean"
              },
              "privacy": "public",
              "return": {
                "type": {
                  "text": "boolean"
                }
              },
              "parameters": [
                {
                  "name": "type",
                  "type": {
                    "text": "K"
                  }
                },
                {
                  "name": "eventInitDict",
                  "optional": true,
                  "type": {
                    "text": "CustomEventInit<D>"
                  }
                }
              ],
              "inheritedFrom": {
                "name": "IgcBaseComboBoxLikeComponent",
                "module": "src/components/common/mixins/combo-box.ts"
              }
            },
            {
              "kind": "field",
              "name": "keepOpenOnSelect",
              "type": {
                "text": "boolean"
              },
              "privacy": "public",
              "default": "false",
              "description": "Whether the component dropdown should be kept open on selection.",
              "attribute": "keep-open-on-select",
              "reflects": true,
              "inheritedFrom": {
                "name": "IgcBaseComboBoxLikeComponent",
                "module": "src/components/common/mixins/combo-box.ts"
              }
            },
            {
              "kind": "field",
              "name": "keepOpenOnOutsideClick",
              "type": {
                "text": "boolean"
              },
              "privacy": "public",
              "default": "false",
              "description": "Whether the component dropdown should be kept open on clicking outside of it.",
              "attribute": "keep-open-on-outside-click",
              "reflects": true,
              "inheritedFrom": {
                "name": "IgcBaseComboBoxLikeComponent",
                "module": "src/components/common/mixins/combo-box.ts"
              }
            },
            {
              "kind": "field",
              "name": "open",
              "type": {
                "text": "boolean"
              },
              "privacy": "public",
              "default": "false",
              "description": "Sets the open state of the component.",
              "attribute": "open",
              "reflects": true,
              "inheritedFrom": {
                "name": "IgcBaseComboBoxLikeComponent",
                "module": "src/components/common/mixins/combo-box.ts"
              }
            },
            {
              "kind": "method",
              "name": "emitClosing",
              "privacy": "protected",
              "inheritedFrom": {
                "name": "IgcBaseComboBoxLikeComponent",
                "module": "src/components/common/mixins/combo-box.ts"
              }
            },
            {
              "kind": "method",
              "name": "emitClosed",
              "privacy": "protected",
              "inheritedFrom": {
                "name": "IgcBaseComboBoxLikeComponent",
                "module": "src/components/common/mixins/combo-box.ts"
              }
            },
            {
              "kind": "method",
              "name": "emitOpening",
              "privacy": "protected",
              "inheritedFrom": {
                "name": "IgcBaseComboBoxLikeComponent",
                "module": "src/components/common/mixins/combo-box.ts"
              }
            },
            {
              "kind": "method",
              "name": "emitOpened",
              "privacy": "protected",
              "inheritedFrom": {
                "name": "IgcBaseComboBoxLikeComponent",
                "module": "src/components/common/mixins/combo-box.ts"
              }
            },
            {
              "kind": "method",
              "name": "_hide",
              "privacy": "protected",
              "parameters": [
                {
                  "name": "emitEvent",
                  "default": "false"
                }
              ],
              "inheritedFrom": {
                "name": "IgcBaseComboBoxLikeComponent",
                "module": "src/components/common/mixins/combo-box.ts"
              }
            },
            {
              "kind": "method",
              "name": "_show",
              "privacy": "protected",
              "parameters": [
                {
                  "name": "emitEvent",
                  "default": "false"
                }
              ],
              "inheritedFrom": {
                "name": "IgcBaseComboBoxLikeComponent",
                "module": "src/components/common/mixins/combo-box.ts"
              }
            },
            {
              "kind": "method",
              "name": "show",
              "privacy": "public",
              "return": {
                "type": {
                  "text": "Promise<boolean>"
                }
              },
              "description": "Shows the component.",
              "inheritedFrom": {
                "name": "IgcBaseComboBoxLikeComponent",
                "module": "src/components/common/mixins/combo-box.ts"
              }
            },
            {
              "kind": "method",
              "name": "hide",
              "privacy": "public",
              "return": {
                "type": {
                  "text": "Promise<boolean>"
                }
              },
              "description": "Hides the component.",
              "inheritedFrom": {
                "name": "IgcBaseComboBoxLikeComponent",
                "module": "src/components/common/mixins/combo-box.ts"
              }
            },
            {
              "kind": "method",
              "name": "toggle",
              "privacy": "public",
              "return": {
                "type": {
                  "text": "Promise<boolean>"
                }
              },
              "description": "Toggles the open state of the component.",
              "inheritedFrom": {
                "name": "IgcBaseComboBoxLikeComponent",
                "module": "src/components/common/mixins/combo-box.ts"
              }
            }
          ],
          "events": [
            {
              "description": "Emitted just before the calendar dropdown is shown.",
              "name": "igcOpening"
            },
            {
              "description": "Emitted after the calendar dropdown is shown.",
              "name": "igcOpened"
            },
            {
              "description": "Emitted just before the calendar dropdown is hidden.",
              "name": "igcClosing"
            },
            {
              "description": "Emitted after the calendar dropdown is hidden.",
              "name": "igcClosed"
            },
            {
              "description": "Emitted when the user modifies and commits the elements's value.",
              "name": "igcChange"
            },
            {
              "description": "Emitted when when the user types in the element.",
              "name": "igcInput"
            },
            {
              "type": {
                "text": "CustomEvent"
              },
              "inheritedFrom": {
                "name": "EventEmitterMixin",
                "module": "src/components/common/mixins/event-emitter.ts"
              }
            }
          ],
          "attributes": [
            {
              "name": "mode",
              "type": {
                "text": "PickerMode"
              },
              "default": "'dropdown'",
              "description": "Determines whether the calendar is opened in a dropdown or a modal dialog",
              "fieldName": "mode",
              "attribute": "mode",
              "expandedType": {
                "text": "'dropdown' | 'dialog'"
              }
            },
            {
              "name": "use-two-inputs",
              "type": {
                "text": "boolean"
              },
              "default": "false",
              "description": "Use two inputs to display the date range values. Makes the input editable in dropdown mode.",
              "fieldName": "useTwoInputs",
              "attribute": "use-two-inputs"
            },
            {
              "name": "usePredefinedRanges",
              "type": {
                "text": "boolean"
              },
              "default": "false",
              "description": "Whether the control will show chips with predefined ranges.",
              "fieldName": "usePredefinedRanges"
            },
            {
              "name": "locale",
              "type": {
                "text": "string"
              },
              "default": "'en'",
              "description": "The locale settings used to display the value.",
              "fieldName": "locale",
              "attribute": "locale"
            },
            {
              "name": "readonly",
              "type": {
                "text": "boolean"
              },
              "default": "false",
              "description": "Makes the control a readonly field.",
              "fieldName": "readOnly",
              "attribute": "readonly"
            },
            {
              "name": "non-editable",
              "type": {
                "text": "boolean"
              },
              "default": "false",
              "description": "Whether to allow typing in the input.",
              "fieldName": "nonEditable",
              "attribute": "non-editable"
            },
            {
              "name": "outlined",
              "type": {
                "text": "boolean"
              },
              "default": "false",
              "description": "Whether the control will have outlined appearance.",
              "fieldName": "outlined",
              "attribute": "outlined"
            },
            {
              "name": "label",
              "type": {
                "text": "string"
              },
              "description": "The label of the control (single input).",
              "fieldName": "label",
              "attribute": "label"
            },
            {
              "name": "label-start",
              "type": {
                "text": "string"
              },
              "default": "''",
              "description": "The label attribute of the start input.",
              "fieldName": "labelStart",
              "attribute": "label-start"
            },
            {
              "name": "label-end",
              "type": {
                "text": "string"
              },
              "default": "''",
              "description": "The label attribute of the end input.",
              "fieldName": "labelEnd",
              "attribute": "label-end"
            },
            {
              "name": "placeholder",
              "description": "The placeholder attribute of the control (single input).",
              "fieldName": "placeholder",
              "attribute": "placeholder",
              "type": {
                "text": "string"
              }
            },
            {
              "name": "placeholder-start",
              "type": {
                "text": "string"
              },
              "default": "''",
              "description": "The placeholder attribute of the start input.",
              "fieldName": "placeholderStart",
              "attribute": "placeholder-start"
            },
            {
              "name": "placeholder-end",
              "type": {
                "text": "string"
              },
              "default": "''",
              "description": "The placeholder attribute of the end input.",
              "fieldName": "placeholderEnd",
              "attribute": "placeholder-end"
            },
            {
              "name": "prompt",
              "type": {
                "text": "string"
              },
              "default": "'_'",
              "description": "The prompt symbol to use for unfilled parts of the mask.",
              "fieldName": "prompt",
              "attribute": "prompt"
            },
            {
              "name": "display-format",
              "description": "Format to display the value in when not editing.\nDefaults to the input format if not set.",
              "fieldName": "displayFormat",
              "attribute": "display-format",
              "type": {
                "text": "string"
              }
            },
            {
              "name": "input-format",
              "description": "The date format to apply on the inputs.\nDefaults to the current locale Intl.DateTimeFormat",
              "fieldName": "inputFormat",
              "attribute": "input-format",
              "type": {
                "text": "string"
              }
            },
            {
              "name": "min",
              "description": "The minimum value required for the date range picker to remain valid.",
              "fieldName": "min",
              "attribute": "min",
              "type": {
                "text": "Date | null"
              }
            },
            {
              "name": "max",
              "description": "The maximum value required for the date range picker to remain valid.",
              "fieldName": "max",
              "attribute": "max",
              "type": {
                "text": "Date | null"
              }
            },
            {
              "name": "visible-months",
              "type": {
                "text": "number"
              },
              "description": "The number of months displayed in the calendar.",
              "fieldName": "visibleMonths",
              "attribute": "visible-months"
            },
            {
              "name": "header-orientation",
              "type": {
                "text": "ContentOrientation"
              },
              "default": "'horizontal'",
              "description": "The orientation of the calendar header.",
              "fieldName": "headerOrientation",
              "attribute": "header-orientation",
              "expandedType": {
                "text": "'horizontal' | 'vertical'"
              }
            },
            {
              "name": "orientation",
              "type": {
                "text": "ContentOrientation"
              },
              "default": "'horizontal'",
              "description": "The orientation of the multiple months displayed in the calendar's days view.",
              "fieldName": "orientation",
              "attribute": "orientation",
              "expandedType": {
                "text": "'horizontal' | 'vertical'"
              }
            },
            {
              "name": "hide-header",
              "type": {
                "text": "boolean"
              },
              "default": "false",
              "description": "Determines whether the calendar hides its header.",
              "fieldName": "hideHeader",
              "attribute": "hide-header"
            },
            {
              "name": "show-week-numbers",
              "type": {
                "text": "boolean"
              },
              "default": "false",
              "description": "Whether to show the number of the week in the calendar.",
              "fieldName": "showWeekNumbers",
              "attribute": "show-week-numbers"
            },
            {
              "name": "hide-outside-days",
              "type": {
                "text": "boolean"
              },
              "default": "false",
              "description": "Controls the visibility of the dates that do not belong to the current month.",
              "fieldName": "hideOutsideDays",
              "attribute": "hide-outside-days"
            },
            {
              "name": "value",
              "type": {
                "text": "DateRangeValue | null"
              },
              "fieldName": "value"
            },
            {
              "name": "use-predefined-ranges",
              "type": {
                "text": "boolean"
              },
              "default": "false",
              "description": "Whether the control will show chips with predefined ranges.",
              "attribute": "usePredefinedRanges",
              "fieldName": "usePredefinedRanges"
            },
            {
              "name": "active-date",
              "description": "Gets/Sets the date which is shown in the calendar picker and is highlighted.\nBy default it is the current date.",
              "type": {
                "text": "Date"
              },
              "fieldName": "activeDate"
            },
            {
              "name": "week-start",
              "type": {
                "text": "WeekDays"
              },
              "default": "'sunday'",
              "description": "Sets the start day of the week for the calendar.",
              "fieldName": "weekStart",
              "expandedType": {
                "text": "'sunday' | 'monday' | 'tuesday' | 'wednesday' | 'thursday' | 'friday' | 'saturday'"
              }
            },
            {
              "name": "required",
              "description": "When set, makes the component a required field for validation.",
              "default": "false",
              "fieldName": "required",
              "attribute": "required",
              "type": {
                "text": "boolean"
              },
              "inheritedFrom": {
                "name": "FormAssociatedRequiredMixin",
                "module": "src/components/common/mixins/forms/associated-required.ts"
              }
            },
            {
              "name": "name",
              "type": {
                "text": "string"
              },
              "description": "The name attribute of the control.",
              "fieldName": "name",
              "attribute": "name",
              "inheritedFrom": {
                "name": "BaseFormAssociated",
                "module": "src/components/common/mixins/forms/associated.ts"
              }
            },
            {
              "name": "disabled",
              "description": "The disabled state of the component.",
              "default": "false",
              "fieldName": "disabled",
              "attribute": "disabled",
              "type": {
                "text": "boolean"
              },
              "inheritedFrom": {
                "name": "BaseFormAssociated",
                "module": "src/components/common/mixins/forms/associated.ts"
              }
            },
            {
              "name": "invalid",
              "description": "Sets the control into invalid state (visual state only).",
              "default": "false",
              "fieldName": "invalid",
              "attribute": "invalid",
              "type": {
                "text": "boolean"
              },
              "inheritedFrom": {
                "name": "BaseFormAssociated",
                "module": "src/components/common/mixins/forms/associated.ts"
              }
            },
            {
              "name": "keep-open-on-select",
              "type": {
                "text": "boolean"
              },
              "default": "false",
              "description": "Whether the component dropdown should be kept open on selection.",
              "fieldName": "keepOpenOnSelect",
              "attribute": "keep-open-on-select",
              "inheritedFrom": {
                "name": "IgcBaseComboBoxLikeComponent",
                "module": "src/components/common/mixins/combo-box.ts"
              }
            },
            {
              "name": "keep-open-on-outside-click",
              "type": {
                "text": "boolean"
              },
              "default": "false",
              "description": "Whether the component dropdown should be kept open on clicking outside of it.",
              "fieldName": "keepOpenOnOutsideClick",
              "attribute": "keep-open-on-outside-click",
              "inheritedFrom": {
                "name": "IgcBaseComboBoxLikeComponent",
                "module": "src/components/common/mixins/combo-box.ts"
              }
            },
            {
              "name": "open",
              "type": {
                "text": "boolean"
              },
              "default": "false",
              "description": "Sets the open state of the component.",
              "fieldName": "open",
              "attribute": "open",
              "inheritedFrom": {
                "name": "IgcBaseComboBoxLikeComponent",
                "module": "src/components/common/mixins/combo-box.ts"
              }
            }
          ],
          "mixins": [
            {
              "name": "FormAssociatedRequiredMixin",
              "module": "/src/components/common/mixins/forms/associated-required.js"
            },
            {
              "name": "EventEmitterMixin",
              "module": "/src/components/common/mixins/event-emitter.js"
            }
          ],
          "superclass": {
            "name": "IgcBaseComboBoxLikeComponent",
            "module": "/src/components/common/mixins/combo-box.js"
          },
          "tagName": "igc-date-range-picker",
          "customElement": true
        }
      ],
      "exports": [
        {
          "kind": "js",
          "name": "default",
          "declaration": {
            "name": "IgcDateRangePickerComponent",
            "module": "src/components/date-range-picker/date-range-picker.ts"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "src/components/calendar/helpers.ts",
      "declarations": [
        {
          "kind": "variable",
          "name": "MONTHS_PER_ROW",
          "type": {
            "text": "number"
          },
          "default": "3"
        },
        {
          "kind": "variable",
          "name": "YEARS_PER_ROW",
          "type": {
            "text": "number"
          },
          "default": "3"
        },
        {
          "kind": "variable",
          "name": "YEARS_PER_PAGE",
          "type": {
            "text": "number"
          },
          "default": "15"
        },
        {
          "kind": "function",
          "name": "isValidDate",
          "parameters": [
            {
              "name": "date",
              "type": {
                "text": "Date"
              }
            }
          ]
        },
        {
          "kind": "function",
          "name": "parseISODate",
          "parameters": [
            {
              "name": "string",
              "type": {
                "text": "string"
              }
            }
          ]
        },
        {
          "kind": "function",
          "name": "convertToDate",
          "return": {
            "type": {
              "text": "Date | null"
            }
          },
          "parameters": [
            {
              "name": "value",
              "optional": true,
              "type": {
                "text": "Date | string | null"
              }
            }
          ],
          "description": "Converts the given value to a Date object.\n\nIf the value is already a valid Date object, it is returned directly.\nIf the value is a string, it is parsed into a Date object.\nIf the value is null or undefined, null is returned.\nIf the parsing fails, null is returned."
        },
        {
          "kind": "function",
          "name": "convertToDateRange",
          "return": {
            "type": {
              "text": "DateRangeValue | null"
            }
          },
          "parameters": [
            {
              "name": "value",
              "optional": true,
              "type": {
                "text": "DateRangeValue | string | null"
              }
            }
          ],
          "description": "Converts the given value to a DateRangeValue object.\n\nIf the value is already a valid DateRangeValue object, it is returned directly.\nIf the value is a string, it is parsed to object and returned if it fields are valid dates.\nIf the value is null or undefined, null is returned.\nIf the parsing fails, null is returned."
        },
        {
          "kind": "function",
          "name": "getDateFormValue",
          "parameters": [
            {
              "name": "value",
              "type": {
                "text": "Date | null"
              }
            }
          ],
          "description": "Converts a Date object to an ISO 8601 string.\n\nIf the `value` is a `Date` object, it is converted to an ISO 8601 string.\nIf the `value` is null or undefined, null is returned."
        },
        {
          "kind": "function",
          "name": "convertToDates",
          "parameters": [
            {
              "name": "value",
              "optional": true,
              "type": {
                "text": "(Date | string)[] | string | null"
              }
            }
          ],
          "description": "Converts a comma-separated string of ISO 8601 dates or an array of Date objects | ISO 8601 strings into\nan array of Date objects.\n\nIf the `value` is null or undefined, null is returned.\nIf the `value` is an array of `Date` objects, a filtered array of valid `Date` objects is returned.\nIf the `value` is a string, it is split by commas and each part is parsed into a `Date` object.\nIf the parsing fails for any date, it is skipped."
        },
        {
          "kind": "function",
          "name": "getViewElement",
          "parameters": [
            {
              "name": "event",
              "type": {
                "text": "Event"
              }
            }
          ],
          "description": "Returns the value of the selected/activated element (day/month/year) in the calendar view."
        },
        {
          "kind": "function",
          "name": "getWeekDayNumber",
          "parameters": [
            {
              "name": "value",
              "type": {
                "text": "WeekDays"
              }
            }
          ]
        },
        {
          "kind": "function",
          "name": "areSameMonth",
          "parameters": [
            {
              "name": "first",
              "type": {
                "text": "DayParameter"
              }
            },
            {
              "name": "second",
              "type": {
                "text": "DayParameter"
              }
            }
          ]
        },
        {
          "kind": "function",
          "name": "isNextMonth",
          "parameters": [
            {
              "name": "target",
              "type": {
                "text": "DayParameter"
              }
            },
            {
              "name": "origin",
              "type": {
                "text": "DayParameter"
              }
            }
          ]
        },
        {
          "kind": "function",
          "name": "isPreviousMonth",
          "parameters": [
            {
              "name": "target",
              "type": {
                "text": "DayParameter"
              }
            },
            {
              "name": "origin",
              "type": {
                "text": "DayParameter"
              }
            }
          ]
        },
        {
          "kind": "function",
          "name": "calendarRange",
          "return": {
            "type": {
              "text": "Generator<CalendarDay, void, unknown>"
            }
          },
          "parameters": [
            {
              "name": "options",
              "type": {
                "text": "CalendarRangeParams"
              }
            }
          ],
          "description": "Returns a generator yielding day values between `start` and `end` (non-inclusive by default)\nby a given `unit` as a step.\nTo include the end date set the `inclusive` option to true."
        },
        {
          "kind": "function",
          "name": "generateMonth",
          "parameters": [
            {
              "name": "value",
              "type": {
                "text": "DayParameter"
              }
            },
            {
              "name": "firstWeekDay",
              "type": {
                "text": "number"
              }
            }
          ]
        },
        {
          "kind": "function",
          "name": "getYearRange",
          "parameters": [
            {
              "name": "current",
              "type": {
                "text": "DayParameter"
              }
            },
            {
              "name": "range",
              "type": {
                "text": "number"
              }
            }
          ]
        },
        {
          "kind": "function",
          "name": "isDateInRanges",
          "parameters": [
            {
              "name": "date",
              "type": {
                "text": "DayParameter"
              }
            },
            {
              "name": "ranges",
              "type": {
                "text": "DateRangeDescriptor[]"
              }
            }
          ]
        }
      ],
      "exports": [
        {
          "kind": "js",
          "name": "MONTHS_PER_ROW",
          "declaration": {
            "name": "MONTHS_PER_ROW",
            "module": "src/components/calendar/helpers.ts"
          }
        },
        {
          "kind": "js",
          "name": "YEARS_PER_ROW",
          "declaration": {
            "name": "YEARS_PER_ROW",
            "module": "src/components/calendar/helpers.ts"
          }
        },
        {
          "kind": "js",
          "name": "YEARS_PER_PAGE",
          "declaration": {
            "name": "YEARS_PER_PAGE",
            "module": "src/components/calendar/helpers.ts"
          }
        },
        {
          "kind": "js",
          "name": "isValidDate",
          "declaration": {
            "name": "isValidDate",
            "module": "src/components/calendar/helpers.ts"
          }
        },
        {
          "kind": "js",
          "name": "parseISODate",
          "declaration": {
            "name": "parseISODate",
            "module": "src/components/calendar/helpers.ts"
          }
        },
        {
          "kind": "js",
          "name": "convertToDate",
          "declaration": {
            "name": "convertToDate",
            "module": "src/components/calendar/helpers.ts"
          }
        },
        {
          "kind": "js",
          "name": "convertToDateRange",
          "declaration": {
            "name": "convertToDateRange",
            "module": "src/components/calendar/helpers.ts"
          }
        },
        {
          "kind": "js",
          "name": "getDateFormValue",
          "declaration": {
            "name": "getDateFormValue",
            "module": "src/components/calendar/helpers.ts"
          }
        },
        {
          "kind": "js",
          "name": "convertToDates",
          "declaration": {
            "name": "convertToDates",
            "module": "src/components/calendar/helpers.ts"
          }
        },
        {
          "kind": "js",
          "name": "getViewElement",
          "declaration": {
            "name": "getViewElement",
            "module": "src/components/calendar/helpers.ts"
          }
        },
        {
          "kind": "js",
          "name": "getWeekDayNumber",
          "declaration": {
            "name": "getWeekDayNumber",
            "module": "src/components/calendar/helpers.ts"
          }
        },
        {
          "kind": "js",
          "name": "areSameMonth",
          "declaration": {
            "name": "areSameMonth",
            "module": "src/components/calendar/helpers.ts"
          }
        },
        {
          "kind": "js",
          "name": "isNextMonth",
          "declaration": {
            "name": "isNextMonth",
            "module": "src/components/calendar/helpers.ts"
          }
        },
        {
          "kind": "js",
          "name": "isPreviousMonth",
          "declaration": {
            "name": "isPreviousMonth",
            "module": "src/components/calendar/helpers.ts"
          }
        },
        {
          "kind": "js",
          "name": "calendarRange",
          "declaration": {
            "name": "calendarRange",
            "module": "src/components/calendar/helpers.ts"
          }
        },
        {
          "kind": "js",
          "name": "generateMonth",
          "declaration": {
            "name": "generateMonth",
            "module": "src/components/calendar/helpers.ts"
          }
        },
        {
          "kind": "js",
          "name": "getYearRange",
          "declaration": {
            "name": "getYearRange",
            "module": "src/components/calendar/helpers.ts"
          }
        },
        {
          "kind": "js",
          "name": "isDateInRanges",
          "declaration": {
            "name": "isDateInRanges",
            "module": "src/components/calendar/helpers.ts"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "src/components/calendar/base.ts",
      "declarations": [
        {
          "kind": "class",
          "description": "",
          "name": "IgcCalendarBaseComponent",
          "members": [
            {
              "kind": "field",
              "name": "_initialActiveDateSet",
              "type": {
                "text": "boolean"
              },
              "privacy": "private",
              "default": "false"
            },
            {
              "kind": "field",
              "name": "_hasValues",
              "privacy": "protected",
              "readonly": true
            },
            {
              "kind": "field",
              "name": "_isSingle",
              "privacy": "protected",
              "readonly": true
            },
            {
              "kind": "field",
              "name": "_isMultiple",
              "privacy": "protected",
              "readonly": true
            },
            {
              "kind": "field",
              "name": "_isRange",
              "privacy": "protected",
              "readonly": true
            },
            {
              "kind": "field",
              "name": "_rangePreviewDate",
              "type": {
                "text": "CalendarDay | undefined"
              },
              "privacy": "protected"
            },
            {
              "kind": "field",
              "name": "_firstDayOfWeek",
              "type": {
                "text": "number"
              },
              "privacy": "protected",
              "default": "0"
            },
            {
              "kind": "field",
              "name": "_activeDate",
              "privacy": "protected"
            },
            {
              "kind": "field",
              "name": "_value",
              "type": {
                "text": "CalendarDay | null"
              },
              "privacy": "protected",
              "default": "null"
            },
            {
              "kind": "field",
              "name": "_values",
              "type": {
                "text": "CalendarDay[]"
              },
              "privacy": "protected",
              "default": "[]"
            },
            {
              "kind": "field",
              "name": "_specialDates",
              "type": {
                "text": "DateRangeDescriptor[]"
              },
              "privacy": "protected",
              "default": "[]"
            },
            {
              "kind": "field",
              "name": "_disabledDates",
              "type": {
                "text": "DateRangeDescriptor[]"
              },
              "privacy": "protected",
              "default": "[]"
            },
            {
              "kind": "field",
              "name": "value",
              "privacy": "public",
              "description": "The current value of the calendar.\nUsed when selection is set to single",
              "attribute": "value",
              "type": {
                "text": "Date | null"
              }
            },
            {
              "kind": "field",
              "name": "values",
              "privacy": "public",
              "description": "The current values of the calendar.\nUsed when selection is set to multiple of range.",
              "attribute": "values",
              "type": {
                "text": "Date[]"
              }
            },
            {
              "kind": "field",
              "name": "activeDate",
              "privacy": "public",
              "description": "Get/Set the date which is shown in view and is highlighted. By default it is the current date.",
              "type": {
                "text": "Date"
              },
              "attribute": "active-date"
            },
            {
              "kind": "field",
              "name": "selection",
              "type": {
                "text": "CalendarSelection"
              },
              "privacy": "public",
              "default": "'single'",
              "description": "Sets the type of selection in the component.",
              "attribute": "selection",
              "expandedType": {
                "text": "'single' | 'multiple' | 'range'"
              }
            },
            {
              "kind": "field",
              "name": "showWeekNumbers",
              "type": {
                "text": "boolean"
              },
              "privacy": "public",
              "default": "false",
              "description": "Whether to show the week numbers.",
              "attribute": "show-week-numbers",
              "reflects": true
            },
            {
              "kind": "field",
              "name": "weekStart",
              "type": {
                "text": "WeekDays"
              },
              "privacy": "public",
              "default": "'sunday'",
              "description": "Gets/Sets the first day of the week.",
              "attribute": "week-start",
              "expandedType": {
                "text": "'sunday' | 'monday' | 'tuesday' | 'wednesday' | 'thursday' | 'friday' | 'saturday'"
              }
            },
            {
              "kind": "field",
              "name": "locale",
              "type": {
                "text": "string"
              },
              "privacy": "public",
              "default": "'en'",
              "description": "Gets/Sets the locale used for formatting and displaying the dates in the component.",
              "attribute": "locale"
            },
            {
              "kind": "field",
              "name": "specialDates",
              "privacy": "public",
              "description": "Gets/Sets the special dates for the component.",
              "type": {
                "text": "DateRangeDescriptor[] | undefined"
              }
            },
            {
              "kind": "field",
              "name": "disabledDates",
              "privacy": "public",
              "description": "Gets/Sets the disabled dates for the component.",
              "type": {
                "text": "DateRangeDescriptor[] | undefined"
              }
            },
            {
              "kind": "method",
              "name": "weekStartChanged",
              "privacy": "protected"
            },
            {
              "kind": "method",
              "name": "selectionChanged",
              "privacy": "protected"
            }
          ],
          "attributes": [
            {
              "name": "value",
              "description": "The current value of the calendar.\nUsed when selection is set to single",
              "fieldName": "value",
              "attribute": "value",
              "type": {
                "text": "Date | null"
              }
            },
            {
              "name": "values",
              "description": "The current values of the calendar.\nUsed when selection is set to multiple of range.",
              "fieldName": "values",
              "attribute": "values",
              "type": {
                "text": "Date[]"
              }
            },
            {
              "name": "selection",
              "type": {
                "text": "CalendarSelection"
              },
              "default": "'single'",
              "description": "Sets the type of selection in the component.",
              "fieldName": "selection",
              "attribute": "selection",
              "expandedType": {
                "text": "'single' | 'multiple' | 'range'"
              }
            },
            {
              "name": "show-week-numbers",
              "type": {
                "text": "boolean"
              },
              "default": "false",
              "description": "Whether to show the week numbers.",
              "fieldName": "showWeekNumbers",
              "attribute": "show-week-numbers"
            },
            {
              "name": "week-start",
              "type": {
                "text": "WeekDays"
              },
              "default": "'sunday'",
              "description": "Gets/Sets the first day of the week.",
              "fieldName": "weekStart",
              "attribute": "week-start",
              "expandedType": {
                "text": "'sunday' | 'monday' | 'tuesday' | 'wednesday' | 'thursday' | 'friday' | 'saturday'"
              }
            },
            {
              "name": "locale",
              "type": {
                "text": "string"
              },
              "default": "'en'",
              "description": "Gets/Sets the locale used for formatting and displaying the dates in the component.",
              "fieldName": "locale",
              "attribute": "locale"
            },
            {
              "name": "active-date",
              "description": "Get/Set the date which is shown in view and is highlighted. By default it is the current date.",
              "type": {
                "text": "Date"
              },
              "fieldName": "activeDate"
            }
          ],
          "superclass": {
            "name": "LitElement",
            "package": "lit"
          },
          "customElement": true
        }
      ],
      "exports": [
        {
          "kind": "js",
          "name": "IgcCalendarBaseComponent",
          "declaration": {
            "name": "IgcCalendarBaseComponent",
            "module": "src/components/calendar/base.ts"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "src/components/common/decorators/blazorSuppressComponent.ts",
      "declarations": [
        {
          "kind": "function",
          "name": "blazorSuppressComponent",
          "parameters": [
            {
              "name": "_constructor",
              "type": {
                "text": "Constructor | AbstractConstructor"
              }
            }
          ],
          "description": "Indicates a class should not be exposed to blazor Blazor."
        }
      ],
      "exports": [
        {
          "kind": "js",
          "name": "blazorSuppressComponent",
          "declaration": {
            "name": "blazorSuppressComponent",
            "module": "src/components/common/decorators/blazorSuppressComponent.ts"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "src/components/calendar/days-view/days-view.ts",
      "declarations": [
        {
          "kind": "class",
          "description": "Instantiate a days view as a separate component in the calendar.",
          "name": "IgcDaysViewComponent",
          "cssParts": [
            {
              "description": "The days row container.",
              "name": "days-row"
            },
            {
              "description": "The label container.",
              "name": "label"
            },
            {
              "description": "The inner label container.",
              "name": "label-inner"
            },
            {
              "description": "The week number container.",
              "name": "week-number"
            },
            {
              "description": "The inner week number container.",
              "name": "week-number-inner"
            }
          ],
          "members": [
            {
              "kind": "field",
              "name": "tagName",
              "type": {
                "text": "string"
              },
              "privacy": "public",
              "static": true,
              "readonly": true,
              "default": "'igc-days-view'"
            },
            {
              "kind": "method",
              "name": "register",
              "privacy": "public",
              "static": true
            },
            {
              "kind": "field",
              "name": "dates",
              "type": {
                "text": "CalendarDay[]"
              },
              "privacy": "private"
            },
            {
              "kind": "field",
              "name": "activeDay",
              "type": {
                "text": "HTMLElement"
              },
              "privacy": "private"
            },
            {
              "kind": "field",
              "name": "active",
              "type": {
                "text": "boolean"
              },
              "privacy": "public",
              "default": "false",
              "description": "The active state of the component.",
              "attribute": "active"
            },
            {
              "kind": "field",
              "name": "hideLeadingDays",
              "type": {
                "text": "boolean"
              },
              "privacy": "public",
              "default": "false",
              "description": "Whether to show leading days which do not belong to the current month.",
              "attribute": "hide-leading-days"
            },
            {
              "kind": "field",
              "name": "hideTrailingDays",
              "type": {
                "text": "boolean"
              },
              "privacy": "public",
              "default": "false",
              "description": "Whether to show trailing days which do not belong to the current month.",
              "attribute": "hide-trailing-days"
            },
            {
              "kind": "field",
              "name": "rangePreviewDate",
              "privacy": "public",
              "description": "The range preview date."
            },
            {
              "kind": "field",
              "name": "resourceStrings",
              "privacy": "public",
              "default": "IgcCalendarResourceStringEN",
              "description": "The resource strings."
            },
            {
              "kind": "field",
              "name": "weekDayFormat",
              "type": {
                "text": "'long' | 'short' | 'narrow'"
              },
              "privacy": "public",
              "default": "'narrow'",
              "description": "The format of the days. Defaults to narrow.",
              "attribute": "week-day-format"
            },
            {
              "kind": "field",
              "name": "_intl",
              "privacy": "private"
            },
            {
              "kind": "method",
              "name": "localeChange",
              "privacy": "protected"
            },
            {
              "kind": "method",
              "name": "weekDayFormatChange",
              "privacy": "protected"
            },
            {
              "kind": "method",
              "name": "datesChange",
              "privacy": "protected"
            },
            {
              "kind": "method",
              "name": "focusActiveDate",
              "privacy": "public",
              "parameters": [
                {
                  "name": "options",
                  "optional": true,
                  "type": {
                    "text": "FocusOptions"
                  }
                }
              ],
              "description": "Focuses the active date."
            },
            {
              "kind": "method",
              "name": "handleInteraction",
              "privacy": "protected",
              "parameters": [
                {
                  "name": "event",
                  "type": {
                    "text": "Event"
                  }
                }
              ]
            },
            {
              "kind": "method",
              "name": "_selectMultiple",
              "privacy": "private",
              "parameters": [
                {
                  "name": "day",
                  "type": {
                    "text": "CalendarDay"
                  }
                }
              ]
            },
            {
              "kind": "method",
              "name": "_selectRange",
              "privacy": "private",
              "parameters": [
                {
                  "name": "day",
                  "type": {
                    "text": "CalendarDay"
                  }
                }
              ]
            },
            {
              "kind": "method",
              "name": "selectDate",
              "privacy": "private",
              "parameters": [
                {
                  "name": "value",
                  "type": {
                    "text": "CalendarDay"
                  }
                }
              ]
            },
            {
              "kind": "method",
              "name": "isSelected",
              "privacy": "private",
              "parameters": [
                {
                  "name": "day",
                  "type": {
                    "text": "CalendarDay"
                  }
                }
              ]
            },
            {
              "kind": "method",
              "name": "setRangePreviewDate",
              "privacy": "private",
              "parameters": [
                {
                  "name": "day",
                  "optional": true,
                  "type": {
                    "text": "CalendarDay"
                  }
                }
              ]
            },
            {
              "kind": "method",
              "name": "changeRangePreview",
              "privacy": "private",
              "parameters": [
                {
                  "name": "day",
                  "type": {
                    "text": "CalendarDay"
                  }
                }
              ]
            },
            {
              "kind": "method",
              "name": "clearRangePreview",
              "privacy": "private"
            },
            {
              "kind": "method",
              "name": "isFirstInRange",
              "privacy": "private",
              "parameters": [
                {
                  "name": "day",
                  "type": {
                    "text": "CalendarDay"
                  }
                }
              ]
            },
            {
              "kind": "method",
              "name": "isLastInRange",
              "privacy": "private",
              "parameters": [
                {
                  "name": "day",
                  "type": {
                    "text": "CalendarDay"
                  }
                }
              ]
            },
            {
              "kind": "method",
              "name": "isRangeDate",
              "privacy": "private",
              "parameters": [
                {
                  "name": "day",
                  "type": {
                    "text": "CalendarDay"
                  }
                }
              ]
            },
            {
              "kind": "method",
              "name": "isRangePreview",
              "privacy": "private",
              "parameters": [
                {
                  "name": "day",
                  "type": {
                    "text": "CalendarDay"
                  }
                }
              ]
            },
            {
              "kind": "method",
              "name": "intlFormatDay",
              "privacy": "private",
              "parameters": [
                {
                  "name": "day",
                  "type": {
                    "text": "CalendarDay"
                  }
                }
              ]
            },
            {
              "kind": "method",
              "name": "getDayHandlers",
              "privacy": "private",
              "parameters": [
                {
                  "name": "day",
                  "type": {
                    "text": "CalendarDay"
                  }
                }
              ]
            },
            {
              "kind": "method",
              "name": "getDayProperties",
              "privacy": "private",
              "parameters": [
                {
                  "name": "day",
                  "type": {
                    "text": "CalendarDay"
                  }
                },
                {
                  "name": "today",
                  "type": {
                    "text": "CalendarDay"
                  }
                }
              ]
            },
            {
              "kind": "method",
              "name": "renderDay",
              "privacy": "protected",
              "parameters": [
                {
                  "name": "day",
                  "type": {
                    "text": "CalendarDay"
                  }
                },
                {
                  "name": "today",
                  "type": {
                    "text": "CalendarDay"
                  }
                }
              ]
            },
            {
              "kind": "method",
              "name": "renderHeaderWeekNumber",
              "privacy": "protected"
            },
            {
              "kind": "method",
              "name": "renderWeekNumber",
              "privacy": "protected",
              "parameters": [
                {
                  "name": "start",
                  "type": {
                    "text": "CalendarDay"
                  }
                },
                {
                  "name": "last",
                  "type": {
                    "text": "boolean"
                  }
                }
              ]
            },
            {
              "kind": "method",
              "name": "renderHeaders",
              "privacy": "protected"
            },
            {
              "kind": "method",
              "name": "renderWeeks",
              "privacy": "protected"
            },
            {
              "kind": "method",
              "name": "addEventListener",
              "privacy": "public",
              "return": {
                "type": {
                  "text": "void"
                }
              },
              "parameters": [
                {
                  "name": "type",
                  "type": {
                    "text": "K"
                  }
                },
                {
                  "name": "listener",
                  "type": {
                    "text": "(this: HTMLElement, ev: M[K]) => any"
                  }
                },
                {
                  "name": "options",
                  "optional": true,
                  "type": {
                    "text": "boolean | AddEventListenerOptions"
                  }
                }
              ],
              "inheritedFrom": {
                "name": "EventEmitterMixin",
                "module": "src/components/common/mixins/event-emitter.ts"
              }
            },
            {
              "kind": "method",
              "name": "removeEventListener",
              "privacy": "public",
              "return": {
                "type": {
                  "text": "void"
                }
              },
              "parameters": [
                {
                  "name": "type",
                  "type": {
                    "text": "K"
                  }
                },
                {
                  "name": "listener",
                  "type": {
                    "text": "(this: HTMLElement, ev: M[K]) => any"
                  }
                },
                {
                  "name": "options",
                  "optional": true,
                  "type": {
                    "text": "boolean | EventListenerOptions"
                  }
                }
              ],
              "inheritedFrom": {
                "name": "EventEmitterMixin",
                "module": "src/components/common/mixins/event-emitter.ts"
              }
            },
            {
              "kind": "method",
              "name": "emitEvent",
              "privacy": "private",
              "return": {
                "type": {
                  "text": "boolean"
                }
              },
              "parameters": [
                {
                  "name": "type",
                  "type": {
                    "text": "K"
                  }
                },
                {
                  "name": "eventInitDict",
                  "optional": true,
                  "type": {
                    "text": "CustomEventInit<D>"
                  }
                }
              ],
              "inheritedFrom": {
                "name": "EventEmitterMixin",
                "module": "src/components/common/mixins/event-emitter.ts"
              }
            },
            {
              "kind": "field",
              "name": "_initialActiveDateSet",
              "type": {
                "text": "boolean"
              },
              "privacy": "private",
              "default": "false",
              "inheritedFrom": {
                "name": "IgcCalendarBaseComponent",
                "module": "src/components/calendar/base.ts"
              }
            },
            {
              "kind": "field",
              "name": "_hasValues",
              "privacy": "protected",
              "readonly": true,
              "inheritedFrom": {
                "name": "IgcCalendarBaseComponent",
                "module": "src/components/calendar/base.ts"
              }
            },
            {
              "kind": "field",
              "name": "_isSingle",
              "privacy": "protected",
              "readonly": true,
              "inheritedFrom": {
                "name": "IgcCalendarBaseComponent",
                "module": "src/components/calendar/base.ts"
              }
            },
            {
              "kind": "field",
              "name": "_isMultiple",
              "privacy": "protected",
              "readonly": true,
              "inheritedFrom": {
                "name": "IgcCalendarBaseComponent",
                "module": "src/components/calendar/base.ts"
              }
            },
            {
              "kind": "field",
              "name": "_isRange",
              "privacy": "protected",
              "readonly": true,
              "inheritedFrom": {
                "name": "IgcCalendarBaseComponent",
                "module": "src/components/calendar/base.ts"
              }
            },
            {
              "kind": "field",
              "name": "_rangePreviewDate",
              "type": {
                "text": "CalendarDay | undefined"
              },
              "privacy": "protected",
              "inheritedFrom": {
                "name": "IgcCalendarBaseComponent",
                "module": "src/components/calendar/base.ts"
              }
            },
            {
              "kind": "field",
              "name": "_firstDayOfWeek",
              "type": {
                "text": "number"
              },
              "privacy": "protected",
              "default": "0",
              "inheritedFrom": {
                "name": "IgcCalendarBaseComponent",
                "module": "src/components/calendar/base.ts"
              }
            },
            {
              "kind": "field",
              "name": "_activeDate",
              "privacy": "protected",
              "inheritedFrom": {
                "name": "IgcCalendarBaseComponent",
                "module": "src/components/calendar/base.ts"
              }
            },
            {
              "kind": "field",
              "name": "_value",
              "type": {
                "text": "CalendarDay | null"
              },
              "privacy": "protected",
              "default": "null",
              "inheritedFrom": {
                "name": "IgcCalendarBaseComponent",
                "module": "src/components/calendar/base.ts"
              }
            },
            {
              "kind": "field",
              "name": "_values",
              "type": {
                "text": "CalendarDay[]"
              },
              "privacy": "protected",
              "default": "[]",
              "inheritedFrom": {
                "name": "IgcCalendarBaseComponent",
                "module": "src/components/calendar/base.ts"
              }
            },
            {
              "kind": "field",
              "name": "_specialDates",
              "type": {
                "text": "DateRangeDescriptor[]"
              },
              "privacy": "protected",
              "default": "[]",
              "inheritedFrom": {
                "name": "IgcCalendarBaseComponent",
                "module": "src/components/calendar/base.ts"
              }
            },
            {
              "kind": "field",
              "name": "_disabledDates",
              "type": {
                "text": "DateRangeDescriptor[]"
              },
              "privacy": "protected",
              "default": "[]",
              "inheritedFrom": {
                "name": "IgcCalendarBaseComponent",
                "module": "src/components/calendar/base.ts"
              }
            },
            {
              "kind": "field",
              "name": "value",
              "privacy": "public",
              "description": "The current value of the calendar.\nUsed when selection is set to single",
              "attribute": "value",
              "type": {
                "text": "Date | null"
              },
              "inheritedFrom": {
                "name": "IgcCalendarBaseComponent",
                "module": "src/components/calendar/base.ts"
              }
            },
            {
              "kind": "field",
              "name": "values",
              "privacy": "public",
              "description": "The current values of the calendar.\nUsed when selection is set to multiple of range.",
              "attribute": "values",
              "type": {
                "text": "Date[]"
              },
              "inheritedFrom": {
                "name": "IgcCalendarBaseComponent",
                "module": "src/components/calendar/base.ts"
              }
            },
            {
              "kind": "field",
              "name": "activeDate",
              "privacy": "public",
              "description": "Get/Set the date which is shown in view and is highlighted. By default it is the current date.",
              "type": {
                "text": "Date"
              },
              "attribute": "active-date",
              "inheritedFrom": {
                "name": "IgcCalendarBaseComponent",
                "module": "src/components/calendar/base.ts"
              }
            },
            {
              "kind": "field",
              "name": "selection",
              "type": {
                "text": "CalendarSelection"
              },
              "privacy": "public",
              "default": "'single'",
              "description": "Sets the type of selection in the component.",
              "attribute": "selection",
              "expandedType": {
                "text": "'single' | 'multiple' | 'range'"
              },
              "inheritedFrom": {
                "name": "IgcCalendarBaseComponent",
                "module": "src/components/calendar/base.ts"
              }
            },
            {
              "kind": "field",
              "name": "showWeekNumbers",
              "type": {
                "text": "boolean"
              },
              "privacy": "public",
              "default": "false",
              "description": "Whether to show the week numbers.",
              "attribute": "show-week-numbers",
              "reflects": true,
              "inheritedFrom": {
                "name": "IgcCalendarBaseComponent",
                "module": "src/components/calendar/base.ts"
              }
            },
            {
              "kind": "field",
              "name": "weekStart",
              "type": {
                "text": "WeekDays"
              },
              "privacy": "public",
              "default": "'sunday'",
              "description": "Gets/Sets the first day of the week.",
              "attribute": "week-start",
              "expandedType": {
                "text": "'sunday' | 'monday' | 'tuesday' | 'wednesday' | 'thursday' | 'friday' | 'saturday'"
              },
              "inheritedFrom": {
                "name": "IgcCalendarBaseComponent",
                "module": "src/components/calendar/base.ts"
              }
            },
            {
              "kind": "field",
              "name": "locale",
              "type": {
                "text": "string"
              },
              "privacy": "public",
              "default": "'en'",
              "description": "Gets/Sets the locale used for formatting and displaying the dates in the component.",
              "attribute": "locale",
              "inheritedFrom": {
                "name": "IgcCalendarBaseComponent",
                "module": "src/components/calendar/base.ts"
              }
            },
            {
              "kind": "field",
              "name": "specialDates",
              "privacy": "public",
              "description": "Gets/Sets the special dates for the component.",
              "type": {
                "text": "DateRangeDescriptor[] | undefined"
              },
              "inheritedFrom": {
                "name": "IgcCalendarBaseComponent",
                "module": "src/components/calendar/base.ts"
              }
            },
            {
              "kind": "field",
              "name": "disabledDates",
              "privacy": "public",
              "description": "Gets/Sets the disabled dates for the component.",
              "type": {
                "text": "DateRangeDescriptor[] | undefined"
              },
              "inheritedFrom": {
                "name": "IgcCalendarBaseComponent",
                "module": "src/components/calendar/base.ts"
              }
            },
            {
              "kind": "method",
              "name": "weekStartChanged",
              "privacy": "protected",
              "inheritedFrom": {
                "name": "IgcCalendarBaseComponent",
                "module": "src/components/calendar/base.ts"
              }
            },
            {
              "kind": "method",
              "name": "selectionChanged",
              "privacy": "protected",
              "inheritedFrom": {
                "name": "IgcCalendarBaseComponent",
                "module": "src/components/calendar/base.ts"
              }
            }
          ],
          "events": [
            {
              "description": "Emitted when the active date changes.",
              "name": "igcActiveDateChange"
            },
            {
              "description": "Emitted when the range preview date changes.",
              "name": "igcRangePreviewDateChange"
            },
            {
              "type": {
                "text": "CustomEvent"
              },
              "inheritedFrom": {
                "name": "EventEmitterMixin",
                "module": "src/components/common/mixins/event-emitter.ts"
              }
            }
          ],
          "attributes": [
            {
              "name": "hide-leading-days",
              "type": {
                "text": "boolean"
              },
              "default": "false",
              "description": "Whether to show leading days which do not belong to the current month.",
              "fieldName": "hideLeadingDays",
              "attribute": "hide-leading-days"
            },
            {
              "name": "hide-trailing-days",
              "type": {
                "text": "boolean"
              },
              "default": "false",
              "description": "Whether to show trailing days which do not belong to the current month.",
              "fieldName": "hideTrailingDays",
              "attribute": "hide-trailing-days"
            },
            {
              "name": "week-day-format",
              "type": {
                "text": "'long' | 'short' | 'narrow'"
              },
              "default": "'narrow'",
              "description": "The format of the days. Defaults to narrow.",
              "fieldName": "weekDayFormat",
              "attribute": "week-day-format"
            },
            {
              "name": "active",
              "type": {
                "text": "boolean"
              },
              "default": "false",
              "description": "The active state of the component.",
              "fieldName": "active"
            },
            {
              "name": "value",
              "description": "The current value of the calendar.\nUsed when selection is set to single",
              "fieldName": "value",
              "attribute": "value",
              "type": {
                "text": "Date | null"
              },
              "inheritedFrom": {
                "name": "IgcCalendarBaseComponent",
                "module": "src/components/calendar/base.ts"
              }
            },
            {
              "name": "values",
              "description": "The current values of the calendar.\nUsed when selection is set to multiple of range.",
              "fieldName": "values",
              "attribute": "values",
              "type": {
                "text": "Date[]"
              },
              "inheritedFrom": {
                "name": "IgcCalendarBaseComponent",
                "module": "src/components/calendar/base.ts"
              }
            },
            {
              "name": "selection",
              "type": {
                "text": "CalendarSelection"
              },
              "default": "'single'",
              "description": "Sets the type of selection in the component.",
              "fieldName": "selection",
              "attribute": "selection",
              "expandedType": {
                "text": "'single' | 'multiple' | 'range'"
              },
              "inheritedFrom": {
                "name": "IgcCalendarBaseComponent",
                "module": "src/components/calendar/base.ts"
              }
            },
            {
              "name": "show-week-numbers",
              "type": {
                "text": "boolean"
              },
              "default": "false",
              "description": "Whether to show the week numbers.",
              "fieldName": "showWeekNumbers",
              "attribute": "show-week-numbers",
              "inheritedFrom": {
                "name": "IgcCalendarBaseComponent",
                "module": "src/components/calendar/base.ts"
              }
            },
            {
              "name": "week-start",
              "type": {
                "text": "WeekDays"
              },
              "default": "'sunday'",
              "description": "Gets/Sets the first day of the week.",
              "fieldName": "weekStart",
              "attribute": "week-start",
              "expandedType": {
                "text": "'sunday' | 'monday' | 'tuesday' | 'wednesday' | 'thursday' | 'friday' | 'saturday'"
              },
              "inheritedFrom": {
                "name": "IgcCalendarBaseComponent",
                "module": "src/components/calendar/base.ts"
              }
            },
            {
              "name": "locale",
              "type": {
                "text": "string"
              },
              "default": "'en'",
              "description": "Gets/Sets the locale used for formatting and displaying the dates in the component.",
              "fieldName": "locale",
              "attribute": "locale",
              "inheritedFrom": {
                "name": "IgcCalendarBaseComponent",
                "module": "src/components/calendar/base.ts"
              }
            },
            {
              "name": "active-date",
              "description": "Get/Set the date which is shown in view and is highlighted. By default it is the current date.",
              "type": {
                "text": "Date"
              },
              "fieldName": "activeDate",
              "inheritedFrom": {
                "name": "IgcCalendarBaseComponent",
                "module": "src/components/calendar/base.ts"
              }
            }
          ],
          "mixins": [
            {
              "name": "EventEmitterMixin",
              "module": "/src/components/common/mixins/event-emitter.js"
            }
          ],
          "superclass": {
            "name": "IgcCalendarBaseComponent",
            "module": "/src/components/calendar/base.js"
          },
          "tagName": "igc-days-view",
          "customElement": true
        }
      ],
      "exports": [
        {
          "kind": "js",
          "name": "default",
          "declaration": {
            "name": "IgcDaysViewComponent",
            "module": "src/components/calendar/days-view/days-view.ts"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "src/components/calendar/months-view/months-view.ts",
      "declarations": [
        {
          "kind": "class",
          "description": "Instantiate a months view as a separate component in the calendar.",
          "name": "IgcMonthsViewComponent",
          "cssParts": [
            {
              "description": "The months row container.",
              "name": "months-row"
            },
            {
              "description": "The month container.",
              "name": "month"
            },
            {
              "description": "The inner month container.",
              "name": "month-inner"
            }
          ],
          "members": [
            {
              "kind": "field",
              "name": "tagName",
              "type": {
                "text": "string"
              },
              "privacy": "public",
              "static": true,
              "readonly": true,
              "default": "'igc-months-view'"
            },
            {
              "kind": "method",
              "name": "register",
              "privacy": "public",
              "static": true
            },
            {
              "kind": "field",
              "name": "_value",
              "privacy": "private"
            },
            {
              "kind": "field",
              "name": "activeMonth",
              "type": {
                "text": "HTMLElement"
              },
              "privacy": "private"
            },
            {
              "kind": "field",
              "name": "value",
              "privacy": "public",
              "description": "Тhe current value of the calendar."
            },
            {
              "kind": "field",
              "name": "locale",
              "type": {
                "text": "string"
              },
              "privacy": "public",
              "default": "'en'",
              "description": "Sets the locale used for formatting and displaying the dates.",
              "attribute": "locale"
            },
            {
              "kind": "field",
              "name": "monthFormat",
              "type": {
                "text": "'numeric' | '2-digit' | 'long' | 'short' | 'narrow'"
              },
              "privacy": "public",
              "default": "'long'",
              "description": "The format of the month. Defaults to long.",
              "attribute": "month-format"
            },
            {
              "kind": "field",
              "name": "_intl",
              "privacy": "private"
            },
            {
              "kind": "method",
              "name": "localeChange",
              "privacy": "protected"
            },
            {
              "kind": "method",
              "name": "formatChange",
              "privacy": "protected"
            },
            {
              "kind": "method",
              "name": "focusActiveDate",
              "privacy": "public",
              "parameters": [
                {
                  "name": "options",
                  "optional": true,
                  "type": {
                    "text": "FocusOptions"
                  }
                }
              ],
              "description": "Focuses the active date."
            },
            {
              "kind": "method",
              "name": "handleInteraction",
              "privacy": "protected",
              "parameters": [
                {
                  "name": "event",
                  "type": {
                    "text": "Event"
                  }
                }
              ]
            },
            {
              "kind": "method",
              "name": "renderMonth",
              "privacy": "protected",
              "parameters": [
                {
                  "name": "entry",
                  "type": {
                    "text": "CalendarDay"
                  }
                },
                {
                  "name": "now",
                  "type": {
                    "text": "CalendarDay"
                  }
                }
              ]
            },
            {
              "kind": "method",
              "name": "addEventListener",
              "privacy": "public",
              "return": {
                "type": {
                  "text": "void"
                }
              },
              "parameters": [
                {
                  "name": "type",
                  "type": {
                    "text": "K"
                  }
                },
                {
                  "name": "listener",
                  "type": {
                    "text": "(this: HTMLElement, ev: M[K]) => any"
                  }
                },
                {
                  "name": "options",
                  "optional": true,
                  "type": {
                    "text": "boolean | AddEventListenerOptions"
                  }
                }
              ],
              "inheritedFrom": {
                "name": "EventEmitterMixin",
                "module": "src/components/common/mixins/event-emitter.ts"
              }
            },
            {
              "kind": "method",
              "name": "removeEventListener",
              "privacy": "public",
              "return": {
                "type": {
                  "text": "void"
                }
              },
              "parameters": [
                {
                  "name": "type",
                  "type": {
                    "text": "K"
                  }
                },
                {
                  "name": "listener",
                  "type": {
                    "text": "(this: HTMLElement, ev: M[K]) => any"
                  }
                },
                {
                  "name": "options",
                  "optional": true,
                  "type": {
                    "text": "boolean | EventListenerOptions"
                  }
                }
              ],
              "inheritedFrom": {
                "name": "EventEmitterMixin",
                "module": "src/components/common/mixins/event-emitter.ts"
              }
            },
            {
              "kind": "method",
              "name": "emitEvent",
              "privacy": "private",
              "return": {
                "type": {
                  "text": "boolean"
                }
              },
              "parameters": [
                {
                  "name": "type",
                  "type": {
                    "text": "K"
                  }
                },
                {
                  "name": "eventInitDict",
                  "optional": true,
                  "type": {
                    "text": "CustomEventInit<D>"
                  }
                }
              ],
              "inheritedFrom": {
                "name": "EventEmitterMixin",
                "module": "src/components/common/mixins/event-emitter.ts"
              }
            }
          ],
          "attributes": [
            {
              "name": "locale",
              "type": {
                "text": "string"
              },
              "default": "'en'",
              "description": "Sets the locale used for formatting and displaying the dates.",
              "fieldName": "locale"
            },
            {
              "name": "month-format",
              "type": {
                "text": "'numeric' | '2-digit' | 'long' | 'short' | 'narrow'"
              },
              "default": "'long'",
              "description": "The format of the month. Defaults to long.",
              "fieldName": "monthFormat"
            }
          ],
          "mixins": [
            {
              "name": "EventEmitterMixin",
              "module": "/src/components/common/mixins/event-emitter.js"
            }
          ],
          "superclass": {
            "name": "LitElement",
            "package": "lit"
          },
          "tagName": "igc-months-view",
          "customElement": true,
          "events": [
            {
              "type": {
                "text": "CustomEvent"
              },
              "inheritedFrom": {
                "name": "EventEmitterMixin",
                "module": "src/components/common/mixins/event-emitter.ts"
              }
            }
          ]
        }
      ],
      "exports": [
        {
          "kind": "js",
          "name": "default",
          "declaration": {
            "name": "IgcMonthsViewComponent",
            "module": "src/components/calendar/months-view/months-view.ts"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "src/components/calendar/years-view/years-view.ts",
      "declarations": [
        {
          "kind": "class",
          "description": "Instantiate a years view as a separate component in the calendar.",
          "name": "IgcYearsViewComponent",
          "cssParts": [
            {
              "description": "The years row container.",
              "name": "years-row"
            },
            {
              "description": "The year container.",
              "name": "year"
            },
            {
              "description": "The inner year container.",
              "name": "year-inner"
            }
          ],
          "members": [
            {
              "kind": "field",
              "name": "tagName",
              "type": {
                "text": "string"
              },
              "privacy": "public",
              "static": true,
              "readonly": true,
              "default": "'igc-years-view'"
            },
            {
              "kind": "method",
              "name": "register",
              "privacy": "public",
              "static": true
            },
            {
              "kind": "field",
              "name": "_value",
              "privacy": "private"
            },
            {
              "kind": "field",
              "name": "activeYear",
              "type": {
                "text": "HTMLElement"
              },
              "privacy": "private"
            },
            {
              "kind": "field",
              "name": "value",
              "privacy": "public",
              "description": "Тhe current value of the calendar."
            },
            {
              "kind": "field",
              "name": "yearsPerPage",
              "type": {
                "text": "number"
              },
              "privacy": "public",
              "default": "15",
              "description": "Sets how many years are displayed on a single page.",
              "attribute": "years-per-page"
            },
            {
              "kind": "method",
              "name": "focusActiveDate",
              "privacy": "public",
              "parameters": [
                {
                  "name": "options",
                  "optional": true,
                  "type": {
                    "text": "FocusOptions"
                  }
                }
              ]
            },
            {
              "kind": "method",
              "name": "handleInteraction",
              "privacy": "protected",
              "parameters": [
                {
                  "name": "event",
                  "type": {
                    "text": "Event"
                  }
                }
              ]
            },
            {
              "kind": "method",
              "name": "renderYear",
              "privacy": "protected",
              "parameters": [
                {
                  "name": "year",
                  "type": {
                    "text": "number"
                  }
                },
                {
                  "name": "now",
                  "type": {
                    "text": "CalendarDay"
                  }
                }
              ]
            },
            {
              "kind": "method",
              "name": "addEventListener",
              "privacy": "public",
              "return": {
                "type": {
                  "text": "void"
                }
              },
              "parameters": [
                {
                  "name": "type",
                  "type": {
                    "text": "K"
                  }
                },
                {
                  "name": "listener",
                  "type": {
                    "text": "(this: HTMLElement, ev: M[K]) => any"
                  }
                },
                {
                  "name": "options",
                  "optional": true,
                  "type": {
                    "text": "boolean | AddEventListenerOptions"
                  }
                }
              ],
              "inheritedFrom": {
                "name": "EventEmitterMixin",
                "module": "src/components/common/mixins/event-emitter.ts"
              }
            },
            {
              "kind": "method",
              "name": "removeEventListener",
              "privacy": "public",
              "return": {
                "type": {
                  "text": "void"
                }
              },
              "parameters": [
                {
                  "name": "type",
                  "type": {
                    "text": "K"
                  }
                },
                {
                  "name": "listener",
                  "type": {
                    "text": "(this: HTMLElement, ev: M[K]) => any"
                  }
                },
                {
                  "name": "options",
                  "optional": true,
                  "type": {
                    "text": "boolean | EventListenerOptions"
                  }
                }
              ],
              "inheritedFrom": {
                "name": "EventEmitterMixin",
                "module": "src/components/common/mixins/event-emitter.ts"
              }
            },
            {
              "kind": "method",
              "name": "emitEvent",
              "privacy": "private",
              "return": {
                "type": {
                  "text": "boolean"
                }
              },
              "parameters": [
                {
                  "name": "type",
                  "type": {
                    "text": "K"
                  }
                },
                {
                  "name": "eventInitDict",
                  "optional": true,
                  "type": {
                    "text": "CustomEventInit<D>"
                  }
                }
              ],
              "inheritedFrom": {
                "name": "EventEmitterMixin",
                "module": "src/components/common/mixins/event-emitter.ts"
              }
            }
          ],
          "attributes": [
            {
              "name": "years-per-page",
              "type": {
                "text": "number"
              },
              "default": "15",
              "description": "Sets how many years are displayed on a single page.",
              "fieldName": "yearsPerPage",
              "attribute": "years-per-page"
            }
          ],
          "mixins": [
            {
              "name": "EventEmitterMixin",
              "module": "/src/components/common/mixins/event-emitter.js"
            }
          ],
          "superclass": {
            "name": "LitElement",
            "package": "lit"
          },
          "tagName": "igc-years-view",
          "customElement": true,
          "events": [
            {
              "type": {
                "text": "CustomEvent"
              },
              "inheritedFrom": {
                "name": "EventEmitterMixin",
                "module": "src/components/common/mixins/event-emitter.ts"
              }
            }
          ]
        }
      ],
      "exports": [
        {
          "kind": "js",
          "name": "default",
          "declaration": {
            "name": "IgcYearsViewComponent",
            "module": "src/components/calendar/years-view/years-view.ts"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "src/components/calendar/calendar.ts",
      "declarations": [
        {
          "kind": "variable",
          "name": "focusActiveDate"
        },
        {
          "kind": "class",
          "description": "Represents a calendar that lets users\nto select a date value in a variety of different ways.",
          "name": "IgcCalendarComponent",
          "cssParts": [
            {
              "description": "The header element of the calendar.",
              "name": "header"
            },
            {
              "description": "The header title element of the calendar.",
              "name": "header-title"
            },
            {
              "description": "The header date element of the calendar.",
              "name": "header-date"
            },
            {
              "description": "The content element which contains the views and navigation elements of the calendar.",
              "name": "content"
            },
            {
              "description": "The content element which contains the views and navigation elements of the calendar in vertical orientation.",
              "name": "content-vertical"
            },
            {
              "description": "The navigation container element of the calendar.",
              "name": "navigation"
            },
            {
              "description": "The months navigation button element of the calendar.",
              "name": "months-navigation"
            },
            {
              "description": "The years navigation button element of the calendar.",
              "name": "years-navigation"
            },
            {
              "description": "The years range element of the calendar.",
              "name": "years-range"
            },
            {
              "description": "The navigation buttons container of the calendar.",
              "name": "navigation-buttons"
            },
            {
              "description": "Previous/next navigation button of the calendar.",
              "name": "navigation-button"
            },
            {
              "description": "The days view container element of the calendar.",
              "name": "days-view-container"
            },
            {
              "description": "Days view element of the calendar.",
              "name": "days-view"
            },
            {
              "description": "The months view element of the calendar.",
              "name": "months-view"
            },
            {
              "description": "The years view element of the calendar.",
              "name": "years-view"
            },
            {
              "description": "Days row element of the calendar.",
              "name": "days-row"
            },
            {
              "description": "Week header label element of the calendar.",
              "name": "label"
            },
            {
              "description": "Week number element of the calendar.",
              "name": "week-number"
            },
            {
              "description": "Week number inner element of the calendar.",
              "name": "week-number-inner"
            },
            {
              "description": "Date element of the calendar.",
              "name": "date"
            },
            {
              "description": "Date inner element of the calendar.",
              "name": "date-inner"
            },
            {
              "description": "The first selected date element of the calendar in range selection.",
              "name": "first"
            },
            {
              "description": "The last selected date element of the calendar in range selection.",
              "name": "last"
            },
            {
              "description": "Inactive date element of the calendar.",
              "name": "inactive"
            },
            {
              "description": "Hidden date element of the calendar.",
              "name": "hidden"
            },
            {
              "description": "Weekend date element of the calendar.",
              "name": "weekend"
            },
            {
              "description": "Range selected element of the calendar.",
              "name": "range"
            },
            {
              "description": "Special date element of the calendar.",
              "name": "special"
            },
            {
              "description": "Disabled date element of the calendar.",
              "name": "disabled"
            },
            {
              "description": "Single selected date element of the calendar.",
              "name": "single"
            },
            {
              "description": "Range selection preview date element of the calendar.",
              "name": "preview"
            },
            {
              "description": "Month element of the calendar.",
              "name": "month"
            },
            {
              "description": "Month inner element of the calendar.",
              "name": "month-inner"
            },
            {
              "description": "Year element of the calendar.",
              "name": "year"
            },
            {
              "description": "Year inner element of the calendar.",
              "name": "year-inner"
            },
            {
              "description": "Indicates selected state. Applies to date, month and year elements of the calendar.",
              "name": "selected"
            },
            {
              "description": "Indicates current state. Applies to date, month and year elements of the calendar.",
              "name": "current"
            }
          ],
          "slots": [
            {
              "description": "The default slot for the calendar.",
              "name": ""
            },
            {
              "description": "Renders the title of the calendar header.",
              "name": "title"
            },
            {
              "description": "Renders content instead of the current date/range in the calendar header.",
              "name": "header-date"
            }
          ],
          "members": [
            {
              "kind": "field",
              "name": "tagName",
              "type": {
                "text": "string"
              },
              "privacy": "public",
              "static": true,
              "readonly": true,
              "default": "'igc-calendar'"
            },
            {
              "kind": "method",
              "name": "register",
              "privacy": "public",
              "static": true
            },
            {
              "kind": "field",
              "name": "_isDayView",
              "privacy": "private",
              "readonly": true
            },
            {
              "kind": "field",
              "name": "_isMonthView",
              "privacy": "private",
              "readonly": true
            },
            {
              "kind": "field",
              "name": "_isYearView",
              "privacy": "private",
              "readonly": true
            },
            {
              "kind": "field",
              "name": "previousButtonLabel",
              "privacy": "private",
              "readonly": true
            },
            {
              "kind": "field",
              "name": "nextButtonLabel",
              "privacy": "private",
              "readonly": true
            },
            {
              "kind": "field",
              "name": "contentRef",
              "type": {
                "text": "Ref<HTMLDivElement>"
              },
              "privacy": "private"
            },
            {
              "kind": "field",
              "name": "activeDaysViewIndex",
              "type": {
                "text": "number"
              },
              "privacy": "private",
              "default": "0"
            },
            {
              "kind": "field",
              "name": "daysViews",
              "type": {
                "text": "NodeListOf<IgcDaysViewComponent>"
              },
              "privacy": "private"
            },
            {
              "kind": "field",
              "name": "monthsView",
              "type": {
                "text": "IgcMonthsViewComponent"
              },
              "privacy": "private"
            },
            {
              "kind": "field",
              "name": "yearsView",
              "type": {
                "text": "IgcYearsViewComponent"
              },
              "privacy": "private"
            },
            {
              "kind": "field",
              "name": "hideOutsideDays",
              "type": {
                "text": "boolean"
              },
              "privacy": "public",
              "default": "false",
              "description": "Whether to show the dates that do not belong to the current active month.",
              "attribute": "hide-outside-days",
              "reflects": true
            },
            {
              "kind": "field",
              "name": "hideHeader",
              "type": {
                "text": "boolean"
              },
              "privacy": "public",
              "default": "false",
              "description": "Whether to render the calendar header part.\nWhen the calendar selection is set to `multiple` the header is always hidden.",
              "attribute": "hide-header",
              "reflects": true
            },
            {
              "kind": "field",
              "name": "headerOrientation",
              "type": {
                "text": "CalendarHeaderOrientation"
              },
              "privacy": "public",
              "default": "'horizontal'",
              "description": "The orientation of the calendar header.",
              "attribute": "header-orientation",
              "reflects": true,
              "expandedType": {
                "text": "'horizontal' | 'vertical'"
              }
            },
            {
              "kind": "field",
              "name": "orientation",
              "type": {
                "text": "ContentOrientation"
              },
              "privacy": "public",
              "default": "'horizontal'",
              "description": "The orientation of the calendar months when more than one month\nis being shown.",
              "attribute": "orientation",
              "expandedType": {
                "text": "'horizontal' | 'vertical'"
              }
            },
            {
              "kind": "field",
              "name": "visibleMonths",
              "type": {
                "text": "number"
              },
              "privacy": "public",
              "default": "1",
              "description": "The number of months displayed in the days view.",
              "attribute": "visible-months"
            },
            {
              "kind": "field",
              "name": "activeView",
              "type": {
                "text": "CalendarActiveView"
              },
              "privacy": "public",
              "default": "'days'",
              "description": "The current active view of the component.",
              "attribute": "active-view",
              "expandedType": {
                "text": "'days' | 'months' | 'years'"
              }
            },
            {
              "kind": "field",
              "name": "formatOptions",
              "type": {
                "text": "Pick<Intl.DateTimeFormatOptions, 'month' | 'weekday'>"
              },
              "privacy": "public",
              "default": "{ month: 'long', weekday: 'narrow' }",
              "description": "The options used to format the months and the weekdays in the calendar views."
            },
            {
              "kind": "field",
              "name": "resourceStrings",
              "privacy": "public",
              "default": "IgcCalendarResourceStringEN",
              "description": "The resource strings for localization."
            },
            {
              "kind": "field",
              "name": "_intl",
              "privacy": "private"
            },
            {
              "kind": "method",
              "name": "localeChange",
              "privacy": "protected"
            },
            {
              "kind": "method",
              "name": "formatOptionsChange",
              "privacy": "protected"
            },
            {
              "kind": "method",
              "name": "updateViewIndex",
              "privacy": "private",
              "parameters": [
                {
                  "name": "date",
                  "type": {
                    "text": "CalendarDay"
                  }
                },
                {
                  "name": "delta",
                  "type": {
                    "text": "-1 | 1"
                  }
                }
              ]
            },
            {
              "kind": "method",
              "name": "getSubsequentActiveDate",
              "privacy": "private",
              "parameters": [
                {
                  "name": "start",
                  "type": {
                    "text": "CalendarDay"
                  }
                },
                {
                  "name": "delta",
                  "type": {
                    "text": "number"
                  }
                }
              ]
            },
            {
              "kind": "method",
              "name": "handleArrowKey",
              "privacy": "private",
              "parameters": [
                {
                  "name": "period",
                  "type": {
                    "text": "'day' | 'week'"
                  }
                },
                {
                  "name": "delta",
                  "type": {
                    "text": "-1 | 1"
                  }
                }
              ]
            },
            {
              "kind": "method",
              "name": "onPageKeys",
              "privacy": "private",
              "parameters": [
                {
                  "name": "delta",
                  "type": {
                    "text": "-1 | 1"
                  }
                }
              ]
            },
            {
              "kind": "method",
              "name": "onShiftPageKeys",
              "privacy": "private",
              "parameters": [
                {
                  "name": "delta",
                  "type": {
                    "text": "-1 | 1"
                  }
                }
              ]
            },
            {
              "kind": "method",
              "name": "onHomeKey",
              "privacy": "private"
            },
            {
              "kind": "method",
              "name": "onEndKey",
              "privacy": "private"
            },
            {
              "kind": "method",
              "name": "isNotFromCalendarView",
              "privacy": "private",
              "parameters": [
                {
                  "name": "_",
                  "type": {
                    "text": "Element"
                  }
                },
                {
                  "name": "event",
                  "type": {
                    "text": "KeyboardEvent"
                  }
                }
              ]
            },
            {
              "kind": "method",
              "name": "renderNavigationButtons",
              "privacy": "protected"
            },
            {
              "kind": "method",
              "name": "renderMonthButtonNavigation",
              "privacy": "protected",
              "parameters": [
                {
                  "name": "active",
                  "type": {
                    "text": "CalendarDay"
                  }
                },
                {
                  "name": "viewIndex",
                  "type": {
                    "text": "number"
                  }
                }
              ]
            },
            {
              "kind": "method",
              "name": "renderYearButtonNavigation",
              "privacy": "protected",
              "parameters": [
                {
                  "name": "active",
                  "type": {
                    "text": "CalendarDay"
                  }
                },
                {
                  "name": "viewIndex",
                  "type": {
                    "text": "number"
                  }
                }
              ]
            },
            {
              "kind": "method",
              "name": "renderYearRangeNavigation",
              "privacy": "protected",
              "parameters": [
                {
                  "name": "active",
                  "type": {
                    "text": "CalendarDay"
                  }
                }
              ]
            },
            {
              "kind": "method",
              "name": "renderNavigation",
              "privacy": "protected",
              "parameters": [
                {
                  "name": "date",
                  "optional": true,
                  "type": {
                    "text": "CalendarDay"
                  }
                },
                {
                  "name": "showButtons",
                  "default": "true"
                },
                {
                  "name": "viewIndex",
                  "default": "0"
                }
              ]
            },
            {
              "kind": "method",
              "name": "renderHeader",
              "privacy": "protected"
            },
            {
              "kind": "method",
              "name": "renderHeaderDateSingle",
              "privacy": "protected"
            },
            {
              "kind": "method",
              "name": "renderHeaderDateRange",
              "privacy": "protected"
            },
            {
              "kind": "method",
              "name": "renderHeaderDate",
              "privacy": "protected"
            },
            {
              "kind": "method",
              "name": "renderDaysView",
              "privacy": "protected"
            },
            {
              "kind": "method",
              "name": "renderMonthView",
              "privacy": "protected"
            },
            {
              "kind": "method",
              "name": "renderYearView",
              "privacy": "protected"
            },
            {
              "kind": "method",
              "name": "changeMonth",
              "privacy": "protected",
              "parameters": [
                {
                  "name": "event",
                  "type": {
                    "text": "CustomEvent<Date>"
                  }
                }
              ]
            },
            {
              "kind": "method",
              "name": "changeYear",
              "privacy": "protected",
              "parameters": [
                {
                  "name": "event",
                  "type": {
                    "text": "CustomEvent<Date>"
                  }
                }
              ]
            },
            {
              "kind": "method",
              "name": "changeValue",
              "privacy": "protected",
              "parameters": [
                {
                  "name": "event",
                  "type": {
                    "text": "CustomEvent<Date>"
                  }
                }
              ]
            },
            {
              "kind": "method",
              "name": "activeDateChanged",
              "privacy": "protected",
              "parameters": [
                {
                  "name": "event",
                  "type": {
                    "text": "CustomEvent<Date>"
                  }
                }
              ]
            },
            {
              "kind": "method",
              "name": "rangePreviewDateChanged",
              "privacy": "protected",
              "parameters": [
                {
                  "name": "event",
                  "type": {
                    "text": "CustomEvent<Date>"
                  }
                }
              ]
            },
            {
              "kind": "method",
              "name": "getActiveDates",
              "privacy": "private"
            },
            {
              "kind": "method",
              "name": "activateDaysView",
              "privacy": "private",
              "parameters": [
                {
                  "name": "index",
                  "type": {
                    "text": "number"
                  }
                }
              ]
            },
            {
              "kind": "method",
              "name": "navigatePrevious",
              "privacy": "private"
            },
            {
              "kind": "method",
              "name": "navigateNext",
              "privacy": "private"
            },
            {
              "kind": "method",
              "name": "switchToMonths",
              "privacy": "private",
              "parameters": [
                {
                  "name": "viewIndex",
                  "type": {
                    "text": "number"
                  }
                }
              ]
            },
            {
              "kind": "method",
              "name": "switchToYears",
              "privacy": "private",
              "parameters": [
                {
                  "name": "viewIndex",
                  "type": {
                    "text": "number"
                  }
                }
              ]
            },
            {
              "kind": "method",
              "name": "addEventListener",
              "privacy": "public",
              "return": {
                "type": {
                  "text": "void"
                }
              },
              "parameters": [
                {
                  "name": "type",
                  "type": {
                    "text": "K"
                  }
                },
                {
                  "name": "listener",
                  "type": {
                    "text": "(this: HTMLElement, ev: M[K]) => any"
                  }
                },
                {
                  "name": "options",
                  "optional": true,
                  "type": {
                    "text": "boolean | AddEventListenerOptions"
                  }
                }
              ],
              "inheritedFrom": {
                "name": "EventEmitterMixin",
                "module": "src/components/common/mixins/event-emitter.ts"
              }
            },
            {
              "kind": "method",
              "name": "removeEventListener",
              "privacy": "public",
              "return": {
                "type": {
                  "text": "void"
                }
              },
              "parameters": [
                {
                  "name": "type",
                  "type": {
                    "text": "K"
                  }
                },
                {
                  "name": "listener",
                  "type": {
                    "text": "(this: HTMLElement, ev: M[K]) => any"
                  }
                },
                {
                  "name": "options",
                  "optional": true,
                  "type": {
                    "text": "boolean | EventListenerOptions"
                  }
                }
              ],
              "inheritedFrom": {
                "name": "EventEmitterMixin",
                "module": "src/components/common/mixins/event-emitter.ts"
              }
            },
            {
              "kind": "method",
              "name": "emitEvent",
              "privacy": "private",
              "return": {
                "type": {
                  "text": "boolean"
                }
              },
              "parameters": [
                {
                  "name": "type",
                  "type": {
                    "text": "K"
                  }
                },
                {
                  "name": "eventInitDict",
                  "optional": true,
                  "type": {
                    "text": "CustomEventInit<D>"
                  }
                }
              ],
              "inheritedFrom": {
                "name": "EventEmitterMixin",
                "module": "src/components/common/mixins/event-emitter.ts"
              }
            },
            {
              "kind": "field",
              "name": "_initialActiveDateSet",
              "type": {
                "text": "boolean"
              },
              "privacy": "private",
              "default": "false",
              "inheritedFrom": {
                "name": "IgcCalendarBaseComponent",
                "module": "src/components/calendar/base.ts"
              }
            },
            {
              "kind": "field",
              "name": "_hasValues",
              "privacy": "protected",
              "readonly": true,
              "inheritedFrom": {
                "name": "IgcCalendarBaseComponent",
                "module": "src/components/calendar/base.ts"
              }
            },
            {
              "kind": "field",
              "name": "_isSingle",
              "privacy": "protected",
              "readonly": true,
              "inheritedFrom": {
                "name": "IgcCalendarBaseComponent",
                "module": "src/components/calendar/base.ts"
              }
            },
            {
              "kind": "field",
              "name": "_isMultiple",
              "privacy": "protected",
              "readonly": true,
              "inheritedFrom": {
                "name": "IgcCalendarBaseComponent",
                "module": "src/components/calendar/base.ts"
              }
            },
            {
              "kind": "field",
              "name": "_isRange",
              "privacy": "protected",
              "readonly": true,
              "inheritedFrom": {
                "name": "IgcCalendarBaseComponent",
                "module": "src/components/calendar/base.ts"
              }
            },
            {
              "kind": "field",
              "name": "_rangePreviewDate",
              "type": {
                "text": "CalendarDay | undefined"
              },
              "privacy": "protected",
              "inheritedFrom": {
                "name": "IgcCalendarBaseComponent",
                "module": "src/components/calendar/base.ts"
              }
            },
            {
              "kind": "field",
              "name": "_firstDayOfWeek",
              "type": {
                "text": "number"
              },
              "privacy": "protected",
              "default": "0",
              "inheritedFrom": {
                "name": "IgcCalendarBaseComponent",
                "module": "src/components/calendar/base.ts"
              }
            },
            {
              "kind": "field",
              "name": "_activeDate",
              "privacy": "protected",
              "inheritedFrom": {
                "name": "IgcCalendarBaseComponent",
                "module": "src/components/calendar/base.ts"
              }
            },
            {
              "kind": "field",
              "name": "_value",
              "type": {
                "text": "CalendarDay | null"
              },
              "privacy": "protected",
              "default": "null",
              "inheritedFrom": {
                "name": "IgcCalendarBaseComponent",
                "module": "src/components/calendar/base.ts"
              }
            },
            {
              "kind": "field",
              "name": "_values",
              "type": {
                "text": "CalendarDay[]"
              },
              "privacy": "protected",
              "default": "[]",
              "inheritedFrom": {
                "name": "IgcCalendarBaseComponent",
                "module": "src/components/calendar/base.ts"
              }
            },
            {
              "kind": "field",
              "name": "_specialDates",
              "type": {
                "text": "DateRangeDescriptor[]"
              },
              "privacy": "protected",
              "default": "[]",
              "inheritedFrom": {
                "name": "IgcCalendarBaseComponent",
                "module": "src/components/calendar/base.ts"
              }
            },
            {
              "kind": "field",
              "name": "_disabledDates",
              "type": {
                "text": "DateRangeDescriptor[]"
              },
              "privacy": "protected",
              "default": "[]",
              "inheritedFrom": {
                "name": "IgcCalendarBaseComponent",
                "module": "src/components/calendar/base.ts"
              }
            },
            {
              "kind": "field",
              "name": "value",
              "privacy": "public",
              "description": "The current value of the calendar.\nUsed when selection is set to single",
              "attribute": "value",
              "type": {
                "text": "Date | null"
              },
              "inheritedFrom": {
                "name": "IgcCalendarBaseComponent",
                "module": "src/components/calendar/base.ts"
              }
            },
            {
              "kind": "field",
              "name": "values",
              "privacy": "public",
              "description": "The current values of the calendar.\nUsed when selection is set to multiple of range.",
              "attribute": "values",
              "type": {
                "text": "Date[]"
              },
              "inheritedFrom": {
                "name": "IgcCalendarBaseComponent",
                "module": "src/components/calendar/base.ts"
              }
            },
            {
              "kind": "field",
              "name": "activeDate",
              "privacy": "public",
              "description": "Get/Set the date which is shown in view and is highlighted. By default it is the current date.",
              "type": {
                "text": "Date"
              },
              "attribute": "active-date",
              "inheritedFrom": {
                "name": "IgcCalendarBaseComponent",
                "module": "src/components/calendar/base.ts"
              }
            },
            {
              "kind": "field",
              "name": "selection",
              "type": {
                "text": "CalendarSelection"
              },
              "privacy": "public",
              "default": "'single'",
              "description": "Sets the type of selection in the component.",
              "attribute": "selection",
              "expandedType": {
                "text": "'single' | 'multiple' | 'range'"
              },
              "inheritedFrom": {
                "name": "IgcCalendarBaseComponent",
                "module": "src/components/calendar/base.ts"
              }
            },
            {
              "kind": "field",
              "name": "showWeekNumbers",
              "type": {
                "text": "boolean"
              },
              "privacy": "public",
              "default": "false",
              "description": "Whether to show the week numbers.",
              "attribute": "show-week-numbers",
              "reflects": true,
              "inheritedFrom": {
                "name": "IgcCalendarBaseComponent",
                "module": "src/components/calendar/base.ts"
              }
            },
            {
              "kind": "field",
              "name": "weekStart",
              "type": {
                "text": "WeekDays"
              },
              "privacy": "public",
              "default": "'sunday'",
              "description": "Gets/Sets the first day of the week.",
              "attribute": "week-start",
              "expandedType": {
                "text": "'sunday' | 'monday' | 'tuesday' | 'wednesday' | 'thursday' | 'friday' | 'saturday'"
              },
              "inheritedFrom": {
                "name": "IgcCalendarBaseComponent",
                "module": "src/components/calendar/base.ts"
              }
            },
            {
              "kind": "field",
              "name": "locale",
              "type": {
                "text": "string"
              },
              "privacy": "public",
              "default": "'en'",
              "description": "Gets/Sets the locale used for formatting and displaying the dates in the component.",
              "attribute": "locale",
              "inheritedFrom": {
                "name": "IgcCalendarBaseComponent",
                "module": "src/components/calendar/base.ts"
              }
            },
            {
              "kind": "field",
              "name": "specialDates",
              "privacy": "public",
              "description": "Gets/Sets the special dates for the component.",
              "type": {
                "text": "DateRangeDescriptor[] | undefined"
              },
              "inheritedFrom": {
                "name": "IgcCalendarBaseComponent",
                "module": "src/components/calendar/base.ts"
              }
            },
            {
              "kind": "field",
              "name": "disabledDates",
              "privacy": "public",
              "description": "Gets/Sets the disabled dates for the component.",
              "type": {
                "text": "DateRangeDescriptor[] | undefined"
              },
              "inheritedFrom": {
                "name": "IgcCalendarBaseComponent",
                "module": "src/components/calendar/base.ts"
              }
            },
            {
              "kind": "method",
              "name": "weekStartChanged",
              "privacy": "protected",
              "inheritedFrom": {
                "name": "IgcCalendarBaseComponent",
                "module": "src/components/calendar/base.ts"
              }
            },
            {
              "kind": "method",
              "name": "selectionChanged",
              "privacy": "protected",
              "inheritedFrom": {
                "name": "IgcCalendarBaseComponent",
                "module": "src/components/calendar/base.ts"
              }
            }
          ],
          "events": [
            {
              "description": "Emitted when calendar changes its value.",
              "name": "igcChange"
            },
            {
              "type": {
                "text": "CustomEvent"
              },
              "inheritedFrom": {
                "name": "EventEmitterMixin",
                "module": "src/components/common/mixins/event-emitter.ts"
              }
            }
          ],
          "attributes": [
            {
              "name": "hide-outside-days",
              "type": {
                "text": "boolean"
              },
              "default": "false",
              "description": "Whether to show the dates that do not belong to the current active month.",
              "fieldName": "hideOutsideDays",
              "attribute": "hide-outside-days"
            },
            {
              "name": "hide-header",
              "type": {
                "text": "boolean"
              },
              "default": "false",
              "description": "Whether to render the calendar header part.\nWhen the calendar selection is set to `multiple` the header is always hidden.",
              "fieldName": "hideHeader",
              "attribute": "hide-header"
            },
            {
              "name": "header-orientation",
              "type": {
                "text": "CalendarHeaderOrientation"
              },
              "default": "'horizontal'",
              "description": "The orientation of the calendar header.",
              "fieldName": "headerOrientation",
              "attribute": "header-orientation",
              "expandedType": {
                "text": "'horizontal' | 'vertical'"
              }
            },
            {
              "name": "orientation",
              "type": {
                "text": "ContentOrientation"
              },
              "default": "'horizontal'",
              "description": "The orientation of the calendar months when more than one month\nis being shown.",
              "fieldName": "orientation",
              "attribute": "orientation",
              "expandedType": {
                "text": "'horizontal' | 'vertical'"
              }
            },
            {
              "name": "visible-months",
              "type": {
                "text": "number"
              },
              "default": "1",
              "description": "The number of months displayed in the days view.",
              "fieldName": "visibleMonths",
              "attribute": "visible-months"
            },
            {
              "name": "active-view",
              "type": {
                "text": "CalendarActiveView"
              },
              "default": "'days'",
              "description": "The current active view of the component.",
              "fieldName": "activeView",
              "attribute": "active-view",
              "expandedType": {
                "text": "'days' | 'months' | 'years'"
              }
            },
            {
              "name": "value",
              "description": "The current value of the calendar.\nUsed when selection is set to single",
              "fieldName": "value",
              "attribute": "value",
              "type": {
                "text": "Date | null"
              },
              "inheritedFrom": {
                "name": "IgcCalendarBaseComponent",
                "module": "src/components/calendar/base.ts"
              }
            },
            {
              "name": "values",
              "description": "The current values of the calendar.\nUsed when selection is set to multiple of range.",
              "fieldName": "values",
              "attribute": "values",
              "type": {
                "text": "Date[]"
              },
              "inheritedFrom": {
                "name": "IgcCalendarBaseComponent",
                "module": "src/components/calendar/base.ts"
              }
            },
            {
              "name": "selection",
              "type": {
                "text": "CalendarSelection"
              },
              "default": "'single'",
              "description": "Sets the type of selection in the component.",
              "fieldName": "selection",
              "attribute": "selection",
              "expandedType": {
                "text": "'single' | 'multiple' | 'range'"
              },
              "inheritedFrom": {
                "name": "IgcCalendarBaseComponent",
                "module": "src/components/calendar/base.ts"
              }
            },
            {
              "name": "show-week-numbers",
              "type": {
                "text": "boolean"
              },
              "default": "false",
              "description": "Whether to show the week numbers.",
              "fieldName": "showWeekNumbers",
              "attribute": "show-week-numbers",
              "inheritedFrom": {
                "name": "IgcCalendarBaseComponent",
                "module": "src/components/calendar/base.ts"
              }
            },
            {
              "name": "week-start",
              "type": {
                "text": "WeekDays"
              },
              "default": "'sunday'",
              "description": "Gets/Sets the first day of the week.",
              "fieldName": "weekStart",
              "attribute": "week-start",
              "expandedType": {
                "text": "'sunday' | 'monday' | 'tuesday' | 'wednesday' | 'thursday' | 'friday' | 'saturday'"
              },
              "inheritedFrom": {
                "name": "IgcCalendarBaseComponent",
                "module": "src/components/calendar/base.ts"
              }
            },
            {
              "name": "locale",
              "type": {
                "text": "string"
              },
              "default": "'en'",
              "description": "Gets/Sets the locale used for formatting and displaying the dates in the component.",
              "fieldName": "locale",
              "attribute": "locale",
              "inheritedFrom": {
                "name": "IgcCalendarBaseComponent",
                "module": "src/components/calendar/base.ts"
              }
            },
            {
              "name": "active-date",
              "description": "Get/Set the date which is shown in view and is highlighted. By default it is the current date.",
              "type": {
                "text": "Date"
              },
              "fieldName": "activeDate",
              "inheritedFrom": {
                "name": "IgcCalendarBaseComponent",
                "module": "src/components/calendar/base.ts"
              }
            }
          ],
          "mixins": [
            {
              "name": "EventEmitterMixin",
              "module": "/src/components/common/mixins/event-emitter.js"
            }
          ],
          "superclass": {
            "name": "IgcCalendarBaseComponent",
            "module": "/src/components/calendar/base.js"
          },
          "tagName": "igc-calendar",
          "customElement": true
        }
      ],
      "exports": [
        {
          "kind": "js",
          "name": "focusActiveDate",
          "declaration": {
            "name": "focusActiveDate",
            "module": "src/components/calendar/calendar.ts"
          }
        },
        {
          "kind": "js",
          "name": "default",
          "declaration": {
            "name": "IgcCalendarComponent",
            "module": "src/components/calendar/calendar.ts"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "src/components/card/card.actions.ts",
      "declarations": [
        {
          "kind": "class",
          "description": "A container for card action items like buttons",
          "name": "IgcCardActionsComponent",
          "slots": [
            {
              "description": "Renders items at the beginning of actions area",
              "name": "start"
            },
            {
              "description": "Renders items at the middle of actions area",
              "name": ""
            },
            {
              "description": "Renders items at the end of actions area",
              "name": "end"
            }
          ],
          "members": [
            {
              "kind": "field",
              "name": "tagName",
              "type": {
                "text": "string"
              },
              "privacy": "public",
              "static": true,
              "readonly": true,
              "default": "'igc-card-actions'"
            },
            {
              "kind": "method",
              "name": "register",
              "privacy": "public",
              "static": true,
              "return": {
                "type": {
                  "text": "void"
                }
              }
            },
            {
              "kind": "field",
              "name": "orientation",
              "type": {
                "text": "ContentOrientation"
              },
              "privacy": "public",
              "default": "'horizontal'",
              "description": "The orientation of the actions.",
              "attribute": "orientation",
              "reflects": true,
              "expandedType": {
                "text": "'horizontal' | 'vertical'"
              }
            }
          ],
          "attributes": [
            {
              "name": "orientation",
              "type": {
                "text": "ContentOrientation"
              },
              "default": "'horizontal'",
              "description": "The orientation of the actions.",
              "fieldName": "orientation",
              "attribute": "orientation",
              "expandedType": {
                "text": "'horizontal' | 'vertical'"
              }
            }
          ],
          "superclass": {
            "name": "LitElement",
            "package": "lit"
          },
          "tagName": "igc-card-actions",
          "customElement": true
        }
      ],
      "exports": [
        {
          "kind": "js",
          "name": "default",
          "declaration": {
            "name": "IgcCardActionsComponent",
            "module": "src/components/card/card.actions.ts"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "src/components/card/card.content.ts",
      "declarations": [
        {
          "kind": "class",
          "description": "A container for card's text content",
          "name": "IgcCardContentComponent",
          "slots": [
            {
              "description": "Renders the card text content",
              "name": ""
            }
          ],
          "members": [
            {
              "kind": "field",
              "name": "tagName",
              "type": {
                "text": "string"
              },
              "privacy": "public",
              "static": true,
              "readonly": true,
              "default": "'igc-card-content'"
            },
            {
              "kind": "method",
              "name": "register",
              "privacy": "public",
              "static": true,
              "return": {
                "type": {
                  "text": "void"
                }
              }
            }
          ],
          "superclass": {
            "name": "LitElement",
            "package": "lit"
          },
          "tagName": "igc-card-content",
          "customElement": true
        }
      ],
      "exports": [
        {
          "kind": "js",
          "name": "default",
          "declaration": {
            "name": "IgcCardContentComponent",
            "module": "src/components/card/card.content.ts"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "src/components/card/card.header.ts",
      "declarations": [
        {
          "kind": "class",
          "description": "A container for card's header",
          "name": "IgcCardHeaderComponent",
          "cssParts": [
            {
              "description": "The card header container",
              "name": "header"
            }
          ],
          "slots": [
            {
              "description": "Renders header media like icon",
              "name": "thumbnail"
            },
            {
              "description": "Renders the card title",
              "name": "title"
            },
            {
              "description": "Renders the card subtitle",
              "name": "subtitle"
            },
            {
              "description": "Renders content next to the card title",
              "name": ""
            }
          ],
          "members": [
            {
              "kind": "field",
              "name": "tagName",
              "type": {
                "text": "string"
              },
              "privacy": "public",
              "static": true,
              "readonly": true,
              "default": "'igc-card-header'"
            },
            {
              "kind": "method",
              "name": "register",
              "privacy": "public",
              "static": true,
              "return": {
                "type": {
                  "text": "void"
                }
              }
            }
          ],
          "superclass": {
            "name": "LitElement",
            "package": "lit"
          },
          "tagName": "igc-card-header",
          "customElement": true
        }
      ],
      "exports": [
        {
          "kind": "js",
          "name": "default",
          "declaration": {
            "name": "IgcCardHeaderComponent",
            "module": "src/components/card/card.header.ts"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "src/components/card/card.media.ts",
      "declarations": [
        {
          "kind": "class",
          "description": "A container for card's media - could be an image, gif, video",
          "name": "IgcCardMediaComponent",
          "slots": [
            {
              "description": "Renders the card media content",
              "name": ""
            }
          ],
          "members": [
            {
              "kind": "field",
              "name": "tagName",
              "type": {
                "text": "string"
              },
              "privacy": "public",
              "static": true,
              "readonly": true,
              "default": "'igc-card-media'"
            },
            {
              "kind": "method",
              "name": "register",
              "privacy": "public",
              "static": true
            }
          ],
          "superclass": {
            "name": "LitElement",
            "package": "lit"
          },
          "tagName": "igc-card-media",
          "customElement": true
        }
      ],
      "exports": [
        {
          "kind": "js",
          "name": "default",
          "declaration": {
            "name": "IgcCardMediaComponent",
            "module": "src/components/card/card.media.ts"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "src/components/card/card.ts",
      "declarations": [
        {
          "kind": "class",
          "description": "A container which wraps different elements related to a single subject",
          "name": "IgcCardComponent",
          "slots": [
            {
              "description": "Renders card content",
              "name": ""
            }
          ],
          "members": [
            {
              "kind": "field",
              "name": "tagName",
              "type": {
                "text": "string"
              },
              "privacy": "public",
              "static": true,
              "readonly": true,
              "default": "'igc-card'"
            },
            {
              "kind": "method",
              "name": "register",
              "privacy": "public",
              "static": true,
              "return": {
                "type": {
                  "text": "void"
                }
              }
            },
            {
              "kind": "field",
              "name": "elevated",
              "type": {
                "text": "boolean"
              },
              "privacy": "public",
              "default": "false",
              "description": "Sets card elevated style, otherwise card looks outlined.",
              "attribute": "elevated",
              "reflects": true
            }
          ],
          "attributes": [
            {
              "name": "elevated",
              "type": {
                "text": "boolean"
              },
              "default": "false",
              "description": "Sets card elevated style, otherwise card looks outlined.",
              "fieldName": "elevated",
              "attribute": "elevated"
            }
          ],
          "superclass": {
            "name": "LitElement",
            "package": "lit"
          },
          "tagName": "igc-card",
          "customElement": true
        }
      ],
      "exports": [
        {
          "kind": "js",
          "name": "default",
          "declaration": {
            "name": "IgcCardComponent",
            "module": "src/components/card/card.ts"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "src/components/button/icon-button.ts",
      "declarations": [
        {
          "kind": "class",
          "description": "",
          "name": "IgcIconButtonComponent",
          "cssParts": [
            {
              "description": "The wrapping element of the icon button.",
              "name": "base"
            },
            {
              "description": "The icon element of the icon button.",
              "name": "icon"
            }
          ],
          "members": [
            {
              "kind": "field",
              "name": "tagName",
              "type": {
                "text": "string"
              },
              "privacy": "public",
              "static": true,
              "readonly": true,
              "default": "'igc-icon-button'"
            },
            {
              "kind": "method",
              "name": "register",
              "privacy": "public",
              "static": true,
              "return": {
                "type": {
                  "text": "void"
                }
              }
            },
            {
              "kind": "field",
              "name": "name",
              "type": {
                "text": "string | undefined"
              },
              "privacy": "public",
              "description": "The name of the icon.",
              "attribute": "name"
            },
            {
              "kind": "field",
              "name": "collection",
              "type": {
                "text": "string | undefined"
              },
              "privacy": "public",
              "description": "The name of the icon collection.",
              "attribute": "collection"
            },
            {
              "kind": "field",
              "name": "mirrored",
              "type": {
                "text": "boolean"
              },
              "privacy": "public",
              "default": "false",
              "description": "Whether to flip the icon button. Useful for RTL layouts.",
              "attribute": "mirrored"
            },
            {
              "kind": "field",
              "name": "variant",
              "type": {
                "text": "IconButtonVariant"
              },
              "privacy": "public",
              "default": "'contained'",
              "description": "The visual variant of the icon button.",
              "attribute": "variant",
              "reflects": true,
              "expandedType": {
                "text": "'contained' | 'flat' | 'outlined'"
              }
            },
            {
              "kind": "method",
              "name": "renderContent",
              "privacy": "protected",
              "return": {
                "type": {
                  "text": "TemplateResult"
                }
              },
              "inheritedFrom": {
                "name": "IgcButtonBaseComponent",
                "module": "src/components/button/button-base.ts"
              }
            },
            {
              "kind": "method",
              "name": "registerIcon",
              "privacy": "protected",
              "parameters": [
                {
                  "name": "name",
                  "type": {
                    "text": "string"
                  }
                },
                {
                  "name": "url",
                  "type": {
                    "text": "string"
                  }
                },
                {
                  "name": "collection",
                  "default": "'default'"
                }
              ]
            },
            {
              "kind": "method",
              "name": "registerIconFromText",
              "privacy": "protected",
              "parameters": [
                {
                  "name": "name",
                  "type": {
                    "text": "string"
                  }
                },
                {
                  "name": "iconText",
                  "type": {
                    "text": "string"
                  }
                },
                {
                  "name": "collection",
                  "default": "'default'"
                }
              ]
            },
            {
              "kind": "method",
              "name": "addEventListener",
              "privacy": "public",
              "return": {
                "type": {
                  "text": "void"
                }
              },
              "parameters": [
                {
                  "name": "type",
                  "type": {
                    "text": "K"
                  }
                },
                {
                  "name": "listener",
                  "type": {
                    "text": "(this: HTMLElement, ev: M[K]) => any"
                  }
                },
                {
                  "name": "options",
                  "optional": true,
                  "type": {
                    "text": "boolean | AddEventListenerOptions"
                  }
                }
              ],
              "inheritedFrom": {
                "name": "IgcButtonBaseComponent",
                "module": "src/components/button/button-base.ts"
              }
            },
            {
              "kind": "method",
              "name": "removeEventListener",
              "privacy": "public",
              "return": {
                "type": {
                  "text": "void"
                }
              },
              "parameters": [
                {
                  "name": "type",
                  "type": {
                    "text": "K"
                  }
                },
                {
                  "name": "listener",
                  "type": {
                    "text": "(this: HTMLElement, ev: M[K]) => any"
                  }
                },
                {
                  "name": "options",
                  "optional": true,
                  "type": {
                    "text": "boolean | EventListenerOptions"
                  }
                }
              ],
              "inheritedFrom": {
                "name": "IgcButtonBaseComponent",
                "module": "src/components/button/button-base.ts"
              }
            },
            {
              "kind": "method",
              "name": "emitEvent",
              "privacy": "private",
              "return": {
                "type": {
                  "text": "boolean"
                }
              },
              "parameters": [
                {
                  "name": "type",
                  "type": {
                    "text": "K"
                  }
                },
                {
                  "name": "eventInitDict",
                  "optional": true,
                  "type": {
                    "text": "CustomEventInit<D>"
                  }
                }
              ],
              "inheritedFrom": {
                "name": "IgcButtonBaseComponent",
                "module": "src/components/button/button-base.ts"
              }
            },
            {
              "kind": "field",
              "name": "formAssociated",
              "type": {
                "text": "boolean"
              },
              "privacy": "public",
              "static": true,
              "readonly": true,
              "default": "true",
              "inheritedFrom": {
                "name": "IgcButtonBaseComponent",
                "module": "src/components/button/button-base.ts"
              }
            },
            {
              "kind": "field",
              "name": "_internals",
              "privacy": "protected",
              "readonly": true,
              "inheritedFrom": {
                "name": "IgcButtonBaseComponent",
                "module": "src/components/button/button-base.ts"
              }
            },
            {
              "kind": "field",
              "name": "_focusRingManager",
              "privacy": "private",
              "readonly": true,
              "inheritedFrom": {
                "name": "IgcButtonBaseComponent",
                "module": "src/components/button/button-base.ts"
              }
            },
            {
              "kind": "field",
              "name": "_disabled",
              "type": {
                "text": "boolean"
              },
              "privacy": "protected",
              "default": "false",
              "inheritedFrom": {
                "name": "IgcButtonBaseComponent",
                "module": "src/components/button/button-base.ts"
              }
            },
            {
              "kind": "field",
              "name": "_nativeButton",
              "type": {
                "text": "HTMLButtonElement"
              },
              "privacy": "private",
              "readonly": true,
              "inheritedFrom": {
                "name": "IgcButtonBaseComponent",
                "module": "src/components/button/button-base.ts"
              }
            },
            {
              "kind": "field",
              "name": "type",
              "type": {
                "text": "'button' | 'reset' | 'submit'"
              },
              "privacy": "public",
              "default": "'button'",
              "description": "The type of the button. Defaults to `button`.",
              "attribute": "type",
              "reflects": true,
              "inheritedFrom": {
                "name": "IgcButtonBaseComponent",
                "module": "src/components/button/button-base.ts"
              }
            },
            {
              "kind": "field",
              "name": "href",
              "type": {
                "text": "string | undefined"
              },
              "privacy": "public",
              "description": "The URL the button points to.",
              "attribute": "href",
              "inheritedFrom": {
                "name": "IgcButtonBaseComponent",
                "module": "src/components/button/button-base.ts"
              }
            },
            {
              "kind": "field",
              "name": "download",
              "type": {
                "text": "string | undefined"
              },
              "privacy": "public",
              "description": "Prompts to save the linked URL instead of navigating to it.",
              "attribute": "download",
              "inheritedFrom": {
                "name": "IgcButtonBaseComponent",
                "module": "src/components/button/button-base.ts"
              }
            },
            {
              "kind": "field",
              "name": "target",
              "type": {
                "text": "'_blank' | '_parent' | '_self' | '_top' | undefined"
              },
              "privacy": "public",
              "description": "Where to display the linked URL, as the name for a browsing context.",
              "attribute": "target",
              "inheritedFrom": {
                "name": "IgcButtonBaseComponent",
                "module": "src/components/button/button-base.ts"
              }
            },
            {
              "kind": "field",
              "name": "rel",
              "type": {
                "text": "string | undefined"
              },
              "privacy": "public",
              "description": "The relationship of the linked URL.\nSee https://developer.mozilla.org/en-US/docs/Web/HTML/Link_types",
              "attribute": "rel",
              "inheritedFrom": {
                "name": "IgcButtonBaseComponent",
                "module": "src/components/button/button-base.ts"
              }
            },
            {
              "kind": "field",
              "name": "disabled",
              "privacy": "public",
              "description": "The disabled state of the component",
              "attribute": "disabled",
              "type": {
                "text": "boolean"
              },
              "reflects": true,
              "inheritedFrom": {
                "name": "IgcButtonBaseComponent",
                "module": "src/components/button/button-base.ts"
              }
            },
            {
              "kind": "field",
              "name": "form",
              "type": {
                "text": "HTMLFormElement | null"
              },
              "privacy": "public",
              "description": "Returns the HTMLFormElement associated with this element.",
              "readonly": true,
              "inheritedFrom": {
                "name": "IgcButtonBaseComponent",
                "module": "src/components/button/button-base.ts"
              }
            },
            {
              "kind": "method",
              "name": "focus",
              "privacy": "public",
              "return": {
                "type": {
                  "text": "void"
                }
              },
              "parameters": [
                {
                  "name": "options",
                  "optional": true,
                  "type": {
                    "text": "FocusOptions"
                  }
                }
              ],
              "description": "Sets focus in the button.",
              "inheritedFrom": {
                "name": "IgcButtonBaseComponent",
                "module": "src/components/button/button-base.ts"
              }
            },
            {
              "kind": "method",
              "name": "click",
              "privacy": "public",
              "return": {
                "type": {
                  "text": "void"
                }
              },
              "description": "Simulates a mouse click on the element",
              "inheritedFrom": {
                "name": "IgcButtonBaseComponent",
                "module": "src/components/button/button-base.ts"
              }
            },
            {
              "kind": "method",
              "name": "blur",
              "privacy": "public",
              "return": {
                "type": {
                  "text": "void"
                }
              },
              "description": "Removes focus from the button.",
              "inheritedFrom": {
                "name": "IgcButtonBaseComponent",
                "module": "src/components/button/button-base.ts"
              }
            },
            {
              "kind": "method",
              "name": "_handleClick",
              "privacy": "protected",
              "return": {
                "type": {
                  "text": "void"
                }
              },
              "inheritedFrom": {
                "name": "IgcButtonBaseComponent",
                "module": "src/components/button/button-base.ts"
              }
            },
            {
              "kind": "method",
              "name": "formDisabledCallback",
              "privacy": "protected",
              "return": {
                "type": {
                  "text": "void"
                }
              },
              "parameters": [
                {
                  "name": "state",
                  "type": {
                    "text": "boolean"
                  }
                }
              ],
              "inheritedFrom": {
                "name": "IgcButtonBaseComponent",
                "module": "src/components/button/button-base.ts"
              }
            },
            {
              "kind": "method",
              "name": "renderButton",
              "privacy": "private",
              "inheritedFrom": {
                "name": "IgcButtonBaseComponent",
                "module": "src/components/button/button-base.ts"
              }
            },
            {
              "kind": "method",
              "name": "renderLinkButton",
              "privacy": "private",
              "inheritedFrom": {
                "name": "IgcButtonBaseComponent",
                "module": "src/components/button/button-base.ts"
              }
            }
          ],
          "attributes": [
            {
              "name": "name",
              "type": {
                "text": "string | undefined"
              },
              "description": "The name of the icon.",
              "fieldName": "name",
              "attribute": "name"
            },
            {
              "name": "collection",
              "type": {
                "text": "string | undefined"
              },
              "description": "The name of the icon collection.",
              "fieldName": "collection",
              "attribute": "collection"
            },
            {
              "name": "mirrored",
              "type": {
                "text": "boolean"
              },
              "default": "false",
              "description": "Whether to flip the icon button. Useful for RTL layouts.",
              "fieldName": "mirrored",
              "attribute": "mirrored"
            },
            {
              "name": "variant",
              "type": {
                "text": "IconButtonVariant"
              },
              "default": "'contained'",
              "description": "The visual variant of the icon button.",
              "fieldName": "variant",
              "attribute": "variant",
              "expandedType": {
                "text": "'contained' | 'flat' | 'outlined'"
              }
            },
            {
              "name": "type",
              "type": {
                "text": "'button' | 'reset' | 'submit'"
              },
              "default": "'button'",
              "description": "The type of the button. Defaults to `button`.",
              "fieldName": "type",
              "attribute": "type",
              "inheritedFrom": {
                "name": "IgcButtonBaseComponent",
                "module": "src/components/button/button-base.ts"
              }
            },
            {
              "name": "href",
              "type": {
                "text": "string | undefined"
              },
              "description": "The URL the button points to.",
              "fieldName": "href",
              "attribute": "href",
              "inheritedFrom": {
                "name": "IgcButtonBaseComponent",
                "module": "src/components/button/button-base.ts"
              }
            },
            {
              "name": "download",
              "type": {
                "text": "string | undefined"
              },
              "description": "Prompts to save the linked URL instead of navigating to it.",
              "fieldName": "download",
              "attribute": "download",
              "inheritedFrom": {
                "name": "IgcButtonBaseComponent",
                "module": "src/components/button/button-base.ts"
              }
            },
            {
              "name": "target",
              "type": {
                "text": "'_blank' | '_parent' | '_self' | '_top' | undefined"
              },
              "description": "Where to display the linked URL, as the name for a browsing context.",
              "fieldName": "target",
              "attribute": "target",
              "inheritedFrom": {
                "name": "IgcButtonBaseComponent",
                "module": "src/components/button/button-base.ts"
              }
            },
            {
              "name": "rel",
              "type": {
                "text": "string | undefined"
              },
              "description": "The relationship of the linked URL.\nSee https://developer.mozilla.org/en-US/docs/Web/HTML/Link_types",
              "fieldName": "rel",
              "attribute": "rel",
              "inheritedFrom": {
                "name": "IgcButtonBaseComponent",
                "module": "src/components/button/button-base.ts"
              }
            },
            {
              "name": "disabled",
              "description": "The disabled state of the component",
              "fieldName": "disabled",
              "attribute": "disabled",
              "type": {
                "text": "boolean"
              },
              "inheritedFrom": {
                "name": "IgcButtonBaseComponent",
                "module": "src/components/button/button-base.ts"
              }
            }
          ],
          "superclass": {
            "name": "IgcButtonBaseComponent",
            "module": "/src/components/button/button-base.js"
          },
          "tagName": "igc-icon-button",
          "customElement": true,
          "events": [
            {
              "type": {
                "text": "CustomEvent"
              },
              "inheritedFrom": {
                "name": "IgcButtonBaseComponent",
                "module": "src/components/button/button-base.ts"
              }
            }
          ]
        }
      ],
      "exports": [
        {
          "kind": "js",
          "name": "default",
          "declaration": {
            "name": "IgcIconButtonComponent",
            "module": "src/components/button/icon-button.ts"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "src/components/common/controllers/async-consumer.ts",
      "declarations": [
        {
          "kind": "class",
          "description": "",
          "name": "AsyncContextConsumer",
          "members": [
            {
              "kind": "field",
              "name": "_host",
              "type": {
                "text": "Host"
              },
              "privacy": "protected",
              "default": "host"
            },
            {
              "kind": "field",
              "name": "_options",
              "type": {
                "text": "AsyncContextOptions<T>"
              },
              "privacy": "protected",
              "default": "options"
            },
            {
              "kind": "field",
              "name": "_consumer",
              "type": {
                "text": "ContextConsumer<T, Host> | undefined"
              },
              "privacy": "protected"
            },
            {
              "kind": "field",
              "name": "value",
              "type": {
                "text": "ContextType<T> | undefined"
              },
              "privacy": "public",
              "readonly": true
            },
            {
              "kind": "method",
              "name": "hostConnected",
              "privacy": "public",
              "return": {
                "type": {
                  "text": "Promise<void>"
                }
              }
            }
          ]
        },
        {
          "kind": "function",
          "name": "createAsyncContext",
          "return": {
            "type": {
              "text": "AsyncContextConsumer<T, Host>"
            }
          },
          "parameters": [
            {
              "name": "host",
              "type": {
                "text": "Host"
              }
            },
            {
              "name": "context",
              "type": {
                "text": "T"
              }
            },
            {
              "name": "callback",
              "optional": true,
              "type": {
                "text": "(value: ContextType<T>, dispose?: () => void) => void"
              }
            }
          ]
        }
      ],
      "exports": [
        {
          "kind": "js",
          "name": "AsyncContextConsumer",
          "declaration": {
            "name": "AsyncContextConsumer",
            "module": "src/components/common/controllers/async-consumer.ts"
          }
        },
        {
          "kind": "js",
          "name": "createAsyncContext",
          "declaration": {
            "name": "createAsyncContext",
            "module": "src/components/common/controllers/async-consumer.ts"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "src/components/resize-container/default-ghost.ts",
      "declarations": [
        {
          "kind": "function",
          "name": "createDefaultGhostElement",
          "return": {
            "type": {
              "text": "HTMLElement"
            }
          },
          "parameters": [
            {
              "name": "{\n  x,\n  y,\n  width,\n  height,\n}",
              "type": {
                "text": "DOMRect"
              }
            }
          ],
          "description": "Default ghost element factory for the igc-resize implementation."
        },
        {
          "kind": "function",
          "name": "getDefaultLayer",
          "return": {
            "type": {
              "text": "HTMLElement"
            }
          }
        }
      ],
      "exports": [
        {
          "kind": "js",
          "name": "createDefaultGhostElement",
          "declaration": {
            "name": "createDefaultGhostElement",
            "module": "src/components/resize-container/default-ghost.ts"
          }
        },
        {
          "kind": "js",
          "name": "getDefaultLayer",
          "declaration": {
            "name": "getDefaultLayer",
            "module": "src/components/resize-container/default-ghost.ts"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "src/components/common/controllers/drag.ts",
      "declarations": [
        {
          "kind": "function",
          "name": "addDragController",
          "return": {
            "type": {
              "text": "DragController"
            }
          },
          "parameters": [
            {
              "name": "host",
              "type": {
                "text": "ReactiveControllerHost & LitElement"
              }
            },
            {
              "name": "options",
              "optional": true,
              "type": {
                "text": "DragControllerConfiguration"
              }
            }
          ],
          "description": "Adds a drag and drop controller to the given host"
        }
      ],
      "exports": [
        {
          "kind": "js",
          "name": "addDragController",
          "declaration": {
            "name": "addDragController",
            "module": "src/components/common/controllers/drag.ts"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "src/components/common/controllers/fullscreen.ts",
      "declarations": [
        {
          "kind": "function",
          "name": "addFullscreenController",
          "return": {
            "type": {
              "text": "FullscreenController"
            }
          },
          "parameters": [
            {
              "name": "host",
              "type": {
                "text": "ReactiveControllerHost & HTMLElement"
              }
            },
            {
              "name": "options",
              "optional": true,
              "type": {
                "text": "FullscreenControllerConfiguration"
              }
            }
          ]
        }
      ],
      "exports": [
        {
          "kind": "js",
          "name": "addFullscreenController",
          "declaration": {
            "name": "addFullscreenController",
            "module": "src/components/common/controllers/fullscreen.ts"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "src/components/divider/divider.ts",
      "declarations": [
        {
          "kind": "class",
          "description": "The igc-divider allows the content author to easily create a horizontal/vertical rule as a break between content to better organize information on a page.",
          "name": "IgcDividerComponent",
          "cssProperties": [
            {
              "description": "Sets the color of the divider.",
              "name": "--color"
            },
            {
              "description": "Shrinks the divider by the given amount from the start. If `middle` is set it will shrink from both sides.",
              "name": "--inset"
            }
          ],
          "members": [
            {
              "kind": "field",
              "name": "tagName",
              "type": {
                "text": "string"
              },
              "privacy": "public",
              "static": true,
              "readonly": true,
              "default": "'igc-divider'"
            },
            {
              "kind": "method",
              "name": "register",
              "privacy": "public",
              "static": true,
              "return": {
                "type": {
                  "text": "void"
                }
              }
            },
            {
              "kind": "field",
              "name": "_internals",
              "privacy": "private",
              "readonly": true
            },
            {
              "kind": "field",
              "name": "_vertical",
              "type": {
                "text": "boolean"
              },
              "privacy": "private",
              "default": "false"
            },
            {
              "kind": "field",
              "name": "vertical",
              "privacy": "public",
              "description": "Whether to render a vertical divider line.",
              "default": "false",
              "attribute": "vertical",
              "type": {
                "text": "boolean"
              },
              "reflects": true
            },
            {
              "kind": "field",
              "name": "middle",
              "type": {
                "text": "boolean"
              },
              "privacy": "public",
              "default": "false",
              "description": "When set and inset is provided, it will shrink the divider line from both sides.",
              "attribute": "middle",
              "reflects": true
            },
            {
              "kind": "field",
              "name": "type",
              "type": {
                "text": "DividerType"
              },
              "privacy": "public",
              "default": "'solid'",
              "description": "Whether to render a solid or a dashed divider line.",
              "attribute": "type",
              "reflects": true,
              "expandedType": {
                "text": "'solid' | 'dashed'"
              }
            }
          ],
          "attributes": [
            {
              "name": "vertical",
              "description": "Whether to render a vertical divider line.",
              "default": "false",
              "fieldName": "vertical",
              "attribute": "vertical",
              "type": {
                "text": "boolean"
              }
            },
            {
              "name": "middle",
              "type": {
                "text": "boolean"
              },
              "default": "false",
              "description": "When set and inset is provided, it will shrink the divider line from both sides.",
              "fieldName": "middle",
              "attribute": "middle"
            },
            {
              "name": "type",
              "type": {
                "text": "DividerType"
              },
              "default": "'solid'",
              "description": "Whether to render a solid or a dashed divider line.",
              "fieldName": "type",
              "attribute": "type",
              "expandedType": {
                "text": "'solid' | 'dashed'"
              }
            }
          ],
          "superclass": {
            "name": "LitElement",
            "package": "lit"
          },
          "tagName": "igc-divider",
          "customElement": true
        }
      ],
      "exports": [
        {
          "kind": "js",
          "name": "default",
          "declaration": {
            "name": "IgcDividerComponent",
            "module": "src/components/divider/divider.ts"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "src/components/resize-container/types.ts",
      "declarations": [],
      "exports": []
    },
    {
      "kind": "javascript-module",
      "path": "src/components/resize-container/resize-controller.ts",
      "declarations": [
        {
          "kind": "function",
          "name": "addResizeController",
          "return": {
            "type": {
              "text": "ResizeController"
            }
          },
          "parameters": [
            {
              "name": "host",
              "type": {
                "text": "ReactiveControllerHost & HTMLElement"
              }
            },
            {
              "name": "options",
              "optional": true,
              "type": {
                "text": "ResizeControllerConfiguration"
              }
            }
          ]
        }
      ],
      "exports": [
        {
          "kind": "js",
          "name": "addResizeController",
          "declaration": {
            "name": "addResizeController",
            "module": "src/components/resize-container/resize-controller.ts"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "src/components/resize-container/resize-container.ts",
      "declarations": [
        {
          "kind": "class",
          "description": "",
          "name": "IgcResizeContainerComponent",
          "slots": [
            {
              "description": "renders the element(s) that should be resized",
              "name": ""
            },
            {
              "description": "renders the side resize handle.",
              "name": "side-adorner"
            },
            {
              "description": "renders the corner resize handle.",
              "name": "corner-adorner"
            },
            {
              "description": "renders the bottom resize handle.",
              "name": "bottom-adorner"
            }
          ],
          "members": [
            {
              "kind": "field",
              "name": "tagName",
              "type": {
                "text": "string"
              },
              "privacy": "public",
              "static": true,
              "readonly": true,
              "default": "'igc-resize'"
            },
            {
              "kind": "method",
              "name": "register",
              "privacy": "public",
              "static": true,
              "return": {
                "type": {
                  "text": "void"
                }
              }
            },
            {
              "kind": "field",
              "name": "_controller",
              "type": {
                "text": "ReturnType<typeof addResizeController>"
              },
              "privacy": "private"
            },
            {
              "kind": "field",
              "name": "_mode",
              "type": {
                "text": "ResizeMode"
              },
              "privacy": "private",
              "default": "'immediate'",
              "expandedType": {
                "text": "'immediate' | 'deferred'"
              }
            },
            {
              "kind": "field",
              "name": "_ghostFactory",
              "type": {
                "text": "ResizeGhostFactory | undefined"
              },
              "privacy": "private"
            },
            {
              "kind": "field",
              "name": "_container",
              "type": {
                "text": "Ref<HTMLElement>"
              },
              "privacy": "private",
              "description": "The DOM container doing the actual resizing"
            },
            {
              "kind": "field",
              "name": "_adorners",
              "type": {
                "text": "Record<'side' | 'corner' | 'bottom', Ref<HTMLElement>>"
              },
              "privacy": "private",
              "default": "{ side: createRef(), corner: createRef(), bottom: createRef(), }",
              "description": "Resize component adorners"
            },
            {
              "kind": "field",
              "name": "_isActive",
              "type": {
                "text": "boolean"
              },
              "privacy": "private",
              "default": "false"
            },
            {
              "kind": "field",
              "name": "active",
              "type": {
                "text": "boolean"
              },
              "privacy": "public",
              "default": "false",
              "description": "Whether to always show the resize element adorners.",
              "attribute": "active",
              "reflects": true
            },
            {
              "kind": "field",
              "name": "ghostFactory",
              "privacy": "public",
              "type": {
                "text": "ResizeGhostFactory | undefined"
              }
            },
            {
              "kind": "field",
              "name": "mode",
              "privacy": "public",
              "description": "Get/Set the mode of the resizing operation.",
              "type": {
                "text": "ResizeMode"
              },
              "attribute": "mode",
              "expandedType": {
                "text": "'immediate' | 'deferred'"
              }
            },
            {
              "kind": "method",
              "name": "_updateResizingState",
              "privacy": "private",
              "return": {
                "type": {
                  "text": "void"
                }
              },
              "parameters": [
                {
                  "name": "params",
                  "type": {
                    "text": "ResizeCallbackParams"
                  }
                }
              ]
            },
            {
              "kind": "method",
              "name": "_handlePointerEnter",
              "privacy": "private",
              "return": {
                "type": {
                  "text": "void"
                }
              }
            },
            {
              "kind": "method",
              "name": "_handlePointerLeave",
              "privacy": "private",
              "return": {
                "type": {
                  "text": "void"
                }
              }
            },
            {
              "kind": "method",
              "name": "_handleResizeStart",
              "privacy": "private",
              "parameters": [
                {
                  "name": "params",
                  "type": {
                    "text": "ResizeCallbackParams"
                  }
                }
              ]
            },
            {
              "kind": "method",
              "name": "_handleResize",
              "privacy": "private",
              "return": {
                "type": {
                  "text": "void"
                }
              },
              "parameters": [
                {
                  "name": "params",
                  "type": {
                    "text": "ResizeCallbackParams"
                  }
                }
              ]
            },
            {
              "kind": "method",
              "name": "_handleResizeEnd",
              "privacy": "private",
              "return": {
                "type": {
                  "text": "void"
                }
              },
              "parameters": [
                {
                  "name": "params",
                  "type": {
                    "text": "ResizeCallbackParams"
                  }
                }
              ]
            },
            {
              "kind": "method",
              "name": "_handleResizeCancel",
              "privacy": "private",
              "return": {
                "type": {
                  "text": "void"
                }
              },
              "parameters": [
                {
                  "name": "{ initial }",
                  "type": {
                    "text": "ResizeState"
                  }
                }
              ]
            },
            {
              "kind": "method",
              "name": "_renderAdorner",
              "privacy": "protected",
              "parameters": [
                {
                  "name": "name",
                  "type": {
                    "text": "'side' | 'corner' | 'bottom'"
                  }
                },
                {
                  "name": "part",
                  "type": {
                    "text": "string"
                  }
                }
              ]
            },
            {
              "kind": "method",
              "name": "_renderAdorners",
              "privacy": "protected"
            },
            {
              "kind": "method",
              "name": "addEventListener",
              "privacy": "public",
              "return": {
                "type": {
                  "text": "void"
                }
              },
              "parameters": [
                {
                  "name": "type",
                  "type": {
                    "text": "K"
                  }
                },
                {
                  "name": "listener",
                  "type": {
                    "text": "(this: HTMLElement, ev: M[K]) => any"
                  }
                },
                {
                  "name": "options",
                  "optional": true,
                  "type": {
                    "text": "boolean | AddEventListenerOptions"
                  }
                }
              ],
              "inheritedFrom": {
                "name": "EventEmitterMixin",
                "module": "src/components/common/mixins/event-emitter.ts"
              }
            },
            {
              "kind": "method",
              "name": "removeEventListener",
              "privacy": "public",
              "return": {
                "type": {
                  "text": "void"
                }
              },
              "parameters": [
                {
                  "name": "type",
                  "type": {
                    "text": "K"
                  }
                },
                {
                  "name": "listener",
                  "type": {
                    "text": "(this: HTMLElement, ev: M[K]) => any"
                  }
                },
                {
                  "name": "options",
                  "optional": true,
                  "type": {
                    "text": "boolean | EventListenerOptions"
                  }
                }
              ],
              "inheritedFrom": {
                "name": "EventEmitterMixin",
                "module": "src/components/common/mixins/event-emitter.ts"
              }
            },
            {
              "kind": "method",
              "name": "emitEvent",
              "privacy": "private",
              "return": {
                "type": {
                  "text": "boolean"
                }
              },
              "parameters": [
                {
                  "name": "type",
                  "type": {
                    "text": "K"
                  }
                },
                {
                  "name": "eventInitDict",
                  "optional": true,
                  "type": {
                    "text": "CustomEventInit<D>"
                  }
                }
              ],
              "inheritedFrom": {
                "name": "EventEmitterMixin",
                "module": "src/components/common/mixins/event-emitter.ts"
              }
            }
          ],
          "attributes": [
            {
              "name": "active",
              "type": {
                "text": "boolean"
              },
              "default": "false",
              "description": "Whether to always show the resize element adorners.",
              "fieldName": "active"
            },
            {
              "name": "mode",
              "description": "Get/Set the mode of the resizing operation.",
              "type": {
                "text": "ResizeMode"
              },
              "fieldName": "mode",
              "expandedType": {
                "text": "'immediate' | 'deferred'"
              }
            }
          ],
          "mixins": [
            {
              "name": "EventEmitterMixin",
              "module": "/src/components/common/mixins/event-emitter.js"
            }
          ],
          "superclass": {
            "name": "LitElement",
            "package": "lit"
          },
          "tagName": "igc-resize",
          "customElement": true,
          "events": [
            {
              "type": {
                "text": "CustomEvent"
              },
              "inheritedFrom": {
                "name": "EventEmitterMixin",
                "module": "src/components/common/mixins/event-emitter.ts"
              }
            }
          ]
        }
      ],
      "exports": [
        {
          "kind": "js",
          "name": "default",
          "declaration": {
            "name": "IgcResizeContainerComponent",
            "module": "src/components/resize-container/resize-container.ts"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "src/components/tile-manager/types.ts",
      "declarations": [],
      "exports": []
    },
    {
      "kind": "javascript-module",
      "path": "src/components/tile-manager/resize-util.ts",
      "declarations": [
        {
          "kind": "class",
          "description": "",
          "name": "ResizeUtil",
          "members": [
            {
              "kind": "field",
              "name": "gap",
              "type": {
                "text": "number"
              },
              "privacy": "private",
              "default": "gap"
            },
            {
              "kind": "method",
              "name": "calculateSnappedDimension",
              "privacy": "public",
              "return": {
                "type": {
                  "text": "SnappedDimension"
                }
              },
              "parameters": [
                {
                  "name": "resizeProps",
                  "type": {
                    "text": "ResizeProps"
                  }
                }
              ]
            },
            {
              "kind": "method",
              "name": "calculateResizedSpan",
              "privacy": "public",
              "return": {
                "type": {
                  "text": "number"
                }
              },
              "parameters": [
                {
                  "name": "props",
                  "type": {
                    "text": "ResizeSpanProps"
                  }
                }
              ]
            },
            {
              "kind": "method",
              "name": "calculatePosition",
              "privacy": "public",
              "return": {
                "type": {
                  "text": "number"
                }
              },
              "parameters": [
                {
                  "name": "targetPosition",
                  "type": {
                    "text": "number"
                  }
                },
                {
                  "name": "sizes",
                  "type": {
                    "text": "number[]"
                  }
                }
              ]
            }
          ]
        }
      ],
      "exports": [
        {
          "kind": "js",
          "name": "ResizeUtil",
          "declaration": {
            "name": "ResizeUtil",
            "module": "src/components/tile-manager/resize-util.ts"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "src/components/tile-manager/resize-state.ts",
      "declarations": [
        {
          "kind": "function",
          "name": "createTileResizeState",
          "return": {
            "type": {
              "text": "TileResizeState"
            }
          }
        }
      ],
      "exports": [
        {
          "kind": "js",
          "name": "createTileResizeState",
          "declaration": {
            "name": "createTileResizeState",
            "module": "src/components/tile-manager/resize-state.ts"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "src/components/tile-manager/tile-ghost-util.ts",
      "declarations": [
        {
          "kind": "function",
          "name": "createTileDragGhost",
          "return": {
            "type": {
              "text": "IgcTileComponent"
            }
          },
          "parameters": [
            {
              "name": "tile",
              "type": {
                "text": "IgcTileComponent"
              }
            }
          ]
        },
        {
          "kind": "function",
          "name": "createTileGhost",
          "return": {
            "type": {
              "text": "HTMLElement"
            }
          },
          "parameters": [
            {
              "name": "tile",
              "type": {
                "text": "IgcTileComponent"
              }
            }
          ]
        }
      ],
      "exports": [
        {
          "kind": "js",
          "name": "createTileDragGhost",
          "declaration": {
            "name": "createTileDragGhost",
            "module": "src/components/tile-manager/tile-ghost-util.ts"
          }
        },
        {
          "kind": "js",
          "name": "createTileGhost",
          "declaration": {
            "name": "createTileGhost",
            "module": "src/components/tile-manager/tile-ghost-util.ts"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "src/components/tile-manager/tile.ts",
      "declarations": [
        {
          "kind": "class",
          "description": "The tile component is used within the `igc-tile-manager` as a container\nfor displaying various types of information.",
          "name": "IgcTileComponent",
          "cssParts": [
            {
              "description": "The wrapper for the entire tile content, header and content.",
              "name": "base"
            },
            {
              "description": "The container for the tile header, including title and actions.",
              "name": "header"
            },
            {
              "description": "The title container of the tile.",
              "name": "title"
            },
            {
              "description": "The actions container of the tile header.",
              "name": "actions"
            },
            {
              "description": "The container wrapping the tile’s main content.",
              "name": "content-container"
            },
            {
              "description": "The part for the side adorner of the encapsulated resize element in the tile.",
              "name": "trigger-side"
            },
            {
              "description": "The part for the corner adorner of the encapsulated resize element in the tile.",
              "name": "trigger"
            },
            {
              "description": "The part for the bottom adorner of the encapsulated resize element in the tile.",
              "name": "trigger-bottom"
            }
          ],
          "slots": [
            {
              "description": "Default slot for the tile's content.",
              "name": ""
            },
            {
              "description": "Renders the title of the tile header.",
              "name": "title"
            },
            {
              "description": "Renders the maximize action element of the tile header.",
              "name": "maximize-action"
            },
            {
              "description": "Renders the fullscreen action element of the tile header.",
              "name": "fullscreen-action"
            },
            {
              "description": "Renders items after the default actions in the tile header.",
              "name": "actions"
            },
            {
              "description": "Renders the side resize handle of the tile.",
              "name": "side-adorner"
            },
            {
              "description": "Renders the corner resize handle of the tile.",
              "name": "corner-adorner"
            },
            {
              "description": "Renders the bottom resize handle of the tile.",
              "name": "bottom-adorner"
            }
          ],
          "members": [
            {
              "kind": "field",
              "name": "tagName",
              "type": {
                "text": "string"
              },
              "privacy": "public",
              "static": true,
              "readonly": true,
              "default": "'igc-tile'"
            },
            {
              "kind": "method",
              "name": "register",
              "privacy": "public",
              "static": true
            },
            {
              "kind": "field",
              "name": "increment",
              "privacy": "private",
              "static": true,
              "readonly": true
            },
            {
              "kind": "field",
              "name": "_dragController",
              "privacy": "private"
            },
            {
              "kind": "field",
              "name": "_fullscreenController",
              "privacy": "private"
            },
            {
              "kind": "field",
              "name": "_colSpan",
              "type": {
                "text": "number"
              },
              "privacy": "private",
              "default": "1"
            },
            {
              "kind": "field",
              "name": "_rowSpan",
              "type": {
                "text": "number"
              },
              "privacy": "private",
              "default": "1"
            },
            {
              "kind": "field",
              "name": "_colStart",
              "type": {
                "text": "number | null"
              },
              "privacy": "private",
              "default": "null"
            },
            {
              "kind": "field",
              "name": "_rowStart",
              "type": {
                "text": "number | null"
              },
              "privacy": "private",
              "default": "null"
            },
            {
              "kind": "field",
              "name": "_position",
              "type": {
                "text": "number"
              },
              "privacy": "private",
              "default": "-1"
            },
            {
              "kind": "field",
              "name": "_resizeState",
              "privacy": "private"
            },
            {
              "kind": "field",
              "name": "_dragStack",
              "privacy": "private"
            },
            {
              "kind": "field",
              "name": "_customAdorners",
              "privacy": "private",
              "default": "new Map<string, boolean>( Object.entries({ side: false, corner: false, bottom: false, }) )"
            },
            {
              "kind": "field",
              "name": "_setDragConfiguration",
              "privacy": "private",
              "description": "Context consumer callback that sets the updated configuration of the internal drag controller\nbased on the passed tile manager properties."
            },
            {
              "kind": "field",
              "name": "_context",
              "privacy": "private"
            },
            {
              "kind": "field",
              "name": "_tileManagerCtx",
              "type": {
                "text": "TileManagerContext | undefined"
              },
              "privacy": "private",
              "description": "Returns the parent tile manager context.",
              "readonly": true
            },
            {
              "kind": "field",
              "name": "_tileManager",
              "type": {
                "text": "IgcTileManagerComponent | undefined"
              },
              "privacy": "private",
              "readonly": true
            },
            {
              "kind": "field",
              "name": "_cssContainer",
              "type": {
                "text": "HTMLElement"
              },
              "privacy": "private",
              "description": "Returns the tile manager internal CSS grid container.",
              "readonly": true
            },
            {
              "kind": "field",
              "name": "_resizeMode",
              "type": {
                "text": "TileManagerResizeMode"
              },
              "privacy": "private",
              "description": "Returns the tile manager current resize mode.",
              "readonly": true,
              "expandedType": {
                "text": "'none' | 'hover' | 'always'"
              }
            },
            {
              "kind": "field",
              "name": "_headerRef",
              "privacy": "protected"
            },
            {
              "kind": "field",
              "name": "_titleElements",
              "type": {
                "text": "HTMLElement[]"
              },
              "privacy": "private"
            },
            {
              "kind": "field",
              "name": "_actionsElements",
              "type": {
                "text": "HTMLElement[]"
              },
              "privacy": "private"
            },
            {
              "kind": "field",
              "name": "_resizeContainer",
              "type": {
                "text": "IgcResizeContainerComponent | undefined"
              },
              "privacy": "protected"
            },
            {
              "kind": "field",
              "name": "_tileContent",
              "type": {
                "text": "HTMLElement"
              },
              "privacy": "public"
            },
            {
              "kind": "field",
              "name": "_maximized",
              "type": {
                "text": "boolean"
              },
              "privacy": "private",
              "default": "false"
            },
            {
              "kind": "field",
              "name": "_isDragging",
              "type": {
                "text": "boolean"
              },
              "privacy": "private",
              "default": "false"
            },
            {
              "kind": "field",
              "name": "_isResizing",
              "type": {
                "text": "boolean"
              },
              "privacy": "private",
              "default": "false"
            },
            {
              "kind": "field",
              "name": "_resizeDisabled",
              "type": {
                "text": "boolean"
              },
              "privacy": "private",
              "description": "Whether to render the resize container based on tile and tile manager configuration.",
              "readonly": true
            },
            {
              "kind": "field",
              "name": "colSpan",
              "privacy": "public",
              "description": "The number of columns the tile will span.",
              "default": "1",
              "attribute": "col-span",
              "type": {
                "text": "number"
              }
            },
            {
              "kind": "field",
              "name": "rowSpan",
              "privacy": "public",
              "description": "The number of rows the tile will span.",
              "default": "1",
              "attribute": "row-span",
              "type": {
                "text": "number"
              }
            },
            {
              "kind": "field",
              "name": "colStart",
              "privacy": "public",
              "description": "The starting column for the tile.",
              "attribute": "col-start",
              "type": {
                "text": "number | null"
              }
            },
            {
              "kind": "field",
              "name": "rowStart",
              "privacy": "public",
              "description": "The starting row for the tile.",
              "attribute": "row-start",
              "type": {
                "text": "number | null"
              }
            },
            {
              "kind": "field",
              "name": "fullscreen",
              "type": {
                "text": "boolean"
              },
              "privacy": "public",
              "description": "Indicates whether the tile occupies the whole screen.",
              "readonly": true
            },
            {
              "kind": "field",
              "name": "maximized",
              "privacy": "public",
              "description": "Indicates whether the tile occupies all available space within the layout.",
              "attribute": "maximized",
              "type": {
                "text": "boolean"
              },
              "reflects": true
            },
            {
              "kind": "field",
              "name": "disableResize",
              "type": {
                "text": "boolean"
              },
              "privacy": "public",
              "default": "false",
              "description": "Indicates whether to disable tile resize behavior regardless\not its tile manager parent settings.",
              "attribute": "disable-resize",
              "reflects": true
            },
            {
              "kind": "field",
              "name": "disableFullscreen",
              "type": {
                "text": "boolean"
              },
              "privacy": "public",
              "default": "false",
              "description": "Whether to disable the rendering of the tile `fullscreen-action` slot and its\ndefault fullscreen action button.",
              "attribute": "disable-fullscreen",
              "reflects": true
            },
            {
              "kind": "field",
              "name": "disableMaximize",
              "type": {
                "text": "boolean"
              },
              "privacy": "public",
              "default": "false",
              "description": "Whether to disable the rendering of the tile `maximize-action` slot and its\ndefault maximize action button.",
              "attribute": "disable-maximize",
              "reflects": true
            },
            {
              "kind": "field",
              "name": "position",
              "privacy": "public",
              "description": "Gets/sets the tile's visual position in the layout.\nCorresponds to the CSS `order` property.",
              "attribute": "position",
              "type": {
                "text": "number"
              }
            },
            {
              "kind": "method",
              "name": "_setDragState",
              "privacy": "private",
              "parameters": [
                {
                  "name": "state",
                  "default": "true"
                }
              ]
            },
            {
              "kind": "method",
              "name": "_handleDragStart",
              "privacy": "private"
            },
            {
              "kind": "method",
              "name": "_handleDragOver",
              "privacy": "private",
              "return": {
                "type": {
                  "text": "void"
                }
              },
              "parameters": [
                {
                  "name": "{ event, state }",
                  "type": {
                    "text": "DragCallbackParameters"
                  }
                }
              ]
            },
            {
              "kind": "method",
              "name": "_handleDragCancel",
              "privacy": "private"
            },
            {
              "kind": "method",
              "name": "_handleDragEnd",
              "privacy": "private"
            },
            {
              "kind": "method",
              "name": "_performSwap",
              "privacy": "private",
              "return": {
                "type": {
                  "text": "void"
                }
              },
              "parameters": [
                {
                  "name": "match",
                  "type": {
                    "text": "IgcTileComponent"
                  }
                }
              ]
            },
            {
              "kind": "method",
              "name": "_shouldSwap",
              "privacy": "private",
              "return": {
                "type": {
                  "text": "boolean"
                }
              },
              "parameters": [
                {
                  "name": "{ clientX, clientY }",
                  "type": {
                    "text": "PointerEvent"
                  }
                },
                {
                  "name": "state",
                  "type": {
                    "text": "DragCallbackParameters['state']"
                  }
                },
                {
                  "name": "match",
                  "type": {
                    "text": "IgcTileComponent"
                  }
                }
              ]
            },
            {
              "kind": "method",
              "name": "_skipDrag",
              "privacy": "private",
              "return": {
                "type": {
                  "text": "boolean"
                }
              },
              "parameters": [
                {
                  "name": "event",
                  "type": {
                    "text": "PointerEvent"
                  }
                }
              ]
            },
            {
              "kind": "method",
              "name": "_match",
              "privacy": "private",
              "return": {
                "type": {
                  "text": "element is IgcTileComponent"
                }
              },
              "parameters": [
                {
                  "name": "element",
                  "type": {
                    "text": "Element"
                  }
                }
              ]
            },
            {
              "kind": "method",
              "name": "_createDragGhost",
              "privacy": "private",
              "return": {
                "type": {
                  "text": "IgcTileComponent"
                }
              }
            },
            {
              "kind": "field",
              "name": "_createResizeGhost",
              "privacy": "private"
            },
            {
              "kind": "method",
              "name": "_setResizeState",
              "privacy": "private",
              "parameters": [
                {
                  "name": "state",
                  "default": "true"
                }
              ]
            },
            {
              "kind": "method",
              "name": "_handleResizeStart",
              "privacy": "private",
              "parameters": [
                {
                  "name": "event",
                  "type": {
                    "text": "CustomEvent<ResizeCallbackParams>"
                  }
                }
              ]
            },
            {
              "kind": "method",
              "name": "_handleResize",
              "privacy": "private",
              "parameters": [
                {
                  "name": "{\n    detail: { state },\n  }",
                  "type": {
                    "text": "CustomEvent<ResizeCallbackParams>"
                  }
                }
              ]
            },
            {
              "kind": "method",
              "name": "_handleResizeEnd",
              "privacy": "private",
              "parameters": [
                {
                  "name": "{\n    detail: { state },\n  }",
                  "type": {
                    "text": "CustomEvent<ResizeCallbackParams>"
                  }
                }
              ]
            },
            {
              "kind": "method",
              "name": "_handleResizeCancel",
              "privacy": "private"
            },
            {
              "kind": "method",
              "name": "_handleFullscreen",
              "privacy": "private"
            },
            {
              "kind": "method",
              "name": "_handleMaximize",
              "privacy": "private"
            },
            {
              "kind": "method",
              "name": "_emitFullScreenEvent",
              "privacy": "private",
              "parameters": [
                {
                  "name": "state",
                  "type": {
                    "text": "boolean"
                  }
                }
              ]
            },
            {
              "kind": "method",
              "name": "_emitMaximizedEvent",
              "privacy": "private"
            },
            {
              "kind": "method",
              "name": "_emitTileDragStart",
              "privacy": "private"
            },
            {
              "kind": "method",
              "name": "_emitTileResizeStart",
              "privacy": "private"
            },
            {
              "kind": "method",
              "name": "_renderDefaultAction",
              "privacy": "protected",
              "parameters": [
                {
                  "name": "type",
                  "type": {
                    "text": "'maximize' | 'fullscreen'"
                  }
                }
              ]
            },
            {
              "kind": "method",
              "name": "_renderHeader",
              "privacy": "protected"
            },
            {
              "kind": "method",
              "name": "_renderContent",
              "privacy": "protected"
            },
            {
              "kind": "method",
              "name": "_renderAdornerSlot",
              "privacy": "private",
              "parameters": [
                {
                  "name": "name",
                  "type": {
                    "text": "AdornerType"
                  }
                }
              ]
            },
            {
              "kind": "method",
              "name": "addEventListener",
              "privacy": "public",
              "return": {
                "type": {
                  "text": "void"
                }
              },
              "parameters": [
                {
                  "name": "type",
                  "type": {
                    "text": "K"
                  }
                },
                {
                  "name": "listener",
                  "type": {
                    "text": "(this: HTMLElement, ev: M[K]) => any"
                  }
                },
                {
                  "name": "options",
                  "optional": true,
                  "type": {
                    "text": "boolean | AddEventListenerOptions"
                  }
                }
              ],
              "inheritedFrom": {
                "name": "EventEmitterMixin",
                "module": "src/components/common/mixins/event-emitter.ts"
              }
            },
            {
              "kind": "method",
              "name": "removeEventListener",
              "privacy": "public",
              "return": {
                "type": {
                  "text": "void"
                }
              },
              "parameters": [
                {
                  "name": "type",
                  "type": {
                    "text": "K"
                  }
                },
                {
                  "name": "listener",
                  "type": {
                    "text": "(this: HTMLElement, ev: M[K]) => any"
                  }
                },
                {
                  "name": "options",
                  "optional": true,
                  "type": {
                    "text": "boolean | EventListenerOptions"
                  }
                }
              ],
              "inheritedFrom": {
                "name": "EventEmitterMixin",
                "module": "src/components/common/mixins/event-emitter.ts"
              }
            },
            {
              "kind": "method",
              "name": "emitEvent",
              "privacy": "private",
              "return": {
                "type": {
                  "text": "boolean"
                }
              },
              "parameters": [
                {
                  "name": "type",
                  "type": {
                    "text": "K"
                  }
                },
                {
                  "name": "eventInitDict",
                  "optional": true,
                  "type": {
                    "text": "CustomEventInit<D>"
                  }
                }
              ],
              "inheritedFrom": {
                "name": "EventEmitterMixin",
                "module": "src/components/common/mixins/event-emitter.ts"
              }
            }
          ],
          "events": [
            {
              "description": "Fired when tile the fullscreen state changes.",
              "name": "igcTileFullscreen"
            },
            {
              "description": "Fired when tile the maximize state changes.",
              "name": "igcTileMaximize"
            },
            {
              "description": "Fired when a drag operation on a tile is about to begin. Cancelable.",
              "name": "igcTileDragStart"
            },
            {
              "description": "Fired when a drag operation with a tile is successfully completed.",
              "name": "igcTileDragEnd"
            },
            {
              "description": "Fired when a tile drag operation is canceled by the user.",
              "name": "igcTileDragCancel"
            },
            {
              "description": "Fired when a resize operation on a tile is about to begin. Cancelable.",
              "name": "igcTileResizeStart"
            },
            {
              "description": "Fired when a resize operation on a tile is successfully completed.",
              "name": "igcTileResizeEnd"
            },
            {
              "description": "Fired when a resize operation on a tile is canceled by the user.",
              "name": "igcTileResizeCancel"
            },
            {
              "type": {
                "text": "CustomEvent"
              },
              "inheritedFrom": {
                "name": "EventEmitterMixin",
                "module": "src/components/common/mixins/event-emitter.ts"
              }
            }
          ],
          "attributes": [
            {
              "name": "col-span",
              "description": "The number of columns the tile will span.",
              "default": "1",
              "fieldName": "colSpan",
              "attribute": "col-span",
              "type": {
                "text": "number"
              }
            },
            {
              "name": "row-span",
              "description": "The number of rows the tile will span.",
              "default": "1",
              "fieldName": "rowSpan",
              "attribute": "row-span",
              "type": {
                "text": "number"
              }
            },
            {
              "name": "col-start",
              "description": "The starting column for the tile.",
              "fieldName": "colStart",
              "attribute": "col-start",
              "type": {
                "text": "number | null"
              }
            },
            {
              "name": "row-start",
              "description": "The starting row for the tile.",
              "fieldName": "rowStart",
              "attribute": "row-start",
              "type": {
                "text": "number | null"
              }
            },
            {
              "name": "maximized",
              "description": "Indicates whether the tile occupies all available space within the layout.",
              "fieldName": "maximized",
              "attribute": "maximized",
              "type": {
                "text": "boolean"
              }
            },
            {
              "name": "disable-resize",
              "type": {
                "text": "boolean"
              },
              "default": "false",
              "description": "Indicates whether to disable tile resize behavior regardless\not its tile manager parent settings.",
              "fieldName": "disableResize",
              "attribute": "disable-resize"
            },
            {
              "name": "disable-fullscreen",
              "type": {
                "text": "boolean"
              },
              "default": "false",
              "description": "Whether to disable the rendering of the tile `fullscreen-action` slot and its\ndefault fullscreen action button.",
              "fieldName": "disableFullscreen",
              "attribute": "disable-fullscreen"
            },
            {
              "name": "disable-maximize",
              "type": {
                "text": "boolean"
              },
              "default": "false",
              "description": "Whether to disable the rendering of the tile `maximize-action` slot and its\ndefault maximize action button.",
              "fieldName": "disableMaximize",
              "attribute": "disable-maximize"
            },
            {
              "name": "position",
              "description": "Gets/sets the tile's visual position in the layout.\nCorresponds to the CSS `order` property.",
              "fieldName": "position",
              "attribute": "position",
              "type": {
                "text": "number"
              }
            }
          ],
          "mixins": [
            {
              "name": "EventEmitterMixin",
              "module": "/src/components/common/mixins/event-emitter.js"
            }
          ],
          "superclass": {
            "name": "LitElement",
            "package": "lit"
          },
          "tagName": "igc-tile",
          "customElement": true
        }
      ],
      "exports": [
        {
          "kind": "js",
          "name": "default",
          "declaration": {
            "name": "IgcTileComponent",
            "module": "src/components/tile-manager/tile.ts"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "src/components/tile-manager/position.ts",
      "declarations": [
        {
          "kind": "function",
          "name": "createTilesState",
          "parameters": [
            {
              "name": "manager",
              "type": {
                "text": "IgcTileManagerComponent"
              }
            }
          ]
        },
        {
          "kind": "function",
          "name": "createTileDragStack",
          "return": {
            "type": {
              "text": "TileDragStack"
            }
          }
        },
        {
          "kind": "function",
          "name": "swapTiles",
          "return": {
            "type": {
              "text": "void"
            }
          },
          "parameters": [
            {
              "name": "a",
              "type": {
                "text": "IgcTileComponent"
              }
            },
            {
              "name": "b",
              "type": {
                "text": "IgcTileComponent"
              }
            }
          ]
        }
      ],
      "exports": [
        {
          "kind": "js",
          "name": "createTilesState",
          "declaration": {
            "name": "createTilesState",
            "module": "src/components/tile-manager/position.ts"
          }
        },
        {
          "kind": "js",
          "name": "createTileDragStack",
          "declaration": {
            "name": "createTileDragStack",
            "module": "src/components/tile-manager/position.ts"
          }
        },
        {
          "kind": "js",
          "name": "swapTiles",
          "declaration": {
            "name": "swapTiles",
            "module": "src/components/tile-manager/position.ts"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "src/components/tile-manager/serializer.ts",
      "declarations": [
        {
          "kind": "function",
          "name": "createSerializer",
          "parameters": [
            {
              "name": "host",
              "type": {
                "text": "IgcTileManagerComponent"
              }
            }
          ]
        }
      ],
      "exports": [
        {
          "kind": "js",
          "name": "createSerializer",
          "declaration": {
            "name": "createSerializer",
            "module": "src/components/tile-manager/serializer.ts"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "src/components/tile-manager/tile-manager.ts",
      "declarations": [
        {
          "kind": "class",
          "description": "The tile manager component enables the dynamic arrangement, resizing, and interaction of tiles.",
          "name": "IgcTileManagerComponent",
          "cssProperties": [
            {
              "description": "The number of columns for the tile manager. The `column-count` attribute sets this variable.",
              "name": "--column-count"
            },
            {
              "description": "The minimum size of the columns in the tile-manager. The `min-column-width` attribute sets this variable.",
              "name": "--min-col-width"
            },
            {
              "description": "The minimum size of the rows in the tile-manager. The `min-row-height` attribute sets this variable.",
              "name": "--min-row-height"
            },
            {
              "description": "The gap size of the underlying CSS grid container. The `gap` attributes sts this variable.",
              "name": "--grid-gap"
            }
          ],
          "cssParts": [
            {
              "description": "The tile manager CSS Grid container.",
              "name": "base"
            }
          ],
          "slots": [
            {
              "description": "Default slot for the tile manager. Only `igc-tile` elements will be projected inside the CSS grid container.",
              "name": ""
            }
          ],
          "members": [
            {
              "kind": "field",
              "name": "tagName",
              "type": {
                "text": "string"
              },
              "privacy": "public",
              "static": true,
              "readonly": true,
              "default": "'igc-tile-manager'"
            },
            {
              "kind": "method",
              "name": "register",
              "privacy": "public",
              "static": true
            },
            {
              "kind": "field",
              "name": "_internalStyles",
              "type": {
                "text": "StyleInfo"
              },
              "privacy": "private",
              "default": "{}"
            },
            {
              "kind": "field",
              "name": "_dragMode",
              "type": {
                "text": "TileManagerDragMode"
              },
              "privacy": "private",
              "default": "'none'",
              "expandedType": {
                "text": "'none' | 'tile-header' | 'tile'"
              }
            },
            {
              "kind": "field",
              "name": "_resizeMode",
              "type": {
                "text": "TileManagerResizeMode"
              },
              "privacy": "private",
              "default": "'none'",
              "expandedType": {
                "text": "'none' | 'hover' | 'always'"
              }
            },
            {
              "kind": "field",
              "name": "_columnCount",
              "type": {
                "text": "number"
              },
              "privacy": "private",
              "default": "0"
            },
            {
              "kind": "field",
              "name": "_gap",
              "type": {
                "text": "string | undefined"
              },
              "privacy": "private"
            },
            {
              "kind": "field",
              "name": "_minColWidth",
              "type": {
                "text": "string | undefined"
              },
              "privacy": "private"
            },
            {
              "kind": "field",
              "name": "_minRowHeight",
              "type": {
                "text": "string | undefined"
              },
              "privacy": "private"
            },
            {
              "kind": "field",
              "name": "_serializer",
              "privacy": "private"
            },
            {
              "kind": "field",
              "name": "_tilesState",
              "privacy": "private"
            },
            {
              "kind": "field",
              "name": "_grid",
              "privacy": "private"
            },
            {
              "kind": "field",
              "name": "_context",
              "privacy": "private",
              "default": "new ContextProvider(this, { context: tileManagerContext, initialValue: this._createContext(), })"
            },
            {
              "kind": "method",
              "name": "_createContext",
              "privacy": "private",
              "return": {
                "type": {
                  "text": "TileManagerContext"
                }
              }
            },
            {
              "kind": "method",
              "name": "_setManagerContext",
              "privacy": "private",
              "return": {
                "type": {
                  "text": "void"
                }
              }
            },
            {
              "kind": "field",
              "name": "resizeMode",
              "privacy": "public",
              "description": "Whether resize operations are enabled.",
              "default": "none",
              "attribute": "resize-mode",
              "type": {
                "text": "TileManagerResizeMode"
              },
              "expandedType": {
                "text": "'none' | 'hover' | 'always'"
              }
            },
            {
              "kind": "field",
              "name": "dragMode",
              "privacy": "public",
              "description": "Whether drag and drop operations are enabled.",
              "default": "none",
              "attribute": "drag-mode",
              "type": {
                "text": "TileManagerDragMode"
              },
              "expandedType": {
                "text": "'none' | 'tile-header' | 'tile'"
              }
            },
            {
              "kind": "field",
              "name": "columnCount",
              "privacy": "public",
              "description": "Sets the number of columns for the tile manager.\nSetting value <= than zero will trigger a responsive layout.",
              "default": "0",
              "attribute": "column-count",
              "type": {
                "text": "number"
              }
            },
            {
              "kind": "field",
              "name": "minColumnWidth",
              "privacy": "public",
              "description": "Sets the minimum width for a column unit in the tile manager.",
              "attribute": "min-column-width",
              "type": {
                "text": "string | undefined"
              }
            },
            {
              "kind": "field",
              "name": "minRowHeight",
              "privacy": "public",
              "description": "Sets the minimum height for a row unit in the tile manager.",
              "attribute": "min-row-height",
              "type": {
                "text": "string | undefined"
              }
            },
            {
              "kind": "field",
              "name": "gap",
              "privacy": "public",
              "description": "Sets the gap size between tiles in the tile manager.",
              "attribute": "gap",
              "type": {
                "text": "string | undefined"
              }
            },
            {
              "kind": "field",
              "name": "tiles",
              "privacy": "public",
              "description": "Gets the tiles sorted by their position in the layout.",
              "readonly": true
            },
            {
              "kind": "method",
              "name": "_observerCallback",
              "privacy": "private",
              "parameters": [
                {
                  "name": "{\n    changes: { added, removed },\n  }",
                  "type": {
                    "text": "MutationControllerParams<IgcTileComponent>"
                  }
                }
              ]
            },
            {
              "kind": "method",
              "name": "saveLayout",
              "privacy": "public",
              "return": {
                "type": {
                  "text": "string"
                }
              },
              "description": "Returns the properties of the current tile collections as a JSON payload."
            },
            {
              "kind": "method",
              "name": "loadLayout",
              "privacy": "public",
              "return": {
                "type": {
                  "text": "void"
                }
              },
              "parameters": [
                {
                  "name": "data",
                  "type": {
                    "text": "string"
                  }
                }
              ],
              "description": "Restores a previously serialized state produced by `saveLayout`."
            }
          ],
          "attributes": [
            {
              "name": "resize-mode",
              "description": "Whether resize operations are enabled.",
              "default": "none",
              "fieldName": "resizeMode",
              "attribute": "resize-mode",
              "type": {
                "text": "TileManagerResizeMode"
              },
              "expandedType": {
                "text": "'none' | 'hover' | 'always'"
              }
            },
            {
              "name": "drag-mode",
              "description": "Whether drag and drop operations are enabled.",
              "default": "none",
              "fieldName": "dragMode",
              "attribute": "drag-mode",
              "type": {
                "text": "TileManagerDragMode"
              },
              "expandedType": {
                "text": "'none' | 'tile-header' | 'tile'"
              }
            },
            {
              "name": "column-count",
              "description": "Sets the number of columns for the tile manager.\nSetting value <= than zero will trigger a responsive layout.",
              "default": "0",
              "fieldName": "columnCount",
              "attribute": "column-count",
              "type": {
                "text": "number"
              }
            },
            {
              "name": "min-column-width",
              "description": "Sets the minimum width for a column unit in the tile manager.",
              "fieldName": "minColumnWidth",
              "attribute": "min-column-width",
              "type": {
                "text": "string | undefined"
              }
            },
            {
              "name": "min-row-height",
              "description": "Sets the minimum height for a row unit in the tile manager.",
              "fieldName": "minRowHeight",
              "attribute": "min-row-height",
              "type": {
                "text": "string | undefined"
              }
            },
            {
              "name": "gap",
              "description": "Sets the gap size between tiles in the tile manager.",
              "fieldName": "gap",
              "attribute": "gap",
              "type": {
                "text": "string | undefined"
              }
            }
          ],
          "superclass": {
            "name": "LitElement",
            "package": "lit"
          },
          "tagName": "igc-tile-manager",
          "customElement": true
        }
      ],
      "exports": [
        {
          "kind": "js",
          "name": "default",
          "declaration": {
            "name": "IgcTileManagerComponent",
            "module": "src/components/tile-manager/tile-manager.ts"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "src/components/common/context.ts",
      "declarations": [
        {
          "kind": "variable",
          "name": "carouselContext"
        },
        {
          "kind": "variable",
          "name": "tileManagerContext"
        }
      ],
      "exports": [
        {
          "kind": "js",
          "name": "carouselContext",
          "declaration": {
            "name": "carouselContext",
            "module": "src/components/common/context.ts"
          }
        },
        {
          "kind": "js",
          "name": "tileManagerContext",
          "declaration": {
            "name": "tileManagerContext",
            "module": "src/components/common/context.ts"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "src/components/common/controllers/gestures.ts",
      "declarations": [
        {
          "kind": "class",
          "description": "",
          "name": "SwipeEvent",
          "members": [
            {
              "kind": "field",
              "name": "data",
              "type": {
                "text": "GestureData"
              },
              "privacy": "public",
              "readonly": true,
              "default": "data"
            },
            {
              "kind": "field",
              "name": "name",
              "type": {
                "text": "string"
              },
              "privacy": "public",
              "readonly": true,
              "default": "name"
            }
          ],
          "superclass": {
            "name": "Event",
            "module": "src/components/common/controllers/gestures.ts"
          }
        },
        {
          "kind": "function",
          "name": "addGesturesController",
          "parameters": [
            {
              "name": "host",
              "type": {
                "text": "ReactiveControllerHost & HTMLElement"
              }
            },
            {
              "name": "options",
              "optional": true,
              "type": {
                "text": "GesturesOptions"
              }
            }
          ],
          "description": "Adds a GesturesController responsible for managing gesture behaviors\nfor the given host element."
        }
      ],
      "exports": [
        {
          "kind": "js",
          "name": "SwipeEvent",
          "declaration": {
            "name": "SwipeEvent",
            "module": "src/components/common/controllers/gestures.ts"
          }
        },
        {
          "kind": "js",
          "name": "addGesturesController",
          "declaration": {
            "name": "addGesturesController",
            "module": "src/components/common/controllers/gestures.ts"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "src/components/carousel/carousel-indicator.ts",
      "declarations": [
        {
          "kind": "class",
          "description": "Used when a custom indicator needs to be passed to the `igc-carousel` component.",
          "name": "IgcCarouselIndicatorComponent",
          "cssParts": [
            {
              "description": "The wrapping container of the carousel dot indicator.",
              "name": "indicator"
            },
            {
              "description": "The wrapping container of the inactive dot indicator.",
              "name": "inactive"
            },
            {
              "description": "The wrapping container of the active dot indicator.",
              "name": "active"
            }
          ],
          "slots": [
            {
              "description": "Default slot for projected inactive indicator.",
              "name": ""
            },
            {
              "description": "Default slot for projected active indicator.",
              "name": "active"
            }
          ],
          "members": [
            {
              "kind": "field",
              "name": "tagName",
              "type": {
                "text": "string"
              },
              "privacy": "public",
              "static": true,
              "readonly": true,
              "default": "'igc-carousel-indicator'"
            },
            {
              "kind": "method",
              "name": "register",
              "privacy": "public",
              "static": true,
              "return": {
                "type": {
                  "text": "void"
                }
              }
            },
            {
              "kind": "field",
              "name": "_internals",
              "privacy": "private",
              "readonly": true
            },
            {
              "kind": "field",
              "name": "_carousel",
              "type": {
                "text": "IgcCarouselComponent | undefined"
              },
              "privacy": "private"
            },
            {
              "kind": "field",
              "name": "_labelFormat",
              "type": {
                "text": "string"
              },
              "privacy": "protected",
              "readonly": true
            },
            {
              "kind": "field",
              "name": "active",
              "type": {
                "text": "boolean"
              },
              "privacy": "public",
              "default": "false"
            },
            {
              "kind": "field",
              "name": "index",
              "type": {
                "text": "number"
              },
              "privacy": "public",
              "default": "0"
            }
          ],
          "superclass": {
            "name": "LitElement",
            "package": "lit"
          },
          "tagName": "igc-carousel-indicator",
          "customElement": true
        }
      ],
      "exports": [
        {
          "kind": "js",
          "name": "default",
          "declaration": {
            "name": "IgcCarouselIndicatorComponent",
            "module": "src/components/carousel/carousel-indicator.ts"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "src/components/carousel/carousel-indicator-container.ts",
      "declarations": [
        {
          "kind": "class",
          "description": "",
          "name": "IgcCarouselIndicatorContainerComponent",
          "cssParts": [
            {
              "description": "The wrapping container of all carousel indicators.",
              "name": "base"
            }
          ],
          "slots": [
            {
              "description": "Default slot for the carousel indicator container.",
              "name": ""
            }
          ],
          "members": [
            {
              "kind": "field",
              "name": "tagName",
              "type": {
                "text": "string"
              },
              "privacy": "public",
              "static": true,
              "readonly": true,
              "default": "'igc-carousel-indicator-container'"
            },
            {
              "kind": "method",
              "name": "register",
              "privacy": "public",
              "static": true,
              "return": {
                "type": {
                  "text": "void"
                }
              }
            },
            {
              "kind": "field",
              "name": "_focusRingManager",
              "privacy": "private",
              "readonly": true
            },
            {
              "kind": "method",
              "name": "_handleFocusOut",
              "privacy": "private",
              "return": {
                "type": {
                  "text": "void"
                }
              },
              "parameters": [
                {
                  "name": "event",
                  "type": {
                    "text": "FocusEvent"
                  }
                }
              ]
            }
          ],
          "superclass": {
            "name": "LitElement",
            "package": "lit"
          },
          "tagName": "igc-carousel-indicator-container",
          "customElement": true
        }
      ],
      "exports": [
        {
          "kind": "js",
          "name": "default",
          "declaration": {
            "name": "IgcCarouselIndicatorContainerComponent",
            "module": "src/components/carousel/carousel-indicator-container.ts"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "src/components/carousel/animations.ts",
      "declarations": [
        {
          "kind": "variable",
          "name": "animations",
          "default": "new Map( Object.entries({ fade: new Map( Object.entries({ in: fadeIn, out: fadeOut, }) ), slideHor: new Map( Object.entries({ in: slideInHor, out: slideOutHor, }) ), slideVer: new Map( Object.entries({ in: slideInVer, out: slideOutVer, }) ), none: new Map( Object.entries({ in: noopAnimation, out: noopAnimation, }) ), }) )"
        }
      ],
      "exports": [
        {
          "kind": "js",
          "name": "animations",
          "declaration": {
            "name": "animations",
            "module": "src/components/carousel/animations.ts"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "src/components/carousel/carousel-slide.ts",
      "declarations": [
        {
          "kind": "class",
          "description": "A single content container within a set of containers used in the context of an `igc-carousel`.",
          "name": "IgcCarouselSlideComponent",
          "slots": [
            {
              "description": "slot for the carousel slide.",
              "name": "Default"
            }
          ],
          "members": [
            {
              "kind": "field",
              "name": "tagName",
              "type": {
                "text": "string"
              },
              "privacy": "public",
              "static": true,
              "readonly": true,
              "default": "'igc-carousel-slide'"
            },
            {
              "kind": "method",
              "name": "register",
              "privacy": "public",
              "static": true,
              "return": {
                "type": {
                  "text": "void"
                }
              }
            },
            {
              "kind": "field",
              "name": "increment",
              "privacy": "private",
              "static": true,
              "readonly": true
            },
            {
              "kind": "field",
              "name": "_internals",
              "privacy": "private",
              "readonly": true
            },
            {
              "kind": "field",
              "name": "_animationPlayer",
              "privacy": "private",
              "readonly": true
            },
            {
              "kind": "field",
              "name": "_carousel",
              "type": {
                "text": "IgcCarouselComponent | undefined"
              },
              "privacy": "private"
            },
            {
              "kind": "field",
              "name": "_index",
              "privacy": "protected",
              "readonly": true
            },
            {
              "kind": "field",
              "name": "_total",
              "privacy": "protected",
              "readonly": true
            },
            {
              "kind": "field",
              "name": "_animation",
              "privacy": "protected",
              "readonly": true
            },
            {
              "kind": "field",
              "name": "_labelFormat",
              "privacy": "protected",
              "readonly": true
            },
            {
              "kind": "field",
              "name": "active",
              "type": {
                "text": "boolean"
              },
              "privacy": "public",
              "default": "false",
              "description": "The current active slide for the carousel component.",
              "attribute": "active",
              "reflects": true
            },
            {
              "kind": "field",
              "name": "previous",
              "type": {
                "text": "boolean"
              },
              "privacy": "public",
              "default": "false",
              "attribute": "previous",
              "reflects": true
            }
          ],
          "attributes": [
            {
              "name": "active",
              "type": {
                "text": "boolean"
              },
              "default": "false",
              "description": "The current active slide for the carousel component.",
              "fieldName": "active",
              "attribute": "active"
            },
            {
              "name": "previous",
              "type": {
                "text": "boolean"
              },
              "default": "false",
              "fieldName": "previous"
            }
          ],
          "superclass": {
            "name": "LitElement",
            "package": "lit"
          },
          "tagName": "igc-carousel-slide",
          "customElement": true
        }
      ],
      "exports": [
        {
          "kind": "js",
          "name": "default",
          "declaration": {
            "name": "IgcCarouselSlideComponent",
            "module": "src/components/carousel/carousel-slide.ts"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "src/components/carousel/carousel.ts",
      "declarations": [
        {
          "kind": "class",
          "description": "The `igc-carousel` presents a set of `igc-carousel-slide`s by sequentially displaying a subset of one or more slides.",
          "name": "IgcCarouselComponent",
          "cssParts": [
            {
              "description": "The wrapper container of each carousel navigation button.",
              "name": "navigation"
            },
            {
              "description": "The wrapper container of the carousel previous navigation button.",
              "name": "previous"
            },
            {
              "description": "The wrapper container of the carousel next navigation button.",
              "name": "next"
            },
            {
              "description": "The carousel dot indicator container.",
              "name": "dot"
            },
            {
              "description": "The carousel active dot indicator container.",
              "name": "active"
            },
            {
              "description": "The label container of the carousel indicators.",
              "name": "label"
            },
            {
              "description": "The wrapping container of all carousel indicators when indicators-orientation is set to start.",
              "name": "start"
            }
          ],
          "slots": [
            {
              "description": "slot for the carousel. Any projected `igc-carousel-slide` components should be projected here.",
              "name": "Default"
            },
            {
              "description": "Renders content inside the previous button.",
              "name": "previous-button"
            },
            {
              "description": "Renders content inside the next button.",
              "name": "next-button"
            }
          ],
          "members": [
            {
              "kind": "field",
              "name": "tagName",
              "type": {
                "text": "string"
              },
              "privacy": "public",
              "static": true,
              "readonly": true,
              "default": "'igc-carousel'"
            },
            {
              "kind": "method",
              "name": "register",
              "privacy": "public",
              "static": true,
              "return": {
                "type": {
                  "text": "void"
                }
              }
            },
            {
              "kind": "field",
              "name": "increment",
              "privacy": "private",
              "static": true,
              "readonly": true
            },
            {
              "kind": "field",
              "name": "_carouselId",
              "privacy": "private",
              "readonly": true,
              "default": "`igc-carousel-${IgcCarouselComponent.increment()}`"
            },
            {
              "kind": "field",
              "name": "_paused",
              "type": {
                "text": "boolean"
              },
              "privacy": "private",
              "default": "false"
            },
            {
              "kind": "field",
              "name": "_lastInterval",
              "type": {
                "text": "ReturnType<typeof setInterval> | null"
              },
              "privacy": "private"
            },
            {
              "kind": "field",
              "name": "_hasKeyboardInteractionOnIndicators",
              "type": {
                "text": "boolean"
              },
              "privacy": "private",
              "default": "false"
            },
            {
              "kind": "field",
              "name": "_hasPointerInteraction",
              "type": {
                "text": "boolean"
              },
              "privacy": "private",
              "default": "false"
            },
            {
              "kind": "field",
              "name": "_hasInnerFocus",
              "type": {
                "text": "boolean"
              },
              "privacy": "private",
              "default": "false"
            },
            {
              "kind": "field",
              "name": "_context",
              "privacy": "private",
              "default": "new ContextProvider(this, { context: carouselContext, initialValue: this, })"
            },
            {
              "kind": "field",
              "name": "_carouselSlidesContainerRef",
              "privacy": "private",
              "readonly": true
            },
            {
              "kind": "field",
              "name": "_indicatorsContainerRef",
              "privacy": "private",
              "readonly": true
            },
            {
              "kind": "field",
              "name": "_prevButtonRef",
              "privacy": "private",
              "readonly": true
            },
            {
              "kind": "field",
              "name": "_nextButtonRef",
              "privacy": "private",
              "readonly": true
            },
            {
              "kind": "field",
              "name": "hasProjectedIndicators",
              "type": {
                "text": "boolean"
              },
              "privacy": "private",
              "readonly": true
            },
            {
              "kind": "field",
              "name": "showIndicatorsLabel",
              "type": {
                "text": "boolean"
              },
              "privacy": "private",
              "readonly": true
            },
            {
              "kind": "field",
              "name": "nextIndex",
              "type": {
                "text": "number"
              },
              "privacy": "private",
              "readonly": true
            },
            {
              "kind": "field",
              "name": "prevIndex",
              "type": {
                "text": "number"
              },
              "privacy": "private",
              "readonly": true
            },
            {
              "kind": "field",
              "name": "_defaultIndicators",
              "type": {
                "text": "NodeListOf<IgcCarouselIndicatorComponent>"
              },
              "privacy": "private"
            },
            {
              "kind": "field",
              "name": "_projectedIndicators",
              "type": {
                "text": "Array<IgcCarouselIndicatorComponent>"
              },
              "privacy": "private"
            },
            {
              "kind": "field",
              "name": "_activeSlide",
              "type": {
                "text": "IgcCarouselSlideComponent"
              },
              "privacy": "private"
            },
            {
              "kind": "field",
              "name": "_playing",
              "type": {
                "text": "boolean"
              },
              "privacy": "private",
              "default": "false"
            },
            {
              "kind": "method",
              "name": "_observerCallback",
              "privacy": "private",
              "parameters": [
                {
                  "name": "{\n    changes: { added, attributes },\n  }",
                  "type": {
                    "text": "MutationControllerParams<IgcCarouselSlideComponent>"
                  }
                }
              ]
            },
            {
              "kind": "field",
              "name": "disableLoop",
              "type": {
                "text": "boolean"
              },
              "privacy": "public",
              "default": "false",
              "description": "Whether the carousel should skip rotating to the first slide after it reaches the last.",
              "attribute": "disable-loop",
              "reflects": true
            },
            {
              "kind": "field",
              "name": "disablePauseOnInteraction",
              "type": {
                "text": "boolean"
              },
              "privacy": "public",
              "default": "false",
              "description": "Whether the carousel should ignore use interactions and not pause on them.",
              "attribute": "disable-pause-on-interaction",
              "reflects": true
            },
            {
              "kind": "field",
              "name": "hideNavigation",
              "type": {
                "text": "boolean"
              },
              "privacy": "public",
              "default": "false",
              "description": "Whether the carousel should skip rendering of the default navigation buttons.",
              "attribute": "hide-navigation",
              "reflects": true
            },
            {
              "kind": "field",
              "name": "hideIndicators",
              "type": {
                "text": "boolean"
              },
              "privacy": "public",
              "default": "false",
              "description": "Whether the carousel should render the indicator controls (dots).",
              "attribute": "hide-indicators",
              "reflects": true
            },
            {
              "kind": "field",
              "name": "vertical",
              "type": {
                "text": "boolean"
              },
              "privacy": "public",
              "default": "false",
              "description": "Whether the carousel has vertical alignment.",
              "attribute": "vertical",
              "reflects": true
            },
            {
              "kind": "field",
              "name": "indicatorsOrientation",
              "type": {
                "text": "CarouselIndicatorsOrientation"
              },
              "privacy": "public",
              "default": "'end'",
              "description": "Sets the orientation of the indicator controls (dots).",
              "attribute": "indicators-orientation",
              "expandedType": {
                "text": "'end' | 'start'"
              }
            },
            {
              "kind": "field",
              "name": "indicatorsLabelFormat",
              "type": {
                "text": "string"
              },
              "privacy": "public",
              "default": "'Slide {0}'",
              "description": "The format used to set the aria-label on the carousel indicators.\nInstances of '{0}' will be replaced with the index of the corresponding slide.",
              "attribute": "indicators-label-format"
            },
            {
              "kind": "field",
              "name": "slidesLabelFormat",
              "type": {
                "text": "string"
              },
              "privacy": "public",
              "default": "'{0} of {1}'",
              "description": "The format used to set the aria-label on the carousel slides and the text displayed\nwhen the number of indicators is greater than tha maximum indicator count.\nInstances of '{0}' will be replaced with the index of the corresponding slide.\nInstances of '{1}' will be replaced with the total amount of slides.",
              "attribute": "slides-label-format"
            },
            {
              "kind": "field",
              "name": "interval",
              "type": {
                "text": "number | undefined"
              },
              "privacy": "public",
              "description": "The duration in milliseconds between changing the active slide.",
              "attribute": "interval"
            },
            {
              "kind": "field",
              "name": "maximumIndicatorsCount",
              "type": {
                "text": "number"
              },
              "privacy": "public",
              "default": "10",
              "description": "Controls the maximum indicator controls (dots) that can be shown. Default value is `10`.",
              "attribute": "maximum-indicators-count"
            },
            {
              "kind": "field",
              "name": "animationType",
              "type": {
                "text": "HorizontalTransitionAnimation"
              },
              "privacy": "public",
              "default": "'slide'",
              "description": "The animation type.",
              "attribute": "animation-type",
              "expandedType": {
                "text": "'slide' | 'fade' | 'none'"
              }
            },
            {
              "kind": "field",
              "name": "slides",
              "type": {
                "text": "Array<IgcCarouselSlideComponent>"
              },
              "privacy": "public",
              "description": "The slides of the carousel."
            },
            {
              "kind": "field",
              "name": "total",
              "type": {
                "text": "number"
              },
              "privacy": "public",
              "description": "The total number of slides.",
              "readonly": true
            },
            {
              "kind": "field",
              "name": "current",
              "type": {
                "text": "number"
              },
              "privacy": "public",
              "description": "The index of the current active slide.",
              "readonly": true
            },
            {
              "kind": "field",
              "name": "isPlaying",
              "type": {
                "text": "boolean"
              },
              "privacy": "public",
              "description": "Whether the carousel is in playing state.",
              "readonly": true
            },
            {
              "kind": "field",
              "name": "isPaused",
              "type": {
                "text": "boolean"
              },
              "privacy": "public",
              "description": "Whether the carousel in in paused state.",
              "readonly": true
            },
            {
              "kind": "method",
              "name": "contextChanged",
              "privacy": "protected"
            },
            {
              "kind": "method",
              "name": "intervalChange",
              "privacy": "protected"
            },
            {
              "kind": "method",
              "name": "handleSlotChange",
              "privacy": "private",
              "return": {
                "type": {
                  "text": "void"
                }
              }
            },
            {
              "kind": "method",
              "name": "handleIndicatorSlotChange",
              "privacy": "private",
              "return": {
                "type": {
                  "text": "void"
                }
              }
            },
            {
              "kind": "method",
              "name": "handlePointerInteraction",
              "privacy": "private",
              "return": {
                "type": {
                  "text": "void"
                }
              },
              "parameters": [
                {
                  "name": "event",
                  "type": {
                    "text": "PointerEvent"
                  }
                }
              ]
            },
            {
              "kind": "method",
              "name": "handleFocusInteraction",
              "privacy": "private",
              "return": {
                "type": {
                  "text": "void"
                }
              },
              "parameters": [
                {
                  "name": "event",
                  "type": {
                    "text": "FocusEvent"
                  }
                }
              ]
            },
            {
              "kind": "method",
              "name": "handlePauseOnInteraction",
              "privacy": "private",
              "return": {
                "type": {
                  "text": "void"
                }
              }
            },
            {
              "kind": "method",
              "name": "handleArrowLeft",
              "privacy": "private",
              "return": {
                "type": {
                  "text": "Promise<void>"
                }
              }
            },
            {
              "kind": "method",
              "name": "handleArrowRight",
              "privacy": "private",
              "return": {
                "type": {
                  "text": "Promise<void>"
                }
              }
            },
            {
              "kind": "method",
              "name": "handleHomeKey",
              "privacy": "private",
              "return": {
                "type": {
                  "text": "Promise<void>"
                }
              }
            },
            {
              "kind": "method",
              "name": "handleEndKey",
              "privacy": "private",
              "return": {
                "type": {
                  "text": "Promise<void>"
                }
              }
            },
            {
              "kind": "method",
              "name": "handleVerticalSwipe",
              "privacy": "private",
              "parameters": [
                {
                  "name": "{ data: { direction } }",
                  "type": {
                    "text": "SwipeEvent"
                  }
                }
              ]
            },
            {
              "kind": "method",
              "name": "handleHorizontalSwipe",
              "privacy": "private",
              "parameters": [
                {
                  "name": "{ data: { direction } }",
                  "type": {
                    "text": "SwipeEvent"
                  }
                }
              ]
            },
            {
              "kind": "method",
              "name": "handleIndicatorClick",
              "privacy": "private",
              "return": {
                "type": {
                  "text": "Promise<void>"
                }
              },
              "parameters": [
                {
                  "name": "event",
                  "type": {
                    "text": "PointerEvent"
                  }
                }
              ]
            },
            {
              "kind": "method",
              "name": "handleNavigationInteractionNext",
              "privacy": "private"
            },
            {
              "kind": "method",
              "name": "handleNavigationInteractionPrevious",
              "privacy": "private"
            },
            {
              "kind": "method",
              "name": "handleInteraction",
              "privacy": "private",
              "return": {
                "type": {
                  "text": "Promise<void>"
                }
              },
              "parameters": [
                {
                  "name": "callback",
                  "type": {
                    "text": "() => Promise<boolean>"
                  }
                }
              ]
            },
            {
              "kind": "method",
              "name": "activateSlide",
              "privacy": "private",
              "return": {
                "type": {
                  "text": "void"
                }
              },
              "parameters": [
                {
                  "name": "slide",
                  "type": {
                    "text": "IgcCarouselSlideComponent"
                  }
                }
              ]
            },
            {
              "kind": "method",
              "name": "updateProjectedIndicators",
              "privacy": "private",
              "return": {
                "type": {
                  "text": "void"
                }
              }
            },
            {
              "kind": "method",
              "name": "resetInterval",
              "privacy": "private",
              "return": {
                "type": {
                  "text": "void"
                }
              }
            },
            {
              "kind": "method",
              "name": "restartInterval",
              "privacy": "private",
              "return": {
                "type": {
                  "text": "void"
                }
              }
            },
            {
              "kind": "method",
              "name": "animateSlides",
              "privacy": "private",
              "return": {
                "type": {
                  "text": "Promise<void>"
                }
              },
              "parameters": [
                {
                  "name": "nextSlide",
                  "type": {
                    "text": "IgcCarouselSlideComponent"
                  }
                },
                {
                  "name": "currentSlide",
                  "type": {
                    "text": "IgcCarouselSlideComponent"
                  }
                },
                {
                  "name": "dir",
                  "type": {
                    "text": "'next' | 'prev'"
                  }
                }
              ]
            },
            {
              "kind": "method",
              "name": "play",
              "privacy": "public",
              "return": {
                "type": {
                  "text": "void"
                }
              },
              "description": "Resumes playing of the carousel slides."
            },
            {
              "kind": "method",
              "name": "pause",
              "privacy": "public",
              "return": {
                "type": {
                  "text": "void"
                }
              },
              "description": "Pauses the carousel rotation of slides."
            },
            {
              "kind": "method",
              "name": "next",
              "privacy": "public",
              "return": {
                "type": {
                  "text": "Promise<boolean>"
                }
              },
              "description": "Switches to the next slide, runs any animations, and returns if the operation was successful."
            },
            {
              "kind": "method",
              "name": "prev",
              "privacy": "public",
              "return": {
                "type": {
                  "text": "Promise<boolean>"
                }
              },
              "description": "Switches to the previous slide, runs any animations, and returns if the operation was successful."
            },
            {
              "kind": "method",
              "name": "select",
              "privacy": "public",
              "return": {
                "type": {
                  "text": "Promise<boolean>"
                }
              },
              "parameters": [
                {
                  "name": "slide",
                  "type": {
                    "text": "IgcCarouselSlideComponent"
                  }
                },
                {
                  "name": "animationDirection",
                  "optional": true,
                  "type": {
                    "text": "'next' | 'prev'"
                  }
                }
              ],
              "description": "Switches to the passed-in slide, runs any animations, and returns if the operation was successful."
            },
            {
              "kind": "method",
              "name": "select",
              "privacy": "public",
              "return": {
                "type": {
                  "text": "Promise<boolean>"
                }
              },
              "parameters": [
                {
                  "name": "index",
                  "type": {
                    "text": "number"
                  }
                },
                {
                  "name": "animationDirection",
                  "optional": true,
                  "type": {
                    "text": "'next' | 'prev'"
                  }
                }
              ],
              "description": "Switches to slide by index, runs any animations, and returns if the operation was successful."
            },
            {
              "kind": "method",
              "name": "select",
              "privacy": "public",
              "return": {
                "type": {
                  "text": "Promise<boolean>"
                }
              },
              "parameters": [
                {
                  "name": "slideOrIndex",
                  "type": {
                    "text": "IgcCarouselSlideComponent | number"
                  }
                },
                {
                  "name": "animationDirection",
                  "optional": true,
                  "type": {
                    "text": "'next' | 'prev'"
                  }
                }
              ]
            },
            {
              "kind": "method",
              "name": "navigationTemplate",
              "privacy": "private"
            },
            {
              "kind": "method",
              "name": "renderIndicators",
              "privacy": "protected"
            },
            {
              "kind": "method",
              "name": "indicatorTemplate",
              "privacy": "private"
            },
            {
              "kind": "method",
              "name": "labelTemplate",
              "privacy": "private"
            },
            {
              "kind": "method",
              "name": "addEventListener",
              "privacy": "public",
              "return": {
                "type": {
                  "text": "void"
                }
              },
              "parameters": [
                {
                  "name": "type",
                  "type": {
                    "text": "K"
                  }
                },
                {
                  "name": "listener",
                  "type": {
                    "text": "(this: HTMLElement, ev: M[K]) => any"
                  }
                },
                {
                  "name": "options",
                  "optional": true,
                  "type": {
                    "text": "boolean | AddEventListenerOptions"
                  }
                }
              ],
              "inheritedFrom": {
                "name": "EventEmitterMixin",
                "module": "src/components/common/mixins/event-emitter.ts"
              }
            },
            {
              "kind": "method",
              "name": "removeEventListener",
              "privacy": "public",
              "return": {
                "type": {
                  "text": "void"
                }
              },
              "parameters": [
                {
                  "name": "type",
                  "type": {
                    "text": "K"
                  }
                },
                {
                  "name": "listener",
                  "type": {
                    "text": "(this: HTMLElement, ev: M[K]) => any"
                  }
                },
                {
                  "name": "options",
                  "optional": true,
                  "type": {
                    "text": "boolean | EventListenerOptions"
                  }
                }
              ],
              "inheritedFrom": {
                "name": "EventEmitterMixin",
                "module": "src/components/common/mixins/event-emitter.ts"
              }
            },
            {
              "kind": "method",
              "name": "emitEvent",
              "privacy": "private",
              "return": {
                "type": {
                  "text": "boolean"
                }
              },
              "parameters": [
                {
                  "name": "type",
                  "type": {
                    "text": "K"
                  }
                },
                {
                  "name": "eventInitDict",
                  "optional": true,
                  "type": {
                    "text": "CustomEventInit<D>"
                  }
                }
              ],
              "inheritedFrom": {
                "name": "EventEmitterMixin",
                "module": "src/components/common/mixins/event-emitter.ts"
              }
            }
          ],
          "events": [
            {
              "description": "Emitted when the current active slide is changed either by user interaction or by the interval callback.",
              "name": "igcSlideChanged"
            },
            {
              "description": "Emitted when the carousel enters playing state by a user interaction.",
              "name": "igcPlaying"
            },
            {
              "description": "Emitted when the carousel enters paused state by a user interaction.",
              "name": "igcPaused"
            },
            {
              "type": {
                "text": "CustomEvent"
              },
              "inheritedFrom": {
                "name": "EventEmitterMixin",
                "module": "src/components/common/mixins/event-emitter.ts"
              }
            }
          ],
          "attributes": [
            {
              "name": "disable-loop",
              "type": {
                "text": "boolean"
              },
              "default": "false",
              "description": "Whether the carousel should skip rotating to the first slide after it reaches the last.",
              "fieldName": "disableLoop",
              "attribute": "disable-loop"
            },
            {
              "name": "disable-pause-on-interaction",
              "type": {
                "text": "boolean"
              },
              "default": "false",
              "description": "Whether the carousel should ignore use interactions and not pause on them.",
              "fieldName": "disablePauseOnInteraction",
              "attribute": "disable-pause-on-interaction"
            },
            {
              "name": "hide-navigation",
              "type": {
                "text": "boolean"
              },
              "default": "false",
              "description": "Whether the carousel should skip rendering of the default navigation buttons.",
              "fieldName": "hideNavigation",
              "attribute": "hide-navigation"
            },
            {
              "name": "hide-indicators",
              "type": {
                "text": "boolean"
              },
              "default": "false",
              "description": "Whether the carousel should render the indicator controls (dots).",
              "fieldName": "hideIndicators",
              "attribute": "hide-indicators"
            },
            {
              "name": "vertical",
              "type": {
                "text": "boolean"
              },
              "default": "false",
              "description": "Whether the carousel has vertical alignment.",
              "fieldName": "vertical",
              "attribute": "vertical"
            },
            {
              "name": "indicators-orientation",
              "type": {
                "text": "CarouselIndicatorsOrientation"
              },
              "default": "'end'",
              "description": "Sets the orientation of the indicator controls (dots).",
              "fieldName": "indicatorsOrientation",
              "attribute": "indicators-orientation",
              "expandedType": {
                "text": "'end' | 'start'"
              }
            },
            {
              "name": "indicators-label-format",
              "type": {
                "text": "string"
              },
              "default": "'Slide {0}'",
              "description": "The format used to set the aria-label on the carousel indicators.\nInstances of '{0}' will be replaced with the index of the corresponding slide.",
              "fieldName": "indicatorsLabelFormat",
              "attribute": "indicators-label-format"
            },
            {
              "name": "slides-label-format",
              "type": {
                "text": "string"
              },
              "default": "'{0} of {1}'",
              "description": "The format used to set the aria-label on the carousel slides and the text displayed\nwhen the number of indicators is greater than tha maximum indicator count.\nInstances of '{0}' will be replaced with the index of the corresponding slide.\nInstances of '{1}' will be replaced with the total amount of slides.",
              "fieldName": "slidesLabelFormat",
              "attribute": "slides-label-format"
            },
            {
              "name": "interval",
              "type": {
                "text": "number | undefined"
              },
              "description": "The duration in milliseconds between changing the active slide.",
              "fieldName": "interval",
              "attribute": "interval"
            },
            {
              "name": "maximum-indicators-count",
              "type": {
                "text": "number"
              },
              "default": "10",
              "description": "Controls the maximum indicator controls (dots) that can be shown. Default value is `10`.",
              "fieldName": "maximumIndicatorsCount",
              "attribute": "maximum-indicators-count"
            },
            {
              "name": "animation-type",
              "type": {
                "text": "HorizontalTransitionAnimation"
              },
              "default": "'slide'",
              "description": "The animation type.",
              "fieldName": "animationType",
              "attribute": "animation-type",
              "expandedType": {
                "text": "'slide' | 'fade' | 'none'"
              }
            }
          ],
          "mixins": [
            {
              "name": "EventEmitterMixin",
              "module": "/src/components/common/mixins/event-emitter.js"
            }
          ],
          "superclass": {
            "name": "LitElement",
            "package": "lit"
          },
          "tagName": "igc-carousel",
          "customElement": true
        }
      ],
      "exports": [
        {
          "kind": "js",
          "name": "default",
          "declaration": {
            "name": "IgcCarouselComponent",
            "module": "src/components/carousel/carousel.ts"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "src/components/checkbox/validators.ts",
      "declarations": [
        {
          "kind": "variable",
          "name": "checkBoxValidators",
          "type": {
            "text": "Validator<IgcCheckboxBaseComponent>[]"
          },
          "default": "[ requiredBooleanValidator, ]"
        }
      ],
      "exports": [
        {
          "kind": "js",
          "name": "checkBoxValidators",
          "declaration": {
            "name": "checkBoxValidators",
            "module": "src/components/checkbox/validators.ts"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "src/components/checkbox/checkbox-base.ts",
      "declarations": [
        {
          "kind": "class",
          "description": "",
          "name": "IgcCheckboxBaseComponent",
          "members": [
            {
              "kind": "field",
              "name": "__validators",
              "type": {
                "text": "Validator[]"
              },
              "privacy": "protected",
              "readonly": true,
              "inheritedFrom": {
                "name": "BaseFormAssociated",
                "module": "src/components/common/mixins/forms/associated.ts"
              }
            },
            {
              "kind": "field",
              "name": "_focusRingManager",
              "privacy": "protected",
              "readonly": true
            },
            {
              "kind": "field",
              "name": "_formValue",
              "type": {
                "text": "FormValue<unknown>"
              },
              "privacy": "protected",
              "readonly": true,
              "inheritedFrom": {
                "name": "BaseFormAssociated",
                "module": "src/components/common/mixins/forms/associated.ts"
              }
            },
            {
              "kind": "field",
              "name": "_value",
              "type": {
                "text": "string"
              },
              "privacy": "protected"
            },
            {
              "kind": "field",
              "name": "_input",
              "type": {
                "text": "HTMLInputElement"
              },
              "privacy": "protected",
              "readonly": true
            },
            {
              "kind": "field",
              "name": "_label",
              "type": {
                "text": "Array<Node>"
              },
              "privacy": "protected",
              "readonly": true
            },
            {
              "kind": "field",
              "name": "_hideLabel",
              "type": {
                "text": "boolean"
              },
              "privacy": "protected",
              "default": "false"
            },
            {
              "kind": "field",
              "name": "value",
              "privacy": "public",
              "description": "The value attribute of the control.",
              "attribute": "value",
              "type": {
                "text": "string"
              }
            },
            {
              "kind": "field",
              "name": "checked",
              "privacy": "public",
              "description": "The checked state of the control.",
              "attribute": "checked",
              "type": {
                "text": "boolean"
              }
            },
            {
              "kind": "field",
              "name": "labelPosition",
              "type": {
                "text": "ToggleLabelPosition"
              },
              "privacy": "public",
              "default": "'after'",
              "description": "The label position of the control.",
              "attribute": "label-position",
              "reflects": true,
              "expandedType": {
                "text": "'after' | 'before'"
              }
            },
            {
              "kind": "method",
              "name": "click",
              "privacy": "public",
              "return": {
                "type": {
                  "text": "void"
                }
              },
              "description": "Simulates a click on the control."
            },
            {
              "kind": "method",
              "name": "focus",
              "privacy": "public",
              "return": {
                "type": {
                  "text": "void"
                }
              },
              "parameters": [
                {
                  "name": "options",
                  "optional": true,
                  "type": {
                    "text": "FocusOptions"
                  }
                }
              ],
              "description": "Sets focus on the control."
            },
            {
              "kind": "method",
              "name": "blur",
              "privacy": "public",
              "return": {
                "type": {
                  "text": "void"
                }
              },
              "description": "Removes focus from the control."
            },
            {
              "kind": "method",
              "name": "_handleClick",
              "privacy": "protected",
              "return": {
                "type": {
                  "text": "void"
                }
              },
              "parameters": [
                {
                  "name": "event",
                  "type": {
                    "text": "PointerEvent"
                  }
                }
              ]
            },
            {
              "kind": "method",
              "name": "_handleFocus",
              "privacy": "protected",
              "return": {
                "type": {
                  "text": "void"
                }
              }
            },
            {
              "kind": "field",
              "name": "_required",
              "type": {
                "text": "boolean"
              },
              "privacy": "protected",
              "default": "false",
              "inheritedFrom": {
                "name": "FormAssociatedCheckboxRequiredMixin",
                "module": "src/components/common/mixins/forms/associated-required.ts"
              }
            },
            {
              "kind": "field",
              "name": "required",
              "privacy": "public",
              "description": "When set, makes the component a required field for validation.",
              "default": "false",
              "attribute": "required",
              "type": {
                "text": "boolean"
              },
              "reflects": true,
              "inheritedFrom": {
                "name": "FormAssociatedCheckboxRequiredMixin",
                "module": "src/components/common/mixins/forms/associated-required.ts"
              }
            },
            {
              "kind": "field",
              "name": "defaultChecked",
              "privacy": "public",
              "type": {
                "text": "boolean"
              },
              "inheritedFrom": {
                "name": "FormAssociatedCheckboxMixin",
                "module": "src/components/common/mixins/forms/associated.ts"
              }
            },
            {
              "kind": "field",
              "name": "formAssociated",
              "type": {
                "text": "boolean"
              },
              "privacy": "public",
              "static": true,
              "readonly": true,
              "default": "true",
              "inheritedFrom": {
                "name": "BaseFormAssociated",
                "module": "src/components/common/mixins/forms/associated.ts"
              }
            },
            {
              "kind": "field",
              "name": "__internals",
              "type": {
                "text": "ElementInternals"
              },
              "privacy": "private",
              "inheritedFrom": {
                "name": "BaseFormAssociated",
                "module": "src/components/common/mixins/forms/associated.ts"
              }
            },
            {
              "kind": "field",
              "name": "_disabled",
              "type": {
                "text": "boolean"
              },
              "privacy": "protected",
              "default": "false",
              "inheritedFrom": {
                "name": "BaseFormAssociated",
                "module": "src/components/common/mixins/forms/associated.ts"
              }
            },
            {
              "kind": "field",
              "name": "_invalid",
              "type": {
                "text": "boolean"
              },
              "privacy": "protected",
              "default": "false",
              "inheritedFrom": {
                "name": "BaseFormAssociated",
                "module": "src/components/common/mixins/forms/associated.ts"
              }
            },
            {
              "kind": "field",
              "name": "_dirty",
              "type": {
                "text": "boolean"
              },
              "privacy": "protected",
              "default": "false",
              "inheritedFrom": {
                "name": "BaseFormAssociated",
                "module": "src/components/common/mixins/forms/associated.ts"
              }
            },
            {
              "kind": "field",
              "name": "_pristine",
              "type": {
                "text": "boolean"
              },
              "privacy": "protected",
              "default": "true",
              "inheritedFrom": {
                "name": "BaseFormAssociated",
                "module": "src/components/common/mixins/forms/associated.ts"
              }
            },
            {
              "kind": "field",
              "name": "name",
              "type": {
                "text": "string"
              },
              "privacy": "public",
              "description": "The name attribute of the control.",
              "attribute": "name",
              "reflects": true,
              "inheritedFrom": {
                "name": "BaseFormAssociated",
                "module": "src/components/common/mixins/forms/associated.ts"
              }
            },
            {
              "kind": "field",
              "name": "disabled",
              "privacy": "public",
              "description": "The disabled state of the component.",
              "default": "false",
              "attribute": "disabled",
              "type": {
                "text": "boolean"
              },
              "reflects": true,
              "inheritedFrom": {
                "name": "BaseFormAssociated",
                "module": "src/components/common/mixins/forms/associated.ts"
              }
            },
            {
              "kind": "field",
              "name": "invalid",
              "privacy": "public",
              "description": "Sets the control into invalid state (visual state only).",
              "default": "false",
              "attribute": "invalid",
              "type": {
                "text": "boolean"
              },
              "reflects": true,
              "inheritedFrom": {
                "name": "BaseFormAssociated",
                "module": "src/components/common/mixins/forms/associated.ts"
              }
            },
            {
              "kind": "field",
              "name": "form",
              "type": {
                "text": "HTMLFormElement | null"
              },
              "privacy": "public",
              "description": "Returns the HTMLFormElement associated with this element.",
              "readonly": true,
              "inheritedFrom": {
                "name": "BaseFormAssociated",
                "module": "src/components/common/mixins/forms/associated.ts"
              }
            },
            {
              "kind": "field",
              "name": "validity",
              "type": {
                "text": "ValidityState"
              },
              "privacy": "public",
              "description": "Returns a ValidityState object which represents the different validity states\nthe element can be in, with respect to constraint validation.",
              "readonly": true,
              "inheritedFrom": {
                "name": "BaseFormAssociated",
                "module": "src/components/common/mixins/forms/associated.ts"
              }
            },
            {
              "kind": "field",
              "name": "validationMessage",
              "type": {
                "text": "string"
              },
              "privacy": "public",
              "description": "A string containing the validation message of this element.",
              "readonly": true,
              "inheritedFrom": {
                "name": "BaseFormAssociated",
                "module": "src/components/common/mixins/forms/associated.ts"
              }
            },
            {
              "kind": "field",
              "name": "willValidate",
              "type": {
                "text": "boolean"
              },
              "privacy": "public",
              "description": "A boolean value which returns true if the element is a submittable element\nthat is a candidate for constraint validation.",
              "readonly": true,
              "inheritedFrom": {
                "name": "BaseFormAssociated",
                "module": "src/components/common/mixins/forms/associated.ts"
              }
            },
            {
              "kind": "method",
              "name": "_handleInvalid",
              "privacy": "private",
              "parameters": [
                {
                  "name": "event",
                  "type": {
                    "text": "Event"
                  }
                }
              ],
              "inheritedFrom": {
                "name": "BaseFormAssociated",
                "module": "src/components/common/mixins/forms/associated.ts"
              }
            },
            {
              "kind": "method",
              "name": "_setInvalidState",
              "privacy": "private",
              "return": {
                "type": {
                  "text": "void"
                }
              },
              "inheritedFrom": {
                "name": "BaseFormAssociated",
                "module": "src/components/common/mixins/forms/associated.ts"
              }
            },
            {
              "kind": "method",
              "name": "__runValidators",
              "privacy": "private",
              "inheritedFrom": {
                "name": "BaseFormAssociated",
                "module": "src/components/common/mixins/forms/associated.ts"
              }
            },
            {
              "kind": "method",
              "name": "_setDefaultValue",
              "privacy": "protected",
              "return": {
                "type": {
                  "text": "void"
                }
              },
              "parameters": [
                {
                  "name": "current",
                  "type": {
                    "text": "string | null"
                  }
                }
              ],
              "inheritedFrom": {
                "name": "BaseFormAssociated",
                "module": "src/components/common/mixins/forms/associated.ts"
              }
            },
            {
              "kind": "method",
              "name": "_restoreDefaultValue",
              "privacy": "protected",
              "return": {
                "type": {
                  "text": "void"
                }
              },
              "inheritedFrom": {
                "name": "BaseFormAssociated",
                "module": "src/components/common/mixins/forms/associated.ts"
              }
            },
            {
              "kind": "method",
              "name": "_validate",
              "privacy": "protected",
              "return": {
                "type": {
                  "text": "void"
                }
              },
              "parameters": [
                {
                  "name": "message",
                  "optional": true,
                  "type": {
                    "text": "string"
                  }
                }
              ],
              "inheritedFrom": {
                "name": "BaseFormAssociated",
                "module": "src/components/common/mixins/forms/associated.ts"
              }
            },
            {
              "kind": "method",
              "name": "_updateValidity",
              "privacy": "protected",
              "parameters": [
                {
                  "name": "error",
                  "optional": true,
                  "type": {
                    "text": "string"
                  }
                }
              ],
              "description": "Executes the component validators and updates the internal validity state.",
              "inheritedFrom": {
                "name": "BaseFormAssociated",
                "module": "src/components/common/mixins/forms/associated.ts"
              }
            },
            {
              "kind": "method",
              "name": "_setFormValue",
              "privacy": "protected",
              "return": {
                "type": {
                  "text": "void"
                }
              },
              "parameters": [
                {
                  "name": "value",
                  "type": {
                    "text": "FormValueType"
                  }
                },
                {
                  "name": "state",
                  "optional": true,
                  "type": {
                    "text": "FormValueType"
                  }
                }
              ],
              "inheritedFrom": {
                "name": "BaseFormAssociated",
                "module": "src/components/common/mixins/forms/associated.ts"
              }
            },
            {
              "kind": "method",
              "name": "formAssociatedCallback",
              "privacy": "protected",
              "return": {
                "type": {
                  "text": "void"
                }
              },
              "parameters": [
                {
                  "name": "_form",
                  "type": {
                    "text": "HTMLFormElement"
                  }
                }
              ],
              "inheritedFrom": {
                "name": "BaseFormAssociated",
                "module": "src/components/common/mixins/forms/associated.ts"
              }
            },
            {
              "kind": "method",
              "name": "formDisabledCallback",
              "privacy": "protected",
              "return": {
                "type": {
                  "text": "void"
                }
              },
              "parameters": [
                {
                  "name": "state",
                  "type": {
                    "text": "boolean"
                  }
                }
              ],
              "inheritedFrom": {
                "name": "BaseFormAssociated",
                "module": "src/components/common/mixins/forms/associated.ts"
              }
            },
            {
              "kind": "method",
              "name": "formResetCallback",
              "privacy": "protected",
              "return": {
                "type": {
                  "text": "void"
                }
              },
              "inheritedFrom": {
                "name": "BaseFormAssociated",
                "module": "src/components/common/mixins/forms/associated.ts"
              }
            },
            {
              "kind": "method",
              "name": "formStateRestoreCallback",
              "privacy": "protected",
              "return": {
                "type": {
                  "text": "void"
                }
              },
              "parameters": [
                {
                  "name": "_state",
                  "type": {
                    "text": "FormValueType"
                  }
                },
                {
                  "name": "_mode",
                  "type": {
                    "text": "FormRestoreMode"
                  }
                }
              ],
              "inheritedFrom": {
                "name": "BaseFormAssociated",
                "module": "src/components/common/mixins/forms/associated.ts"
              }
            },
            {
              "kind": "method",
              "name": "reportValidity",
              "privacy": "public",
              "description": "Checks for validity of the control and shows the browser message if it invalid.",
              "inheritedFrom": {
                "name": "BaseFormAssociated",
                "module": "src/components/common/mixins/forms/associated.ts"
              }
            },
            {
              "kind": "method",
              "name": "checkValidity",
              "privacy": "public",
              "description": "Checks for validity of the control and emits the invalid event if it invalid.",
              "inheritedFrom": {
                "name": "BaseFormAssociated",
                "module": "src/components/common/mixins/forms/associated.ts"
              }
            },
            {
              "kind": "method",
              "name": "setCustomValidity",
              "privacy": "public",
              "parameters": [
                {
                  "name": "message",
                  "type": {
                    "text": "string"
                  }
                }
              ],
              "description": "Sets a custom validation message for the control.\nAs long as `message` is not empty, the control is considered invalid.",
              "inheritedFrom": {
                "name": "BaseFormAssociated",
                "module": "src/components/common/mixins/forms/associated.ts"
              }
            },
            {
              "kind": "method",
              "name": "addEventListener",
              "privacy": "public",
              "return": {
                "type": {
                  "text": "void"
                }
              },
              "parameters": [
                {
                  "name": "type",
                  "type": {
                    "text": "K"
                  }
                },
                {
                  "name": "listener",
                  "type": {
                    "text": "(this: HTMLElement, ev: M[K]) => any"
                  }
                },
                {
                  "name": "options",
                  "optional": true,
                  "type": {
                    "text": "boolean | AddEventListenerOptions"
                  }
                }
              ],
              "inheritedFrom": {
                "name": "EventEmitterMixin",
                "module": "src/components/common/mixins/event-emitter.ts"
              }
            },
            {
              "kind": "method",
              "name": "removeEventListener",
              "privacy": "public",
              "return": {
                "type": {
                  "text": "void"
                }
              },
              "parameters": [
                {
                  "name": "type",
                  "type": {
                    "text": "K"
                  }
                },
                {
                  "name": "listener",
                  "type": {
                    "text": "(this: HTMLElement, ev: M[K]) => any"
                  }
                },
                {
                  "name": "options",
                  "optional": true,
                  "type": {
                    "text": "boolean | EventListenerOptions"
                  }
                }
              ],
              "inheritedFrom": {
                "name": "EventEmitterMixin",
                "module": "src/components/common/mixins/event-emitter.ts"
              }
            },
            {
              "kind": "method",
              "name": "emitEvent",
              "privacy": "private",
              "return": {
                "type": {
                  "text": "boolean"
                }
              },
              "parameters": [
                {
                  "name": "type",
                  "type": {
                    "text": "K"
                  }
                },
                {
                  "name": "eventInitDict",
                  "optional": true,
                  "type": {
                    "text": "CustomEventInit<D>"
                  }
                }
              ],
              "inheritedFrom": {
                "name": "EventEmitterMixin",
                "module": "src/components/common/mixins/event-emitter.ts"
              }
            }
          ],
          "attributes": [
            {
              "name": "value",
              "description": "The value attribute of the control.",
              "fieldName": "value",
              "attribute": "value",
              "type": {
                "text": "string"
              }
            },
            {
              "name": "checked",
              "description": "The checked state of the control.",
              "fieldName": "checked",
              "attribute": "checked",
              "type": {
                "text": "boolean"
              }
            },
            {
              "name": "label-position",
              "type": {
                "text": "ToggleLabelPosition"
              },
              "default": "'after'",
              "description": "The label position of the control.",
              "fieldName": "labelPosition",
              "attribute": "label-position",
              "expandedType": {
                "text": "'after' | 'before'"
              }
            },
            {
              "name": "required",
              "description": "When set, makes the component a required field for validation.",
              "default": "false",
              "fieldName": "required",
              "attribute": "required",
              "type": {
                "text": "boolean"
              },
              "inheritedFrom": {
                "name": "FormAssociatedCheckboxRequiredMixin",
                "module": "src/components/common/mixins/forms/associated-required.ts"
              }
            },
            {
              "name": "name",
              "type": {
                "text": "string"
              },
              "description": "The name attribute of the control.",
              "fieldName": "name",
              "attribute": "name",
              "inheritedFrom": {
                "name": "BaseFormAssociated",
                "module": "src/components/common/mixins/forms/associated.ts"
              }
            },
            {
              "name": "disabled",
              "description": "The disabled state of the component.",
              "default": "false",
              "fieldName": "disabled",
              "attribute": "disabled",
              "type": {
                "text": "boolean"
              },
              "inheritedFrom": {
                "name": "BaseFormAssociated",
                "module": "src/components/common/mixins/forms/associated.ts"
              }
            },
            {
              "name": "invalid",
              "description": "Sets the control into invalid state (visual state only).",
              "default": "false",
              "fieldName": "invalid",
              "attribute": "invalid",
              "type": {
                "text": "boolean"
              },
              "inheritedFrom": {
                "name": "BaseFormAssociated",
                "module": "src/components/common/mixins/forms/associated.ts"
              }
            }
          ],
          "mixins": [
            {
              "name": "FormAssociatedCheckboxRequiredMixin",
              "module": "/src/components/common/mixins/forms/associated-required.js"
            },
            {
              "name": "EventEmitterMixin",
              "module": "/src/components/common/mixins/event-emitter.js"
            }
          ],
          "superclass": {
            "name": "LitElement",
            "package": "lit"
          },
          "customElement": true,
          "events": [
            {
              "type": {
                "text": "CustomEvent"
              },
              "inheritedFrom": {
                "name": "EventEmitterMixin",
                "module": "src/components/common/mixins/event-emitter.ts"
              }
            }
          ]
        }
      ],
      "exports": [
        {
          "kind": "js",
          "name": "IgcCheckboxBaseComponent",
          "declaration": {
            "name": "IgcCheckboxBaseComponent",
            "module": "src/components/checkbox/checkbox-base.ts"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "src/components/checkbox/checkbox.ts",
      "declarations": [
        {
          "kind": "class",
          "description": "A check box allowing single values to be selected/deselected.",
          "name": "IgcCheckboxComponent",
          "cssParts": [
            {
              "description": "The base wrapper of the checkbox.",
              "name": "base"
            },
            {
              "description": "The checkbox input element.",
              "name": "control"
            },
            {
              "description": "The checkbox label.",
              "name": "label"
            },
            {
              "description": "The checkbox indicator icon.",
              "name": "indicator"
            }
          ],
          "slots": [
            {
              "description": "The checkbox label.",
              "name": ""
            },
            {
              "description": "Renders content below the input.",
              "name": "helper-text"
            },
            {
              "description": "Renders content when the required validation fails.",
              "name": "value-missing"
            },
            {
              "description": "Renders content when setCustomValidity(message) is set.",
              "name": "custom-error"
            },
            {
              "description": "Renders content when the component is in invalid state (validity.valid = false).",
              "name": "invalid"
            }
          ],
          "members": [
            {
              "kind": "field",
              "name": "tagName",
              "type": {
                "text": "string"
              },
              "privacy": "public",
              "static": true,
              "readonly": true,
              "default": "'igc-checkbox'"
            },
            {
              "kind": "method",
              "name": "register",
              "privacy": "public",
              "static": true,
              "return": {
                "type": {
                  "text": "void"
                }
              }
            },
            {
              "kind": "field",
              "name": "increment",
              "privacy": "private",
              "static": true,
              "readonly": true
            },
            {
              "kind": "field",
              "name": "_themes",
              "privacy": "private",
              "readonly": true
            },
            {
              "kind": "field",
              "name": "_inputId",
              "privacy": "private",
              "readonly": true,
              "default": "`checkbox-${IgcCheckboxComponent.increment()}`"
            },
            {
              "kind": "field",
              "name": "_labelId",
              "privacy": "private",
              "readonly": true,
              "default": "`checkbox-label-${this._inputId}`"
            },
            {
              "kind": "field",
              "name": "indeterminate",
              "type": {
                "text": "boolean"
              },
              "privacy": "public",
              "default": "false",
              "description": "Draws the checkbox in indeterminate state.",
              "attribute": "indeterminate",
              "reflects": true
            },
            {
              "kind": "method",
              "name": "_handleClick",
              "privacy": "protected",
              "return": {
                "type": {
                  "text": "void"
                }
              },
              "parameters": [
                {
                  "name": "event",
                  "type": {
                    "text": "PointerEvent"
                  }
                }
              ],
              "inheritedFrom": {
                "name": "IgcCheckboxBaseComponent",
                "module": "src/components/checkbox/checkbox-base.ts"
              }
            },
            {
              "kind": "method",
              "name": "renderValidatorContainer",
              "privacy": "protected",
              "return": {
                "type": {
                  "text": "TemplateResult"
                }
              }
            },
            {
              "kind": "method",
              "name": "renderStandard",
              "privacy": "protected"
            },
            {
              "kind": "method",
              "name": "renderIndigo",
              "privacy": "protected"
            },
            {
              "kind": "field",
              "name": "_required",
              "type": {
                "text": "boolean"
              },
              "privacy": "protected",
              "default": "false",
              "inheritedFrom": {
                "name": "IgcCheckboxBaseComponent",
                "module": "src/components/checkbox/checkbox-base.ts"
              }
            },
            {
              "kind": "field",
              "name": "required",
              "privacy": "public",
              "description": "When set, makes the component a required field for validation.",
              "default": "false",
              "attribute": "required",
              "type": {
                "text": "boolean"
              },
              "reflects": true,
              "inheritedFrom": {
                "name": "IgcCheckboxBaseComponent",
                "module": "src/components/checkbox/checkbox-base.ts"
              }
            },
            {
              "kind": "field",
              "name": "defaultChecked",
              "privacy": "public",
              "type": {
                "text": "boolean"
              },
              "inheritedFrom": {
                "name": "IgcCheckboxBaseComponent",
                "module": "src/components/checkbox/checkbox-base.ts"
              }
            },
            {
              "kind": "field",
              "name": "formAssociated",
              "type": {
                "text": "boolean"
              },
              "privacy": "public",
              "static": true,
              "readonly": true,
              "default": "true",
              "inheritedFrom": {
                "name": "IgcCheckboxBaseComponent",
                "module": "src/components/checkbox/checkbox-base.ts"
              }
            },
            {
              "kind": "field",
              "name": "__internals",
              "type": {
                "text": "ElementInternals"
              },
              "privacy": "private",
              "inheritedFrom": {
                "name": "IgcCheckboxBaseComponent",
                "module": "src/components/checkbox/checkbox-base.ts"
              }
            },
            {
              "kind": "field",
              "name": "_formValue",
              "type": {
                "text": "FormValue<unknown>"
              },
              "privacy": "protected",
              "readonly": true,
              "inheritedFrom": {
                "name": "IgcCheckboxBaseComponent",
                "module": "src/components/checkbox/checkbox-base.ts"
              }
            },
            {
              "kind": "field",
              "name": "_disabled",
              "type": {
                "text": "boolean"
              },
              "privacy": "protected",
              "default": "false",
              "inheritedFrom": {
                "name": "IgcCheckboxBaseComponent",
                "module": "src/components/checkbox/checkbox-base.ts"
              }
            },
            {
              "kind": "field",
              "name": "_invalid",
              "type": {
                "text": "boolean"
              },
              "privacy": "protected",
              "default": "false",
              "inheritedFrom": {
                "name": "IgcCheckboxBaseComponent",
                "module": "src/components/checkbox/checkbox-base.ts"
              }
            },
            {
              "kind": "field",
              "name": "_dirty",
              "type": {
                "text": "boolean"
              },
              "privacy": "protected",
              "default": "false",
              "inheritedFrom": {
                "name": "IgcCheckboxBaseComponent",
                "module": "src/components/checkbox/checkbox-base.ts"
              }
            },
            {
              "kind": "field",
              "name": "_pristine",
              "type": {
                "text": "boolean"
              },
              "privacy": "protected",
              "default": "true",
              "inheritedFrom": {
                "name": "IgcCheckboxBaseComponent",
                "module": "src/components/checkbox/checkbox-base.ts"
              }
            },
            {
              "kind": "field",
              "name": "__validators",
              "type": {
                "text": "Validator[]"
              },
              "privacy": "protected",
              "readonly": true,
              "inheritedFrom": {
                "name": "IgcCheckboxBaseComponent",
                "module": "src/components/checkbox/checkbox-base.ts"
              }
            },
            {
              "kind": "field",
              "name": "name",
              "type": {
                "text": "string"
              },
              "privacy": "public",
              "description": "The name attribute of the control.",
              "attribute": "name",
              "reflects": true,
              "inheritedFrom": {
                "name": "IgcCheckboxBaseComponent",
                "module": "src/components/checkbox/checkbox-base.ts"
              }
            },
            {
              "kind": "field",
              "name": "disabled",
              "privacy": "public",
              "description": "The disabled state of the component.",
              "default": "false",
              "attribute": "disabled",
              "type": {
                "text": "boolean"
              },
              "reflects": true,
              "inheritedFrom": {
                "name": "IgcCheckboxBaseComponent",
                "module": "src/components/checkbox/checkbox-base.ts"
              }
            },
            {
              "kind": "field",
              "name": "invalid",
              "privacy": "public",
              "description": "Sets the control into invalid state (visual state only).",
              "default": "false",
              "attribute": "invalid",
              "type": {
                "text": "boolean"
              },
              "reflects": true,
              "inheritedFrom": {
                "name": "IgcCheckboxBaseComponent",
                "module": "src/components/checkbox/checkbox-base.ts"
              }
            },
            {
              "kind": "field",
              "name": "form",
              "type": {
                "text": "HTMLFormElement | null"
              },
              "privacy": "public",
              "description": "Returns the HTMLFormElement associated with this element.",
              "readonly": true,
              "inheritedFrom": {
                "name": "IgcCheckboxBaseComponent",
                "module": "src/components/checkbox/checkbox-base.ts"
              }
            },
            {
              "kind": "field",
              "name": "validity",
              "type": {
                "text": "ValidityState"
              },
              "privacy": "public",
              "description": "Returns a ValidityState object which represents the different validity states\nthe element can be in, with respect to constraint validation.",
              "readonly": true,
              "inheritedFrom": {
                "name": "IgcCheckboxBaseComponent",
                "module": "src/components/checkbox/checkbox-base.ts"
              }
            },
            {
              "kind": "field",
              "name": "validationMessage",
              "type": {
                "text": "string"
              },
              "privacy": "public",
              "description": "A string containing the validation message of this element.",
              "readonly": true,
              "inheritedFrom": {
                "name": "IgcCheckboxBaseComponent",
                "module": "src/components/checkbox/checkbox-base.ts"
              }
            },
            {
              "kind": "field",
              "name": "willValidate",
              "type": {
                "text": "boolean"
              },
              "privacy": "public",
              "description": "A boolean value which returns true if the element is a submittable element\nthat is a candidate for constraint validation.",
              "readonly": true,
              "inheritedFrom": {
                "name": "IgcCheckboxBaseComponent",
                "module": "src/components/checkbox/checkbox-base.ts"
              }
            },
            {
              "kind": "method",
              "name": "_handleInvalid",
              "privacy": "private",
              "parameters": [
                {
                  "name": "event",
                  "type": {
                    "text": "Event"
                  }
                }
              ],
              "inheritedFrom": {
                "name": "IgcCheckboxBaseComponent",
                "module": "src/components/checkbox/checkbox-base.ts"
              }
            },
            {
              "kind": "method",
              "name": "_setInvalidState",
              "privacy": "private",
              "return": {
                "type": {
                  "text": "void"
                }
              },
              "inheritedFrom": {
                "name": "IgcCheckboxBaseComponent",
                "module": "src/components/checkbox/checkbox-base.ts"
              }
            },
            {
              "kind": "method",
              "name": "__runValidators",
              "privacy": "private",
              "inheritedFrom": {
                "name": "IgcCheckboxBaseComponent",
                "module": "src/components/checkbox/checkbox-base.ts"
              }
            },
            {
              "kind": "method",
              "name": "_setDefaultValue",
              "privacy": "protected",
              "return": {
                "type": {
                  "text": "void"
                }
              },
              "parameters": [
                {
                  "name": "current",
                  "type": {
                    "text": "string | null"
                  }
                }
              ],
              "inheritedFrom": {
                "name": "IgcCheckboxBaseComponent",
                "module": "src/components/checkbox/checkbox-base.ts"
              }
            },
            {
              "kind": "method",
              "name": "_restoreDefaultValue",
              "privacy": "protected",
              "return": {
                "type": {
                  "text": "void"
                }
              },
              "inheritedFrom": {
                "name": "IgcCheckboxBaseComponent",
                "module": "src/components/checkbox/checkbox-base.ts"
              }
            },
            {
              "kind": "method",
              "name": "_validate",
              "privacy": "protected",
              "return": {
                "type": {
                  "text": "void"
                }
              },
              "parameters": [
                {
                  "name": "message",
                  "optional": true,
                  "type": {
                    "text": "string"
                  }
                }
              ],
              "inheritedFrom": {
                "name": "IgcCheckboxBaseComponent",
                "module": "src/components/checkbox/checkbox-base.ts"
              }
            },
            {
              "kind": "method",
              "name": "_updateValidity",
              "privacy": "protected",
              "parameters": [
                {
                  "name": "error",
                  "optional": true,
                  "type": {
                    "text": "string"
                  }
                }
              ],
              "description": "Executes the component validators and updates the internal validity state.",
              "inheritedFrom": {
                "name": "IgcCheckboxBaseComponent",
                "module": "src/components/checkbox/checkbox-base.ts"
              }
            },
            {
              "kind": "method",
              "name": "_setFormValue",
              "privacy": "protected",
              "return": {
                "type": {
                  "text": "void"
                }
              },
              "parameters": [
                {
                  "name": "value",
                  "type": {
                    "text": "FormValueType"
                  }
                },
                {
                  "name": "state",
                  "optional": true,
                  "type": {
                    "text": "FormValueType"
                  }
                }
              ],
              "inheritedFrom": {
                "name": "IgcCheckboxBaseComponent",
                "module": "src/components/checkbox/checkbox-base.ts"
              }
            },
            {
              "kind": "method",
              "name": "formAssociatedCallback",
              "privacy": "protected",
              "return": {
                "type": {
                  "text": "void"
                }
              },
              "parameters": [
                {
                  "name": "_form",
                  "type": {
                    "text": "HTMLFormElement"
                  }
                }
              ],
              "inheritedFrom": {
                "name": "IgcCheckboxBaseComponent",
                "module": "src/components/checkbox/checkbox-base.ts"
              }
            },
            {
              "kind": "method",
              "name": "formDisabledCallback",
              "privacy": "protected",
              "return": {
                "type": {
                  "text": "void"
                }
              },
              "parameters": [
                {
                  "name": "state",
                  "type": {
                    "text": "boolean"
                  }
                }
              ],
              "inheritedFrom": {
                "name": "IgcCheckboxBaseComponent",
                "module": "src/components/checkbox/checkbox-base.ts"
              }
            },
            {
              "kind": "method",
              "name": "formResetCallback",
              "privacy": "protected",
              "return": {
                "type": {
                  "text": "void"
                }
              },
              "inheritedFrom": {
                "name": "IgcCheckboxBaseComponent",
                "module": "src/components/checkbox/checkbox-base.ts"
              }
            },
            {
              "kind": "method",
              "name": "formStateRestoreCallback",
              "privacy": "protected",
              "return": {
                "type": {
                  "text": "void"
                }
              },
              "parameters": [
                {
                  "name": "_state",
                  "type": {
                    "text": "FormValueType"
                  }
                },
                {
                  "name": "_mode",
                  "type": {
                    "text": "FormRestoreMode"
                  }
                }
              ],
              "inheritedFrom": {
                "name": "IgcCheckboxBaseComponent",
                "module": "src/components/checkbox/checkbox-base.ts"
              }
            },
            {
              "kind": "method",
              "name": "reportValidity",
              "privacy": "public",
              "description": "Checks for validity of the control and shows the browser message if it invalid.",
              "inheritedFrom": {
                "name": "IgcCheckboxBaseComponent",
                "module": "src/components/checkbox/checkbox-base.ts"
              }
            },
            {
              "kind": "method",
              "name": "checkValidity",
              "privacy": "public",
              "description": "Checks for validity of the control and emits the invalid event if it invalid.",
              "inheritedFrom": {
                "name": "IgcCheckboxBaseComponent",
                "module": "src/components/checkbox/checkbox-base.ts"
              }
            },
            {
              "kind": "method",
              "name": "setCustomValidity",
              "privacy": "public",
              "parameters": [
                {
                  "name": "message",
                  "type": {
                    "text": "string"
                  }
                }
              ],
              "description": "Sets a custom validation message for the control.\nAs long as `message` is not empty, the control is considered invalid.",
              "inheritedFrom": {
                "name": "IgcCheckboxBaseComponent",
                "module": "src/components/checkbox/checkbox-base.ts"
              }
            },
            {
              "kind": "method",
              "name": "addEventListener",
              "privacy": "public",
              "return": {
                "type": {
                  "text": "void"
                }
              },
              "parameters": [
                {
                  "name": "type",
                  "type": {
                    "text": "K"
                  }
                },
                {
                  "name": "listener",
                  "type": {
                    "text": "(this: HTMLElement, ev: M[K]) => any"
                  }
                },
                {
                  "name": "options",
                  "optional": true,
                  "type": {
                    "text": "boolean | AddEventListenerOptions"
                  }
                }
              ],
              "inheritedFrom": {
                "name": "IgcCheckboxBaseComponent",
                "module": "src/components/checkbox/checkbox-base.ts"
              }
            },
            {
              "kind": "method",
              "name": "removeEventListener",
              "privacy": "public",
              "return": {
                "type": {
                  "text": "void"
                }
              },
              "parameters": [
                {
                  "name": "type",
                  "type": {
                    "text": "K"
                  }
                },
                {
                  "name": "listener",
                  "type": {
                    "text": "(this: HTMLElement, ev: M[K]) => any"
                  }
                },
                {
                  "name": "options",
                  "optional": true,
                  "type": {
                    "text": "boolean | EventListenerOptions"
                  }
                }
              ],
              "inheritedFrom": {
                "name": "IgcCheckboxBaseComponent",
                "module": "src/components/checkbox/checkbox-base.ts"
              }
            },
            {
              "kind": "method",
              "name": "emitEvent",
              "privacy": "private",
              "return": {
                "type": {
                  "text": "boolean"
                }
              },
              "parameters": [
                {
                  "name": "type",
                  "type": {
                    "text": "K"
                  }
                },
                {
                  "name": "eventInitDict",
                  "optional": true,
                  "type": {
                    "text": "CustomEventInit<D>"
                  }
                }
              ],
              "inheritedFrom": {
                "name": "IgcCheckboxBaseComponent",
                "module": "src/components/checkbox/checkbox-base.ts"
              }
            },
            {
              "kind": "field",
              "name": "_focusRingManager",
              "privacy": "protected",
              "readonly": true,
              "inheritedFrom": {
                "name": "IgcCheckboxBaseComponent",
                "module": "src/components/checkbox/checkbox-base.ts"
              }
            },
            {
              "kind": "field",
              "name": "_value",
              "type": {
                "text": "string"
              },
              "privacy": "protected",
              "inheritedFrom": {
                "name": "IgcCheckboxBaseComponent",
                "module": "src/components/checkbox/checkbox-base.ts"
              }
            },
            {
              "kind": "field",
              "name": "_input",
              "type": {
                "text": "HTMLInputElement"
              },
              "privacy": "protected",
              "readonly": true,
              "inheritedFrom": {
                "name": "IgcCheckboxBaseComponent",
                "module": "src/components/checkbox/checkbox-base.ts"
              }
            },
            {
              "kind": "field",
              "name": "_label",
              "type": {
                "text": "Array<Node>"
              },
              "privacy": "protected",
              "readonly": true,
              "inheritedFrom": {
                "name": "IgcCheckboxBaseComponent",
                "module": "src/components/checkbox/checkbox-base.ts"
              }
            },
            {
              "kind": "field",
              "name": "_hideLabel",
              "type": {
                "text": "boolean"
              },
              "privacy": "protected",
              "default": "false",
              "inheritedFrom": {
                "name": "IgcCheckboxBaseComponent",
                "module": "src/components/checkbox/checkbox-base.ts"
              }
            },
            {
              "kind": "field",
              "name": "value",
              "privacy": "public",
              "description": "The value attribute of the control.",
              "attribute": "value",
              "type": {
                "text": "string"
              },
              "inheritedFrom": {
                "name": "IgcCheckboxBaseComponent",
                "module": "src/components/checkbox/checkbox-base.ts"
              }
            },
            {
              "kind": "field",
              "name": "checked",
              "privacy": "public",
              "description": "The checked state of the control.",
              "attribute": "checked",
              "type": {
                "text": "boolean"
              },
              "inheritedFrom": {
                "name": "IgcCheckboxBaseComponent",
                "module": "src/components/checkbox/checkbox-base.ts"
              }
            },
            {
              "kind": "field",
              "name": "labelPosition",
              "type": {
                "text": "ToggleLabelPosition"
              },
              "privacy": "public",
              "default": "'after'",
              "description": "The label position of the control.",
              "attribute": "label-position",
              "reflects": true,
              "expandedType": {
                "text": "'after' | 'before'"
              },
              "inheritedFrom": {
                "name": "IgcCheckboxBaseComponent",
                "module": "src/components/checkbox/checkbox-base.ts"
              }
            },
            {
              "kind": "method",
              "name": "click",
              "privacy": "public",
              "return": {
                "type": {
                  "text": "void"
                }
              },
              "description": "Simulates a click on the control.",
              "inheritedFrom": {
                "name": "IgcCheckboxBaseComponent",
                "module": "src/components/checkbox/checkbox-base.ts"
              }
            },
            {
              "kind": "method",
              "name": "focus",
              "privacy": "public",
              "return": {
                "type": {
                  "text": "void"
                }
              },
              "parameters": [
                {
                  "name": "options",
                  "optional": true,
                  "type": {
                    "text": "FocusOptions"
                  }
                }
              ],
              "description": "Sets focus on the control.",
              "inheritedFrom": {
                "name": "IgcCheckboxBaseComponent",
                "module": "src/components/checkbox/checkbox-base.ts"
              }
            },
            {
              "kind": "method",
              "name": "blur",
              "privacy": "public",
              "return": {
                "type": {
                  "text": "void"
                }
              },
              "description": "Removes focus from the control.",
              "inheritedFrom": {
                "name": "IgcCheckboxBaseComponent",
                "module": "src/components/checkbox/checkbox-base.ts"
              }
            },
            {
              "kind": "method",
              "name": "_handleFocus",
              "privacy": "protected",
              "return": {
                "type": {
                  "text": "void"
                }
              },
              "inheritedFrom": {
                "name": "IgcCheckboxBaseComponent",
                "module": "src/components/checkbox/checkbox-base.ts"
              }
            }
          ],
          "events": [
            {
              "description": "Emitted when the control's checked state changes.",
              "name": "igcChange"
            },
            {
              "type": {
                "text": "CustomEvent"
              },
              "inheritedFrom": {
                "name": "IgcCheckboxBaseComponent",
                "module": "src/components/checkbox/checkbox-base.ts"
              }
            }
          ],
          "attributes": [
            {
              "name": "indeterminate",
              "type": {
                "text": "boolean"
              },
              "default": "false",
              "description": "Draws the checkbox in indeterminate state.",
              "fieldName": "indeterminate",
              "attribute": "indeterminate"
            },
            {
              "name": "required",
              "description": "When set, makes the component a required field for validation.",
              "default": "false",
              "fieldName": "required",
              "attribute": "required",
              "type": {
                "text": "boolean"
              },
              "inheritedFrom": {
                "name": "IgcCheckboxBaseComponent",
                "module": "src/components/checkbox/checkbox-base.ts"
              }
            },
            {
              "name": "name",
              "type": {
                "text": "string"
              },
              "description": "The name attribute of the control.",
              "fieldName": "name",
              "attribute": "name",
              "inheritedFrom": {
                "name": "IgcCheckboxBaseComponent",
                "module": "src/components/checkbox/checkbox-base.ts"
              }
            },
            {
              "name": "disabled",
              "description": "The disabled state of the component.",
              "default": "false",
              "fieldName": "disabled",
              "attribute": "disabled",
              "type": {
                "text": "boolean"
              },
              "inheritedFrom": {
                "name": "IgcCheckboxBaseComponent",
                "module": "src/components/checkbox/checkbox-base.ts"
              }
            },
            {
              "name": "invalid",
              "description": "Sets the control into invalid state (visual state only).",
              "default": "false",
              "fieldName": "invalid",
              "attribute": "invalid",
              "type": {
                "text": "boolean"
              },
              "inheritedFrom": {
                "name": "IgcCheckboxBaseComponent",
                "module": "src/components/checkbox/checkbox-base.ts"
              }
            },
            {
              "name": "value",
              "description": "The value attribute of the control.",
              "fieldName": "value",
              "attribute": "value",
              "type": {
                "text": "string"
              },
              "inheritedFrom": {
                "name": "IgcCheckboxBaseComponent",
                "module": "src/components/checkbox/checkbox-base.ts"
              }
            },
            {
              "name": "checked",
              "description": "The checked state of the control.",
              "fieldName": "checked",
              "attribute": "checked",
              "type": {
                "text": "boolean"
              },
              "inheritedFrom": {
                "name": "IgcCheckboxBaseComponent",
                "module": "src/components/checkbox/checkbox-base.ts"
              }
            },
            {
              "name": "label-position",
              "type": {
                "text": "ToggleLabelPosition"
              },
              "default": "'after'",
              "description": "The label position of the control.",
              "fieldName": "labelPosition",
              "attribute": "label-position",
              "expandedType": {
                "text": "'after' | 'before'"
              },
              "inheritedFrom": {
                "name": "IgcCheckboxBaseComponent",
                "module": "src/components/checkbox/checkbox-base.ts"
              }
            }
          ],
          "superclass": {
            "name": "IgcCheckboxBaseComponent",
            "module": "/src/components/checkbox/checkbox-base.js"
          },
          "tagName": "igc-checkbox",
          "customElement": true
        }
      ],
      "exports": [
        {
          "kind": "js",
          "name": "default",
          "declaration": {
            "name": "IgcCheckboxComponent",
            "module": "src/components/checkbox/checkbox.ts"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "src/components/progress/base.ts",
      "declarations": [
        {
          "kind": "class",
          "description": "",
          "name": "IgcProgressBaseComponent",
          "members": [
            {
              "kind": "field",
              "name": "_internals",
              "privacy": "private",
              "readonly": true
            },
            {
              "kind": "field",
              "name": "_assignedElements",
              "type": {
                "text": "HTMLElement[]"
              },
              "privacy": "protected"
            },
            {
              "kind": "field",
              "name": "_base",
              "type": {
                "text": "HTMLElement"
              },
              "privacy": "protected"
            },
            {
              "kind": "field",
              "name": "_percentage",
              "type": {
                "text": "number"
              },
              "privacy": "protected",
              "default": "0"
            },
            {
              "kind": "field",
              "name": "_progress",
              "type": {
                "text": "number"
              },
              "privacy": "protected",
              "default": "0"
            },
            {
              "kind": "field",
              "name": "_hasFraction",
              "type": {
                "text": "boolean"
              },
              "privacy": "protected",
              "default": "false"
            },
            {
              "kind": "field",
              "name": "_styleInfo",
              "type": {
                "text": "StyleInfo"
              },
              "privacy": "protected",
              "default": "{ '--_progress-whole': '0.00', '--_progress-integer': '0', '--_progress-fraction': '0', '--_transition-duration': '0ms', }"
            },
            {
              "kind": "field",
              "name": "max",
              "type": {
                "text": "number"
              },
              "privacy": "public",
              "default": "100",
              "description": "Maximum value of the control.",
              "attribute": "max"
            },
            {
              "kind": "field",
              "name": "value",
              "type": {
                "text": "number"
              },
              "privacy": "public",
              "default": "0",
              "description": "The value of the control.",
              "attribute": "value"
            },
            {
              "kind": "field",
              "name": "variant",
              "type": {
                "text": "StyleVariant"
              },
              "privacy": "public",
              "default": "'primary'",
              "description": "The variant of the control.",
              "attribute": "variant",
              "reflects": true,
              "expandedType": {
                "text": "'primary' | 'info' | 'success' | 'warning' | 'danger'"
              }
            },
            {
              "kind": "field",
              "name": "animationDuration",
              "type": {
                "text": "number"
              },
              "privacy": "public",
              "default": "500",
              "description": "Animation duration in milliseconds.",
              "attribute": "animation-duration"
            },
            {
              "kind": "field",
              "name": "indeterminate",
              "type": {
                "text": "boolean"
              },
              "privacy": "public",
              "default": "false",
              "description": "The indeterminate state of the control.",
              "attribute": "indeterminate"
            },
            {
              "kind": "field",
              "name": "hideLabel",
              "type": {
                "text": "boolean"
              },
              "privacy": "public",
              "default": "false",
              "description": "Shows/hides the label of the control.",
              "attribute": "hide-label"
            },
            {
              "kind": "field",
              "name": "labelFormat",
              "type": {
                "text": "string"
              },
              "privacy": "public",
              "description": "Format string for the default label of the control.\nPlaceholders:\n {0} - current value of the control.\n {1} - max value of the control.",
              "attribute": "label-format"
            },
            {
              "kind": "method",
              "name": "indeterminateChange",
              "privacy": "protected"
            },
            {
              "kind": "method",
              "name": "maxChange",
              "privacy": "protected"
            },
            {
              "kind": "method",
              "name": "valueChange",
              "privacy": "protected"
            },
            {
              "kind": "method",
              "name": "_updateARIA",
              "privacy": "private"
            },
            {
              "kind": "method",
              "name": "_updateProgress",
              "privacy": "private"
            },
            {
              "kind": "method",
              "name": "renderLabel",
              "privacy": "protected"
            },
            {
              "kind": "method",
              "name": "renderLabelFormat",
              "privacy": "protected"
            },
            {
              "kind": "method",
              "name": "renderDefaultSlot",
              "privacy": "protected"
            }
          ],
          "attributes": [
            {
              "name": "max",
              "type": {
                "text": "number"
              },
              "default": "100",
              "description": "Maximum value of the control.",
              "fieldName": "max",
              "attribute": "max"
            },
            {
              "name": "value",
              "type": {
                "text": "number"
              },
              "default": "0",
              "description": "The value of the control.",
              "fieldName": "value",
              "attribute": "value"
            },
            {
              "name": "variant",
              "type": {
                "text": "StyleVariant"
              },
              "default": "'primary'",
              "description": "The variant of the control.",
              "fieldName": "variant",
              "attribute": "variant",
              "expandedType": {
                "text": "'primary' | 'info' | 'success' | 'warning' | 'danger'"
              }
            },
            {
              "name": "animation-duration",
              "type": {
                "text": "number"
              },
              "default": "500",
              "description": "Animation duration in milliseconds.",
              "fieldName": "animationDuration",
              "attribute": "animation-duration"
            },
            {
              "name": "indeterminate",
              "type": {
                "text": "boolean"
              },
              "default": "false",
              "description": "The indeterminate state of the control.",
              "fieldName": "indeterminate",
              "attribute": "indeterminate"
            },
            {
              "name": "hide-label",
              "type": {
                "text": "boolean"
              },
              "default": "false",
              "description": "Shows/hides the label of the control.",
              "fieldName": "hideLabel",
              "attribute": "hide-label"
            },
            {
              "name": "label-format",
              "type": {
                "text": "string"
              },
              "description": "Format string for the default label of the control.\nPlaceholders:\n {0} - current value of the control.\n {1} - max value of the control.",
              "fieldName": "labelFormat",
              "attribute": "label-format"
            }
          ],
          "superclass": {
            "name": "LitElement",
            "package": "lit"
          },
          "customElement": true
        }
      ],
      "exports": [
        {
          "kind": "js",
          "name": "IgcProgressBaseComponent",
          "declaration": {
            "name": "IgcProgressBaseComponent",
            "module": "src/components/progress/base.ts"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "src/components/progress/circular-gradient.ts",
      "declarations": [
        {
          "kind": "class",
          "description": "Used for defining gradient stops in the igc-circular-progress.\nFor each `igc-circular-gradient` defined as `gradient` slot of `igc-circular-progress` element would be created a SVG stop element.\nThe values passed as `color`, `offset` and `opacity` would be set as\n`stop-color`, `offset` and `stop-opacity` of the SVG element without further validations.",
          "name": "IgcCircularGradientComponent",
          "members": [
            {
              "kind": "field",
              "name": "tagName",
              "type": {
                "text": "string"
              },
              "privacy": "public",
              "static": true,
              "readonly": true,
              "default": "'igc-circular-gradient'"
            },
            {
              "kind": "method",
              "name": "register",
              "privacy": "public",
              "static": true
            },
            {
              "kind": "field",
              "name": "offset",
              "type": {
                "text": "string"
              },
              "privacy": "public",
              "default": "'0%'",
              "description": "Defines where the gradient stop is placed along the gradient vector",
              "attribute": "offset"
            },
            {
              "kind": "field",
              "name": "color",
              "type": {
                "text": "string"
              },
              "privacy": "public",
              "default": "'black'",
              "description": "Defines the color of the gradient stop",
              "attribute": "color"
            },
            {
              "kind": "field",
              "name": "opacity",
              "type": {
                "text": "number"
              },
              "privacy": "public",
              "default": "1",
              "description": "Defines the opacity of the gradient stop",
              "attribute": "opacity"
            }
          ],
          "attributes": [
            {
              "name": "offset",
              "type": {
                "text": "string"
              },
              "default": "'0%'",
              "description": "Defines where the gradient stop is placed along the gradient vector",
              "fieldName": "offset",
              "attribute": "offset"
            },
            {
              "name": "color",
              "type": {
                "text": "string"
              },
              "default": "'black'",
              "description": "Defines the color of the gradient stop",
              "fieldName": "color",
              "attribute": "color"
            },
            {
              "name": "opacity",
              "type": {
                "text": "number"
              },
              "default": "1",
              "description": "Defines the opacity of the gradient stop",
              "fieldName": "opacity",
              "attribute": "opacity"
            }
          ],
          "superclass": {
            "name": "LitElement",
            "package": "lit"
          },
          "tagName": "igc-circular-gradient",
          "customElement": true
        }
      ],
      "exports": [
        {
          "kind": "js",
          "name": "default",
          "declaration": {
            "name": "IgcCircularGradientComponent",
            "module": "src/components/progress/circular-gradient.ts"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "src/components/progress/circular-progress.ts",
      "declarations": [
        {
          "kind": "class",
          "description": "A circular progress indicator used to express unspecified wait time or display\nthe length of a process.",
          "name": "IgcCircularProgressComponent",
          "cssParts": [
            {
              "description": "The igc-circular-progress SVG element.",
              "name": "svg"
            },
            {
              "description": "The igc-circular-progress linear-gradient start color.",
              "name": "gradient_start"
            },
            {
              "description": "The igc-circular-progress linear-gradient end color.",
              "name": "gradient_end"
            },
            {
              "description": "The igc-circular-progress ring track area.",
              "name": "track"
            },
            {
              "description": "The igc-circular-progress indicator area.",
              "name": "fill"
            },
            {
              "description": "The igc-circular-progress label.",
              "name": "label"
            },
            {
              "description": "The igc-circular-progress label value.",
              "name": "value"
            },
            {
              "description": "The igc-circular-progress indeterminate state.",
              "name": "indeterminate"
            },
            {
              "description": "The igc-circular-progress primary state.",
              "name": "primary"
            },
            {
              "description": "The igc-circular-progress error state.",
              "name": "danger"
            },
            {
              "description": "The igc-circular-progress warning state.",
              "name": "warning"
            },
            {
              "description": "The igc-circular-progress info state.",
              "name": "info"
            },
            {
              "description": "The igc-circular-progress success state.",
              "name": "success"
            }
          ],
          "slots": [
            {
              "description": "The text area container.",
              "name": ""
            },
            {
              "description": "Customize the progress bar in order to use a color gradient instead of a solid color. Accepts `igc-circular-gradient` elements.",
              "name": "gradient"
            }
          ],
          "members": [
            {
              "kind": "field",
              "name": "tagName",
              "type": {
                "text": "string"
              },
              "privacy": "public",
              "static": true,
              "readonly": true,
              "default": "'igc-circular-progress'"
            },
            {
              "kind": "field",
              "name": "increment",
              "privacy": "private",
              "static": true,
              "readonly": true
            },
            {
              "kind": "method",
              "name": "register",
              "privacy": "public",
              "static": true
            },
            {
              "kind": "field",
              "name": "_gradientId",
              "privacy": "private",
              "default": "`circular-progress-${IgcCircularProgressComponent.increment()}`"
            },
            {
              "kind": "field",
              "name": "_assignedGradients",
              "type": {
                "text": "IgcCircularGradientComponent[]"
              },
              "privacy": "private"
            },
            {
              "kind": "method",
              "name": "renderSvg",
              "privacy": "protected"
            },
            {
              "kind": "field",
              "name": "_internals",
              "privacy": "private",
              "readonly": true,
              "inheritedFrom": {
                "name": "IgcProgressBaseComponent",
                "module": "src/components/progress/base.ts"
              }
            },
            {
              "kind": "field",
              "name": "_assignedElements",
              "type": {
                "text": "HTMLElement[]"
              },
              "privacy": "protected",
              "inheritedFrom": {
                "name": "IgcProgressBaseComponent",
                "module": "src/components/progress/base.ts"
              }
            },
            {
              "kind": "field",
              "name": "_base",
              "type": {
                "text": "HTMLElement"
              },
              "privacy": "protected",
              "inheritedFrom": {
                "name": "IgcProgressBaseComponent",
                "module": "src/components/progress/base.ts"
              }
            },
            {
              "kind": "field",
              "name": "_percentage",
              "type": {
                "text": "number"
              },
              "privacy": "protected",
              "default": "0",
              "inheritedFrom": {
                "name": "IgcProgressBaseComponent",
                "module": "src/components/progress/base.ts"
              }
            },
            {
              "kind": "field",
              "name": "_progress",
              "type": {
                "text": "number"
              },
              "privacy": "protected",
              "default": "0",
              "inheritedFrom": {
                "name": "IgcProgressBaseComponent",
                "module": "src/components/progress/base.ts"
              }
            },
            {
              "kind": "field",
              "name": "_hasFraction",
              "type": {
                "text": "boolean"
              },
              "privacy": "protected",
              "default": "false",
              "inheritedFrom": {
                "name": "IgcProgressBaseComponent",
                "module": "src/components/progress/base.ts"
              }
            },
            {
              "kind": "field",
              "name": "_styleInfo",
              "type": {
                "text": "StyleInfo"
              },
              "privacy": "protected",
              "default": "{ '--_progress-whole': '0.00', '--_progress-integer': '0', '--_progress-fraction': '0', '--_transition-duration': '0ms', }",
              "inheritedFrom": {
                "name": "IgcProgressBaseComponent",
                "module": "src/components/progress/base.ts"
              }
            },
            {
              "kind": "field",
              "name": "max",
              "type": {
                "text": "number"
              },
              "privacy": "public",
              "default": "100",
              "description": "Maximum value of the control.",
              "attribute": "max",
              "inheritedFrom": {
                "name": "IgcProgressBaseComponent",
                "module": "src/components/progress/base.ts"
              }
            },
            {
              "kind": "field",
              "name": "value",
              "type": {
                "text": "number"
              },
              "privacy": "public",
              "default": "0",
              "description": "The value of the control.",
              "attribute": "value",
              "inheritedFrom": {
                "name": "IgcProgressBaseComponent",
                "module": "src/components/progress/base.ts"
              }
            },
            {
              "kind": "field",
              "name": "variant",
              "type": {
                "text": "StyleVariant"
              },
              "privacy": "public",
              "default": "'primary'",
              "description": "The variant of the control.",
              "attribute": "variant",
              "reflects": true,
              "expandedType": {
                "text": "'primary' | 'info' | 'success' | 'warning' | 'danger'"
              },
              "inheritedFrom": {
                "name": "IgcProgressBaseComponent",
                "module": "src/components/progress/base.ts"
              }
            },
            {
              "kind": "field",
              "name": "animationDuration",
              "type": {
                "text": "number"
              },
              "privacy": "public",
              "default": "500",
              "description": "Animation duration in milliseconds.",
              "attribute": "animation-duration",
              "inheritedFrom": {
                "name": "IgcProgressBaseComponent",
                "module": "src/components/progress/base.ts"
              }
            },
            {
              "kind": "field",
              "name": "indeterminate",
              "type": {
                "text": "boolean"
              },
              "privacy": "public",
              "default": "false",
              "description": "The indeterminate state of the control.",
              "attribute": "indeterminate",
              "inheritedFrom": {
                "name": "IgcProgressBaseComponent",
                "module": "src/components/progress/base.ts"
              }
            },
            {
              "kind": "field",
              "name": "hideLabel",
              "type": {
                "text": "boolean"
              },
              "privacy": "public",
              "default": "false",
              "description": "Shows/hides the label of the control.",
              "attribute": "hide-label",
              "inheritedFrom": {
                "name": "IgcProgressBaseComponent",
                "module": "src/components/progress/base.ts"
              }
            },
            {
              "kind": "field",
              "name": "labelFormat",
              "type": {
                "text": "string"
              },
              "privacy": "public",
              "description": "Format string for the default label of the control.\nPlaceholders:\n {0} - current value of the control.\n {1} - max value of the control.",
              "attribute": "label-format",
              "inheritedFrom": {
                "name": "IgcProgressBaseComponent",
                "module": "src/components/progress/base.ts"
              }
            },
            {
              "kind": "method",
              "name": "indeterminateChange",
              "privacy": "protected",
              "inheritedFrom": {
                "name": "IgcProgressBaseComponent",
                "module": "src/components/progress/base.ts"
              }
            },
            {
              "kind": "method",
              "name": "maxChange",
              "privacy": "protected",
              "inheritedFrom": {
                "name": "IgcProgressBaseComponent",
                "module": "src/components/progress/base.ts"
              }
            },
            {
              "kind": "method",
              "name": "valueChange",
              "privacy": "protected",
              "inheritedFrom": {
                "name": "IgcProgressBaseComponent",
                "module": "src/components/progress/base.ts"
              }
            },
            {
              "kind": "method",
              "name": "_updateARIA",
              "privacy": "private",
              "inheritedFrom": {
                "name": "IgcProgressBaseComponent",
                "module": "src/components/progress/base.ts"
              }
            },
            {
              "kind": "method",
              "name": "_updateProgress",
              "privacy": "private",
              "inheritedFrom": {
                "name": "IgcProgressBaseComponent",
                "module": "src/components/progress/base.ts"
              }
            },
            {
              "kind": "method",
              "name": "renderLabel",
              "privacy": "protected",
              "inheritedFrom": {
                "name": "IgcProgressBaseComponent",
                "module": "src/components/progress/base.ts"
              }
            },
            {
              "kind": "method",
              "name": "renderLabelFormat",
              "privacy": "protected",
              "inheritedFrom": {
                "name": "IgcProgressBaseComponent",
                "module": "src/components/progress/base.ts"
              }
            },
            {
              "kind": "method",
              "name": "renderDefaultSlot",
              "privacy": "protected",
              "inheritedFrom": {
                "name": "IgcProgressBaseComponent",
                "module": "src/components/progress/base.ts"
              }
            }
          ],
          "superclass": {
            "name": "IgcProgressBaseComponent",
            "module": "/src/components/progress/base.js"
          },
          "tagName": "igc-circular-progress",
          "customElement": true,
          "attributes": [
            {
              "name": "max",
              "type": {
                "text": "number"
              },
              "default": "100",
              "description": "Maximum value of the control.",
              "fieldName": "max",
              "attribute": "max",
              "inheritedFrom": {
                "name": "IgcProgressBaseComponent",
                "module": "src/components/progress/base.ts"
              }
            },
            {
              "name": "value",
              "type": {
                "text": "number"
              },
              "default": "0",
              "description": "The value of the control.",
              "fieldName": "value",
              "attribute": "value",
              "inheritedFrom": {
                "name": "IgcProgressBaseComponent",
                "module": "src/components/progress/base.ts"
              }
            },
            {
              "name": "variant",
              "type": {
                "text": "StyleVariant"
              },
              "default": "'primary'",
              "description": "The variant of the control.",
              "fieldName": "variant",
              "attribute": "variant",
              "expandedType": {
                "text": "'primary' | 'info' | 'success' | 'warning' | 'danger'"
              },
              "inheritedFrom": {
                "name": "IgcProgressBaseComponent",
                "module": "src/components/progress/base.ts"
              }
            },
            {
              "name": "animation-duration",
              "type": {
                "text": "number"
              },
              "default": "500",
              "description": "Animation duration in milliseconds.",
              "fieldName": "animationDuration",
              "attribute": "animation-duration",
              "inheritedFrom": {
                "name": "IgcProgressBaseComponent",
                "module": "src/components/progress/base.ts"
              }
            },
            {
              "name": "indeterminate",
              "type": {
                "text": "boolean"
              },
              "default": "false",
              "description": "The indeterminate state of the control.",
              "fieldName": "indeterminate",
              "attribute": "indeterminate",
              "inheritedFrom": {
                "name": "IgcProgressBaseComponent",
                "module": "src/components/progress/base.ts"
              }
            },
            {
              "name": "hide-label",
              "type": {
                "text": "boolean"
              },
              "default": "false",
              "description": "Shows/hides the label of the control.",
              "fieldName": "hideLabel",
              "attribute": "hide-label",
              "inheritedFrom": {
                "name": "IgcProgressBaseComponent",
                "module": "src/components/progress/base.ts"
              }
            },
            {
              "name": "label-format",
              "type": {
                "text": "string"
              },
              "description": "Format string for the default label of the control.\nPlaceholders:\n {0} - current value of the control.\n {1} - max value of the control.",
              "fieldName": "labelFormat",
              "attribute": "label-format",
              "inheritedFrom": {
                "name": "IgcProgressBaseComponent",
                "module": "src/components/progress/base.ts"
              }
            }
          ]
        }
      ],
      "exports": [
        {
          "kind": "js",
          "name": "default",
          "declaration": {
            "name": "IgcCircularProgressComponent",
            "module": "src/components/progress/circular-progress.ts"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "src/components/combo/combo-header.ts",
      "declarations": [
        {
          "kind": "class",
          "description": "",
          "name": "IgcComboHeaderComponent",
          "members": [
            {
              "kind": "field",
              "name": "tagName",
              "type": {
                "text": "string"
              },
              "privacy": "public",
              "static": true,
              "readonly": true,
              "default": "'igc-combo-header'"
            },
            {
              "kind": "method",
              "name": "register",
              "privacy": "public",
              "static": true
            }
          ],
          "superclass": {
            "name": "LitElement",
            "package": "lit"
          },
          "customElement": true
        }
      ],
      "exports": [
        {
          "kind": "js",
          "name": "default",
          "declaration": {
            "name": "IgcComboHeaderComponent",
            "module": "src/components/combo/combo-header.ts"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "src/components/combo/combo-item.ts",
      "declarations": [
        {
          "kind": "class",
          "description": "",
          "name": "IgcComboItemComponent",
          "members": [
            {
              "kind": "field",
              "name": "tagName",
              "type": {
                "text": "string"
              },
              "privacy": "public",
              "static": true,
              "readonly": true,
              "default": "'igc-combo-item'"
            },
            {
              "kind": "method",
              "name": "register",
              "privacy": "public",
              "static": true,
              "return": {
                "type": {
                  "text": "void"
                }
              }
            },
            {
              "kind": "field",
              "name": "_internals",
              "privacy": "private",
              "readonly": true
            },
            {
              "kind": "field",
              "name": "index",
              "type": {
                "text": "number"
              },
              "privacy": "public"
            },
            {
              "kind": "field",
              "name": "selected",
              "type": {
                "text": "boolean"
              },
              "privacy": "public",
              "default": "false",
              "description": "Determines whether the item is selected.",
              "attribute": "selected",
              "reflects": true
            },
            {
              "kind": "field",
              "name": "active",
              "type": {
                "text": "boolean"
              },
              "privacy": "public",
              "default": "false",
              "description": "Determines whether the item is active.",
              "attribute": "active",
              "reflects": true
            },
            {
              "kind": "field",
              "name": "hideCheckbox",
              "type": {
                "text": "boolean"
              },
              "privacy": "public",
              "default": "false",
              "description": "Determines whether the item is active.",
              "attribute": "hide-checkbox"
            },
            {
              "kind": "method",
              "name": "renderCheckbox",
              "privacy": "private"
            }
          ],
          "attributes": [
            {
              "name": "selected",
              "type": {
                "text": "boolean"
              },
              "default": "false",
              "description": "Determines whether the item is selected.",
              "fieldName": "selected",
              "attribute": "selected"
            },
            {
              "name": "hide-checkbox",
              "type": {
                "text": "boolean"
              },
              "default": "false",
              "description": "Determines whether the item is active.",
              "fieldName": "hideCheckbox",
              "attribute": "hide-checkbox"
            },
            {
              "name": "active",
              "type": {
                "text": "boolean"
              },
              "default": "false",
              "description": "Determines whether the item is active.",
              "fieldName": "active"
            }
          ],
          "superclass": {
            "name": "LitElement",
            "package": "lit"
          },
          "customElement": true
        }
      ],
      "exports": [
        {
          "kind": "js",
          "name": "default",
          "declaration": {
            "name": "IgcComboItemComponent",
            "module": "src/components/combo/combo-item.ts"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "src/components/combo/combo-list.ts",
      "declarations": [
        {
          "kind": "class",
          "description": "",
          "name": "IgcComboListComponent",
          "members": [
            {
              "kind": "field",
              "name": "tagName",
              "type": {
                "text": "string"
              },
              "privacy": "public",
              "static": true,
              "readonly": true,
              "default": "'igc-combo-list'"
            },
            {
              "kind": "field",
              "name": "scroller",
              "type": {
                "text": "boolean"
              },
              "privacy": "public",
              "default": "true"
            },
            {
              "kind": "method",
              "name": "register",
              "privacy": "public",
              "static": true
            }
          ],
          "superclass": {
            "name": "LitVirtualizer",
            "package": "@lit-labs/virtualizer/LitVirtualizer.js"
          }
        }
      ],
      "exports": [
        {
          "kind": "js",
          "name": "default",
          "declaration": {
            "name": "IgcComboListComponent",
            "module": "src/components/combo/combo-list.ts"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "src/components/combo/types.ts",
      "declarations": [],
      "exports": []
    },
    {
      "kind": "javascript-module",
      "path": "src/components/combo/operations/filter.ts",
      "declarations": [
        {
          "kind": "class",
          "description": "",
          "name": "FilterDataOperation",
          "members": [
            {
              "kind": "method",
              "name": "normalize",
              "privacy": "protected",
              "parameters": [
                {
                  "name": "string",
                  "type": {
                    "text": "string"
                  }
                },
                {
                  "name": "{ caseSensitive, matchDiacritics }",
                  "type": {
                    "text": "FilteringOptions<T>"
                  }
                }
              ]
            },
            {
              "kind": "method",
              "name": "apply",
              "privacy": "public",
              "parameters": [
                {
                  "name": "data",
                  "type": {
                    "text": "ComboRecord<T>[]"
                  }
                },
                {
                  "name": "controller",
                  "type": {
                    "text": "DataController<T>"
                  }
                }
              ]
            }
          ]
        }
      ],
      "exports": [
        {
          "kind": "js",
          "name": "default",
          "declaration": {
            "name": "FilterDataOperation",
            "module": "src/components/combo/operations/filter.ts"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "src/components/combo/operations/group.ts",
      "declarations": [
        {
          "kind": "class",
          "description": "",
          "name": "GroupDataOperation",
          "members": [
            {
              "kind": "field",
              "name": "orderBy",
              "privacy": "protected",
              "default": "new Map( Object.entries({ asc: 1, desc: -1, }) )"
            },
            {
              "kind": "method",
              "name": "apply",
              "privacy": "public",
              "parameters": [
                {
                  "name": "data",
                  "type": {
                    "text": "ComboRecord<T>[]"
                  }
                },
                {
                  "name": "controller",
                  "type": {
                    "text": "DataController<T>"
                  }
                }
              ]
            }
          ]
        }
      ],
      "exports": [
        {
          "kind": "js",
          "name": "default",
          "declaration": {
            "name": "GroupDataOperation",
            "module": "src/components/combo/operations/group.ts"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "src/components/combo/controllers/data.ts",
      "declarations": [
        {
          "kind": "class",
          "description": "",
          "name": "DataController",
          "members": [
            {
              "kind": "field",
              "name": "grouping",
              "privacy": "protected",
              "default": "new GroupDataOperation<T>()"
            },
            {
              "kind": "field",
              "name": "filtering",
              "privacy": "protected",
              "default": "new FilterDataOperation<T>()"
            },
            {
              "kind": "field",
              "name": "_searchTerm",
              "type": {
                "text": "string"
              },
              "privacy": "private",
              "default": "''"
            },
            {
              "kind": "field",
              "name": "_compareCollator",
              "privacy": "private",
              "default": "new Intl.Collator()"
            },
            {
              "kind": "field",
              "name": "dataState",
              "type": {
                "text": "ComboRecord<T>[]"
              },
              "privacy": "public",
              "default": "[]"
            },
            {
              "kind": "method",
              "name": "runPipeline",
              "privacy": "public"
            },
            {
              "kind": "field",
              "name": "searchTerm",
              "privacy": "public"
            },
            {
              "kind": "field",
              "name": "filteringOptions",
              "type": {
                "text": "FilteringOptions<T>"
              },
              "privacy": "public",
              "readonly": true
            },
            {
              "kind": "field",
              "name": "groupingOptions",
              "type": {
                "text": "GroupingOptions<T>"
              },
              "privacy": "public",
              "readonly": true
            },
            {
              "kind": "field",
              "name": "compareCollator",
              "type": {
                "text": "Intl.Collator"
              },
              "privacy": "public",
              "readonly": true
            },
            {
              "kind": "method",
              "name": "index",
              "privacy": "private",
              "return": {
                "type": {
                  "text": "ComboRecord<T>[]"
                }
              },
              "parameters": [
                {
                  "name": "data",
                  "type": {
                    "text": "T[]"
                  }
                }
              ]
            },
            {
              "kind": "method",
              "name": "hostConnected",
              "privacy": "public"
            },
            {
              "kind": "method",
              "name": "apply",
              "privacy": "public",
              "return": {
                "type": {
                  "text": "ComboRecord<T>[]"
                }
              },
              "parameters": [
                {
                  "name": "data",
                  "type": {
                    "text": "T[]"
                  }
                }
              ]
            }
          ]
        }
      ],
      "exports": [
        {
          "kind": "js",
          "name": "DataController",
          "declaration": {
            "name": "DataController",
            "module": "src/components/combo/controllers/data.ts"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "src/components/combo/controllers/navigation.ts",
      "declarations": [
        {
          "kind": "class",
          "description": "",
          "name": "NavigationController",
          "members": [
            {
              "kind": "field",
              "name": "hostHandlers",
              "privacy": "protected",
              "default": "new Map( Object.entries({ Escape: this.escape, }) )"
            },
            {
              "kind": "field",
              "name": "mainInputHandlers",
              "privacy": "protected",
              "default": "new Map( Object.entries({ Escape: this.escape, ArrowUp: this.hide, ArrowDown: this.mainInputArrowDown, Tab: this.tab, Enter: this.enter, }) )"
            },
            {
              "kind": "field",
              "name": "searchInputHandlers",
              "privacy": "protected",
              "default": "new Map( Object.entries({ Escape: this.escape, ArrowUp: this.escape, ArrowDown: this.inputArrowDown, Tab: this.inputArrowDown, }) )"
            },
            {
              "kind": "field",
              "name": "listHandlers",
              "privacy": "protected",
              "default": "new Map( Object.entries({ ArrowDown: this.arrowDown, ArrowUp: this.arrowUp, ' ': this.space, Enter: this.enter, Escape: this.escape, Tab: this.tab, Home: this.home, End: this.end, }) )"
            },
            {
              "kind": "field",
              "name": "_active",
              "privacy": "protected",
              "default": "-1",
              "type": {
                "text": "Readonly<number>"
              }
            },
            {
              "kind": "field",
              "name": "input",
              "privacy": "public",
              "readonly": true
            },
            {
              "kind": "field",
              "name": "dataState",
              "privacy": "public",
              "readonly": true
            },
            {
              "kind": "method",
              "name": "show",
              "privacy": "public"
            },
            {
              "kind": "method",
              "name": "hide",
              "privacy": "public"
            },
            {
              "kind": "method",
              "name": "toggleSelect",
              "privacy": "public",
              "parameters": [
                {
                  "name": "index",
                  "type": {
                    "text": "number"
                  }
                }
              ]
            },
            {
              "kind": "method",
              "name": "select",
              "privacy": "public",
              "parameters": [
                {
                  "name": "index",
                  "type": {
                    "text": "number"
                  }
                }
              ]
            },
            {
              "kind": "field",
              "name": "currentItem",
              "privacy": "protected",
              "readonly": true
            },
            {
              "kind": "field",
              "name": "firstItem",
              "privacy": "protected",
              "readonly": true
            },
            {
              "kind": "field",
              "name": "lastItem",
              "privacy": "protected",
              "readonly": true
            },
            {
              "kind": "method",
              "name": "scrollToActive",
              "privacy": "protected",
              "parameters": [
                {
                  "name": "container",
                  "type": {
                    "text": "IgcComboListComponent"
                  }
                },
                {
                  "name": "behavior",
                  "default": "'auto'",
                  "type": {
                    "text": "ScrollBehavior"
                  }
                }
              ]
            },
            {
              "kind": "field",
              "name": "active",
              "privacy": "public"
            },
            {
              "kind": "method",
              "name": "home",
              "privacy": "protected",
              "parameters": [
                {
                  "name": "container",
                  "type": {
                    "text": "IgcComboListComponent"
                  }
                }
              ]
            },
            {
              "kind": "method",
              "name": "end",
              "privacy": "protected",
              "parameters": [
                {
                  "name": "container",
                  "type": {
                    "text": "IgcComboListComponent"
                  }
                }
              ]
            },
            {
              "kind": "method",
              "name": "space",
              "privacy": "protected"
            },
            {
              "kind": "method",
              "name": "escape",
              "privacy": "protected"
            },
            {
              "kind": "method",
              "name": "enter",
              "privacy": "protected"
            },
            {
              "kind": "method",
              "name": "inputArrowDown",
              "privacy": "protected",
              "parameters": [
                {
                  "name": "container",
                  "type": {
                    "text": "IgcComboListComponent"
                  }
                }
              ]
            },
            {
              "kind": "method",
              "name": "mainInputArrowDown",
              "privacy": "protected",
              "parameters": [
                {
                  "name": "container",
                  "type": {
                    "text": "IgcComboListComponent"
                  }
                }
              ]
            },
            {
              "kind": "method",
              "name": "tab",
              "privacy": "protected"
            },
            {
              "kind": "method",
              "name": "arrowDown",
              "privacy": "protected",
              "parameters": [
                {
                  "name": "container",
                  "type": {
                    "text": "IgcComboListComponent"
                  }
                }
              ]
            },
            {
              "kind": "method",
              "name": "arrowUp",
              "privacy": "protected",
              "parameters": [
                {
                  "name": "container",
                  "type": {
                    "text": "IgcComboListComponent"
                  }
                }
              ]
            },
            {
              "kind": "method",
              "name": "getNextItem",
              "privacy": "protected",
              "parameters": [
                {
                  "name": "direction",
                  "type": {
                    "text": "DIRECTION"
                  }
                }
              ]
            },
            {
              "kind": "method",
              "name": "getNearestItem",
              "privacy": "protected",
              "parameters": [
                {
                  "name": "startIndex",
                  "type": {
                    "text": "number"
                  }
                },
                {
                  "name": "direction",
                  "type": {
                    "text": "number"
                  }
                }
              ]
            },
            {
              "kind": "method",
              "name": "hostConnected",
              "privacy": "public"
            },
            {
              "kind": "method",
              "name": "hostDisconnected",
              "privacy": "public"
            },
            {
              "kind": "method",
              "name": "navigateTo",
              "privacy": "public",
              "parameters": [
                {
                  "name": "item",
                  "type": {
                    "text": "T"
                  }
                },
                {
                  "name": "container",
                  "type": {
                    "text": "IgcComboListComponent"
                  }
                }
              ]
            },
            {
              "kind": "method",
              "name": "navigateHost",
              "privacy": "public",
              "parameters": [
                {
                  "name": "event",
                  "type": {
                    "text": "KeyboardEvent"
                  }
                }
              ]
            },
            {
              "kind": "method",
              "name": "navigateMainInput",
              "privacy": "public",
              "parameters": [
                {
                  "name": "event",
                  "type": {
                    "text": "KeyboardEvent"
                  }
                },
                {
                  "name": "container",
                  "type": {
                    "text": "IgcComboListComponent"
                  }
                }
              ]
            },
            {
              "kind": "method",
              "name": "navigateSearchInput",
              "privacy": "public",
              "parameters": [
                {
                  "name": "event",
                  "type": {
                    "text": "KeyboardEvent"
                  }
                },
                {
                  "name": "container",
                  "type": {
                    "text": "IgcComboListComponent"
                  }
                }
              ]
            },
            {
              "kind": "method",
              "name": "navigateList",
              "privacy": "public",
              "parameters": [
                {
                  "name": "event",
                  "type": {
                    "text": "KeyboardEvent"
                  }
                },
                {
                  "name": "container",
                  "type": {
                    "text": "IgcComboListComponent"
                  }
                }
              ]
            }
          ]
        }
      ],
      "exports": [
        {
          "kind": "js",
          "name": "NavigationController",
          "declaration": {
            "name": "NavigationController",
            "module": "src/components/combo/controllers/navigation.ts"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "src/components/combo/controllers/selection.ts",
      "declarations": [
        {
          "kind": "class",
          "description": "",
          "name": "SelectionController",
          "members": [
            {
              "kind": "field",
              "name": "_selected",
              "type": {
                "text": "Set<T>"
              },
              "privacy": "private",
              "default": "new Set()"
            },
            {
              "kind": "field",
              "name": "isEmpty",
              "privacy": "public",
              "description": "Whether the current selection is empty",
              "readonly": true
            },
            {
              "kind": "field",
              "name": "asArray",
              "privacy": "public",
              "description": "Returns the current selection as an array",
              "readonly": true
            },
            {
              "kind": "method",
              "name": "has",
              "privacy": "public",
              "parameters": [
                {
                  "name": "item",
                  "optional": true,
                  "type": {
                    "text": "T"
                  }
                }
              ],
              "description": "Whether the current selection has the given item"
            },
            {
              "kind": "method",
              "name": "clear",
              "privacy": "public",
              "description": "Clears the current selection"
            },
            {
              "kind": "method",
              "name": "getSelectedValuesByKey",
              "privacy": "public",
              "parameters": [
                {
                  "name": "key",
                  "optional": true,
                  "type": {
                    "text": "Keys<T>"
                  }
                }
              ]
            },
            {
              "kind": "method",
              "name": "getValue",
              "privacy": "public",
              "return": {
                "type": {
                  "text": "ComboValue<T>[]"
                }
              },
              "parameters": [
                {
                  "name": "items",
                  "type": {
                    "text": "T[]"
                  }
                },
                {
                  "name": "key",
                  "type": {
                    "text": "Keys<T>"
                  }
                }
              ]
            },
            {
              "kind": "method",
              "name": "handleChange",
              "privacy": "private",
              "parameters": [
                {
                  "name": "detail",
                  "type": {
                    "text": "IgcComboChangeEventArgs"
                  }
                }
              ]
            },
            {
              "kind": "method",
              "name": "getItemsByValueKey",
              "privacy": "private",
              "parameters": [
                {
                  "name": "keys",
                  "type": {
                    "text": "Values<T>[]"
                  }
                }
              ]
            },
            {
              "kind": "method",
              "name": "selectValueKeys",
              "privacy": "private",
              "parameters": [
                {
                  "name": "keys",
                  "type": {
                    "text": "Values<T>[]"
                  }
                }
              ]
            },
            {
              "kind": "method",
              "name": "deselectValueKeys",
              "privacy": "private",
              "parameters": [
                {
                  "name": "keys",
                  "type": {
                    "text": "Values<T>[]"
                  }
                }
              ]
            },
            {
              "kind": "method",
              "name": "selectObjects",
              "privacy": "private",
              "parameters": [
                {
                  "name": "items",
                  "type": {
                    "text": "T[]"
                  }
                }
              ]
            },
            {
              "kind": "method",
              "name": "deselectObjects",
              "privacy": "private",
              "parameters": [
                {
                  "name": "items",
                  "type": {
                    "text": "T[]"
                  }
                }
              ]
            },
            {
              "kind": "method",
              "name": "selectAll",
              "privacy": "private"
            },
            {
              "kind": "method",
              "name": "deselectAll",
              "privacy": "private"
            },
            {
              "kind": "method",
              "name": "select",
              "privacy": "public",
              "parameters": [
                {
                  "name": "items",
                  "optional": true,
                  "type": {
                    "text": "Item<T> | Item<T>[]"
                  }
                },
                {
                  "name": "emit",
                  "default": "false"
                }
              ]
            },
            {
              "kind": "method",
              "name": "deselect",
              "privacy": "public",
              "parameters": [
                {
                  "name": "items",
                  "optional": true,
                  "type": {
                    "text": "Item<T> | Item<T>[]"
                  }
                },
                {
                  "name": "emit",
                  "default": "false"
                }
              ]
            },
            {
              "kind": "method",
              "name": "changeSelection",
              "privacy": "public",
              "parameters": [
                {
                  "name": "index",
                  "type": {
                    "text": "number"
                  }
                }
              ]
            },
            {
              "kind": "method",
              "name": "selectByIndex",
              "privacy": "public",
              "parameters": [
                {
                  "name": "index",
                  "type": {
                    "text": "number"
                  }
                }
              ]
            },
            {
              "kind": "method",
              "name": "hostConnected",
              "privacy": "public"
            },
            {
              "kind": "method",
              "name": "hostDisconnected",
              "privacy": "public"
            }
          ]
        }
      ],
      "exports": [
        {
          "kind": "js",
          "name": "SelectionController",
          "declaration": {
            "name": "SelectionController",
            "module": "src/components/combo/controllers/selection.ts"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "src/components/combo/validators.ts",
      "declarations": [
        {
          "kind": "variable",
          "name": "comboValidators",
          "type": {
            "text": "Validator<IgcComboComponent>[]"
          },
          "default": "[ { key: 'valueMissing', message: messages.required, isValid: ({ required, value }) => required ? Array.isArray(value) && value.length > 0 : true, }, ]"
        }
      ],
      "exports": [
        {
          "kind": "js",
          "name": "comboValidators",
          "declaration": {
            "name": "comboValidators",
            "module": "src/components/combo/validators.ts"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "src/components/combo/combo.ts",
      "declarations": [
        {
          "kind": "class",
          "description": "The Combo component is similar to the Select component in that it provides a list of options from which the user can make a selection.\nIn contrast to the Select component, the Combo component displays all options in a virtualized list of items,\nmeaning the combo box can simultaneously show thousands of options, where one or more options can be selected.\nAdditionally, users can create custom item templates, allowing for robust data visualization.\nThe Combo component features case-sensitive filtering, grouping, complex data binding, dynamic addition of values and more.",
          "name": "IgcComboComponent",
          "cssParts": [
            {
              "description": "The encapsulated text label of the combo.",
              "name": "label"
            },
            {
              "description": "The main input field of the combo.",
              "name": "input"
            },
            {
              "description": "The native input of the main input field of the combo.",
              "name": "native-input"
            },
            {
              "description": "The prefix wrapper of the combo.",
              "name": "prefix"
            },
            {
              "description": "The suffix wrapper of the combo.",
              "name": "suffix"
            },
            {
              "description": "The toggle icon wrapper of the combo.",
              "name": "toggle-icon"
            },
            {
              "description": "The clear icon wrapper of the combo.",
              "name": "clear-icon"
            },
            {
              "description": "The case icon wrapper of the combo.",
              "name": "case-icon"
            },
            {
              "description": "The helper text wrapper of the combo.",
              "name": "helper-text"
            },
            {
              "description": "The search input field of the combo.",
              "name": "search-input"
            },
            {
              "description": "The list of options wrapper of the combo.",
              "name": "list-wrapper"
            },
            {
              "description": "The list of options box of the combo.",
              "name": "list"
            },
            {
              "description": "Represents each item in the list of options of the combo.",
              "name": "item"
            },
            {
              "description": "Represents each header in the list of options of the combo.",
              "name": "group-header"
            },
            {
              "description": "Appended to the item parts list when the item is active of the combo.",
              "name": "active"
            },
            {
              "description": "Appended to the item parts list when the item is selected of the combo.",
              "name": "selected"
            },
            {
              "description": "Represents each checkbox of each list item of the combo.",
              "name": "checkbox"
            },
            {
              "description": "Represents the checkbox indicator of each list item of the combo.",
              "name": "checkbox-indicator"
            },
            {
              "description": "Appended to checkbox parts list when checkbox is checked in the combo.",
              "name": "checked"
            },
            {
              "description": "The container holding the header content of the combo.",
              "name": "header"
            },
            {
              "description": "The container holding the footer content of the combo.",
              "name": "footer"
            },
            {
              "description": "The container holding the empty content of the combo.",
              "name": "empty"
            }
          ],
          "slots": [
            {
              "description": "Renders content before the input of the combo.",
              "name": "prefix"
            },
            {
              "description": "Renders content after the input of the combo.",
              "name": "suffix"
            },
            {
              "description": "Renders a container before the list of options of the combo.",
              "name": "header"
            },
            {
              "description": "Renders a container after the list of options of the combo.",
              "name": "footer"
            },
            {
              "description": "Renders content below the input of the combo.",
              "name": "helper-text"
            },
            {
              "description": "Renders content inside the suffix container of the combo.",
              "name": "toggle-icon"
            },
            {
              "description": "Renders content inside the suffix container of the combo.",
              "name": "clear-icon"
            },
            {
              "description": "Renders content when the required validation fails.",
              "name": "value-missing"
            },
            {
              "description": "Renders content when setCustomValidity(message) is set.",
              "name": "custom-error"
            },
            {
              "description": "Renders content when the component is in invalid state (validity.valid = false).",
              "name": "invalid"
            }
          ],
          "members": [
            {
              "kind": "field",
              "name": "tagName",
              "type": {
                "text": "string"
              },
              "privacy": "public",
              "static": true,
              "readonly": true,
              "default": "'igc-combo'"
            },
            {
              "kind": "method",
              "name": "register",
              "privacy": "public",
              "static": true
            },
            {
              "kind": "field",
              "name": "__validators",
              "type": {
                "text": "Validator[]"
              },
              "privacy": "protected",
              "readonly": true,
              "inheritedFrom": {
                "name": "BaseFormAssociated",
                "module": "src/components/common/mixins/forms/associated.ts"
              }
            },
            {
              "kind": "field",
              "name": "_rootClickController",
              "privacy": "private",
              "readonly": true
            },
            {
              "kind": "field",
              "name": "_formValue",
              "type": {
                "text": "FormValue<unknown>"
              },
              "privacy": "protected",
              "readonly": true,
              "inheritedFrom": {
                "name": "BaseFormAssociated",
                "module": "src/components/common/mixins/forms/associated.ts"
              }
            },
            {
              "kind": "field",
              "name": "_data",
              "type": {
                "text": "T[]"
              },
              "privacy": "private",
              "default": "[]"
            },
            {
              "kind": "field",
              "name": "_valueKey",
              "type": {
                "text": "Keys<T> | undefined"
              },
              "privacy": "private"
            },
            {
              "kind": "field",
              "name": "_displayKey",
              "type": {
                "text": "Keys<T> | undefined"
              },
              "privacy": "private"
            },
            {
              "kind": "field",
              "name": "_groupKey",
              "type": {
                "text": "Keys<T> | undefined"
              },
              "privacy": "private"
            },
            {
              "kind": "field",
              "name": "_disableFiltering",
              "type": {
                "text": "boolean"
              },
              "privacy": "private",
              "default": "false"
            },
            {
              "kind": "field",
              "name": "_singleSelect",
              "type": {
                "text": "boolean"
              },
              "privacy": "private",
              "default": "false"
            },
            {
              "kind": "field",
              "name": "_groupSorting",
              "type": {
                "text": "GroupingDirection"
              },
              "privacy": "private",
              "default": "'asc'",
              "expandedType": {
                "text": "'asc' | 'desc' | 'none'"
              }
            },
            {
              "kind": "field",
              "name": "_filteringOptions",
              "type": {
                "text": "FilteringOptions<T>"
              },
              "privacy": "private",
              "default": "{ filterKey: this.displayKey, caseSensitive: false, matchDiacritics: false, }"
            },
            {
              "kind": "field",
              "name": "_activeDescendant",
              "type": {
                "text": "string"
              },
              "privacy": "private"
            },
            {
              "kind": "field",
              "name": "_displayValue",
              "type": {
                "text": "string"
              },
              "privacy": "private",
              "default": "''"
            },
            {
              "kind": "field",
              "name": "_state",
              "privacy": "protected",
              "default": "new DataController<T>(this)"
            },
            {
              "kind": "field",
              "name": "_selection",
              "privacy": "protected",
              "default": "new SelectionController<T>(this, this._state)"
            },
            {
              "kind": "field",
              "name": "_navigation",
              "privacy": "protected",
              "default": "new NavigationController<T>(this, this._state)"
            },
            {
              "kind": "field",
              "name": "inputSuffix",
              "type": {
                "text": "HTMLElement[]"
              },
              "privacy": "protected"
            },
            {
              "kind": "field",
              "name": "inputPrefix",
              "type": {
                "text": "HTMLElement[]"
              },
              "privacy": "protected"
            },
            {
              "kind": "field",
              "name": "_searchInput",
              "type": {
                "text": "IgcInputComponent"
              },
              "privacy": "protected"
            },
            {
              "kind": "field",
              "name": "_input",
              "type": {
                "text": "IgcInputComponent"
              },
              "privacy": "private"
            },
            {
              "kind": "field",
              "name": "_list",
              "type": {
                "text": "IgcComboListComponent"
              },
              "privacy": "private"
            },
            {
              "kind": "field",
              "name": "data",
              "privacy": "public",
              "description": "The data source used to generate the list of options."
            },
            {
              "kind": "field",
              "name": "outlined",
              "type": {
                "text": "boolean"
              },
              "privacy": "public",
              "default": "false",
              "description": "The outlined attribute of the control.",
              "attribute": "outlined",
              "reflects": true
            },
            {
              "kind": "field",
              "name": "singleSelect",
              "privacy": "public",
              "description": "Enables single selection mode and moves item filtering to the main input.",
              "default": "false",
              "attribute": "single-select",
              "type": {
                "text": "boolean"
              },
              "reflects": true
            },
            {
              "kind": "field",
              "name": "autofocus",
              "type": {
                "text": "boolean"
              },
              "privacy": "public",
              "description": "The autofocus attribute of the control.",
              "attribute": "autofocus"
            },
            {
              "kind": "field",
              "name": "autofocusList",
              "type": {
                "text": "boolean"
              },
              "privacy": "public",
              "default": "false",
              "description": "Focuses the list of options when the menu opens.",
              "attribute": "autofocus-list"
            },
            {
              "kind": "field",
              "name": "label",
              "type": {
                "text": "string"
              },
              "privacy": "public",
              "description": "The label attribute of the control.",
              "attribute": "label"
            },
            {
              "kind": "field",
              "name": "placeholder",
              "type": {
                "text": "string"
              },
              "privacy": "public",
              "description": "The placeholder attribute of the control.",
              "attribute": "placeholder"
            },
            {
              "kind": "field",
              "name": "placeholderSearch",
              "type": {
                "text": "string"
              },
              "privacy": "public",
              "default": "'Search'",
              "description": "The placeholder attribute of the search input.",
              "attribute": "placeholder-search"
            },
            {
              "kind": "field",
              "name": "open",
              "type": {
                "text": "boolean"
              },
              "privacy": "public",
              "default": "false",
              "description": "Sets the open state of the component.",
              "attribute": "open",
              "reflects": true
            },
            {
              "kind": "field",
              "name": "valueKey",
              "privacy": "public",
              "description": "The key in the data source used when selecting items.",
              "attribute": "value-key"
            },
            {
              "kind": "field",
              "name": "displayKey",
              "privacy": "public",
              "description": "The key in the data source used to display items in the list.",
              "attribute": "display-key"
            },
            {
              "kind": "field",
              "name": "groupKey",
              "privacy": "public",
              "description": "The key in the data source used to group items in the list.",
              "attribute": "group-key"
            },
            {
              "kind": "field",
              "name": "groupSorting",
              "privacy": "public",
              "description": "Sorts the items in each group by ascending or descending order.",
              "default": "asc",
              "type": {
                "text": "\"asc\" | \"desc\" | \"none\""
              },
              "attribute": "group-sorting"
            },
            {
              "kind": "field",
              "name": "filteringOptions",
              "privacy": "public",
              "description": "An object that configures the filtering of the combo.",
              "type": {
                "text": "FilteringOptions<T>"
              },
              "parameters": [
                {
                  "description": "The key in the data source used when filtering the list of options.",
                  "name": "filterKey"
                },
                {
                  "description": "Determines whether the filtering operation should be case sensitive.",
                  "name": "caseSensitive"
                },
                {
                  "description": "-If true, the filter distinguishes between accented letters and their base letters.",
                  "name": "matchDiacritics"
                }
              ],
              "attribute": "filtering-options"
            },
            {
              "kind": "field",
              "name": "caseSensitiveIcon",
              "type": {
                "text": "boolean"
              },
              "privacy": "public",
              "default": "false",
              "description": "Enables the case sensitive search icon in the filtering input.",
              "attribute": "case-sensitive-icon"
            },
            {
              "kind": "field",
              "name": "disableFiltering",
              "privacy": "public",
              "description": "Disables the filtering of the list of options.",
              "default": "false",
              "attribute": "disable-filtering",
              "type": {
                "text": "boolean"
              }
            },
            {
              "kind": "field",
              "name": "itemTemplate",
              "type": {
                "text": "ComboItemTemplate<T>"
              },
              "privacy": "public",
              "description": "The template used for the content of each combo item."
            },
            {
              "kind": "field",
              "name": "groupHeaderTemplate",
              "type": {
                "text": "ComboItemTemplate<T>"
              },
              "privacy": "public",
              "description": "The template used for the content of each combo group header."
            },
            {
              "kind": "field",
              "name": "value",
              "privacy": "public",
              "description": "Returns the current selection as a list of comma separated values,\nrepresented by the value key, when provided.",
              "attribute": "value",
              "type": {
                "text": "ComboValue<T>[]"
              }
            },
            {
              "kind": "method",
              "name": "_updateSelection",
              "privacy": "protected"
            },
            {
              "kind": "method",
              "name": "toggleDirectiveChange",
              "privacy": "protected"
            },
            {
              "kind": "method",
              "name": "_restoreDefaultValue",
              "privacy": "protected",
              "return": {
                "type": {
                  "text": "void"
                }
              },
              "inheritedFrom": {
                "name": "BaseFormAssociated",
                "module": "src/components/common/mixins/forms/associated.ts"
              }
            },
            {
              "kind": "method",
              "name": "_setDefaultValue",
              "privacy": "protected",
              "return": {
                "type": {
                  "text": "void"
                }
              },
              "parameters": [
                {
                  "name": "current",
                  "type": {
                    "text": "string | null"
                  }
                }
              ],
              "inheritedFrom": {
                "name": "BaseFormAssociated",
                "module": "src/components/common/mixins/forms/associated.ts"
              }
            },
            {
              "kind": "method",
              "name": "_setFormValue",
              "privacy": "protected",
              "return": {
                "type": {
                  "text": "void"
                }
              },
              "parameters": [
                {
                  "name": "value",
                  "type": {
                    "text": "FormValueType"
                  }
                },
                {
                  "name": "state",
                  "optional": true,
                  "type": {
                    "text": "FormValueType"
                  }
                }
              ],
              "inheritedFrom": {
                "name": "BaseFormAssociated",
                "module": "src/components/common/mixins/forms/associated.ts"
              }
            },
            {
              "kind": "method",
              "name": "resetSearchTerm",
              "privacy": "protected"
            },
            {
              "kind": "method",
              "name": "updateValue",
              "privacy": "protected",
              "parameters": [
                {
                  "name": "initial",
                  "default": "false"
                }
              ]
            },
            {
              "kind": "method",
              "name": "focus",
              "privacy": "public",
              "parameters": [
                {
                  "name": "options",
                  "optional": true,
                  "type": {
                    "text": "FocusOptions"
                  }
                }
              ],
              "description": "Sets focus on the component."
            },
            {
              "kind": "method",
              "name": "blur",
              "privacy": "public",
              "description": "Removes focus from the component."
            },
            {
              "kind": "field",
              "name": "selection",
              "type": {
                "text": "T[]"
              },
              "privacy": "public",
              "description": "Returns the current selection as an array of objects as provided in the `data` source.",
              "readonly": true
            },
            {
              "kind": "method",
              "name": "select",
              "privacy": "public",
              "parameters": [
                {
                  "name": "items",
                  "optional": true,
                  "type": {
                    "text": "Item<T> | Items<T>"
                  },
                  "description": "One or more items to be selected. Multiple items should be passed as an array.\nWhen valueKey is specified, the corresponding value should be used in place of the item reference."
                }
              ],
              "description": "Selects option(s) in the list by either reference or valueKey.\nIf not argument is provided all items will be selected."
            },
            {
              "kind": "method",
              "name": "deselect",
              "privacy": "public",
              "parameters": [
                {
                  "name": "items",
                  "optional": true,
                  "type": {
                    "text": "Item<T> | Items<T>"
                  },
                  "description": "One or more items to be deselected. Multiple items should be passed as an array.\nWhen valueKey is specified, the corresponding value should be used in place of the item reference."
                }
              ],
              "description": "Deselects option(s) in the list by either reference or valueKey.\nIf not argument is provided all items will be deselected."
            },
            {
              "kind": "method",
              "name": "handleMainInput",
              "privacy": "protected",
              "parameters": [
                {
                  "name": "{ detail }",
                  "type": {
                    "text": "CustomEvent<string>"
                  }
                }
              ]
            },
            {
              "kind": "method",
              "name": "_handleBlur",
              "privacy": "private"
            },
            {
              "kind": "method",
              "name": "handleSearchInput",
              "privacy": "protected",
              "parameters": [
                {
                  "name": "{ detail }",
                  "type": {
                    "text": "CustomEvent<string>"
                  }
                }
              ]
            },
            {
              "kind": "method",
              "name": "handleOpening",
              "privacy": "protected"
            },
            {
              "kind": "method",
              "name": "handleClosing",
              "privacy": "protected",
              "return": {
                "type": {
                  "text": "boolean"
                }
              }
            },
            {
              "kind": "method",
              "name": "_show",
              "privacy": "protected",
              "parameters": [
                {
                  "name": "emitEvent",
                  "default": "true"
                }
              ]
            },
            {
              "kind": "method",
              "name": "show",
              "privacy": "public",
              "return": {
                "type": {
                  "text": "Promise<boolean>"
                }
              },
              "description": "Shows the list of options."
            },
            {
              "kind": "method",
              "name": "_hide",
              "privacy": "protected",
              "parameters": [
                {
                  "name": "emitEvent",
                  "default": "true"
                }
              ]
            },
            {
              "kind": "method",
              "name": "hide",
              "privacy": "public",
              "return": {
                "type": {
                  "text": "Promise<boolean>"
                }
              },
              "description": "Hides the list of options."
            },
            {
              "kind": "method",
              "name": "_toggle",
              "privacy": "protected",
              "parameters": [
                {
                  "name": "emit",
                  "default": "true"
                }
              ]
            },
            {
              "kind": "method",
              "name": "toggle",
              "privacy": "public",
              "return": {
                "type": {
                  "text": "Promise<boolean>"
                }
              },
              "description": "Toggles the list of options."
            },
            {
              "kind": "method",
              "name": "_getActiveDescendantId",
              "privacy": "private",
              "parameters": [
                {
                  "name": "index",
                  "type": {
                    "text": "number"
                  }
                }
              ]
            },
            {
              "kind": "field",
              "name": "itemRenderer",
              "type": {
                "text": "ComboRenderFunction<T>"
              },
              "privacy": "protected"
            },
            {
              "kind": "method",
              "name": "listKeydownHandler",
              "privacy": "protected",
              "parameters": [
                {
                  "name": "event",
                  "type": {
                    "text": "KeyboardEvent"
                  }
                }
              ]
            },
            {
              "kind": "method",
              "name": "itemClickHandler",
              "privacy": "protected",
              "parameters": [
                {
                  "name": "event",
                  "type": {
                    "text": "PointerEvent"
                  }
                }
              ]
            },
            {
              "kind": "method",
              "name": "toggleSelect",
              "privacy": "protected",
              "parameters": [
                {
                  "name": "index",
                  "type": {
                    "text": "number"
                  }
                }
              ]
            },
            {
              "kind": "method",
              "name": "selectByIndex",
              "privacy": "protected",
              "parameters": [
                {
                  "name": "index",
                  "type": {
                    "text": "number"
                  }
                }
              ]
            },
            {
              "kind": "method",
              "name": "clearSingleSelection",
              "privacy": "protected"
            },
            {
              "kind": "method",
              "name": "handleClearIconClick",
              "privacy": "protected",
              "parameters": [
                {
                  "name": "e",
                  "type": {
                    "text": "PointerEvent"
                  }
                }
              ]
            },
            {
              "kind": "method",
              "name": "handleMainInputKeydown",
              "privacy": "protected",
              "parameters": [
                {
                  "name": "e",
                  "type": {
                    "text": "KeyboardEvent"
                  }
                }
              ]
            },
            {
              "kind": "method",
              "name": "handleSearchInputKeydown",
              "privacy": "protected",
              "parameters": [
                {
                  "name": "e",
                  "type": {
                    "text": "KeyboardEvent"
                  }
                }
              ]
            },
            {
              "kind": "method",
              "name": "toggleCaseSensitivity",
              "privacy": "protected"
            },
            {
              "kind": "method",
              "name": "_stopPropagation",
              "privacy": "private",
              "parameters": [
                {
                  "name": "e",
                  "type": {
                    "text": "Event"
                  }
                }
              ]
            },
            {
              "kind": "method",
              "name": "renderToggleIcon",
              "privacy": "private"
            },
            {
              "kind": "method",
              "name": "renderClearIcon",
              "privacy": "private"
            },
            {
              "kind": "method",
              "name": "renderMainInput",
              "privacy": "private"
            },
            {
              "kind": "method",
              "name": "renderSearchInput",
              "privacy": "private"
            },
            {
              "kind": "method",
              "name": "renderEmptyTemplate",
              "privacy": "private"
            },
            {
              "kind": "method",
              "name": "renderList",
              "privacy": "private"
            },
            {
              "kind": "method",
              "name": "renderHelperText",
              "privacy": "private",
              "return": {
                "type": {
                  "text": "TemplateResult"
                }
              }
            },
            {
              "kind": "field",
              "name": "_required",
              "type": {
                "text": "boolean"
              },
              "privacy": "protected",
              "default": "false",
              "inheritedFrom": {
                "name": "FormAssociatedRequiredMixin",
                "module": "src/components/common/mixins/forms/associated-required.ts"
              }
            },
            {
              "kind": "field",
              "name": "required",
              "privacy": "public",
              "description": "When set, makes the component a required field for validation.",
              "default": "false",
              "attribute": "required",
              "type": {
                "text": "boolean"
              },
              "reflects": true,
              "inheritedFrom": {
                "name": "FormAssociatedRequiredMixin",
                "module": "src/components/common/mixins/forms/associated-required.ts"
              }
            },
            {
              "kind": "field",
              "name": "defaultValue",
              "privacy": "public",
              "inheritedFrom": {
                "name": "FormAssociatedMixin",
                "module": "src/components/common/mixins/forms/associated.ts"
              }
            },
            {
              "kind": "field",
              "name": "formAssociated",
              "type": {
                "text": "boolean"
              },
              "privacy": "public",
              "static": true,
              "readonly": true,
              "default": "true",
              "inheritedFrom": {
                "name": "BaseFormAssociated",
                "module": "src/components/common/mixins/forms/associated.ts"
              }
            },
            {
              "kind": "field",
              "name": "__internals",
              "type": {
                "text": "ElementInternals"
              },
              "privacy": "private",
              "inheritedFrom": {
                "name": "BaseFormAssociated",
                "module": "src/components/common/mixins/forms/associated.ts"
              }
            },
            {
              "kind": "field",
              "name": "_disabled",
              "type": {
                "text": "boolean"
              },
              "privacy": "protected",
              "default": "false",
              "inheritedFrom": {
                "name": "BaseFormAssociated",
                "module": "src/components/common/mixins/forms/associated.ts"
              }
            },
            {
              "kind": "field",
              "name": "_invalid",
              "type": {
                "text": "boolean"
              },
              "privacy": "protected",
              "default": "false",
              "inheritedFrom": {
                "name": "BaseFormAssociated",
                "module": "src/components/common/mixins/forms/associated.ts"
              }
            },
            {
              "kind": "field",
              "name": "_dirty",
              "type": {
                "text": "boolean"
              },
              "privacy": "protected",
              "default": "false",
              "inheritedFrom": {
                "name": "BaseFormAssociated",
                "module": "src/components/common/mixins/forms/associated.ts"
              }
            },
            {
              "kind": "field",
              "name": "_pristine",
              "type": {
                "text": "boolean"
              },
              "privacy": "protected",
              "default": "true",
              "inheritedFrom": {
                "name": "BaseFormAssociated",
                "module": "src/components/common/mixins/forms/associated.ts"
              }
            },
            {
              "kind": "field",
              "name": "name",
              "type": {
                "text": "string"
              },
              "privacy": "public",
              "description": "The name attribute of the control.",
              "attribute": "name",
              "reflects": true,
              "inheritedFrom": {
                "name": "BaseFormAssociated",
                "module": "src/components/common/mixins/forms/associated.ts"
              }
            },
            {
              "kind": "field",
              "name": "disabled",
              "privacy": "public",
              "description": "The disabled state of the component.",
              "default": "false",
              "attribute": "disabled",
              "type": {
                "text": "boolean"
              },
              "reflects": true,
              "inheritedFrom": {
                "name": "BaseFormAssociated",
                "module": "src/components/common/mixins/forms/associated.ts"
              }
            },
            {
              "kind": "field",
              "name": "invalid",
              "privacy": "public",
              "description": "Sets the control into invalid state (visual state only).",
              "default": "false",
              "attribute": "invalid",
              "type": {
                "text": "boolean"
              },
              "reflects": true,
              "inheritedFrom": {
                "name": "BaseFormAssociated",
                "module": "src/components/common/mixins/forms/associated.ts"
              }
            },
            {
              "kind": "field",
              "name": "form",
              "type": {
                "text": "HTMLFormElement | null"
              },
              "privacy": "public",
              "description": "Returns the HTMLFormElement associated with this element.",
              "readonly": true,
              "inheritedFrom": {
                "name": "BaseFormAssociated",
                "module": "src/components/common/mixins/forms/associated.ts"
              }
            },
            {
              "kind": "field",
              "name": "validity",
              "type": {
                "text": "ValidityState"
              },
              "privacy": "public",
              "description": "Returns a ValidityState object which represents the different validity states\nthe element can be in, with respect to constraint validation.",
              "readonly": true,
              "inheritedFrom": {
                "name": "BaseFormAssociated",
                "module": "src/components/common/mixins/forms/associated.ts"
              }
            },
            {
              "kind": "field",
              "name": "validationMessage",
              "type": {
                "text": "string"
              },
              "privacy": "public",
              "description": "A string containing the validation message of this element.",
              "readonly": true,
              "inheritedFrom": {
                "name": "BaseFormAssociated",
                "module": "src/components/common/mixins/forms/associated.ts"
              }
            },
            {
              "kind": "field",
              "name": "willValidate",
              "type": {
                "text": "boolean"
              },
              "privacy": "public",
              "description": "A boolean value which returns true if the element is a submittable element\nthat is a candidate for constraint validation.",
              "readonly": true,
              "inheritedFrom": {
                "name": "BaseFormAssociated",
                "module": "src/components/common/mixins/forms/associated.ts"
              }
            },
            {
              "kind": "method",
              "name": "_handleInvalid",
              "privacy": "private",
              "parameters": [
                {
                  "name": "event",
                  "type": {
                    "text": "Event"
                  }
                }
              ],
              "inheritedFrom": {
                "name": "BaseFormAssociated",
                "module": "src/components/common/mixins/forms/associated.ts"
              }
            },
            {
              "kind": "method",
              "name": "_setInvalidState",
              "privacy": "private",
              "return": {
                "type": {
                  "text": "void"
                }
              },
              "inheritedFrom": {
                "name": "BaseFormAssociated",
                "module": "src/components/common/mixins/forms/associated.ts"
              }
            },
            {
              "kind": "method",
              "name": "__runValidators",
              "privacy": "private",
              "inheritedFrom": {
                "name": "BaseFormAssociated",
                "module": "src/components/common/mixins/forms/associated.ts"
              }
            },
            {
              "kind": "method",
              "name": "_validate",
              "privacy": "protected",
              "return": {
                "type": {
                  "text": "void"
                }
              },
              "parameters": [
                {
                  "name": "message",
                  "optional": true,
                  "type": {
                    "text": "string"
                  }
                }
              ],
              "inheritedFrom": {
                "name": "BaseFormAssociated",
                "module": "src/components/common/mixins/forms/associated.ts"
              }
            },
            {
              "kind": "method",
              "name": "_updateValidity",
              "privacy": "protected",
              "parameters": [
                {
                  "name": "error",
                  "optional": true,
                  "type": {
                    "text": "string"
                  }
                }
              ],
              "description": "Executes the component validators and updates the internal validity state.",
              "inheritedFrom": {
                "name": "BaseFormAssociated",
                "module": "src/components/common/mixins/forms/associated.ts"
              }
            },
            {
              "kind": "method",
              "name": "formAssociatedCallback",
              "privacy": "protected",
              "return": {
                "type": {
                  "text": "void"
                }
              },
              "parameters": [
                {
                  "name": "_form",
                  "type": {
                    "text": "HTMLFormElement"
                  }
                }
              ],
              "inheritedFrom": {
                "name": "BaseFormAssociated",
                "module": "src/components/common/mixins/forms/associated.ts"
              }
            },
            {
              "kind": "method",
              "name": "formDisabledCallback",
              "privacy": "protected",
              "return": {
                "type": {
                  "text": "void"
                }
              },
              "parameters": [
                {
                  "name": "state",
                  "type": {
                    "text": "boolean"
                  }
                }
              ],
              "inheritedFrom": {
                "name": "BaseFormAssociated",
                "module": "src/components/common/mixins/forms/associated.ts"
              }
            },
            {
              "kind": "method",
              "name": "formResetCallback",
              "privacy": "protected",
              "return": {
                "type": {
                  "text": "void"
                }
              },
              "inheritedFrom": {
                "name": "BaseFormAssociated",
                "module": "src/components/common/mixins/forms/associated.ts"
              }
            },
            {
              "kind": "method",
              "name": "formStateRestoreCallback",
              "privacy": "protected",
              "return": {
                "type": {
                  "text": "void"
                }
              },
              "parameters": [
                {
                  "name": "_state",
                  "type": {
                    "text": "FormValueType"
                  }
                },
                {
                  "name": "_mode",
                  "type": {
                    "text": "FormRestoreMode"
                  }
                }
              ],
              "inheritedFrom": {
                "name": "BaseFormAssociated",
                "module": "src/components/common/mixins/forms/associated.ts"
              }
            },
            {
              "kind": "method",
              "name": "reportValidity",
              "privacy": "public",
              "description": "Checks for validity of the control and shows the browser message if it invalid.",
              "inheritedFrom": {
                "name": "BaseFormAssociated",
                "module": "src/components/common/mixins/forms/associated.ts"
              }
            },
            {
              "kind": "method",
              "name": "checkValidity",
              "privacy": "public",
              "description": "Checks for validity of the control and emits the invalid event if it invalid.",
              "inheritedFrom": {
                "name": "BaseFormAssociated",
                "module": "src/components/common/mixins/forms/associated.ts"
              }
            },
            {
              "kind": "method",
              "name": "setCustomValidity",
              "privacy": "public",
              "parameters": [
                {
                  "name": "message",
                  "type": {
                    "text": "string"
                  }
                }
              ],
              "description": "Sets a custom validation message for the control.\nAs long as `message` is not empty, the control is considered invalid.",
              "inheritedFrom": {
                "name": "BaseFormAssociated",
                "module": "src/components/common/mixins/forms/associated.ts"
              }
            },
            {
              "kind": "method",
              "name": "addEventListener",
              "privacy": "public",
              "return": {
                "type": {
                  "text": "void"
                }
              },
              "parameters": [
                {
                  "name": "type",
                  "type": {
                    "text": "K"
                  }
                },
                {
                  "name": "listener",
                  "type": {
                    "text": "(this: HTMLElement, ev: M[K]) => any"
                  }
                },
                {
                  "name": "options",
                  "optional": true,
                  "type": {
                    "text": "boolean | AddEventListenerOptions"
                  }
                }
              ],
              "inheritedFrom": {
                "name": "EventEmitterMixin",
                "module": "src/components/common/mixins/event-emitter.ts"
              }
            },
            {
              "kind": "method",
              "name": "removeEventListener",
              "privacy": "public",
              "return": {
                "type": {
                  "text": "void"
                }
              },
              "parameters": [
                {
                  "name": "type",
                  "type": {
                    "text": "K"
                  }
                },
                {
                  "name": "listener",
                  "type": {
                    "text": "(this: HTMLElement, ev: M[K]) => any"
                  }
                },
                {
                  "name": "options",
                  "optional": true,
                  "type": {
                    "text": "boolean | EventListenerOptions"
                  }
                }
              ],
              "inheritedFrom": {
                "name": "EventEmitterMixin",
                "module": "src/components/common/mixins/event-emitter.ts"
              }
            },
            {
              "kind": "method",
              "name": "emitEvent",
              "privacy": "private",
              "return": {
                "type": {
                  "text": "boolean"
                }
              },
              "parameters": [
                {
                  "name": "type",
                  "type": {
                    "text": "K"
                  }
                },
                {
                  "name": "eventInitDict",
                  "optional": true,
                  "type": {
                    "text": "CustomEventInit<D>"
                  }
                }
              ],
              "inheritedFrom": {
                "name": "EventEmitterMixin",
                "module": "src/components/common/mixins/event-emitter.ts"
              }
            }
          ],
          "events": [
            {
              "description": "Emitted when the control's selection has changed.",
              "name": "igcChange"
            },
            {
              "description": "Emitted just before the list of options is opened.",
              "name": "igcOpening"
            },
            {
              "description": "Emitted after the list of options is opened.",
              "name": "igcOpened"
            },
            {
              "description": "Emitter just before the list of options is closed.",
              "name": "igcClosing"
            },
            {
              "description": "Emitted after the list of options is closed.",
              "name": "igcClosed"
            },
            {
              "type": {
                "text": "CustomEvent"
              },
              "inheritedFrom": {
                "name": "EventEmitterMixin",
                "module": "src/components/common/mixins/event-emitter.ts"
              }
            }
          ],
          "attributes": [
            {
              "name": "outlined",
              "type": {
                "text": "boolean"
              },
              "default": "false",
              "description": "The outlined attribute of the control.",
              "fieldName": "outlined",
              "attribute": "outlined"
            },
            {
              "name": "single-select",
              "description": "Enables single selection mode and moves item filtering to the main input.",
              "default": "false",
              "fieldName": "singleSelect",
              "attribute": "single-select",
              "type": {
                "text": "boolean"
              }
            },
            {
              "name": "autofocus",
              "type": {
                "text": "boolean"
              },
              "description": "The autofocus attribute of the control.",
              "fieldName": "autofocus",
              "attribute": "autofocus"
            },
            {
              "name": "autofocus-list",
              "type": {
                "text": "boolean"
              },
              "default": "false",
              "description": "Focuses the list of options when the menu opens.",
              "fieldName": "autofocusList",
              "attribute": "autofocus-list"
            },
            {
              "name": "label",
              "type": {
                "text": "string"
              },
              "description": "The label attribute of the control.",
              "fieldName": "label",
              "attribute": "label"
            },
            {
              "name": "placeholder",
              "type": {
                "text": "string"
              },
              "description": "The placeholder attribute of the control.",
              "fieldName": "placeholder",
              "attribute": "placeholder"
            },
            {
              "name": "placeholder-search",
              "type": {
                "text": "string"
              },
              "default": "'Search'",
              "description": "The placeholder attribute of the search input.",
              "fieldName": "placeholderSearch",
              "attribute": "placeholder-search"
            },
            {
              "name": "open",
              "type": {
                "text": "boolean"
              },
              "default": "false",
              "description": "Sets the open state of the component.",
              "fieldName": "open",
              "attribute": "open"
            },
            {
              "name": "value-key",
              "description": "The key in the data source used when selecting items.",
              "fieldName": "valueKey",
              "attribute": "value-key"
            },
            {
              "name": "display-key",
              "description": "The key in the data source used to display items in the list.",
              "fieldName": "displayKey",
              "attribute": "display-key"
            },
            {
              "name": "group-key",
              "description": "The key in the data source used to group items in the list.",
              "fieldName": "groupKey",
              "attribute": "group-key"
            },
            {
              "name": "group-sorting",
              "description": "Sorts the items in each group by ascending or descending order.",
              "default": "asc",
              "type": {
                "text": "\"asc\" | \"desc\" | \"none\""
              },
              "fieldName": "groupSorting",
              "attribute": "group-sorting"
            },
            {
              "name": "filtering-options",
              "description": "An object that configures the filtering of the combo.",
              "type": {
                "text": "FilteringOptions<T>"
              },
              "parameters": [
                {
                  "description": "The key in the data source used when filtering the list of options.",
                  "name": "filterKey"
                },
                {
                  "description": "Determines whether the filtering operation should be case sensitive.",
                  "name": "caseSensitive"
                },
                {
                  "description": "-If true, the filter distinguishes between accented letters and their base letters.",
                  "name": "matchDiacritics"
                }
              ],
              "fieldName": "filteringOptions",
              "attribute": "filtering-options"
            },
            {
              "name": "case-sensitive-icon",
              "type": {
                "text": "boolean"
              },
              "default": "false",
              "description": "Enables the case sensitive search icon in the filtering input.",
              "fieldName": "caseSensitiveIcon",
              "attribute": "case-sensitive-icon"
            },
            {
              "name": "disable-filtering",
              "description": "Disables the filtering of the list of options.",
              "default": "false",
              "fieldName": "disableFiltering",
              "attribute": "disable-filtering",
              "type": {
                "text": "boolean"
              }
            },
            {
              "name": "value",
              "description": "Returns the current selection as a list of comma separated values,\nrepresented by the value key, when provided.",
              "fieldName": "value",
              "attribute": "value",
              "type": {
                "text": "ComboValue<T>[]"
              }
            },
            {
              "name": "required",
              "description": "When set, makes the component a required field for validation.",
              "default": "false",
              "fieldName": "required",
              "attribute": "required",
              "type": {
                "text": "boolean"
              },
              "inheritedFrom": {
                "name": "FormAssociatedRequiredMixin",
                "module": "src/components/common/mixins/forms/associated-required.ts"
              }
            },
            {
              "name": "name",
              "type": {
                "text": "string"
              },
              "description": "The name attribute of the control.",
              "fieldName": "name",
              "attribute": "name",
              "inheritedFrom": {
                "name": "BaseFormAssociated",
                "module": "src/components/common/mixins/forms/associated.ts"
              }
            },
            {
              "name": "disabled",
              "description": "The disabled state of the component.",
              "default": "false",
              "fieldName": "disabled",
              "attribute": "disabled",
              "type": {
                "text": "boolean"
              },
              "inheritedFrom": {
                "name": "BaseFormAssociated",
                "module": "src/components/common/mixins/forms/associated.ts"
              }
            },
            {
              "name": "invalid",
              "description": "Sets the control into invalid state (visual state only).",
              "default": "false",
              "fieldName": "invalid",
              "attribute": "invalid",
              "type": {
                "text": "boolean"
              },
              "inheritedFrom": {
                "name": "BaseFormAssociated",
                "module": "src/components/common/mixins/forms/associated.ts"
              }
            }
          ],
          "mixins": [
            {
              "name": "FormAssociatedRequiredMixin",
              "module": "/src/components/common/mixins/forms/associated-required.js"
            },
            {
              "name": "EventEmitterMixin",
              "module": "/src/components/common/mixins/event-emitter.js"
            }
          ],
          "superclass": {
            "name": "LitElement",
            "package": "lit"
          },
          "tagName": "igc-combo",
          "customElement": true
        }
      ],
      "exports": [
        {
          "kind": "js",
          "name": "default",
          "declaration": {
            "name": "IgcComboComponent",
            "module": "src/components/combo/combo.ts"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "src/components/date-picker/validators.ts",
      "declarations": [
        {
          "kind": "variable",
          "name": "datePickerValidators",
          "type": {
            "text": "Validator<IgcDatePickerComponent>[]"
          },
          "default": "[ requiredValidator, minDateValidator, maxDateValidator, { key: 'badInput', message: ({ value }) => formatString(messages.disabledDate, value), isValid: ({ value, disabledDates }) => value && disabledDates ? !isDateInRanges(value, disabledDates) : true, }, ]"
        }
      ],
      "exports": [
        {
          "kind": "js",
          "name": "datePickerValidators",
          "declaration": {
            "name": "datePickerValidators",
            "module": "src/components/date-picker/validators.ts"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "src/components/date-picker/date-picker.ts",
      "declarations": [
        {
          "kind": "class",
          "description": "igc-date-picker is a feature rich component used for entering a date through manual text input or\nchoosing date values from a calendar dialog that pops up.",
          "name": "IgcDatePickerComponent",
          "cssParts": [
            {
              "description": "The label wrapper that renders content above the target input.",
              "name": "label"
            },
            {
              "description": "The main wrapper that holds all main input elements.",
              "name": "container"
            },
            {
              "description": "The native input element.",
              "name": "input"
            },
            {
              "description": "The prefix wrapper.",
              "name": "prefix"
            },
            {
              "description": "The suffix wrapper.",
              "name": "suffix"
            },
            {
              "description": "The calendar icon wrapper for closed state.",
              "name": "calendar-icon"
            },
            {
              "description": "The calendar icon wrapper for opened state.",
              "name": "calendar-icon-open"
            },
            {
              "description": "The clear icon wrapper.",
              "name": "clear-icon"
            },
            {
              "description": "The actions wrapper.",
              "name": "actions"
            },
            {
              "description": "The helper-text wrapper that renders content below the target input.",
              "name": "helper-text"
            },
            {
              "description": "The calendar header element.",
              "name": "header"
            },
            {
              "description": "The calendar header title element.",
              "name": "header-title"
            },
            {
              "description": "The calendar header date element.",
              "name": "header-date"
            },
            {
              "description": "The calendar content element which contains the views and navigation elements.",
              "name": "calendar-content"
            },
            {
              "description": "The calendar navigation container element.",
              "name": "navigation"
            },
            {
              "description": "The calendar months navigation button element.",
              "name": "months-navigation"
            },
            {
              "description": "The calendar years navigation button element.",
              "name": "years-navigation"
            },
            {
              "description": "The calendar years range element.",
              "name": "years-range"
            },
            {
              "description": "The calendar navigation buttons container.",
              "name": "navigation-buttons"
            },
            {
              "description": "The calendar previous/next navigation button.",
              "name": "navigation-button"
            },
            {
              "description": "The calendar days view container element.",
              "name": "days-view-container"
            },
            {
              "description": "The calendar days view element.",
              "name": "days-view"
            },
            {
              "description": "The calendar months view element.",
              "name": "months-view"
            },
            {
              "description": "The calendar years view element.",
              "name": "years-view"
            },
            {
              "description": "The calendar days row element.",
              "name": "days-row"
            },
            {
              "description": "The calendar week header label element.",
              "name": "calendar-label"
            },
            {
              "description": "The calendar week number element.",
              "name": "week-number"
            },
            {
              "description": "The calendar week number inner element.",
              "name": "week-number-inner"
            },
            {
              "description": "The calendar date element.",
              "name": "date"
            },
            {
              "description": "The calendar date inner element.",
              "name": "date-inner"
            },
            {
              "description": "The calendar first selected date element in range selection.",
              "name": "first"
            },
            {
              "description": "The calendar last selected date element in range selection.",
              "name": "last"
            },
            {
              "description": "The calendar inactive date element.",
              "name": "inactive"
            },
            {
              "description": "The calendar hidden date element.",
              "name": "hidden"
            },
            {
              "description": "The calendar weekend date element.",
              "name": "weekend"
            },
            {
              "description": "The calendar range selected element.",
              "name": "range"
            },
            {
              "description": "The calendar special date element.",
              "name": "special"
            },
            {
              "description": "The calendar disabled date element.",
              "name": "disabled"
            },
            {
              "description": "The calendar single selected date element.",
              "name": "single"
            },
            {
              "description": "The calendar range selection preview date element.",
              "name": "preview"
            },
            {
              "description": "The calendar month element.",
              "name": "month"
            },
            {
              "description": "The calendar month inner element.",
              "name": "month-inner"
            },
            {
              "description": "The calendar year element.",
              "name": "year"
            },
            {
              "description": "The calendar year inner element.",
              "name": "year-inner"
            },
            {
              "description": "The calendar selected state for element(s). Applies to date, month and year elements.",
              "name": "selected"
            },
            {
              "description": "The calendar current state for element(s). Applies to date, month and year elements.",
              "name": "current"
            }
          ],
          "slots": [
            {
              "description": "Renders content before the input.",
              "name": "prefix"
            },
            {
              "description": "Renders content after the input.",
              "name": "suffix"
            },
            {
              "description": "Renders content below the input.",
              "name": "helper-text"
            },
            {
              "description": "Renders content when the value is in the disabledDates ranges.",
              "name": "bad-input"
            },
            {
              "description": "Renders content when the required validation fails.",
              "name": "value-missing"
            },
            {
              "description": "Renders content when the max validation fails.",
              "name": "range-overflow"
            },
            {
              "description": "Renders content when the min validation fails.",
              "name": "range-underflow"
            },
            {
              "description": "Renders content when setCustomValidity(message) is set.",
              "name": "custom-error"
            },
            {
              "description": "Renders content when the component is in invalid state (validity.valid = false).",
              "name": "invalid"
            },
            {
              "description": "Renders content in the calendar title.",
              "name": "title"
            },
            {
              "description": "Renders content instead of the current date/range in the calendar header.",
              "name": "header-date"
            },
            {
              "description": "Renders a clear icon template.",
              "name": "clear-icon"
            },
            {
              "description": "Renders the icon/content for the calendar picker.",
              "name": "calendar-icon"
            },
            {
              "description": "Renders the icon/content for the picker in open state.",
              "name": "calendar-icon-open"
            },
            {
              "description": "Renders content in the action part of the picker in open state.",
              "name": "actions"
            }
          ],
          "members": [
            {
              "kind": "field",
              "name": "tagName",
              "type": {
                "text": "string"
              },
              "privacy": "public",
              "static": true,
              "readonly": true,
              "default": "'igc-date-picker'"
            },
            {
              "kind": "method",
              "name": "register",
              "privacy": "public",
              "static": true,
              "return": {
                "type": {
                  "text": "void"
                }
              }
            },
            {
              "kind": "field",
              "name": "_increment",
              "privacy": "private",
              "static": true,
              "readonly": true
            },
            {
              "kind": "field",
              "name": "_inputId",
              "privacy": "protected",
              "default": "`date-picker-${IgcDatePickerComponent._increment()}`"
            },
            {
              "kind": "field",
              "name": "_themes",
              "privacy": "private",
              "readonly": true
            },
            {
              "kind": "field",
              "name": "__validators",
              "type": {
                "text": "Validator[]"
              },
              "privacy": "protected",
              "readonly": true,
              "inheritedFrom": {
                "name": "BaseFormAssociated",
                "module": "src/components/common/mixins/forms/associated.ts"
              }
            },
            {
              "kind": "field",
              "name": "_activeDate",
              "type": {
                "text": "Date | null"
              },
              "privacy": "private",
              "default": "null"
            },
            {
              "kind": "field",
              "name": "_min",
              "type": {
                "text": "Date | null"
              },
              "privacy": "private",
              "default": "null"
            },
            {
              "kind": "field",
              "name": "_max",
              "type": {
                "text": "Date | null"
              },
              "privacy": "private",
              "default": "null"
            },
            {
              "kind": "field",
              "name": "_disabledDates",
              "type": {
                "text": "DateRangeDescriptor[] | undefined"
              },
              "privacy": "private"
            },
            {
              "kind": "field",
              "name": "_dateConstraints",
              "type": {
                "text": "DateRangeDescriptor[] | undefined"
              },
              "privacy": "private"
            },
            {
              "kind": "field",
              "name": "_displayFormat",
              "type": {
                "text": "string | undefined"
              },
              "privacy": "private"
            },
            {
              "kind": "field",
              "name": "_inputFormat",
              "type": {
                "text": "string | undefined"
              },
              "privacy": "private"
            },
            {
              "kind": "field",
              "name": "_formValue",
              "type": {
                "text": "FormValue<unknown>"
              },
              "privacy": "protected",
              "readonly": true,
              "inheritedFrom": {
                "name": "BaseFormAssociated",
                "module": "src/components/common/mixins/forms/associated.ts"
              }
            },
            {
              "kind": "field",
              "name": "_rootClickController",
              "type": {
                "text": "RootClickController"
              },
              "privacy": "protected",
              "readonly": true,
              "inheritedFrom": {
                "name": "IgcBaseComboBoxLikeComponent",
                "module": "src/components/common/mixins/combo-box.ts"
              }
            },
            {
              "kind": "field",
              "name": "_input",
              "type": {
                "text": "IgcDateTimeInputComponent"
              },
              "privacy": "private",
              "readonly": true
            },
            {
              "kind": "field",
              "name": "_calendar",
              "type": {
                "text": "IgcCalendarComponent"
              },
              "privacy": "private",
              "readonly": true
            },
            {
              "kind": "field",
              "name": "_prefixes",
              "type": {
                "text": "HTMLElement[]"
              },
              "privacy": "private",
              "readonly": true
            },
            {
              "kind": "field",
              "name": "_suffixes",
              "type": {
                "text": "HTMLElement[]"
              },
              "privacy": "private",
              "readonly": true
            },
            {
              "kind": "field",
              "name": "_actions",
              "type": {
                "text": "HTMLElement[]"
              },
              "privacy": "private",
              "readonly": true
            },
            {
              "kind": "field",
              "name": "_headerSlotItems",
              "type": {
                "text": "HTMLElement[]"
              },
              "privacy": "private",
              "readonly": true
            },
            {
              "kind": "field",
              "name": "_isDropDown",
              "type": {
                "text": "boolean"
              },
              "privacy": "private",
              "readonly": true
            },
            {
              "kind": "field",
              "name": "open",
              "type": {
                "text": "boolean"
              },
              "privacy": "public",
              "default": "false",
              "description": "Sets the state of the datepicker dropdown.",
              "attribute": "open",
              "reflects": true,
              "inheritedFrom": {
                "name": "IgcBaseComboBoxLikeComponent",
                "module": "src/components/common/mixins/combo-box.ts"
              }
            },
            {
              "kind": "field",
              "name": "label",
              "type": {
                "text": "string"
              },
              "privacy": "public",
              "description": "The label of the datepicker.",
              "attribute": "label"
            },
            {
              "kind": "field",
              "name": "mode",
              "type": {
                "text": "PickerMode"
              },
              "privacy": "public",
              "default": "'dropdown'",
              "description": "Determines whether the calendar is opened in a dropdown or a modal dialog",
              "attribute": "mode",
              "expandedType": {
                "text": "'dropdown' | 'dialog'"
              }
            },
            {
              "kind": "field",
              "name": "nonEditable",
              "type": {
                "text": "boolean"
              },
              "privacy": "public",
              "default": "false",
              "description": "Whether to allow typing in the input.",
              "attribute": "non-editable",
              "reflects": true
            },
            {
              "kind": "field",
              "name": "readOnly",
              "type": {
                "text": "boolean"
              },
              "privacy": "public",
              "default": "false",
              "description": "Makes the control a readonly field.",
              "attribute": "readonly",
              "reflects": true
            },
            {
              "kind": "field",
              "name": "value",
              "privacy": "public",
              "description": "The value of the picker",
              "attribute": "value",
              "type": {
                "text": "Date | null"
              }
            },
            {
              "kind": "field",
              "name": "activeDate",
              "privacy": "public",
              "description": "Gets/Sets the date which is shown in the calendar picker and is highlighted.\nBy default it is the current date.",
              "type": {
                "text": "Date"
              },
              "attribute": "active-date"
            },
            {
              "kind": "field",
              "name": "min",
              "privacy": "public",
              "description": "The minimum value required for the date picker to remain valid.",
              "attribute": "min",
              "type": {
                "text": "Date | null"
              }
            },
            {
              "kind": "field",
              "name": "max",
              "privacy": "public",
              "description": "The maximum value required for the date picker to remain valid.",
              "attribute": "max",
              "type": {
                "text": "Date | null"
              }
            },
            {
              "kind": "field",
              "name": "headerOrientation",
              "type": {
                "text": "CalendarHeaderOrientation"
              },
              "privacy": "public",
              "default": "'horizontal'",
              "description": "The orientation of the calendar header.",
              "attribute": "header-orientation",
              "reflects": true,
              "expandedType": {
                "text": "'horizontal' | 'vertical'"
              }
            },
            {
              "kind": "field",
              "name": "orientation",
              "type": {
                "text": "ContentOrientation"
              },
              "privacy": "public",
              "default": "'horizontal'",
              "description": "The orientation of the multiple months displayed in the calendar's days view.",
              "attribute": "orientation",
              "expandedType": {
                "text": "'horizontal' | 'vertical'"
              }
            },
            {
              "kind": "field",
              "name": "hideHeader",
              "type": {
                "text": "boolean"
              },
              "privacy": "public",
              "default": "false",
              "description": "Determines whether the calendar hides its header.",
              "attribute": "hide-header",
              "reflects": true
            },
            {
              "kind": "field",
              "name": "hideOutsideDays",
              "type": {
                "text": "boolean"
              },
              "privacy": "public",
              "default": "false",
              "description": "Controls the visibility of the dates that do not belong to the current month.",
              "attribute": "hide-outside-days",
              "reflects": true
            },
            {
              "kind": "field",
              "name": "disabledDates",
              "privacy": "public",
              "description": "Gets/sets disabled dates."
            },
            {
              "kind": "field",
              "name": "specialDates",
              "type": {
                "text": "DateRangeDescriptor[]"
              },
              "privacy": "public",
              "description": "Gets/sets special dates."
            },
            {
              "kind": "field",
              "name": "outlined",
              "type": {
                "text": "boolean"
              },
              "privacy": "public",
              "default": "false",
              "description": "Whether the control will have outlined appearance.",
              "attribute": "outlined",
              "reflects": true
            },
            {
              "kind": "field",
              "name": "placeholder",
              "type": {
                "text": "string"
              },
              "privacy": "public",
              "description": "The placeholder attribute of the control.",
              "attribute": "placeholder"
            },
            {
              "kind": "field",
              "name": "visibleMonths",
              "type": {
                "text": "number"
              },
              "privacy": "public",
              "default": "1",
              "description": "The number of months displayed in the calendar.",
              "attribute": "visible-months"
            },
            {
              "kind": "field",
              "name": "showWeekNumbers",
              "type": {
                "text": "boolean"
              },
              "privacy": "public",
              "default": "false",
              "description": "Whether to show the number of the week in the calendar.",
              "attribute": "show-week-numbers",
              "reflects": true
            },
            {
              "kind": "field",
              "name": "displayFormat",
              "privacy": "public",
              "description": "Format to display the value in when not editing.\nDefaults to the input format if not set.",
              "attribute": "display-format",
              "type": {
                "text": "string"
              }
            },
            {
              "kind": "field",
              "name": "inputFormat",
              "privacy": "public",
              "description": "The date format to apply on the input.\nDefaults to the current locale Intl.DateTimeFormat",
              "attribute": "input-format",
              "type": {
                "text": "string"
              }
            },
            {
              "kind": "field",
              "name": "locale",
              "type": {
                "text": "string"
              },
              "privacy": "public",
              "default": "'en'",
              "description": "The locale settings used to display the value.",
              "attribute": "locale"
            },
            {
              "kind": "field",
              "name": "prompt",
              "type": {
                "text": "string"
              },
              "privacy": "public",
              "default": "'_'",
              "description": "The prompt symbol to use for unfilled parts of the mask.",
              "attribute": "prompt"
            },
            {
              "kind": "field",
              "name": "resourceStrings",
              "type": {
                "text": "IgcCalendarResourceStrings"
              },
              "privacy": "public",
              "default": "IgcCalendarResourceStringEN",
              "description": "The resource strings of the calendar."
            },
            {
              "kind": "field",
              "name": "weekStart",
              "type": {
                "text": "WeekDays"
              },
              "privacy": "public",
              "default": "'sunday'",
              "description": "Sets the start day of the week for the calendar.",
              "attribute": "week-start",
              "expandedType": {
                "text": "'sunday' | 'monday' | 'tuesday' | 'wednesday' | 'thursday' | 'friday' | 'saturday'"
              }
            },
            {
              "kind": "method",
              "name": "_openChange",
              "privacy": "protected",
              "return": {
                "type": {
                  "text": "void"
                }
              }
            },
            {
              "kind": "method",
              "name": "_setDateConstraints",
              "privacy": "private",
              "return": {
                "type": {
                  "text": "void"
                }
              }
            },
            {
              "kind": "method",
              "name": "_shouldCloseCalendarDropdown",
              "privacy": "private",
              "return": {
                "type": {
                  "text": "Promise<void>"
                }
              }
            },
            {
              "kind": "method",
              "name": "_onEscapeKey",
              "privacy": "protected",
              "return": {
                "type": {
                  "text": "Promise<void>"
                }
              }
            },
            {
              "kind": "method",
              "name": "_handleFocusIn",
              "privacy": "protected",
              "return": {
                "type": {
                  "text": "void"
                }
              }
            },
            {
              "kind": "method",
              "name": "_handleFocusOut",
              "privacy": "protected",
              "return": {
                "type": {
                  "text": "void"
                }
              },
              "parameters": [
                {
                  "name": "{ relatedTarget }",
                  "type": {
                    "text": "FocusEvent"
                  }
                }
              ]
            },
            {
              "kind": "method",
              "name": "_handlerCalendarIconSlotPointerDown",
              "privacy": "protected",
              "parameters": [
                {
                  "name": "event",
                  "type": {
                    "text": "PointerEvent"
                  }
                }
              ]
            },
            {
              "kind": "method",
              "name": "_handleInputClick",
              "privacy": "protected",
              "return": {
                "type": {
                  "text": "void"
                }
              },
              "parameters": [
                {
                  "name": "event",
                  "type": {
                    "text": "Event"
                  }
                }
              ]
            },
            {
              "kind": "method",
              "name": "handleAnchorClick",
              "privacy": "protected",
              "return": {
                "type": {
                  "text": "Promise<void>"
                }
              },
              "inheritedFrom": {
                "name": "IgcBaseComboBoxLikeComponent",
                "module": "src/components/common/mixins/combo-box.ts"
              }
            },
            {
              "kind": "method",
              "name": "_handleInputChangeEvent",
              "privacy": "protected",
              "return": {
                "type": {
                  "text": "void"
                }
              },
              "parameters": [
                {
                  "name": "event",
                  "type": {
                    "text": "CustomEvent<Date>"
                  }
                }
              ]
            },
            {
              "kind": "method",
              "name": "_handleCalendarChangeEvent",
              "privacy": "protected",
              "return": {
                "type": {
                  "text": "Promise<void>"
                }
              },
              "parameters": [
                {
                  "name": "event",
                  "type": {
                    "text": "CustomEvent<Date>"
                  }
                }
              ]
            },
            {
              "kind": "method",
              "name": "_handleInputEvent",
              "privacy": "protected",
              "return": {
                "type": {
                  "text": "void"
                }
              },
              "parameters": [
                {
                  "name": "event",
                  "type": {
                    "text": "CustomEvent<Date>"
                  }
                }
              ]
            },
            {
              "kind": "method",
              "name": "_handleClosing",
              "privacy": "protected",
              "return": {
                "type": {
                  "text": "void"
                }
              }
            },
            {
              "kind": "method",
              "name": "_handleDialogClosing",
              "privacy": "protected",
              "return": {
                "type": {
                  "text": "void"
                }
              },
              "parameters": [
                {
                  "name": "event",
                  "type": {
                    "text": "Event"
                  }
                }
              ]
            },
            {
              "kind": "method",
              "name": "_handleDialogClosed",
              "privacy": "protected",
              "return": {
                "type": {
                  "text": "void"
                }
              },
              "parameters": [
                {
                  "name": "event",
                  "type": {
                    "text": "Event"
                  }
                }
              ]
            },
            {
              "kind": "method",
              "name": "clear",
              "privacy": "public",
              "return": {
                "type": {
                  "text": "void"
                }
              },
              "description": "Clears the input part of the component of any user input"
            },
            {
              "kind": "method",
              "name": "stepUp",
              "privacy": "public",
              "return": {
                "type": {
                  "text": "void"
                }
              },
              "parameters": [
                {
                  "name": "datePart",
                  "optional": true,
                  "type": {
                    "text": "DatePart"
                  }
                },
                {
                  "name": "delta",
                  "optional": true,
                  "type": {
                    "text": "number"
                  }
                }
              ],
              "description": "Increments the passed in date part"
            },
            {
              "kind": "method",
              "name": "stepDown",
              "privacy": "public",
              "return": {
                "type": {
                  "text": "void"
                }
              },
              "parameters": [
                {
                  "name": "datePart",
                  "optional": true,
                  "type": {
                    "text": "DatePart"
                  }
                },
                {
                  "name": "delta",
                  "optional": true,
                  "type": {
                    "text": "number"
                  }
                }
              ],
              "description": "Decrements the passed in date part"
            },
            {
              "kind": "method",
              "name": "select",
              "privacy": "public",
              "return": {
                "type": {
                  "text": "void"
                }
              },
              "description": "Selects the text in the input of the component"
            },
            {
              "kind": "method",
              "name": "setSelectionRange",
              "privacy": "public",
              "return": {
                "type": {
                  "text": "void"
                }
              },
              "parameters": [
                {
                  "name": "start",
                  "type": {
                    "text": "number"
                  }
                },
                {
                  "name": "end",
                  "type": {
                    "text": "number"
                  }
                },
                {
                  "name": "direction",
                  "optional": true,
                  "type": {
                    "text": "SelectionRangeDirection"
                  }
                }
              ],
              "description": "Sets the text selection range in the input of the component"
            },
            {
              "kind": "method",
              "name": "setRangeText",
              "privacy": "public",
              "return": {
                "type": {
                  "text": "void"
                }
              },
              "parameters": [
                {
                  "name": "replacement",
                  "type": {
                    "text": "string"
                  }
                },
                {
                  "name": "start",
                  "type": {
                    "text": "number"
                  }
                },
                {
                  "name": "end",
                  "type": {
                    "text": "number"
                  }
                },
                {
                  "name": "mode",
                  "optional": true,
                  "type": {
                    "text": "RangeTextSelectMode"
                  }
                }
              ]
            },
            {
              "kind": "method",
              "name": "_renderClearIcon",
              "privacy": "private"
            },
            {
              "kind": "method",
              "name": "_renderCalendarIcon",
              "privacy": "private"
            },
            {
              "kind": "method",
              "name": "_renderCalendarSlots",
              "privacy": "private"
            },
            {
              "kind": "method",
              "name": "_renderCalendar",
              "privacy": "private",
              "parameters": [
                {
                  "name": "id",
                  "type": {
                    "text": "string"
                  }
                }
              ]
            },
            {
              "kind": "method",
              "name": "_renderActions",
              "privacy": "protected"
            },
            {
              "kind": "method",
              "name": "_renderPicker",
              "privacy": "protected",
              "parameters": [
                {
                  "name": "id",
                  "type": {
                    "text": "string"
                  }
                }
              ]
            },
            {
              "kind": "method",
              "name": "_renderLabel",
              "privacy": "private",
              "parameters": [
                {
                  "name": "id",
                  "type": {
                    "text": "string"
                  }
                }
              ]
            },
            {
              "kind": "method",
              "name": "_renderHelperText",
              "privacy": "private",
              "return": {
                "type": {
                  "text": "TemplateResult"
                }
              }
            },
            {
              "kind": "method",
              "name": "_renderInput",
              "privacy": "protected",
              "parameters": [
                {
                  "name": "id",
                  "type": {
                    "text": "string"
                  }
                }
              ]
            },
            {
              "kind": "field",
              "name": "_required",
              "type": {
                "text": "boolean"
              },
              "privacy": "protected",
              "default": "false",
              "inheritedFrom": {
                "name": "FormAssociatedRequiredMixin",
                "module": "src/components/common/mixins/forms/associated-required.ts"
              }
            },
            {
              "kind": "field",
              "name": "required",
              "privacy": "public",
              "description": "When set, makes the component a required field for validation.",
              "default": "false",
              "attribute": "required",
              "type": {
                "text": "boolean"
              },
              "reflects": true,
              "inheritedFrom": {
                "name": "FormAssociatedRequiredMixin",
                "module": "src/components/common/mixins/forms/associated-required.ts"
              }
            },
            {
              "kind": "field",
              "name": "defaultValue",
              "privacy": "public",
              "inheritedFrom": {
                "name": "FormAssociatedMixin",
                "module": "src/components/common/mixins/forms/associated.ts"
              }
            },
            {
              "kind": "field",
              "name": "formAssociated",
              "type": {
                "text": "boolean"
              },
              "privacy": "public",
              "static": true,
              "readonly": true,
              "default": "true",
              "inheritedFrom": {
                "name": "BaseFormAssociated",
                "module": "src/components/common/mixins/forms/associated.ts"
              }
            },
            {
              "kind": "field",
              "name": "__internals",
              "type": {
                "text": "ElementInternals"
              },
              "privacy": "private",
              "inheritedFrom": {
                "name": "BaseFormAssociated",
                "module": "src/components/common/mixins/forms/associated.ts"
              }
            },
            {
              "kind": "field",
              "name": "_disabled",
              "type": {
                "text": "boolean"
              },
              "privacy": "protected",
              "default": "false",
              "inheritedFrom": {
                "name": "BaseFormAssociated",
                "module": "src/components/common/mixins/forms/associated.ts"
              }
            },
            {
              "kind": "field",
              "name": "_invalid",
              "type": {
                "text": "boolean"
              },
              "privacy": "protected",
              "default": "false",
              "inheritedFrom": {
                "name": "BaseFormAssociated",
                "module": "src/components/common/mixins/forms/associated.ts"
              }
            },
            {
              "kind": "field",
              "name": "_dirty",
              "type": {
                "text": "boolean"
              },
              "privacy": "protected",
              "default": "false",
              "inheritedFrom": {
                "name": "BaseFormAssociated",
                "module": "src/components/common/mixins/forms/associated.ts"
              }
            },
            {
              "kind": "field",
              "name": "_pristine",
              "type": {
                "text": "boolean"
              },
              "privacy": "protected",
              "default": "true",
              "inheritedFrom": {
                "name": "BaseFormAssociated",
                "module": "src/components/common/mixins/forms/associated.ts"
              }
            },
            {
              "kind": "field",
              "name": "name",
              "type": {
                "text": "string"
              },
              "privacy": "public",
              "description": "The name attribute of the control.",
              "attribute": "name",
              "reflects": true,
              "inheritedFrom": {
                "name": "BaseFormAssociated",
                "module": "src/components/common/mixins/forms/associated.ts"
              }
            },
            {
              "kind": "field",
              "name": "disabled",
              "privacy": "public",
              "description": "The disabled state of the component.",
              "default": "false",
              "attribute": "disabled",
              "type": {
                "text": "boolean"
              },
              "reflects": true,
              "inheritedFrom": {
                "name": "BaseFormAssociated",
                "module": "src/components/common/mixins/forms/associated.ts"
              }
            },
            {
              "kind": "field",
              "name": "invalid",
              "privacy": "public",
              "description": "Sets the control into invalid state (visual state only).",
              "default": "false",
              "attribute": "invalid",
              "type": {
                "text": "boolean"
              },
              "reflects": true,
              "inheritedFrom": {
                "name": "BaseFormAssociated",
                "module": "src/components/common/mixins/forms/associated.ts"
              }
            },
            {
              "kind": "field",
              "name": "form",
              "type": {
                "text": "HTMLFormElement | null"
              },
              "privacy": "public",
              "description": "Returns the HTMLFormElement associated with this element.",
              "readonly": true,
              "inheritedFrom": {
                "name": "BaseFormAssociated",
                "module": "src/components/common/mixins/forms/associated.ts"
              }
            },
            {
              "kind": "field",
              "name": "validity",
              "type": {
                "text": "ValidityState"
              },
              "privacy": "public",
              "description": "Returns a ValidityState object which represents the different validity states\nthe element can be in, with respect to constraint validation.",
              "readonly": true,
              "inheritedFrom": {
                "name": "BaseFormAssociated",
                "module": "src/components/common/mixins/forms/associated.ts"
              }
            },
            {
              "kind": "field",
              "name": "validationMessage",
              "type": {
                "text": "string"
              },
              "privacy": "public",
              "description": "A string containing the validation message of this element.",
              "readonly": true,
              "inheritedFrom": {
                "name": "BaseFormAssociated",
                "module": "src/components/common/mixins/forms/associated.ts"
              }
            },
            {
              "kind": "field",
              "name": "willValidate",
              "type": {
                "text": "boolean"
              },
              "privacy": "public",
              "description": "A boolean value which returns true if the element is a submittable element\nthat is a candidate for constraint validation.",
              "readonly": true,
              "inheritedFrom": {
                "name": "BaseFormAssociated",
                "module": "src/components/common/mixins/forms/associated.ts"
              }
            },
            {
              "kind": "method",
              "name": "_handleInvalid",
              "privacy": "private",
              "parameters": [
                {
                  "name": "event",
                  "type": {
                    "text": "Event"
                  }
                }
              ],
              "inheritedFrom": {
                "name": "BaseFormAssociated",
                "module": "src/components/common/mixins/forms/associated.ts"
              }
            },
            {
              "kind": "method",
              "name": "_setInvalidState",
              "privacy": "private",
              "return": {
                "type": {
                  "text": "void"
                }
              },
              "inheritedFrom": {
                "name": "BaseFormAssociated",
                "module": "src/components/common/mixins/forms/associated.ts"
              }
            },
            {
              "kind": "method",
              "name": "__runValidators",
              "privacy": "private",
              "inheritedFrom": {
                "name": "BaseFormAssociated",
                "module": "src/components/common/mixins/forms/associated.ts"
              }
            },
            {
              "kind": "method",
              "name": "_setDefaultValue",
              "privacy": "protected",
              "return": {
                "type": {
                  "text": "void"
                }
              },
              "parameters": [
                {
                  "name": "current",
                  "type": {
                    "text": "string | null"
                  }
                }
              ],
              "inheritedFrom": {
                "name": "BaseFormAssociated",
                "module": "src/components/common/mixins/forms/associated.ts"
              }
            },
            {
              "kind": "method",
              "name": "_restoreDefaultValue",
              "privacy": "protected",
              "return": {
                "type": {
                  "text": "void"
                }
              },
              "inheritedFrom": {
                "name": "BaseFormAssociated",
                "module": "src/components/common/mixins/forms/associated.ts"
              }
            },
            {
              "kind": "method",
              "name": "_validate",
              "privacy": "protected",
              "return": {
                "type": {
                  "text": "void"
                }
              },
              "parameters": [
                {
                  "name": "message",
                  "optional": true,
                  "type": {
                    "text": "string"
                  }
                }
              ],
              "inheritedFrom": {
                "name": "BaseFormAssociated",
                "module": "src/components/common/mixins/forms/associated.ts"
              }
            },
            {
              "kind": "method",
              "name": "_updateValidity",
              "privacy": "protected",
              "parameters": [
                {
                  "name": "error",
                  "optional": true,
                  "type": {
                    "text": "string"
                  }
                }
              ],
              "description": "Executes the component validators and updates the internal validity state.",
              "inheritedFrom": {
                "name": "BaseFormAssociated",
                "module": "src/components/common/mixins/forms/associated.ts"
              }
            },
            {
              "kind": "method",
              "name": "_setFormValue",
              "privacy": "protected",
              "return": {
                "type": {
                  "text": "void"
                }
              },
              "parameters": [
                {
                  "name": "value",
                  "type": {
                    "text": "FormValueType"
                  }
                },
                {
                  "name": "state",
                  "optional": true,
                  "type": {
                    "text": "FormValueType"
                  }
                }
              ],
              "inheritedFrom": {
                "name": "BaseFormAssociated",
                "module": "src/components/common/mixins/forms/associated.ts"
              }
            },
            {
              "kind": "method",
              "name": "formAssociatedCallback",
              "privacy": "protected",
              "return": {
                "type": {
                  "text": "void"
                }
              },
              "parameters": [
                {
                  "name": "_form",
                  "type": {
                    "text": "HTMLFormElement"
                  }
                }
              ],
              "inheritedFrom": {
                "name": "BaseFormAssociated",
                "module": "src/components/common/mixins/forms/associated.ts"
              }
            },
            {
              "kind": "method",
              "name": "formDisabledCallback",
              "privacy": "protected",
              "return": {
                "type": {
                  "text": "void"
                }
              },
              "parameters": [
                {
                  "name": "state",
                  "type": {
                    "text": "boolean"
                  }
                }
              ],
              "inheritedFrom": {
                "name": "BaseFormAssociated",
                "module": "src/components/common/mixins/forms/associated.ts"
              }
            },
            {
              "kind": "method",
              "name": "formResetCallback",
              "privacy": "protected",
              "return": {
                "type": {
                  "text": "void"
                }
              },
              "inheritedFrom": {
                "name": "BaseFormAssociated",
                "module": "src/components/common/mixins/forms/associated.ts"
              }
            },
            {
              "kind": "method",
              "name": "formStateRestoreCallback",
              "privacy": "protected",
              "return": {
                "type": {
                  "text": "void"
                }
              },
              "parameters": [
                {
                  "name": "_state",
                  "type": {
                    "text": "FormValueType"
                  }
                },
                {
                  "name": "_mode",
                  "type": {
                    "text": "FormRestoreMode"
                  }
                }
              ],
              "inheritedFrom": {
                "name": "BaseFormAssociated",
                "module": "src/components/common/mixins/forms/associated.ts"
              }
            },
            {
              "kind": "method",
              "name": "reportValidity",
              "privacy": "public",
              "description": "Checks for validity of the control and shows the browser message if it invalid.",
              "inheritedFrom": {
                "name": "BaseFormAssociated",
                "module": "src/components/common/mixins/forms/associated.ts"
              }
            },
            {
              "kind": "method",
              "name": "checkValidity",
              "privacy": "public",
              "description": "Checks for validity of the control and emits the invalid event if it invalid.",
              "inheritedFrom": {
                "name": "BaseFormAssociated",
                "module": "src/components/common/mixins/forms/associated.ts"
              }
            },
            {
              "kind": "method",
              "name": "setCustomValidity",
              "privacy": "public",
              "parameters": [
                {
                  "name": "message",
                  "type": {
                    "text": "string"
                  }
                }
              ],
              "description": "Sets a custom validation message for the control.\nAs long as `message` is not empty, the control is considered invalid.",
              "inheritedFrom": {
                "name": "BaseFormAssociated",
                "module": "src/components/common/mixins/forms/associated.ts"
              }
            },
            {
              "kind": "method",
              "name": "addEventListener",
              "privacy": "public",
              "return": {
                "type": {
                  "text": "void"
                }
              },
              "parameters": [
                {
                  "name": "type",
                  "type": {
                    "text": "K"
                  }
                },
                {
                  "name": "listener",
                  "type": {
                    "text": "(this: HTMLElement, ev: M[K]) => any"
                  }
                },
                {
                  "name": "options",
                  "optional": true,
                  "type": {
                    "text": "boolean | AddEventListenerOptions"
                  }
                }
              ],
              "inheritedFrom": {
                "name": "EventEmitterMixin",
                "module": "src/components/common/mixins/event-emitter.ts"
              }
            },
            {
              "kind": "method",
              "name": "removeEventListener",
              "privacy": "public",
              "return": {
                "type": {
                  "text": "void"
                }
              },
              "parameters": [
                {
                  "name": "type",
                  "type": {
                    "text": "K"
                  }
                },
                {
                  "name": "listener",
                  "type": {
                    "text": "(this: HTMLElement, ev: M[K]) => any"
                  }
                },
                {
                  "name": "options",
                  "optional": true,
                  "type": {
                    "text": "boolean | EventListenerOptions"
                  }
                }
              ],
              "inheritedFrom": {
                "name": "EventEmitterMixin",
                "module": "src/components/common/mixins/event-emitter.ts"
              }
            },
            {
              "kind": "method",
              "name": "emitEvent",
              "type": {
                "text": "<\n    K extends keyof IgcBaseComboBoxEventMap,\n    D extends UnpackCustomEvent<IgcBaseComboBoxEventMap[K]>,\n  >(\n    event: K,\n    eventInitDict?: CustomEventInit<D>\n  ) => boolean"
              },
              "privacy": "public",
              "return": {
                "type": {
                  "text": "boolean"
                }
              },
              "parameters": [
                {
                  "name": "type",
                  "type": {
                    "text": "K"
                  }
                },
                {
                  "name": "eventInitDict",
                  "optional": true,
                  "type": {
                    "text": "CustomEventInit<D>"
                  }
                }
              ],
              "inheritedFrom": {
                "name": "IgcBaseComboBoxLikeComponent",
                "module": "src/components/common/mixins/combo-box.ts"
              }
            },
            {
              "kind": "field",
              "name": "keepOpenOnSelect",
              "type": {
                "text": "boolean"
              },
              "privacy": "public",
              "default": "false",
              "description": "Whether the component dropdown should be kept open on selection.",
              "attribute": "keep-open-on-select",
              "reflects": true,
              "inheritedFrom": {
                "name": "IgcBaseComboBoxLikeComponent",
                "module": "src/components/common/mixins/combo-box.ts"
              }
            },
            {
              "kind": "field",
              "name": "keepOpenOnOutsideClick",
              "type": {
                "text": "boolean"
              },
              "privacy": "public",
              "default": "false",
              "description": "Whether the component dropdown should be kept open on clicking outside of it.",
              "attribute": "keep-open-on-outside-click",
              "reflects": true,
              "inheritedFrom": {
                "name": "IgcBaseComboBoxLikeComponent",
                "module": "src/components/common/mixins/combo-box.ts"
              }
            },
            {
              "kind": "method",
              "name": "emitClosing",
              "privacy": "protected",
              "inheritedFrom": {
                "name": "IgcBaseComboBoxLikeComponent",
                "module": "src/components/common/mixins/combo-box.ts"
              }
            },
            {
              "kind": "method",
              "name": "emitClosed",
              "privacy": "protected",
              "inheritedFrom": {
                "name": "IgcBaseComboBoxLikeComponent",
                "module": "src/components/common/mixins/combo-box.ts"
              }
            },
            {
              "kind": "method",
              "name": "emitOpening",
              "privacy": "protected",
              "inheritedFrom": {
                "name": "IgcBaseComboBoxLikeComponent",
                "module": "src/components/common/mixins/combo-box.ts"
              }
            },
            {
              "kind": "method",
              "name": "emitOpened",
              "privacy": "protected",
              "inheritedFrom": {
                "name": "IgcBaseComboBoxLikeComponent",
                "module": "src/components/common/mixins/combo-box.ts"
              }
            },
            {
              "kind": "method",
              "name": "_hide",
              "privacy": "protected",
              "parameters": [
                {
                  "name": "emitEvent",
                  "default": "false"
                }
              ],
              "inheritedFrom": {
                "name": "IgcBaseComboBoxLikeComponent",
                "module": "src/components/common/mixins/combo-box.ts"
              }
            },
            {
              "kind": "method",
              "name": "_show",
              "privacy": "protected",
              "parameters": [
                {
                  "name": "emitEvent",
                  "default": "false"
                }
              ],
              "inheritedFrom": {
                "name": "IgcBaseComboBoxLikeComponent",
                "module": "src/components/common/mixins/combo-box.ts"
              }
            },
            {
              "kind": "method",
              "name": "show",
              "privacy": "public",
              "return": {
                "type": {
                  "text": "Promise<boolean>"
                }
              },
              "description": "Shows the component.",
              "inheritedFrom": {
                "name": "IgcBaseComboBoxLikeComponent",
                "module": "src/components/common/mixins/combo-box.ts"
              }
            },
            {
              "kind": "method",
              "name": "hide",
              "privacy": "public",
              "return": {
                "type": {
                  "text": "Promise<boolean>"
                }
              },
              "description": "Hides the component.",
              "inheritedFrom": {
                "name": "IgcBaseComboBoxLikeComponent",
                "module": "src/components/common/mixins/combo-box.ts"
              }
            },
            {
              "kind": "method",
              "name": "toggle",
              "privacy": "public",
              "return": {
                "type": {
                  "text": "Promise<boolean>"
                }
              },
              "description": "Toggles the open state of the component.",
              "inheritedFrom": {
                "name": "IgcBaseComboBoxLikeComponent",
                "module": "src/components/common/mixins/combo-box.ts"
              }
            }
          ],
          "events": [
            {
              "description": "Emitted just before the calendar dropdown is shown.",
              "name": "igcOpening"
            },
            {
              "description": "Emitted after the calendar dropdown is shown.",
              "name": "igcOpened"
            },
            {
              "description": "Emitted just before the calendar dropdown is hidden.",
              "name": "igcClosing"
            },
            {
              "description": "Emitted after the calendar dropdown is hidden.",
              "name": "igcClosed"
            },
            {
              "description": "Emitted when the user modifies and commits the elements's value.",
              "name": "igcChange"
            },
            {
              "description": "Emitted when when the user types in the element.",
              "name": "igcInput"
            },
            {
              "type": {
                "text": "CustomEvent"
              },
              "inheritedFrom": {
                "name": "EventEmitterMixin",
                "module": "src/components/common/mixins/event-emitter.ts"
              }
            }
          ],
          "attributes": [
            {
              "name": "open",
              "type": {
                "text": "boolean"
              },
              "default": "false",
              "description": "Sets the state of the datepicker dropdown.",
              "fieldName": "open",
              "attribute": "open",
              "inheritedFrom": {
                "name": "IgcBaseComboBoxLikeComponent",
                "module": "src/components/common/mixins/combo-box.ts"
              }
            },
            {
              "name": "label",
              "type": {
                "text": "string"
              },
              "description": "The label of the datepicker.",
              "fieldName": "label",
              "attribute": "label"
            },
            {
              "name": "mode",
              "type": {
                "text": "PickerMode"
              },
              "default": "'dropdown'",
              "description": "Determines whether the calendar is opened in a dropdown or a modal dialog",
              "fieldName": "mode",
              "attribute": "mode",
              "expandedType": {
                "text": "'dropdown' | 'dialog'"
              }
            },
            {
              "name": "non-editable",
              "type": {
                "text": "boolean"
              },
              "default": "false",
              "description": "Whether to allow typing in the input.",
              "fieldName": "nonEditable",
              "attribute": "non-editable"
            },
            {
              "name": "readonly",
              "type": {
                "text": "boolean"
              },
              "default": "false",
              "description": "Makes the control a readonly field.",
              "fieldName": "readOnly",
              "attribute": "readonly"
            },
            {
              "name": "value",
              "description": "The value of the picker",
              "fieldName": "value",
              "attribute": "value",
              "type": {
                "text": "Date | null"
              }
            },
            {
              "name": "min",
              "description": "The minimum value required for the date picker to remain valid.",
              "fieldName": "min",
              "attribute": "min",
              "type": {
                "text": "Date | null"
              }
            },
            {
              "name": "max",
              "description": "The maximum value required for the date picker to remain valid.",
              "fieldName": "max",
              "attribute": "max",
              "type": {
                "text": "Date | null"
              }
            },
            {
              "name": "header-orientation",
              "type": {
                "text": "CalendarHeaderOrientation"
              },
              "default": "'horizontal'",
              "description": "The orientation of the calendar header.",
              "fieldName": "headerOrientation",
              "attribute": "header-orientation",
              "expandedType": {
                "text": "'horizontal' | 'vertical'"
              }
            },
            {
              "name": "orientation",
              "type": {
                "text": "ContentOrientation"
              },
              "default": "'horizontal'",
              "description": "The orientation of the multiple months displayed in the calendar's days view.",
              "fieldName": "orientation",
              "attribute": "orientation",
              "expandedType": {
                "text": "'horizontal' | 'vertical'"
              }
            },
            {
              "name": "hide-header",
              "type": {
                "text": "boolean"
              },
              "default": "false",
              "description": "Determines whether the calendar hides its header.",
              "fieldName": "hideHeader",
              "attribute": "hide-header"
            },
            {
              "name": "hide-outside-days",
              "type": {
                "text": "boolean"
              },
              "default": "false",
              "description": "Controls the visibility of the dates that do not belong to the current month.",
              "fieldName": "hideOutsideDays",
              "attribute": "hide-outside-days"
            },
            {
              "name": "outlined",
              "type": {
                "text": "boolean"
              },
              "default": "false",
              "description": "Whether the control will have outlined appearance.",
              "fieldName": "outlined",
              "attribute": "outlined"
            },
            {
              "name": "placeholder",
              "type": {
                "text": "string"
              },
              "description": "The placeholder attribute of the control.",
              "fieldName": "placeholder",
              "attribute": "placeholder"
            },
            {
              "name": "visible-months",
              "type": {
                "text": "number"
              },
              "default": "1",
              "description": "The number of months displayed in the calendar.",
              "fieldName": "visibleMonths",
              "attribute": "visible-months"
            },
            {
              "name": "show-week-numbers",
              "type": {
                "text": "boolean"
              },
              "default": "false",
              "description": "Whether to show the number of the week in the calendar.",
              "fieldName": "showWeekNumbers",
              "attribute": "show-week-numbers"
            },
            {
              "name": "display-format",
              "description": "Format to display the value in when not editing.\nDefaults to the input format if not set.",
              "fieldName": "displayFormat",
              "attribute": "display-format",
              "type": {
                "text": "string"
              }
            },
            {
              "name": "input-format",
              "description": "The date format to apply on the input.\nDefaults to the current locale Intl.DateTimeFormat",
              "fieldName": "inputFormat",
              "attribute": "input-format",
              "type": {
                "text": "string"
              }
            },
            {
              "name": "locale",
              "type": {
                "text": "string"
              },
              "default": "'en'",
              "description": "The locale settings used to display the value.",
              "fieldName": "locale",
              "attribute": "locale"
            },
            {
              "name": "prompt",
              "type": {
                "text": "string"
              },
              "default": "'_'",
              "description": "The prompt symbol to use for unfilled parts of the mask.",
              "fieldName": "prompt",
              "attribute": "prompt"
            },
            {
              "name": "active-date",
              "description": "Gets/Sets the date which is shown in the calendar picker and is highlighted.\nBy default it is the current date.",
              "type": {
                "text": "Date"
              },
              "fieldName": "activeDate"
            },
            {
              "name": "week-start",
              "type": {
                "text": "WeekDays"
              },
              "default": "'sunday'",
              "description": "Sets the start day of the week for the calendar.",
              "fieldName": "weekStart",
              "expandedType": {
                "text": "'sunday' | 'monday' | 'tuesday' | 'wednesday' | 'thursday' | 'friday' | 'saturday'"
              }
            },
            {
              "name": "required",
              "description": "When set, makes the component a required field for validation.",
              "default": "false",
              "fieldName": "required",
              "attribute": "required",
              "type": {
                "text": "boolean"
              },
              "inheritedFrom": {
                "name": "FormAssociatedRequiredMixin",
                "module": "src/components/common/mixins/forms/associated-required.ts"
              }
            },
            {
              "name": "name",
              "type": {
                "text": "string"
              },
              "description": "The name attribute of the control.",
              "fieldName": "name",
              "attribute": "name",
              "inheritedFrom": {
                "name": "BaseFormAssociated",
                "module": "src/components/common/mixins/forms/associated.ts"
              }
            },
            {
              "name": "disabled",
              "description": "The disabled state of the component.",
              "default": "false",
              "fieldName": "disabled",
              "attribute": "disabled",
              "type": {
                "text": "boolean"
              },
              "inheritedFrom": {
                "name": "BaseFormAssociated",
                "module": "src/components/common/mixins/forms/associated.ts"
              }
            },
            {
              "name": "invalid",
              "description": "Sets the control into invalid state (visual state only).",
              "default": "false",
              "fieldName": "invalid",
              "attribute": "invalid",
              "type": {
                "text": "boolean"
              },
              "inheritedFrom": {
                "name": "BaseFormAssociated",
                "module": "src/components/common/mixins/forms/associated.ts"
              }
            },
            {
              "name": "keep-open-on-select",
              "type": {
                "text": "boolean"
              },
              "default": "false",
              "description": "Whether the component dropdown should be kept open on selection.",
              "fieldName": "keepOpenOnSelect",
              "attribute": "keep-open-on-select",
              "inheritedFrom": {
                "name": "IgcBaseComboBoxLikeComponent",
                "module": "src/components/common/mixins/combo-box.ts"
              }
            },
            {
              "name": "keep-open-on-outside-click",
              "type": {
                "text": "boolean"
              },
              "default": "false",
              "description": "Whether the component dropdown should be kept open on clicking outside of it.",
              "fieldName": "keepOpenOnOutsideClick",
              "attribute": "keep-open-on-outside-click",
              "inheritedFrom": {
                "name": "IgcBaseComboBoxLikeComponent",
                "module": "src/components/common/mixins/combo-box.ts"
              }
            }
          ],
          "mixins": [
            {
              "name": "FormAssociatedRequiredMixin",
              "module": "/src/components/common/mixins/forms/associated-required.js"
            },
            {
              "name": "EventEmitterMixin",
              "module": "/src/components/common/mixins/event-emitter.js"
            }
          ],
          "superclass": {
            "name": "IgcBaseComboBoxLikeComponent",
            "module": "/src/components/common/mixins/combo-box.js"
          },
          "tagName": "igc-date-picker",
          "customElement": true
        }
      ],
      "exports": [
        {
          "kind": "js",
          "name": "default",
          "declaration": {
            "name": "IgcDatePickerComponent",
            "module": "src/components/date-picker/date-picker.ts"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "src/components/common/controllers/root-scroll.ts",
      "declarations": [
        {
          "kind": "function",
          "name": "addRootScrollHandler",
          "parameters": [
            {
              "name": "host",
              "type": {
                "text": "RootScrollControllerHost"
              }
            },
            {
              "name": "config",
              "optional": true,
              "type": {
                "text": "RootScrollControllerConfig"
              }
            }
          ]
        }
      ],
      "exports": [
        {
          "kind": "js",
          "name": "addRootScrollHandler",
          "declaration": {
            "name": "addRootScrollHandler",
            "module": "src/components/common/controllers/root-scroll.ts"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "src/components/common/mixins/option.ts",
      "declarations": [
        {
          "kind": "class",
          "description": "",
          "name": "IgcBaseOptionLikeComponent",
          "members": [
            {
              "kind": "field",
              "name": "_internals",
              "privacy": "protected",
              "readonly": true
            },
            {
              "kind": "field",
              "name": "_active",
              "type": {
                "text": "boolean"
              },
              "privacy": "protected",
              "default": "false"
            },
            {
              "kind": "field",
              "name": "_disabled",
              "type": {
                "text": "boolean"
              },
              "privacy": "protected",
              "default": "false"
            },
            {
              "kind": "field",
              "name": "_selected",
              "type": {
                "text": "boolean"
              },
              "privacy": "protected",
              "default": "false"
            },
            {
              "kind": "field",
              "name": "_value",
              "type": {
                "text": "string"
              },
              "privacy": "protected"
            },
            {
              "kind": "field",
              "name": "_content",
              "type": {
                "text": "Array<Element>"
              },
              "privacy": "protected",
              "readonly": true
            },
            {
              "kind": "field",
              "name": "_contentSlotText",
              "type": {
                "text": "string"
              },
              "privacy": "protected",
              "readonly": true
            },
            {
              "kind": "field",
              "name": "active",
              "privacy": "public",
              "description": "Whether the item is active.",
              "attribute": "active",
              "type": {
                "text": "boolean"
              },
              "reflects": true
            },
            {
              "kind": "field",
              "name": "disabled",
              "privacy": "public",
              "description": "Whether the item is disabled.",
              "attribute": "disabled",
              "type": {
                "text": "boolean"
              },
              "reflects": true
            },
            {
              "kind": "field",
              "name": "selected",
              "privacy": "public",
              "description": "Whether the item is selected.",
              "attribute": "selected",
              "type": {
                "text": "boolean"
              },
              "reflects": true
            },
            {
              "kind": "field",
              "name": "value",
              "privacy": "public",
              "description": "The current value of the item.\nIf not specified, the element's text content is used.",
              "attribute": "value",
              "type": {
                "text": "string"
              }
            }
          ],
          "attributes": [
            {
              "name": "active",
              "description": "Whether the item is active.",
              "fieldName": "active",
              "attribute": "active",
              "type": {
                "text": "boolean"
              }
            },
            {
              "name": "disabled",
              "description": "Whether the item is disabled.",
              "fieldName": "disabled",
              "attribute": "disabled",
              "type": {
                "text": "boolean"
              }
            },
            {
              "name": "selected",
              "description": "Whether the item is selected.",
              "fieldName": "selected",
              "attribute": "selected",
              "type": {
                "text": "boolean"
              }
            },
            {
              "name": "value",
              "description": "The current value of the item.\nIf not specified, the element's text content is used.",
              "fieldName": "value",
              "attribute": "value",
              "type": {
                "text": "string"
              }
            }
          ],
          "superclass": {
            "name": "LitElement",
            "package": "lit"
          },
          "customElement": true
        }
      ],
      "exports": [
        {
          "kind": "js",
          "name": "IgcBaseOptionLikeComponent",
          "declaration": {
            "name": "IgcBaseOptionLikeComponent",
            "module": "src/components/common/mixins/option.ts"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "src/components/dropdown/dropdown-item.ts",
      "declarations": [
        {
          "kind": "class",
          "description": "Represents an item in a dropdown list.",
          "name": "IgcDropdownItemComponent",
          "cssParts": [
            {
              "description": "The prefix wrapper of the igc-dropdown-item.",
              "name": "prefix"
            },
            {
              "description": "The main content wrapper of the igc-dropdown-item.",
              "name": "content"
            },
            {
              "description": "The suffix wrapper of the igc-dropdown-item.",
              "name": "suffix"
            }
          ],
          "slots": [
            {
              "description": "Renders content before the item's main content.",
              "name": "prefix"
            },
            {
              "description": "Renders the item's main content.",
              "name": ""
            },
            {
              "description": "Renders content after the item's main content.",
              "name": "suffix"
            }
          ],
          "members": [
            {
              "kind": "field",
              "name": "tagName",
              "type": {
                "text": "string"
              },
              "privacy": "public",
              "static": true,
              "readonly": true,
              "default": "'igc-dropdown-item'"
            },
            {
              "kind": "method",
              "name": "register",
              "privacy": "public",
              "static": true,
              "return": {
                "type": {
                  "text": "void"
                }
              }
            },
            {
              "kind": "field",
              "name": "_internals",
              "privacy": "protected",
              "readonly": true,
              "inheritedFrom": {
                "name": "IgcBaseOptionLikeComponent",
                "module": "src/components/common/mixins/option.ts"
              }
            },
            {
              "kind": "field",
              "name": "_active",
              "type": {
                "text": "boolean"
              },
              "privacy": "protected",
              "default": "false",
              "inheritedFrom": {
                "name": "IgcBaseOptionLikeComponent",
                "module": "src/components/common/mixins/option.ts"
              }
            },
            {
              "kind": "field",
              "name": "_disabled",
              "type": {
                "text": "boolean"
              },
              "privacy": "protected",
              "default": "false",
              "inheritedFrom": {
                "name": "IgcBaseOptionLikeComponent",
                "module": "src/components/common/mixins/option.ts"
              }
            },
            {
              "kind": "field",
              "name": "_selected",
              "type": {
                "text": "boolean"
              },
              "privacy": "protected",
              "default": "false",
              "inheritedFrom": {
                "name": "IgcBaseOptionLikeComponent",
                "module": "src/components/common/mixins/option.ts"
              }
            },
            {
              "kind": "field",
              "name": "_value",
              "type": {
                "text": "string"
              },
              "privacy": "protected",
              "inheritedFrom": {
                "name": "IgcBaseOptionLikeComponent",
                "module": "src/components/common/mixins/option.ts"
              }
            },
            {
              "kind": "field",
              "name": "_content",
              "type": {
                "text": "Array<Element>"
              },
              "privacy": "protected",
              "readonly": true,
              "inheritedFrom": {
                "name": "IgcBaseOptionLikeComponent",
                "module": "src/components/common/mixins/option.ts"
              }
            },
            {
              "kind": "field",
              "name": "_contentSlotText",
              "type": {
                "text": "string"
              },
              "privacy": "protected",
              "readonly": true,
              "inheritedFrom": {
                "name": "IgcBaseOptionLikeComponent",
                "module": "src/components/common/mixins/option.ts"
              }
            },
            {
              "kind": "field",
              "name": "active",
              "privacy": "public",
              "description": "Whether the item is active.",
              "attribute": "active",
              "type": {
                "text": "boolean"
              },
              "reflects": true,
              "inheritedFrom": {
                "name": "IgcBaseOptionLikeComponent",
                "module": "src/components/common/mixins/option.ts"
              }
            },
            {
              "kind": "field",
              "name": "disabled",
              "privacy": "public",
              "description": "Whether the item is disabled.",
              "attribute": "disabled",
              "type": {
                "text": "boolean"
              },
              "reflects": true,
              "inheritedFrom": {
                "name": "IgcBaseOptionLikeComponent",
                "module": "src/components/common/mixins/option.ts"
              }
            },
            {
              "kind": "field",
              "name": "selected",
              "privacy": "public",
              "description": "Whether the item is selected.",
              "attribute": "selected",
              "type": {
                "text": "boolean"
              },
              "reflects": true,
              "inheritedFrom": {
                "name": "IgcBaseOptionLikeComponent",
                "module": "src/components/common/mixins/option.ts"
              }
            },
            {
              "kind": "field",
              "name": "value",
              "privacy": "public",
              "description": "The current value of the item.\nIf not specified, the element's text content is used.",
              "attribute": "value",
              "type": {
                "text": "string"
              },
              "inheritedFrom": {
                "name": "IgcBaseOptionLikeComponent",
                "module": "src/components/common/mixins/option.ts"
              }
            }
          ],
          "superclass": {
            "name": "IgcBaseOptionLikeComponent",
            "module": "/src/components/common/mixins/option.js"
          },
          "tagName": "igc-dropdown-item",
          "customElement": true,
          "attributes": [
            {
              "name": "active",
              "description": "Whether the item is active.",
              "fieldName": "active",
              "attribute": "active",
              "type": {
                "text": "boolean"
              },
              "inheritedFrom": {
                "name": "IgcBaseOptionLikeComponent",
                "module": "src/components/common/mixins/option.ts"
              }
            },
            {
              "name": "disabled",
              "description": "Whether the item is disabled.",
              "fieldName": "disabled",
              "attribute": "disabled",
              "type": {
                "text": "boolean"
              },
              "inheritedFrom": {
                "name": "IgcBaseOptionLikeComponent",
                "module": "src/components/common/mixins/option.ts"
              }
            },
            {
              "name": "selected",
              "description": "Whether the item is selected.",
              "fieldName": "selected",
              "attribute": "selected",
              "type": {
                "text": "boolean"
              },
              "inheritedFrom": {
                "name": "IgcBaseOptionLikeComponent",
                "module": "src/components/common/mixins/option.ts"
              }
            },
            {
              "name": "value",
              "description": "The current value of the item.\nIf not specified, the element's text content is used.",
              "fieldName": "value",
              "attribute": "value",
              "type": {
                "text": "string"
              },
              "inheritedFrom": {
                "name": "IgcBaseOptionLikeComponent",
                "module": "src/components/common/mixins/option.ts"
              }
            }
          ]
        }
      ],
      "exports": [
        {
          "kind": "js",
          "name": "default",
          "declaration": {
            "name": "IgcDropdownItemComponent",
            "module": "src/components/dropdown/dropdown-item.ts"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "src/components/dropdown/dropdown-group.ts",
      "declarations": [
        {
          "kind": "class",
          "description": "A container for a group of `igc-dropdown-item` components.",
          "name": "IgcDropdownGroupComponent",
          "cssParts": [
            {
              "description": "The native label element.",
              "name": "label"
            }
          ],
          "slots": [
            {
              "description": "Contains the group's label.",
              "name": "label"
            },
            {
              "description": "Intended to contain the items belonging to this group.",
              "name": ""
            }
          ],
          "members": [
            {
              "kind": "field",
              "name": "tagName",
              "type": {
                "text": "string"
              },
              "privacy": "public",
              "static": true,
              "readonly": true,
              "default": "'igc-dropdown-group'"
            },
            {
              "kind": "method",
              "name": "register",
              "privacy": "public",
              "static": true,
              "return": {
                "type": {
                  "text": "void"
                }
              }
            },
            {
              "kind": "field",
              "name": "items",
              "type": {
                "text": "Array<IgcDropdownItemComponent>"
              },
              "privacy": "public",
              "description": "All child `igc-dropdown-item`s."
            }
          ],
          "superclass": {
            "name": "LitElement",
            "package": "lit"
          },
          "tagName": "igc-dropdown-group",
          "customElement": true
        }
      ],
      "exports": [
        {
          "kind": "js",
          "name": "default",
          "declaration": {
            "name": "IgcDropdownGroupComponent",
            "module": "src/components/dropdown/dropdown-group.ts"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "src/components/dropdown/dropdown-header.ts",
      "declarations": [
        {
          "kind": "class",
          "description": "Represents a header item in a igc-dropdown list.",
          "name": "IgcDropdownHeaderComponent",
          "slots": [
            {
              "description": "Renders the header.",
              "name": ""
            }
          ],
          "members": [
            {
              "kind": "field",
              "name": "tagName",
              "type": {
                "text": "string"
              },
              "privacy": "public",
              "static": true,
              "readonly": true,
              "default": "'igc-dropdown-header'"
            },
            {
              "kind": "method",
              "name": "register",
              "privacy": "public",
              "static": true,
              "return": {
                "type": {
                  "text": "void"
                }
              }
            }
          ],
          "superclass": {
            "name": "LitElement",
            "package": "lit"
          },
          "tagName": "igc-dropdown-header",
          "customElement": true
        }
      ],
      "exports": [
        {
          "kind": "js",
          "name": "default",
          "declaration": {
            "name": "IgcDropdownHeaderComponent",
            "module": "src/components/dropdown/dropdown-header.ts"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "src/components/dropdown/dropdown.ts",
      "declarations": [
        {
          "kind": "class",
          "description": "Represents a DropDown component.",
          "name": "IgcDropdownComponent",
          "cssParts": [
            {
              "description": "The dropdown list wrapper container.",
              "name": "base"
            },
            {
              "description": "The dropdown list element.",
              "name": "list"
            }
          ],
          "slots": [
            {
              "description": "Renders the dropdown's target element.",
              "name": "target"
            },
            {
              "description": "Renders the dropdown list items.",
              "name": ""
            }
          ],
          "members": [
            {
              "kind": "field",
              "name": "tagName",
              "type": {
                "text": "string"
              },
              "privacy": "public",
              "static": true,
              "readonly": true,
              "default": "'igc-dropdown'"
            },
            {
              "kind": "method",
              "name": "register",
              "privacy": "public",
              "static": true
            },
            {
              "kind": "field",
              "name": "_keyBindings",
              "type": {
                "text": "KeyBindingController"
              },
              "privacy": "private",
              "readonly": true
            },
            {
              "kind": "field",
              "name": "_rootScrollController",
              "privacy": "private"
            },
            {
              "kind": "field",
              "name": "_rootClickController",
              "type": {
                "text": "RootClickController"
              },
              "privacy": "protected",
              "readonly": true,
              "inheritedFrom": {
                "name": "IgcBaseComboBoxLikeComponent",
                "module": "src/components/common/mixins/combo-box.ts"
              }
            },
            {
              "kind": "field",
              "name": "_selectedItem",
              "type": {
                "text": "IgcDropdownItemComponent | null"
              },
              "privacy": "protected",
              "default": "null"
            },
            {
              "kind": "field",
              "name": "_activeItem",
              "type": {
                "text": "IgcDropdownItemComponent"
              },
              "privacy": "protected"
            },
            {
              "kind": "field",
              "name": "_activeItems",
              "privacy": "private",
              "readonly": true
            },
            {
              "kind": "field",
              "name": "_targetListeners",
              "type": {
                "text": "KeyBindingObserverCleanup"
              },
              "privacy": "private"
            },
            {
              "kind": "field",
              "name": "_target",
              "type": {
                "text": "HTMLElement | undefined"
              },
              "privacy": "private"
            },
            {
              "kind": "field",
              "name": "trigger",
              "type": {
                "text": "HTMLSlotElement"
              },
              "privacy": "protected"
            },
            {
              "kind": "field",
              "name": "placement",
              "type": {
                "text": "PopoverPlacement"
              },
              "privacy": "public",
              "default": "'bottom-start'",
              "description": "The preferred placement of the component around the target element.",
              "attribute": "placement",
              "expandedType": {
                "text": "'top' | 'top-start' | 'top-end' | 'bottom' | 'bottom-start' | 'bottom-end' | 'right' | 'right-start' | 'right-end' | 'left' | 'left-start' | 'left-end'"
              }
            },
            {
              "kind": "field",
              "name": "scrollStrategy",
              "type": {
                "text": "PopoverScrollStrategy"
              },
              "privacy": "public",
              "default": "'scroll'",
              "description": "Determines the behavior of the component during scrolling of the parent container.",
              "attribute": "scroll-strategy",
              "expandedType": {
                "text": "'scroll' | 'block' | 'close'"
              }
            },
            {
              "kind": "field",
              "name": "flip",
              "type": {
                "text": "boolean"
              },
              "privacy": "public",
              "default": "false",
              "description": "Whether the component should be flipped to the opposite side of the target once it's about to overflow the visible area.\nWhen true, once enough space is detected on its preferred side, it will flip back.",
              "attribute": "flip"
            },
            {
              "kind": "field",
              "name": "distance",
              "type": {
                "text": "number"
              },
              "privacy": "public",
              "default": "0",
              "description": "The distance from the target element.",
              "attribute": "distance"
            },
            {
              "kind": "field",
              "name": "sameWidth",
              "type": {
                "text": "boolean"
              },
              "privacy": "public",
              "default": "false",
              "description": "Whether the dropdown's width should be the same as the target's one.",
              "attribute": "same-width"
            },
            {
              "kind": "field",
              "name": "items",
              "privacy": "public",
              "description": "Returns the items of the dropdown.",
              "readonly": true
            },
            {
              "kind": "field",
              "name": "groups",
              "privacy": "public",
              "description": "Returns the group items of the dropdown.",
              "readonly": true
            },
            {
              "kind": "field",
              "name": "selectedItem",
              "privacy": "public",
              "description": "Returns the selected item from the dropdown or null.",
              "readonly": true
            },
            {
              "kind": "method",
              "name": "scrollStrategyChanged",
              "privacy": "protected"
            },
            {
              "kind": "method",
              "name": "openStateChange",
              "privacy": "protected"
            },
            {
              "kind": "method",
              "name": "handleListBoxClick",
              "privacy": "private",
              "parameters": [
                {
                  "name": "event",
                  "type": {
                    "text": "MouseEvent"
                  }
                }
              ]
            },
            {
              "kind": "method",
              "name": "handleChange",
              "privacy": "private",
              "parameters": [
                {
                  "name": "item",
                  "type": {
                    "text": "IgcDropdownItemComponent"
                  }
                }
              ]
            },
            {
              "kind": "method",
              "name": "handleSlotChange",
              "privacy": "private"
            },
            {
              "kind": "method",
              "name": "onArrowUp",
              "privacy": "private"
            },
            {
              "kind": "method",
              "name": "onArrowDown",
              "privacy": "private"
            },
            {
              "kind": "method",
              "name": "onHomeKey",
              "privacy": "protected"
            },
            {
              "kind": "method",
              "name": "onEndKey",
              "privacy": "protected"
            },
            {
              "kind": "method",
              "name": "onTabKey",
              "privacy": "protected"
            },
            {
              "kind": "method",
              "name": "onEscapeKey",
              "privacy": "protected"
            },
            {
              "kind": "method",
              "name": "onEnterKey",
              "privacy": "protected"
            },
            {
              "kind": "method",
              "name": "handleClosing",
              "privacy": "protected"
            },
            {
              "kind": "method",
              "name": "activateItem",
              "privacy": "private",
              "parameters": [
                {
                  "name": "item",
                  "type": {
                    "text": "IgcDropdownItemComponent"
                  }
                }
              ]
            },
            {
              "kind": "method",
              "name": "_navigateToActiveItem",
              "privacy": "private",
              "parameters": [
                {
                  "name": "item",
                  "optional": true,
                  "type": {
                    "text": "IgcDropdownItemComponent"
                  }
                }
              ]
            },
            {
              "kind": "method",
              "name": "_selectItem",
              "privacy": "private",
              "parameters": [
                {
                  "name": "item",
                  "type": {
                    "text": "IgcDropdownItemComponent"
                  }
                },
                {
                  "name": "emit",
                  "default": "true"
                }
              ]
            },
            {
              "kind": "method",
              "name": "_updateAnchorAccessibility",
              "privacy": "private",
              "parameters": [
                {
                  "name": "anchor",
                  "optional": true,
                  "type": {
                    "text": "HTMLElement | null"
                  }
                }
              ]
            },
            {
              "kind": "method",
              "name": "getItem",
              "privacy": "private",
              "parameters": [
                {
                  "name": "value",
                  "type": {
                    "text": "string"
                  }
                }
              ]
            },
            {
              "kind": "method",
              "name": "_setTarget",
              "privacy": "private",
              "parameters": [
                {
                  "name": "anchor",
                  "type": {
                    "text": "HTMLElement | string"
                  }
                }
              ]
            },
            {
              "kind": "method",
              "name": "show",
              "privacy": "public",
              "return": {
                "type": {
                  "text": "Promise<boolean>"
                }
              },
              "description": "Shows the component.",
              "parameters": [
                {
                  "name": "target",
                  "optional": true,
                  "type": {
                    "text": "HTMLElement | string"
                  }
                }
              ],
              "inheritedFrom": {
                "name": "IgcBaseComboBoxLikeComponent",
                "module": "src/components/common/mixins/combo-box.ts"
              }
            },
            {
              "kind": "method",
              "name": "toggle",
              "privacy": "public",
              "return": {
                "type": {
                  "text": "Promise<boolean>"
                }
              },
              "description": "Toggles the open state of the component.",
              "parameters": [
                {
                  "name": "target",
                  "optional": true,
                  "type": {
                    "text": "HTMLElement | string"
                  }
                }
              ],
              "inheritedFrom": {
                "name": "IgcBaseComboBoxLikeComponent",
                "module": "src/components/common/mixins/combo-box.ts"
              }
            },
            {
              "kind": "method",
              "name": "navigateTo",
              "privacy": "public",
              "return": {
                "type": {
                  "text": "IgcDropdownItemComponent | null"
                }
              },
              "parameters": [
                {
                  "name": "value",
                  "type": {
                    "text": "string"
                  }
                }
              ],
              "description": "Navigates to the item with the specified value. If it exists, returns the found item, otherwise - null."
            },
            {
              "kind": "method",
              "name": "navigateTo",
              "privacy": "public",
              "return": {
                "type": {
                  "text": "IgcDropdownItemComponent | null"
                }
              },
              "parameters": [
                {
                  "name": "index",
                  "type": {
                    "text": "number"
                  }
                }
              ],
              "description": "Navigates to the item at the specified index. If it exists, returns the found item, otherwise - null."
            },
            {
              "kind": "method",
              "name": "navigateTo",
              "privacy": "public",
              "return": {
                "type": {
                  "text": "IgcDropdownItemComponent | null"
                }
              },
              "parameters": [
                {
                  "name": "value",
                  "type": {
                    "text": "string | number"
                  }
                }
              ],
              "description": "Navigates to the specified item. If it exists, returns the found item, otherwise - null."
            },
            {
              "kind": "method",
              "name": "select",
              "privacy": "public",
              "return": {
                "type": {
                  "text": "IgcDropdownItemComponent | null"
                }
              },
              "parameters": [
                {
                  "name": "value",
                  "type": {
                    "text": "string"
                  }
                }
              ],
              "description": "Selects the item with the specified value. If it exists, returns the found item, otherwise - null."
            },
            {
              "kind": "method",
              "name": "select",
              "privacy": "public",
              "return": {
                "type": {
                  "text": "IgcDropdownItemComponent | null"
                }
              },
              "parameters": [
                {
                  "name": "index",
                  "type": {
                    "text": "number"
                  }
                }
              ],
              "description": "Selects the item at the specified index. If it exists, returns the found item, otherwise - null."
            },
            {
              "kind": "method",
              "name": "select",
              "privacy": "public",
              "return": {
                "type": {
                  "text": "IgcDropdownItemComponent | null"
                }
              },
              "parameters": [
                {
                  "name": "value",
                  "type": {
                    "text": "string | number"
                  }
                }
              ],
              "description": "Selects the specified item. If it exists, returns the found item, otherwise - null."
            },
            {
              "kind": "method",
              "name": "clearSelection",
              "privacy": "public",
              "description": "Clears the current selection of the dropdown."
            },
            {
              "kind": "method",
              "name": "addEventListener",
              "privacy": "public",
              "return": {
                "type": {
                  "text": "void"
                }
              },
              "parameters": [
                {
                  "name": "type",
                  "type": {
                    "text": "K"
                  }
                },
                {
                  "name": "listener",
                  "type": {
                    "text": "(this: HTMLElement, ev: M[K]) => any"
                  }
                },
                {
                  "name": "options",
                  "optional": true,
                  "type": {
                    "text": "boolean | AddEventListenerOptions"
                  }
                }
              ],
              "inheritedFrom": {
                "name": "EventEmitterMixin",
                "module": "src/components/common/mixins/event-emitter.ts"
              }
            },
            {
              "kind": "method",
              "name": "removeEventListener",
              "privacy": "public",
              "return": {
                "type": {
                  "text": "void"
                }
              },
              "parameters": [
                {
                  "name": "type",
                  "type": {
                    "text": "K"
                  }
                },
                {
                  "name": "listener",
                  "type": {
                    "text": "(this: HTMLElement, ev: M[K]) => any"
                  }
                },
                {
                  "name": "options",
                  "optional": true,
                  "type": {
                    "text": "boolean | EventListenerOptions"
                  }
                }
              ],
              "inheritedFrom": {
                "name": "EventEmitterMixin",
                "module": "src/components/common/mixins/event-emitter.ts"
              }
            },
            {
              "kind": "method",
              "name": "emitEvent",
              "type": {
                "text": "<\n    K extends keyof IgcBaseComboBoxEventMap,\n    D extends UnpackCustomEvent<IgcBaseComboBoxEventMap[K]>,\n  >(\n    event: K,\n    eventInitDict?: CustomEventInit<D>\n  ) => boolean"
              },
              "privacy": "public",
              "return": {
                "type": {
                  "text": "boolean"
                }
              },
              "parameters": [
                {
                  "name": "type",
                  "type": {
                    "text": "K"
                  }
                },
                {
                  "name": "eventInitDict",
                  "optional": true,
                  "type": {
                    "text": "CustomEventInit<D>"
                  }
                }
              ],
              "inheritedFrom": {
                "name": "IgcBaseComboBoxLikeComponent",
                "module": "src/components/common/mixins/combo-box.ts"
              }
            },
            {
              "kind": "field",
              "name": "keepOpenOnSelect",
              "type": {
                "text": "boolean"
              },
              "privacy": "public",
              "default": "false",
              "description": "Whether the component dropdown should be kept open on selection.",
              "attribute": "keep-open-on-select",
              "reflects": true,
              "inheritedFrom": {
                "name": "IgcBaseComboBoxLikeComponent",
                "module": "src/components/common/mixins/combo-box.ts"
              }
            },
            {
              "kind": "field",
              "name": "keepOpenOnOutsideClick",
              "type": {
                "text": "boolean"
              },
              "privacy": "public",
              "default": "false",
              "description": "Whether the component dropdown should be kept open on clicking outside of it.",
              "attribute": "keep-open-on-outside-click",
              "reflects": true,
              "inheritedFrom": {
                "name": "IgcBaseComboBoxLikeComponent",
                "module": "src/components/common/mixins/combo-box.ts"
              }
            },
            {
              "kind": "field",
              "name": "open",
              "type": {
                "text": "boolean"
              },
              "privacy": "public",
              "default": "false",
              "description": "Sets the open state of the component.",
              "attribute": "open",
              "reflects": true,
              "inheritedFrom": {
                "name": "IgcBaseComboBoxLikeComponent",
                "module": "src/components/common/mixins/combo-box.ts"
              }
            },
            {
              "kind": "method",
              "name": "emitClosing",
              "privacy": "protected",
              "inheritedFrom": {
                "name": "IgcBaseComboBoxLikeComponent",
                "module": "src/components/common/mixins/combo-box.ts"
              }
            },
            {
              "kind": "method",
              "name": "emitClosed",
              "privacy": "protected",
              "inheritedFrom": {
                "name": "IgcBaseComboBoxLikeComponent",
                "module": "src/components/common/mixins/combo-box.ts"
              }
            },
            {
              "kind": "method",
              "name": "emitOpening",
              "privacy": "protected",
              "inheritedFrom": {
                "name": "IgcBaseComboBoxLikeComponent",
                "module": "src/components/common/mixins/combo-box.ts"
              }
            },
            {
              "kind": "method",
              "name": "emitOpened",
              "privacy": "protected",
              "inheritedFrom": {
                "name": "IgcBaseComboBoxLikeComponent",
                "module": "src/components/common/mixins/combo-box.ts"
              }
            },
            {
              "kind": "method",
              "name": "handleAnchorClick",
              "privacy": "protected",
              "inheritedFrom": {
                "name": "IgcBaseComboBoxLikeComponent",
                "module": "src/components/common/mixins/combo-box.ts"
              }
            },
            {
              "kind": "method",
              "name": "_hide",
              "privacy": "protected",
              "parameters": [
                {
                  "name": "emitEvent",
                  "default": "false"
                }
              ],
              "inheritedFrom": {
                "name": "IgcBaseComboBoxLikeComponent",
                "module": "src/components/common/mixins/combo-box.ts"
              }
            },
            {
              "kind": "method",
              "name": "_show",
              "privacy": "protected",
              "parameters": [
                {
                  "name": "emitEvent",
                  "default": "false"
                }
              ],
              "inheritedFrom": {
                "name": "IgcBaseComboBoxLikeComponent",
                "module": "src/components/common/mixins/combo-box.ts"
              }
            },
            {
              "kind": "method",
              "name": "hide",
              "privacy": "public",
              "return": {
                "type": {
                  "text": "Promise<boolean>"
                }
              },
              "description": "Hides the component.",
              "inheritedFrom": {
                "name": "IgcBaseComboBoxLikeComponent",
                "module": "src/components/common/mixins/combo-box.ts"
              }
            }
          ],
          "events": [
            {
              "description": "Emitted when the selected item changes.",
              "name": "igcChange"
            },
            {
              "description": "Emitted just before the dropdown is open.",
              "name": "igcOpening"
            },
            {
              "description": "Emitted after the dropdown is open.",
              "name": "igcOpened"
            },
            {
              "description": "Emitter just before the dropdown is closed.",
              "name": "igcClosing"
            },
            {
              "description": "Emitted after closing the dropdown.",
              "name": "igcClosed"
            },
            {
              "type": {
                "text": "CustomEvent"
              },
              "inheritedFrom": {
                "name": "EventEmitterMixin",
                "module": "src/components/common/mixins/event-emitter.ts"
              }
            }
          ],
          "attributes": [
            {
              "name": "placement",
              "type": {
                "text": "PopoverPlacement"
              },
              "default": "'bottom-start'",
              "description": "The preferred placement of the component around the target element.",
              "fieldName": "placement",
              "attribute": "placement",
              "expandedType": {
                "text": "'top' | 'top-start' | 'top-end' | 'bottom' | 'bottom-start' | 'bottom-end' | 'right' | 'right-start' | 'right-end' | 'left' | 'left-start' | 'left-end'"
              }
            },
            {
              "name": "scroll-strategy",
              "type": {
                "text": "PopoverScrollStrategy"
              },
              "default": "'scroll'",
              "description": "Determines the behavior of the component during scrolling of the parent container.",
              "fieldName": "scrollStrategy",
              "attribute": "scroll-strategy",
              "expandedType": {
                "text": "'scroll' | 'block' | 'close'"
              }
            },
            {
              "name": "flip",
              "type": {
                "text": "boolean"
              },
              "default": "false",
              "description": "Whether the component should be flipped to the opposite side of the target once it's about to overflow the visible area.\nWhen true, once enough space is detected on its preferred side, it will flip back.",
              "fieldName": "flip",
              "attribute": "flip"
            },
            {
              "name": "distance",
              "type": {
                "text": "number"
              },
              "default": "0",
              "description": "The distance from the target element.",
              "fieldName": "distance",
              "attribute": "distance"
            },
            {
              "name": "same-width",
              "type": {
                "text": "boolean"
              },
              "default": "false",
              "description": "Whether the dropdown's width should be the same as the target's one.",
              "fieldName": "sameWidth",
              "attribute": "same-width"
            },
            {
              "name": "keep-open-on-select",
              "type": {
                "text": "boolean"
              },
              "default": "false",
              "description": "Whether the component dropdown should be kept open on selection.",
              "fieldName": "keepOpenOnSelect",
              "attribute": "keep-open-on-select",
              "inheritedFrom": {
                "name": "IgcBaseComboBoxLikeComponent",
                "module": "src/components/common/mixins/combo-box.ts"
              }
            },
            {
              "name": "keep-open-on-outside-click",
              "type": {
                "text": "boolean"
              },
              "default": "false",
              "description": "Whether the component dropdown should be kept open on clicking outside of it.",
              "fieldName": "keepOpenOnOutsideClick",
              "attribute": "keep-open-on-outside-click",
              "inheritedFrom": {
                "name": "IgcBaseComboBoxLikeComponent",
                "module": "src/components/common/mixins/combo-box.ts"
              }
            },
            {
              "name": "open",
              "type": {
                "text": "boolean"
              },
              "default": "false",
              "description": "Sets the open state of the component.",
              "fieldName": "open",
              "attribute": "open",
              "inheritedFrom": {
                "name": "IgcBaseComboBoxLikeComponent",
                "module": "src/components/common/mixins/combo-box.ts"
              }
            }
          ],
          "mixins": [
            {
              "name": "EventEmitterMixin",
              "module": "/src/components/common/mixins/event-emitter.js"
            }
          ],
          "superclass": {
            "name": "IgcBaseComboBoxLikeComponent",
            "module": "/src/components/common/mixins/combo-box.js"
          },
          "tagName": "igc-dropdown",
          "customElement": true
        }
      ],
      "exports": [
        {
          "kind": "js",
          "name": "default",
          "declaration": {
            "name": "IgcDropdownComponent",
            "module": "src/components/dropdown/dropdown.ts"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "src/components/file-input/validators.ts",
      "declarations": [
        {
          "kind": "variable",
          "name": "fileValidators",
          "type": {
            "text": "Validator<IgcFileInputComponent>[]"
          },
          "default": "[ requiredValidator, ]"
        }
      ],
      "exports": [
        {
          "kind": "js",
          "name": "fileValidators",
          "declaration": {
            "name": "fileValidators",
            "module": "src/components/file-input/validators.ts"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "src/components/file-input/file-input.ts",
      "declarations": [
        {
          "kind": "class",
          "description": "",
          "name": "IgcFileInputComponent",
          "cssParts": [
            {
              "description": "The main wrapper that holds all main input elements.",
              "name": "container"
            },
            {
              "description": "The native input element.",
              "name": "input"
            },
            {
              "description": "The native label element.",
              "name": "label"
            },
            {
              "description": "The file names wrapper when input type is 'file'.",
              "name": "file-names"
            },
            {
              "description": "The browse button when input type is 'file'.",
              "name": "file-selector-button"
            },
            {
              "description": "The prefix wrapper.",
              "name": "prefix"
            },
            {
              "description": "The suffix wrapper.",
              "name": "suffix"
            },
            {
              "description": "The helper text wrapper.",
              "name": "helper-text"
            }
          ],
          "slots": [
            {
              "description": "Renders content before the input.",
              "name": "prefix"
            },
            {
              "description": "Renders content after input.",
              "name": "suffix"
            },
            {
              "description": "Renders content below the input.",
              "name": "helper-text"
            },
            {
              "description": "Renders content for the browse button when input type is file.",
              "name": "file-selector-text"
            },
            {
              "description": "Renders content when input type is file and no file is chosen.",
              "name": "file-missing-text"
            },
            {
              "description": "Renders content when the required validation fails.",
              "name": "value-missing"
            },
            {
              "description": "Renders content when setCustomValidity(message) is set.",
              "name": "custom-error"
            },
            {
              "description": "Renders content when the component is in invalid state (validity.valid = false).",
              "name": "invalid"
            }
          ],
          "members": [
            {
              "kind": "field",
              "name": "tagName",
              "type": {
                "text": "string"
              },
              "privacy": "public",
              "static": true,
              "readonly": true,
              "default": "'igc-file-input'"
            },
            {
              "kind": "method",
              "name": "register",
              "privacy": "public",
              "static": true,
              "return": {
                "type": {
                  "text": "void"
                }
              }
            },
            {
              "kind": "field",
              "name": "__validators",
              "type": {
                "text": "Validator[]"
              },
              "privacy": "protected",
              "readonly": true,
              "inheritedFrom": {
                "name": "IgcInputBaseComponent",
                "module": "src/components/input/input-base.ts"
              }
            },
            {
              "kind": "field",
              "name": "_formValue",
              "type": {
                "text": "FormValue<unknown>"
              },
              "privacy": "protected",
              "inheritedFrom": {
                "name": "IgcInputBaseComponent",
                "module": "src/components/input/input-base.ts"
              },
              "readonly": true
            },
            {
              "kind": "field",
              "name": "_hasActivation",
              "type": {
                "text": "boolean"
              },
              "privacy": "private",
              "default": "false"
            },
            {
              "kind": "field",
              "name": "_fileNames",
              "type": {
                "text": "string | null"
              },
              "privacy": "private",
              "readonly": true
            },
            {
              "kind": "field",
              "name": "value",
              "type": {
                "text": "string | Date | null"
              },
              "privacy": "public",
              "description": "The value of the control.",
              "attribute": "value",
              "inheritedFrom": {
                "name": "IgcInputBaseComponent",
                "module": "src/components/input/input-base.ts"
              }
            },
            {
              "kind": "field",
              "name": "multiple",
              "type": {
                "text": "boolean"
              },
              "privacy": "public",
              "default": "false",
              "description": "The multiple attribute of the control.\nUsed to indicate that a file input allows the user to select more than one file.",
              "attribute": "multiple"
            },
            {
              "kind": "field",
              "name": "accept",
              "type": {
                "text": "string"
              },
              "privacy": "public",
              "default": "''",
              "description": "The accept attribute of the control.\nDefines the file types as a list of comma-separated values that the file input should accept.",
              "attribute": "accept"
            },
            {
              "kind": "field",
              "name": "autofocus",
              "type": {
                "text": "boolean"
              },
              "privacy": "public",
              "description": "The autofocus attribute of the control.",
              "attribute": "autofocus"
            },
            {
              "kind": "field",
              "name": "readOnly",
              "type": {
                "text": "boolean"
              },
              "privacy": "public",
              "default": "false",
              "description": "Makes the control a readonly field.",
              "attribute": "readonly",
              "reflects": true,
              "readonly": true,
              "inheritedFrom": {
                "name": "IgcInputBaseComponent",
                "module": "src/components/input/input-base.ts"
              }
            },
            {
              "kind": "field",
              "name": "files",
              "type": {
                "text": "FileList | null"
              },
              "privacy": "public",
              "description": "Returns the selected files, if any; otherwise returns null.",
              "readonly": true
            },
            {
              "kind": "method",
              "name": "_restoreDefaultValue",
              "privacy": "protected",
              "return": {
                "type": {
                  "text": "void"
                }
              },
              "inheritedFrom": {
                "name": "IgcInputBaseComponent",
                "module": "src/components/input/input-base.ts"
              }
            },
            {
              "kind": "method",
              "name": "setSelectionRange",
              "privacy": "public",
              "parameters": [
                {
                  "name": "start",
                  "type": {
                    "text": "number"
                  }
                },
                {
                  "name": "end",
                  "type": {
                    "text": "number"
                  }
                },
                {
                  "name": "direction",
                  "default": "'none'",
                  "type": {
                    "text": "SelectionRangeDirection"
                  }
                }
              ],
              "description": "Sets the text selection range of the control",
              "return": {
                "type": {
                  "text": "void"
                }
              },
              "inheritedFrom": {
                "name": "IgcInputBaseComponent",
                "module": "src/components/input/input-base.ts"
              }
            },
            {
              "kind": "method",
              "name": "setRangeText",
              "privacy": "public",
              "parameters": [
                {
                  "name": "replacement",
                  "type": {
                    "text": "string"
                  }
                },
                {
                  "name": "start",
                  "type": {
                    "text": "number"
                  }
                },
                {
                  "name": "end",
                  "type": {
                    "text": "number"
                  }
                },
                {
                  "name": "selectMode",
                  "default": "'preserve'",
                  "type": {
                    "text": "RangeTextSelectMode"
                  }
                }
              ],
              "description": "Replaces the selected text in the input.",
              "return": {
                "type": {
                  "text": "void"
                }
              },
              "inheritedFrom": {
                "name": "IgcInputBaseComponent",
                "module": "src/components/input/input-base.ts"
              }
            },
            {
              "kind": "method",
              "name": "_handleChange",
              "privacy": "private",
              "return": {
                "type": {
                  "text": "void"
                }
              }
            },
            {
              "kind": "method",
              "name": "_handleCancel",
              "privacy": "private",
              "return": {
                "type": {
                  "text": "void"
                }
              }
            },
            {
              "kind": "method",
              "name": "_handleFocus",
              "privacy": "protected",
              "return": {
                "type": {
                  "text": "void"
                }
              }
            },
            {
              "kind": "method",
              "name": "_handleBlur",
              "privacy": "protected",
              "return": {
                "type": {
                  "text": "void"
                }
              }
            },
            {
              "kind": "method",
              "name": "_handleClick",
              "privacy": "protected",
              "return": {
                "type": {
                  "text": "void"
                }
              }
            },
            {
              "kind": "method",
              "name": "renderFileParts",
              "privacy": "protected",
              "return": {
                "type": {
                  "text": "TemplateResult | typeof nothing"
                }
              },
              "inheritedFrom": {
                "name": "IgcInputBaseComponent",
                "module": "src/components/input/input-base.ts"
              }
            },
            {
              "kind": "method",
              "name": "renderInput",
              "privacy": "protected",
              "return": {
                "type": {
                  "text": "TemplateResult"
                }
              },
              "inheritedFrom": {
                "name": "IgcInputBaseComponent",
                "module": "src/components/input/input-base.ts"
              }
            },
            {
              "kind": "method",
              "name": "addEventListener",
              "privacy": "public",
              "return": {
                "type": {
                  "text": "void"
                }
              },
              "parameters": [
                {
                  "name": "type",
                  "type": {
                    "text": "K"
                  }
                },
                {
                  "name": "listener",
                  "type": {
                    "text": "(this: HTMLElement, ev: M[K]) => any"
                  }
                },
                {
                  "name": "options",
                  "optional": true,
                  "type": {
                    "text": "boolean | AddEventListenerOptions"
                  }
                }
              ],
              "inheritedFrom": {
                "name": "IgcInputBaseComponent",
                "module": "src/components/input/input-base.ts"
              }
            },
            {
              "kind": "method",
              "name": "removeEventListener",
              "privacy": "public",
              "return": {
                "type": {
                  "text": "void"
                }
              },
              "parameters": [
                {
                  "name": "type",
                  "type": {
                    "text": "K"
                  }
                },
                {
                  "name": "listener",
                  "type": {
                    "text": "(this: HTMLElement, ev: M[K]) => any"
                  }
                },
                {
                  "name": "options",
                  "optional": true,
                  "type": {
                    "text": "boolean | EventListenerOptions"
                  }
                }
              ],
              "inheritedFrom": {
                "name": "IgcInputBaseComponent",
                "module": "src/components/input/input-base.ts"
              }
            },
            {
              "kind": "method",
              "name": "emitEvent",
              "privacy": "private",
              "return": {
                "type": {
                  "text": "boolean"
                }
              },
              "parameters": [
                {
                  "name": "type",
                  "type": {
                    "text": "K"
                  }
                },
                {
                  "name": "eventInitDict",
                  "optional": true,
                  "type": {
                    "text": "CustomEventInit<D>"
                  }
                }
              ],
              "inheritedFrom": {
                "name": "IgcInputBaseComponent",
                "module": "src/components/input/input-base.ts"
              }
            },
            {
              "kind": "field",
              "name": "_required",
              "type": {
                "text": "boolean"
              },
              "privacy": "protected",
              "default": "false",
              "inheritedFrom": {
                "name": "IgcInputBaseComponent",
                "module": "src/components/input/input-base.ts"
              }
            },
            {
              "kind": "field",
              "name": "required",
              "privacy": "public",
              "description": "When set, makes the component a required field for validation.",
              "default": "false",
              "attribute": "required",
              "type": {
                "text": "boolean"
              },
              "reflects": true,
              "inheritedFrom": {
                "name": "IgcInputBaseComponent",
                "module": "src/components/input/input-base.ts"
              }
            },
            {
              "kind": "field",
              "name": "defaultValue",
              "privacy": "public",
              "inheritedFrom": {
                "name": "IgcInputBaseComponent",
                "module": "src/components/input/input-base.ts"
              }
            },
            {
              "kind": "field",
              "name": "formAssociated",
              "type": {
                "text": "boolean"
              },
              "privacy": "public",
              "static": true,
              "readonly": true,
              "default": "true",
              "inheritedFrom": {
                "name": "IgcInputBaseComponent",
                "module": "src/components/input/input-base.ts"
              }
            },
            {
              "kind": "field",
              "name": "__internals",
              "type": {
                "text": "ElementInternals"
              },
              "privacy": "private",
              "inheritedFrom": {
                "name": "IgcInputBaseComponent",
                "module": "src/components/input/input-base.ts"
              }
            },
            {
              "kind": "field",
              "name": "_disabled",
              "type": {
                "text": "boolean"
              },
              "privacy": "protected",
              "default": "false",
              "inheritedFrom": {
                "name": "IgcInputBaseComponent",
                "module": "src/components/input/input-base.ts"
              }
            },
            {
              "kind": "field",
              "name": "_invalid",
              "type": {
                "text": "boolean"
              },
              "privacy": "protected",
              "default": "false",
              "inheritedFrom": {
                "name": "IgcInputBaseComponent",
                "module": "src/components/input/input-base.ts"
              }
            },
            {
              "kind": "field",
              "name": "_dirty",
              "type": {
                "text": "boolean"
              },
              "privacy": "protected",
              "default": "false",
              "inheritedFrom": {
                "name": "IgcInputBaseComponent",
                "module": "src/components/input/input-base.ts"
              }
            },
            {
              "kind": "field",
              "name": "_pristine",
              "type": {
                "text": "boolean"
              },
              "privacy": "protected",
              "default": "true",
              "inheritedFrom": {
                "name": "IgcInputBaseComponent",
                "module": "src/components/input/input-base.ts"
              }
            },
            {
              "kind": "field",
              "name": "name",
              "type": {
                "text": "string"
              },
              "privacy": "public",
              "description": "The name attribute of the control.",
              "attribute": "name",
              "reflects": true,
              "inheritedFrom": {
                "name": "IgcInputBaseComponent",
                "module": "src/components/input/input-base.ts"
              }
            },
            {
              "kind": "field",
              "name": "disabled",
              "privacy": "public",
              "description": "The disabled state of the component.",
              "default": "false",
              "attribute": "disabled",
              "type": {
                "text": "boolean"
              },
              "reflects": true,
              "inheritedFrom": {
                "name": "IgcInputBaseComponent",
                "module": "src/components/input/input-base.ts"
              }
            },
            {
              "kind": "field",
              "name": "invalid",
              "privacy": "public",
              "description": "Sets the control into invalid state (visual state only).",
              "default": "false",
              "attribute": "invalid",
              "type": {
                "text": "boolean"
              },
              "reflects": true,
              "inheritedFrom": {
                "name": "IgcInputBaseComponent",
                "module": "src/components/input/input-base.ts"
              }
            },
            {
              "kind": "field",
              "name": "form",
              "type": {
                "text": "HTMLFormElement | null"
              },
              "privacy": "public",
              "description": "Returns the HTMLFormElement associated with this element.",
              "readonly": true,
              "inheritedFrom": {
                "name": "IgcInputBaseComponent",
                "module": "src/components/input/input-base.ts"
              }
            },
            {
              "kind": "field",
              "name": "validity",
              "type": {
                "text": "ValidityState"
              },
              "privacy": "public",
              "description": "Returns a ValidityState object which represents the different validity states\nthe element can be in, with respect to constraint validation.",
              "readonly": true,
              "inheritedFrom": {
                "name": "IgcInputBaseComponent",
                "module": "src/components/input/input-base.ts"
              }
            },
            {
              "kind": "field",
              "name": "validationMessage",
              "type": {
                "text": "string"
              },
              "privacy": "public",
              "description": "A string containing the validation message of this element.",
              "readonly": true,
              "inheritedFrom": {
                "name": "IgcInputBaseComponent",
                "module": "src/components/input/input-base.ts"
              }
            },
            {
              "kind": "field",
              "name": "willValidate",
              "type": {
                "text": "boolean"
              },
              "privacy": "public",
              "description": "A boolean value which returns true if the element is a submittable element\nthat is a candidate for constraint validation.",
              "readonly": true,
              "inheritedFrom": {
                "name": "IgcInputBaseComponent",
                "module": "src/components/input/input-base.ts"
              }
            },
            {
              "kind": "method",
              "name": "_handleInvalid",
              "privacy": "private",
              "parameters": [
                {
                  "name": "event",
                  "type": {
                    "text": "Event"
                  }
                }
              ],
              "inheritedFrom": {
                "name": "IgcInputBaseComponent",
                "module": "src/components/input/input-base.ts"
              }
            },
            {
              "kind": "method",
              "name": "_setInvalidState",
              "privacy": "private",
              "return": {
                "type": {
                  "text": "void"
                }
              },
              "inheritedFrom": {
                "name": "IgcInputBaseComponent",
                "module": "src/components/input/input-base.ts"
              }
            },
            {
              "kind": "method",
              "name": "__runValidators",
              "privacy": "private",
              "inheritedFrom": {
                "name": "IgcInputBaseComponent",
                "module": "src/components/input/input-base.ts"
              }
            },
            {
              "kind": "method",
              "name": "_setDefaultValue",
              "privacy": "protected",
              "return": {
                "type": {
                  "text": "void"
                }
              },
              "parameters": [
                {
                  "name": "current",
                  "type": {
                    "text": "string | null"
                  }
                }
              ],
              "inheritedFrom": {
                "name": "IgcInputBaseComponent",
                "module": "src/components/input/input-base.ts"
              }
            },
            {
              "kind": "method",
              "name": "_validate",
              "privacy": "protected",
              "return": {
                "type": {
                  "text": "void"
                }
              },
              "parameters": [
                {
                  "name": "message",
                  "optional": true,
                  "type": {
                    "text": "string"
                  }
                }
              ],
              "inheritedFrom": {
                "name": "IgcInputBaseComponent",
                "module": "src/components/input/input-base.ts"
              }
            },
            {
              "kind": "method",
              "name": "_updateValidity",
              "privacy": "protected",
              "parameters": [
                {
                  "name": "error",
                  "optional": true,
                  "type": {
                    "text": "string"
                  }
                }
              ],
              "description": "Executes the component validators and updates the internal validity state.",
              "inheritedFrom": {
                "name": "IgcInputBaseComponent",
                "module": "src/components/input/input-base.ts"
              }
            },
            {
              "kind": "method",
              "name": "_setFormValue",
              "privacy": "protected",
              "return": {
                "type": {
                  "text": "void"
                }
              },
              "parameters": [
                {
                  "name": "value",
                  "type": {
                    "text": "FormValueType"
                  }
                },
                {
                  "name": "state",
                  "optional": true,
                  "type": {
                    "text": "FormValueType"
                  }
                }
              ],
              "inheritedFrom": {
                "name": "IgcInputBaseComponent",
                "module": "src/components/input/input-base.ts"
              }
            },
            {
              "kind": "method",
              "name": "formAssociatedCallback",
              "privacy": "protected",
              "return": {
                "type": {
                  "text": "void"
                }
              },
              "parameters": [
                {
                  "name": "_form",
                  "type": {
                    "text": "HTMLFormElement"
                  }
                }
              ],
              "inheritedFrom": {
                "name": "IgcInputBaseComponent",
                "module": "src/components/input/input-base.ts"
              }
            },
            {
              "kind": "method",
              "name": "formDisabledCallback",
              "privacy": "protected",
              "return": {
                "type": {
                  "text": "void"
                }
              },
              "parameters": [
                {
                  "name": "state",
                  "type": {
                    "text": "boolean"
                  }
                }
              ],
              "inheritedFrom": {
                "name": "IgcInputBaseComponent",
                "module": "src/components/input/input-base.ts"
              }
            },
            {
              "kind": "method",
              "name": "formResetCallback",
              "privacy": "protected",
              "return": {
                "type": {
                  "text": "void"
                }
              },
              "inheritedFrom": {
                "name": "IgcInputBaseComponent",
                "module": "src/components/input/input-base.ts"
              }
            },
            {
              "kind": "method",
              "name": "formStateRestoreCallback",
              "privacy": "protected",
              "return": {
                "type": {
                  "text": "void"
                }
              },
              "parameters": [
                {
                  "name": "_state",
                  "type": {
                    "text": "FormValueType"
                  }
                },
                {
                  "name": "_mode",
                  "type": {
                    "text": "FormRestoreMode"
                  }
                }
              ],
              "inheritedFrom": {
                "name": "IgcInputBaseComponent",
                "module": "src/components/input/input-base.ts"
              }
            },
            {
              "kind": "method",
              "name": "reportValidity",
              "privacy": "public",
              "description": "Checks for validity of the control and shows the browser message if it invalid.",
              "inheritedFrom": {
                "name": "IgcInputBaseComponent",
                "module": "src/components/input/input-base.ts"
              }
            },
            {
              "kind": "method",
              "name": "checkValidity",
              "privacy": "public",
              "description": "Checks for validity of the control and emits the invalid event if it invalid.",
              "inheritedFrom": {
                "name": "IgcInputBaseComponent",
                "module": "src/components/input/input-base.ts"
              }
            },
            {
              "kind": "method",
              "name": "setCustomValidity",
              "privacy": "public",
              "parameters": [
                {
                  "name": "message",
                  "type": {
                    "text": "string"
                  }
                }
              ],
              "description": "Sets a custom validation message for the control.\nAs long as `message` is not empty, the control is considered invalid.",
              "inheritedFrom": {
                "name": "IgcInputBaseComponent",
                "module": "src/components/input/input-base.ts"
              }
            },
            {
              "kind": "field",
              "name": "increment",
              "privacy": "private",
              "static": true,
              "readonly": true,
              "inheritedFrom": {
                "name": "IgcInputBaseComponent",
                "module": "src/components/input/input-base.ts"
              }
            },
            {
              "kind": "field",
              "name": "_themes",
              "privacy": "protected",
              "readonly": true,
              "inheritedFrom": {
                "name": "IgcInputBaseComponent",
                "module": "src/components/input/input-base.ts"
              }
            },
            {
              "kind": "field",
              "name": "inputId",
              "privacy": "protected",
              "default": "`input-${IgcInputBaseComponent.increment()}`",
              "inheritedFrom": {
                "name": "IgcInputBaseComponent",
                "module": "src/components/input/input-base.ts"
              }
            },
            {
              "kind": "field",
              "name": "input",
              "type": {
                "text": "HTMLInputElement"
              },
              "privacy": "protected",
              "inheritedFrom": {
                "name": "IgcInputBaseComponent",
                "module": "src/components/input/input-base.ts"
              }
            },
            {
              "kind": "field",
              "name": "_helperText",
              "type": {
                "text": "Array<HTMLElement>"
              },
              "privacy": "protected",
              "inheritedFrom": {
                "name": "IgcInputBaseComponent",
                "module": "src/components/input/input-base.ts"
              }
            },
            {
              "kind": "field",
              "name": "prefixes",
              "type": {
                "text": "Array<HTMLElement>"
              },
              "privacy": "protected",
              "inheritedFrom": {
                "name": "IgcInputBaseComponent",
                "module": "src/components/input/input-base.ts"
              }
            },
            {
              "kind": "field",
              "name": "suffixes",
              "type": {
                "text": "Array<HTMLElement>"
              },
              "privacy": "protected",
              "inheritedFrom": {
                "name": "IgcInputBaseComponent",
                "module": "src/components/input/input-base.ts"
              }
            },
            {
              "kind": "field",
              "name": "outlined",
              "type": {
                "text": "boolean"
              },
              "privacy": "public",
              "default": "false",
              "description": "Whether the control will have outlined appearance.",
              "attribute": "outlined",
              "reflects": true,
              "inheritedFrom": {
                "name": "IgcInputBaseComponent",
                "module": "src/components/input/input-base.ts"
              }
            },
            {
              "kind": "field",
              "name": "placeholder",
              "type": {
                "text": "string"
              },
              "privacy": "public",
              "description": "The placeholder attribute of the control.",
              "attribute": "placeholder",
              "inheritedFrom": {
                "name": "IgcInputBaseComponent",
                "module": "src/components/input/input-base.ts"
              }
            },
            {
              "kind": "field",
              "name": "label",
              "type": {
                "text": "string"
              },
              "privacy": "public",
              "description": "The label for the control.",
              "attribute": "label",
              "inheritedFrom": {
                "name": "IgcInputBaseComponent",
                "module": "src/components/input/input-base.ts"
              }
            },
            {
              "kind": "method",
              "name": "focus",
              "privacy": "public",
              "parameters": [
                {
                  "name": "options",
                  "optional": true,
                  "type": {
                    "text": "FocusOptions"
                  }
                }
              ],
              "description": "Sets focus on the control.",
              "inheritedFrom": {
                "name": "IgcInputBaseComponent",
                "module": "src/components/input/input-base.ts"
              }
            },
            {
              "kind": "method",
              "name": "blur",
              "privacy": "public",
              "description": "Removes focus from the control.",
              "inheritedFrom": {
                "name": "IgcInputBaseComponent",
                "module": "src/components/input/input-base.ts"
              }
            },
            {
              "kind": "method",
              "name": "renderValidatorContainer",
              "privacy": "protected",
              "return": {
                "type": {
                  "text": "TemplateResult"
                }
              },
              "inheritedFrom": {
                "name": "IgcInputBaseComponent",
                "module": "src/components/input/input-base.ts"
              }
            },
            {
              "kind": "method",
              "name": "resolvePartNames",
              "privacy": "protected",
              "parameters": [
                {
                  "name": "base",
                  "type": {
                    "text": "string"
                  }
                }
              ],
              "inheritedFrom": {
                "name": "IgcInputBaseComponent",
                "module": "src/components/input/input-base.ts"
              }
            },
            {
              "kind": "method",
              "name": "renderPrefix",
              "privacy": "private",
              "inheritedFrom": {
                "name": "IgcInputBaseComponent",
                "module": "src/components/input/input-base.ts"
              }
            },
            {
              "kind": "method",
              "name": "renderSuffix",
              "privacy": "private",
              "inheritedFrom": {
                "name": "IgcInputBaseComponent",
                "module": "src/components/input/input-base.ts"
              }
            },
            {
              "kind": "method",
              "name": "renderLabel",
              "privacy": "private",
              "inheritedFrom": {
                "name": "IgcInputBaseComponent",
                "module": "src/components/input/input-base.ts"
              }
            },
            {
              "kind": "method",
              "name": "renderMaterial",
              "privacy": "private",
              "inheritedFrom": {
                "name": "IgcInputBaseComponent",
                "module": "src/components/input/input-base.ts"
              }
            },
            {
              "kind": "method",
              "name": "renderStandard",
              "privacy": "private",
              "inheritedFrom": {
                "name": "IgcInputBaseComponent",
                "module": "src/components/input/input-base.ts"
              }
            }
          ],
          "events": [
            {
              "description": "Emitted when the control's checked state changes.",
              "name": "igcChange"
            },
            {
              "description": "Emitted when the control's file picker dialog is canceled.",
              "name": "igcCancel"
            },
            {
              "type": {
                "text": "CustomEvent"
              },
              "inheritedFrom": {
                "name": "IgcInputBaseComponent",
                "module": "src/components/input/input-base.ts"
              }
            }
          ],
          "attributes": [
            {
              "name": "value",
              "description": "The value of the control.",
              "fieldName": "value",
              "attribute": "value",
              "type": {
                "text": "string"
              }
            },
            {
              "name": "multiple",
              "type": {
                "text": "boolean"
              },
              "default": "false",
              "description": "The multiple attribute of the control.\nUsed to indicate that a file input allows the user to select more than one file.",
              "fieldName": "multiple",
              "attribute": "multiple"
            },
            {
              "name": "accept",
              "type": {
                "text": "string"
              },
              "default": "''",
              "description": "The accept attribute of the control.\nDefines the file types as a list of comma-separated values that the file input should accept.",
              "fieldName": "accept",
              "attribute": "accept"
            },
            {
              "name": "autofocus",
              "type": {
                "text": "boolean"
              },
              "description": "The autofocus attribute of the control.",
              "fieldName": "autofocus",
              "attribute": "autofocus"
            },
            {
              "name": "required",
              "description": "When set, makes the component a required field for validation.",
              "default": "false",
              "fieldName": "required",
              "attribute": "required",
              "type": {
                "text": "boolean"
              },
              "inheritedFrom": {
                "name": "IgcInputBaseComponent",
                "module": "src/components/input/input-base.ts"
              }
            },
            {
              "name": "name",
              "type": {
                "text": "string"
              },
              "description": "The name attribute of the control.",
              "fieldName": "name",
              "attribute": "name",
              "inheritedFrom": {
                "name": "IgcInputBaseComponent",
                "module": "src/components/input/input-base.ts"
              }
            },
            {
              "name": "disabled",
              "description": "The disabled state of the component.",
              "default": "false",
              "fieldName": "disabled",
              "attribute": "disabled",
              "type": {
                "text": "boolean"
              },
              "inheritedFrom": {
                "name": "IgcInputBaseComponent",
                "module": "src/components/input/input-base.ts"
              }
            },
            {
              "name": "invalid",
              "description": "Sets the control into invalid state (visual state only).",
              "default": "false",
              "fieldName": "invalid",
              "attribute": "invalid",
              "type": {
                "text": "boolean"
              },
              "inheritedFrom": {
                "name": "IgcInputBaseComponent",
                "module": "src/components/input/input-base.ts"
              }
            },
            {
              "name": "outlined",
              "type": {
                "text": "boolean"
              },
              "default": "false",
              "description": "Whether the control will have outlined appearance.",
              "fieldName": "outlined",
              "attribute": "outlined",
              "inheritedFrom": {
                "name": "IgcInputBaseComponent",
                "module": "src/components/input/input-base.ts"
              }
            },
            {
              "name": "readonly",
              "type": {
                "text": "boolean"
              },
              "default": "false",
              "description": "Makes the control a readonly field.",
              "fieldName": "readOnly",
              "attribute": "readonly",
              "inheritedFrom": {
                "name": "IgcInputBaseComponent",
                "module": "src/components/input/input-base.ts"
              }
            },
            {
              "name": "placeholder",
              "type": {
                "text": "string"
              },
              "description": "The placeholder attribute of the control.",
              "fieldName": "placeholder",
              "attribute": "placeholder",
              "inheritedFrom": {
                "name": "IgcInputBaseComponent",
                "module": "src/components/input/input-base.ts"
              }
            },
            {
              "name": "label",
              "type": {
                "text": "string"
              },
              "description": "The label for the control.",
              "fieldName": "label",
              "attribute": "label",
              "inheritedFrom": {
                "name": "IgcInputBaseComponent",
                "module": "src/components/input/input-base.ts"
              }
            }
          ],
          "mixins": [
            {
              "name": "EventEmitterMixin",
              "module": "/src/components/common/mixins/event-emitter.js"
            }
          ],
          "superclass": {
            "name": "IgcInputBaseComponent",
            "module": "/src/components/input/input-base.js"
          },
          "tagName": "igc-file-input",
          "customElement": true
        }
      ],
      "exports": [
        {
          "kind": "js",
          "name": "default",
          "declaration": {
            "name": "IgcFileInputComponent",
            "module": "src/components/file-input/file-input.ts"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "src/components/select/select-item.ts",
      "declarations": [
        {
          "kind": "class",
          "description": "Represents an item in a select list.",
          "name": "IgcSelectItemComponent",
          "cssParts": [
            {
              "description": "The prefix wrapper of the igc-select-item.",
              "name": "prefix"
            },
            {
              "description": "The main content wrapper of the igc-select-item.",
              "name": "content"
            },
            {
              "description": "The suffix wrapper of the igc-select-item.",
              "name": "suffix"
            }
          ],
          "slots": [
            {
              "description": "Renders the all content bar the prefix and suffix.",
              "name": ""
            },
            {
              "description": "Renders content before the main content area.",
              "name": "prefix"
            },
            {
              "description": "Renders content after the main content area.",
              "name": "suffix"
            }
          ],
          "members": [
            {
              "kind": "field",
              "name": "tagName",
              "type": {
                "text": "string"
              },
              "privacy": "public",
              "static": true,
              "readonly": true,
              "default": "'igc-select-item'"
            },
            {
              "kind": "method",
              "name": "register",
              "privacy": "public",
              "static": true,
              "return": {
                "type": {
                  "text": "void"
                }
              }
            },
            {
              "kind": "field",
              "name": "active",
              "privacy": "public",
              "description": "Whether the item is disabled.",
              "attribute": "active",
              "type": {
                "text": "boolean"
              },
              "reflects": true,
              "inheritedFrom": {
                "name": "IgcBaseOptionLikeComponent",
                "module": "src/components/common/mixins/option.ts"
              }
            },
            {
              "kind": "field",
              "name": "_internals",
              "privacy": "protected",
              "readonly": true,
              "inheritedFrom": {
                "name": "IgcBaseOptionLikeComponent",
                "module": "src/components/common/mixins/option.ts"
              }
            },
            {
              "kind": "field",
              "name": "_active",
              "type": {
                "text": "boolean"
              },
              "privacy": "protected",
              "default": "false",
              "inheritedFrom": {
                "name": "IgcBaseOptionLikeComponent",
                "module": "src/components/common/mixins/option.ts"
              }
            },
            {
              "kind": "field",
              "name": "_disabled",
              "type": {
                "text": "boolean"
              },
              "privacy": "protected",
              "default": "false",
              "inheritedFrom": {
                "name": "IgcBaseOptionLikeComponent",
                "module": "src/components/common/mixins/option.ts"
              }
            },
            {
              "kind": "field",
              "name": "_selected",
              "type": {
                "text": "boolean"
              },
              "privacy": "protected",
              "default": "false",
              "inheritedFrom": {
                "name": "IgcBaseOptionLikeComponent",
                "module": "src/components/common/mixins/option.ts"
              }
            },
            {
              "kind": "field",
              "name": "_value",
              "type": {
                "text": "string"
              },
              "privacy": "protected",
              "inheritedFrom": {
                "name": "IgcBaseOptionLikeComponent",
                "module": "src/components/common/mixins/option.ts"
              }
            },
            {
              "kind": "field",
              "name": "_content",
              "type": {
                "text": "Array<Element>"
              },
              "privacy": "protected",
              "readonly": true,
              "inheritedFrom": {
                "name": "IgcBaseOptionLikeComponent",
                "module": "src/components/common/mixins/option.ts"
              }
            },
            {
              "kind": "field",
              "name": "_contentSlotText",
              "type": {
                "text": "string"
              },
              "privacy": "protected",
              "readonly": true,
              "inheritedFrom": {
                "name": "IgcBaseOptionLikeComponent",
                "module": "src/components/common/mixins/option.ts"
              }
            },
            {
              "kind": "field",
              "name": "disabled",
              "privacy": "public",
              "description": "Whether the item is disabled.",
              "attribute": "disabled",
              "type": {
                "text": "boolean"
              },
              "reflects": true,
              "inheritedFrom": {
                "name": "IgcBaseOptionLikeComponent",
                "module": "src/components/common/mixins/option.ts"
              }
            },
            {
              "kind": "field",
              "name": "selected",
              "privacy": "public",
              "description": "Whether the item is selected.",
              "attribute": "selected",
              "type": {
                "text": "boolean"
              },
              "reflects": true,
              "inheritedFrom": {
                "name": "IgcBaseOptionLikeComponent",
                "module": "src/components/common/mixins/option.ts"
              }
            },
            {
              "kind": "field",
              "name": "value",
              "privacy": "public",
              "description": "The current value of the item.\nIf not specified, the element's text content is used.",
              "attribute": "value",
              "type": {
                "text": "string"
              },
              "inheritedFrom": {
                "name": "IgcBaseOptionLikeComponent",
                "module": "src/components/common/mixins/option.ts"
              }
            }
          ],
          "attributes": [
            {
              "name": "active",
              "description": "Whether the item is disabled.",
              "fieldName": "active",
              "attribute": "active",
              "type": {
                "text": "boolean"
              },
              "inheritedFrom": {
                "name": "IgcBaseOptionLikeComponent",
                "module": "src/components/common/mixins/option.ts"
              }
            },
            {
              "name": "disabled",
              "description": "Whether the item is disabled.",
              "fieldName": "disabled",
              "attribute": "disabled",
              "type": {
                "text": "boolean"
              },
              "inheritedFrom": {
                "name": "IgcBaseOptionLikeComponent",
                "module": "src/components/common/mixins/option.ts"
              }
            },
            {
              "name": "selected",
              "description": "Whether the item is selected.",
              "fieldName": "selected",
              "attribute": "selected",
              "type": {
                "text": "boolean"
              },
              "inheritedFrom": {
                "name": "IgcBaseOptionLikeComponent",
                "module": "src/components/common/mixins/option.ts"
              }
            },
            {
              "name": "value",
              "description": "The current value of the item.\nIf not specified, the element's text content is used.",
              "fieldName": "value",
              "attribute": "value",
              "type": {
                "text": "string"
              },
              "inheritedFrom": {
                "name": "IgcBaseOptionLikeComponent",
                "module": "src/components/common/mixins/option.ts"
              }
            }
          ],
          "superclass": {
            "name": "IgcBaseOptionLikeComponent",
            "module": "/src/components/common/mixins/option.js"
          },
          "tagName": "igc-select-item",
          "customElement": true
        }
      ],
      "exports": [
        {
          "kind": "js",
          "name": "default",
          "declaration": {
            "name": "IgcSelectItemComponent",
            "module": "src/components/select/select-item.ts"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "src/components/select/select-group.ts",
      "declarations": [
        {
          "kind": "class",
          "description": "",
          "name": "IgcSelectGroupComponent",
          "cssParts": [
            {
              "description": "The native label element.",
              "name": "label"
            }
          ],
          "slots": [
            {
              "description": "Contains the group's label.",
              "name": "label"
            },
            {
              "description": "Intended to contain the items belonging to this group.",
              "name": ""
            }
          ],
          "members": [
            {
              "kind": "field",
              "name": "tagName",
              "type": {
                "text": "string"
              },
              "privacy": "public",
              "static": true,
              "readonly": true,
              "default": "'igc-select-group'"
            },
            {
              "kind": "method",
              "name": "register",
              "privacy": "public",
              "static": true,
              "return": {
                "type": {
                  "text": "void"
                }
              }
            },
            {
              "kind": "field",
              "name": "_internals",
              "privacy": "private",
              "readonly": true
            },
            {
              "kind": "field",
              "name": "controlledItems",
              "type": {
                "text": "Array<IgcSelectItemComponent>"
              },
              "privacy": "private"
            },
            {
              "kind": "field",
              "name": "items",
              "type": {
                "text": "Array<IgcSelectItemComponent>"
              },
              "privacy": "public",
              "description": "All child `igc-select-item`s."
            },
            {
              "kind": "field",
              "name": "activeItems",
              "type": {
                "text": "Array<IgcSelectItemComponent>"
              },
              "privacy": "protected"
            },
            {
              "kind": "method",
              "name": "_observerCallback",
              "privacy": "private",
              "parameters": [
                {
                  "name": "{\n    changes: { attributes },\n  }",
                  "type": {
                    "text": "MutationControllerParams<IgcSelectItemComponent>"
                  }
                }
              ]
            },
            {
              "kind": "field",
              "name": "disabled",
              "type": {
                "text": "boolean"
              },
              "privacy": "public",
              "default": "false",
              "description": "Whether the group item and all its children are disabled.",
              "attribute": "disabled",
              "reflects": true
            },
            {
              "kind": "method",
              "name": "disabledChange",
              "privacy": "protected"
            }
          ],
          "attributes": [
            {
              "name": "disabled",
              "type": {
                "text": "boolean"
              },
              "default": "false",
              "description": "Whether the group item and all its children are disabled.",
              "fieldName": "disabled",
              "attribute": "disabled"
            }
          ],
          "superclass": {
            "name": "LitElement",
            "package": "lit"
          },
          "tagName": "igc-select-group",
          "customElement": true
        }
      ],
      "exports": [
        {
          "kind": "js",
          "name": "default",
          "declaration": {
            "name": "IgcSelectGroupComponent",
            "module": "src/components/select/select-group.ts"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "src/components/select/select-header.ts",
      "declarations": [
        {
          "kind": "class",
          "description": "Represents a header item in an igc-select component.",
          "name": "IgcSelectHeaderComponent",
          "slots": [
            {
              "description": "Renders the header.",
              "name": ""
            }
          ],
          "members": [
            {
              "kind": "field",
              "name": "tagName",
              "type": {
                "text": "string"
              },
              "privacy": "public",
              "static": true,
              "readonly": true,
              "default": "'igc-select-header'"
            },
            {
              "kind": "method",
              "name": "register",
              "privacy": "public",
              "static": true,
              "return": {
                "type": {
                  "text": "void"
                }
              }
            }
          ],
          "superclass": {
            "name": "LitElement",
            "package": "lit"
          },
          "tagName": "igc-select-header",
          "customElement": true
        }
      ],
      "exports": [
        {
          "kind": "js",
          "name": "default",
          "declaration": {
            "name": "IgcSelectHeaderComponent",
            "module": "src/components/select/select-header.ts"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "src/components/select/validators.ts",
      "declarations": [
        {
          "kind": "variable",
          "name": "selectValidators",
          "type": {
            "text": "Validator<IgcSelectComponent>[]"
          },
          "default": "[ requiredValidator, ]"
        }
      ],
      "exports": [
        {
          "kind": "js",
          "name": "selectValidators",
          "declaration": {
            "name": "selectValidators",
            "module": "src/components/select/validators.ts"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "src/components/select/select.ts",
      "declarations": [
        {
          "kind": "class",
          "description": "Represents a control that provides a menu of options.",
          "name": "IgcSelectComponent",
          "cssParts": [
            {
              "description": "The list wrapping container for the items of the igc-select.",
              "name": "list"
            },
            {
              "description": "The encapsulated igc-input of the igc-select.",
              "name": "input"
            },
            {
              "description": "The encapsulated text label of the igc-select.",
              "name": "label"
            },
            {
              "description": "The prefix wrapper of the input of the igc-select.",
              "name": "prefix"
            },
            {
              "description": "The suffix wrapper of the input of the igc-select.",
              "name": "suffix"
            },
            {
              "description": "The toggle icon wrapper of the igc-select.",
              "name": "toggle-icon"
            },
            {
              "description": "The helper text wrapper of the igc-select.",
              "name": "helper-text"
            }
          ],
          "slots": [
            {
              "description": "Renders the list of select items.",
              "name": ""
            },
            {
              "description": "Renders content before the input.",
              "name": "prefix"
            },
            {
              "description": "Renders content after input.",
              "name": "suffix"
            },
            {
              "description": "Renders a container before the list of options.",
              "name": "header"
            },
            {
              "description": "Renders a container after the list of options.",
              "name": "footer"
            },
            {
              "description": "Renders content below the input.",
              "name": "helper-text"
            },
            {
              "description": "Renders content inside the suffix container.",
              "name": "toggle-icon"
            },
            {
              "description": "Renders content for the toggle icon when the component is in open state.",
              "name": "toggle-icon-expanded"
            },
            {
              "description": "Renders content when the required validation fails.",
              "name": "value-missing"
            },
            {
              "description": "Renders content when setCustomValidity(message) is set.",
              "name": "custom-error"
            },
            {
              "description": "Renders content when the component is in invalid state (validity.valid = false).",
              "name": "invalid"
            }
          ],
          "members": [
            {
              "kind": "field",
              "name": "tagName",
              "type": {
                "text": "string"
              },
              "privacy": "public",
              "static": true,
              "readonly": true,
              "default": "'igc-select'"
            },
            {
              "kind": "method",
              "name": "register",
              "privacy": "public",
              "static": true
            },
            {
              "kind": "field",
              "name": "_rootClickController",
              "type": {
                "text": "RootClickController"
              },
              "privacy": "protected",
              "readonly": true,
              "inheritedFrom": {
                "name": "IgcBaseComboBoxLikeComponent",
                "module": "src/components/common/mixins/combo-box.ts"
              }
            },
            {
              "kind": "field",
              "name": "_formValue",
              "type": {
                "text": "FormValue<unknown>"
              },
              "privacy": "protected",
              "readonly": true,
              "inheritedFrom": {
                "name": "BaseFormAssociated",
                "module": "src/components/common/mixins/forms/associated.ts"
              }
            },
            {
              "kind": "field",
              "name": "_searchTerm",
              "type": {
                "text": "string"
              },
              "privacy": "private",
              "default": "''"
            },
            {
              "kind": "field",
              "name": "_lastKeyTime",
              "type": {
                "text": "number"
              },
              "privacy": "private",
              "default": "0"
            },
            {
              "kind": "field",
              "name": "_rootScrollController",
              "privacy": "private"
            },
            {
              "kind": "field",
              "name": "_activeItems",
              "privacy": "private",
              "readonly": true
            },
            {
              "kind": "field",
              "name": "_selectedItem",
              "type": {
                "text": "IgcSelectItemComponent | null"
              },
              "privacy": "protected",
              "default": "null"
            },
            {
              "kind": "field",
              "name": "_activeItem",
              "type": {
                "text": "IgcSelectItemComponent"
              },
              "privacy": "protected"
            },
            {
              "kind": "field",
              "name": "__validators",
              "type": {
                "text": "Validator[]"
              },
              "privacy": "protected",
              "readonly": true,
              "inheritedFrom": {
                "name": "BaseFormAssociated",
                "module": "src/components/common/mixins/forms/associated.ts"
              }
            },
            {
              "kind": "field",
              "name": "_input",
              "type": {
                "text": "IgcInputComponent"
              },
              "privacy": "protected"
            },
            {
              "kind": "field",
              "name": "_inputSuffix",
              "type": {
                "text": "Array<HTMLElement>"
              },
              "privacy": "protected"
            },
            {
              "kind": "field",
              "name": "_inputPrefix",
              "type": {
                "text": "Array<HTMLElement>"
              },
              "privacy": "protected"
            },
            {
              "kind": "field",
              "name": "_expandedIconSlot",
              "type": {
                "text": "Array<HTMLElement>"
              },
              "privacy": "protected"
            },
            {
              "kind": "field",
              "name": "value",
              "privacy": "public",
              "description": "The value attribute of the control.",
              "attribute": "value",
              "type": {
                "text": "string | undefined"
              }
            },
            {
              "kind": "field",
              "name": "outlined",
              "type": {
                "text": "boolean"
              },
              "privacy": "public",
              "default": "false",
              "description": "The outlined attribute of the control.",
              "attribute": "outlined",
              "reflects": true
            },
            {
              "kind": "field",
              "name": "autofocus",
              "type": {
                "text": "boolean"
              },
              "privacy": "public",
              "description": "The autofocus attribute of the control.",
              "attribute": "autofocus"
            },
            {
              "kind": "field",
              "name": "distance",
              "type": {
                "text": "number"
              },
              "privacy": "public",
              "default": "0",
              "description": "The distance of the select dropdown from its input.",
              "attribute": "distance"
            },
            {
              "kind": "field",
              "name": "label",
              "type": {
                "text": "string"
              },
              "privacy": "public",
              "description": "The label attribute of the control.",
              "attribute": "label"
            },
            {
              "kind": "field",
              "name": "placeholder",
              "type": {
                "text": "string"
              },
              "privacy": "public",
              "description": "The placeholder attribute of the control.",
              "attribute": "placeholder"
            },
            {
              "kind": "field",
              "name": "placement",
              "type": {
                "text": "PopoverPlacement"
              },
              "privacy": "public",
              "default": "'bottom-start'",
              "description": "The preferred placement of the select dropdown around its input.",
              "attribute": "placement",
              "expandedType": {
                "text": "'top' | 'top-start' | 'top-end' | 'bottom' | 'bottom-start' | 'bottom-end' | 'right' | 'right-start' | 'right-end' | 'left' | 'left-start' | 'left-end'"
              }
            },
            {
              "kind": "field",
              "name": "scrollStrategy",
              "type": {
                "text": "PopoverScrollStrategy"
              },
              "privacy": "public",
              "default": "'scroll'",
              "description": "Determines the behavior of the component during scrolling of the parent container.",
              "attribute": "scroll-strategy",
              "expandedType": {
                "text": "'scroll' | 'block' | 'close'"
              }
            },
            {
              "kind": "field",
              "name": "items",
              "privacy": "public",
              "description": "Returns the items of the igc-select component.",
              "readonly": true
            },
            {
              "kind": "field",
              "name": "groups",
              "privacy": "public",
              "description": "Returns the groups of the igc-select component.",
              "readonly": true
            },
            {
              "kind": "field",
              "name": "selectedItem",
              "privacy": "public",
              "description": "Returns the selected item from the dropdown or null.",
              "readonly": true
            },
            {
              "kind": "method",
              "name": "scrollStrategyChanged",
              "privacy": "protected"
            },
            {
              "kind": "method",
              "name": "openChange",
              "privacy": "protected"
            },
            {
              "kind": "method",
              "name": "handleFocusIn",
              "privacy": "private",
              "parameters": [
                {
                  "name": "{ relatedTarget }",
                  "type": {
                    "text": "FocusEvent"
                  }
                }
              ]
            },
            {
              "kind": "method",
              "name": "handleFocusOut",
              "privacy": "private",
              "parameters": [
                {
                  "name": "{ relatedTarget }",
                  "type": {
                    "text": "FocusEvent"
                  }
                }
              ]
            },
            {
              "kind": "method",
              "name": "handleClick",
              "privacy": "private",
              "parameters": [
                {
                  "name": "event",
                  "type": {
                    "text": "MouseEvent"
                  }
                }
              ]
            },
            {
              "kind": "method",
              "name": "handleChange",
              "privacy": "private",
              "parameters": [
                {
                  "name": "item",
                  "type": {
                    "text": "IgcSelectItemComponent"
                  }
                }
              ]
            },
            {
              "kind": "method",
              "name": "handleSearch",
              "privacy": "private",
              "parameters": [
                {
                  "name": "event",
                  "type": {
                    "text": "KeyboardEvent"
                  }
                }
              ]
            },
            {
              "kind": "method",
              "name": "handleAnchorClick",
              "privacy": "protected",
              "return": {
                "type": {
                  "text": "void"
                }
              },
              "inheritedFrom": {
                "name": "IgcBaseComboBoxLikeComponent",
                "module": "src/components/common/mixins/combo-box.ts"
              }
            },
            {
              "kind": "method",
              "name": "onEnterKey",
              "privacy": "private"
            },
            {
              "kind": "method",
              "name": "onSpaceBarKey",
              "privacy": "private"
            },
            {
              "kind": "method",
              "name": "onArrowDown",
              "privacy": "private"
            },
            {
              "kind": "method",
              "name": "onArrowUp",
              "privacy": "private"
            },
            {
              "kind": "method",
              "name": "altArrowDown",
              "privacy": "private"
            },
            {
              "kind": "method",
              "name": "altArrowUp",
              "privacy": "private"
            },
            {
              "kind": "method",
              "name": "onEscapeKey",
              "privacy": "protected"
            },
            {
              "kind": "method",
              "name": "onTabKey",
              "privacy": "private",
              "parameters": [
                {
                  "name": "event",
                  "type": {
                    "text": "KeyboardEvent"
                  }
                }
              ]
            },
            {
              "kind": "method",
              "name": "onHomeKey",
              "privacy": "protected"
            },
            {
              "kind": "method",
              "name": "onEndKey",
              "privacy": "protected"
            },
            {
              "kind": "method",
              "name": "handleClosing",
              "privacy": "protected"
            },
            {
              "kind": "method",
              "name": "activateItem",
              "privacy": "private",
              "parameters": [
                {
                  "name": "item",
                  "type": {
                    "text": "IgcSelectItemComponent"
                  }
                }
              ]
            },
            {
              "kind": "method",
              "name": "setSelectedItem",
              "privacy": "private",
              "parameters": [
                {
                  "name": "item",
                  "type": {
                    "text": "IgcSelectItemComponent"
                  }
                }
              ]
            },
            {
              "kind": "method",
              "name": "_selectItem",
              "privacy": "private",
              "parameters": [
                {
                  "name": "item",
                  "optional": true,
                  "type": {
                    "text": "IgcSelectItemComponent"
                  }
                },
                {
                  "name": "emit",
                  "default": "true"
                }
              ]
            },
            {
              "kind": "method",
              "name": "_navigateToActiveItem",
              "privacy": "private",
              "parameters": [
                {
                  "name": "item",
                  "optional": true,
                  "type": {
                    "text": "IgcSelectItemComponent"
                  }
                }
              ]
            },
            {
              "kind": "method",
              "name": "_updateValue",
              "privacy": "private",
              "parameters": [
                {
                  "name": "value",
                  "optional": true,
                  "type": {
                    "text": "string"
                  }
                }
              ]
            },
            {
              "kind": "method",
              "name": "clearSelectedItem",
              "privacy": "private"
            },
            {
              "kind": "method",
              "name": "focusItemOnOpen",
              "privacy": "private"
            },
            {
              "kind": "method",
              "name": "getItem",
              "privacy": "protected",
              "parameters": [
                {
                  "name": "value",
                  "type": {
                    "text": "string"
                  }
                }
              ]
            },
            {
              "kind": "method",
              "name": "focus",
              "privacy": "public",
              "parameters": [
                {
                  "name": "options",
                  "optional": true,
                  "type": {
                    "text": "FocusOptions"
                  }
                }
              ],
              "description": "Sets focus on the component."
            },
            {
              "kind": "method",
              "name": "blur",
              "privacy": "public",
              "description": "Removes focus from the component."
            },
            {
              "kind": "method",
              "name": "reportValidity",
              "privacy": "public",
              "description": "Checks the validity of the control and moves the focus to it if it is not valid.",
              "inheritedFrom": {
                "name": "BaseFormAssociated",
                "module": "src/components/common/mixins/forms/associated.ts"
              }
            },
            {
              "kind": "method",
              "name": "navigateTo",
              "privacy": "public",
              "return": {
                "type": {
                  "text": "IgcSelectItemComponent | null"
                }
              },
              "parameters": [
                {
                  "name": "value",
                  "type": {
                    "text": "string"
                  }
                }
              ],
              "description": "Navigates to the item with the specified value. If it exists, returns the found item, otherwise - null."
            },
            {
              "kind": "method",
              "name": "navigateTo",
              "privacy": "public",
              "return": {
                "type": {
                  "text": "IgcSelectItemComponent | null"
                }
              },
              "parameters": [
                {
                  "name": "index",
                  "type": {
                    "text": "number"
                  }
                }
              ],
              "description": "Navigates to the item at the specified index. If it exists, returns the found item, otherwise - null."
            },
            {
              "kind": "method",
              "name": "navigateTo",
              "privacy": "public",
              "return": {
                "type": {
                  "text": "IgcSelectItemComponent | null"
                }
              },
              "parameters": [
                {
                  "name": "value",
                  "type": {
                    "text": "string | number"
                  }
                }
              ],
              "description": "Navigates to the specified item. If it exists, returns the found item, otherwise - null."
            },
            {
              "kind": "method",
              "name": "select",
              "privacy": "public",
              "return": {
                "type": {
                  "text": "IgcSelectItemComponent | null"
                }
              },
              "parameters": [
                {
                  "name": "value",
                  "type": {
                    "text": "string"
                  }
                }
              ],
              "description": "Selects the item with the specified value. If it exists, returns the found item, otherwise - null."
            },
            {
              "kind": "method",
              "name": "select",
              "privacy": "public",
              "return": {
                "type": {
                  "text": "IgcSelectItemComponent | null"
                }
              },
              "parameters": [
                {
                  "name": "index",
                  "type": {
                    "text": "number"
                  }
                }
              ],
              "description": "Selects the item at the specified index. If it exists, returns the found item, otherwise - null."
            },
            {
              "kind": "method",
              "name": "select",
              "privacy": "public",
              "return": {
                "type": {
                  "text": "IgcSelectItemComponent | null"
                }
              },
              "parameters": [
                {
                  "name": "value",
                  "type": {
                    "text": "string | number"
                  }
                }
              ],
              "description": "Selects the specified item. If it exists, returns the found item, otherwise - null."
            },
            {
              "kind": "method",
              "name": "clearSelection",
              "privacy": "public",
              "description": "Resets the current value and selection of the component."
            },
            {
              "kind": "method",
              "name": "renderInputSlots",
              "privacy": "protected"
            },
            {
              "kind": "method",
              "name": "renderToggleIcon",
              "privacy": "protected"
            },
            {
              "kind": "method",
              "name": "renderHelperText",
              "privacy": "protected",
              "return": {
                "type": {
                  "text": "TemplateResult"
                }
              }
            },
            {
              "kind": "method",
              "name": "renderInputAnchor",
              "privacy": "protected"
            },
            {
              "kind": "method",
              "name": "renderDropdown",
              "privacy": "protected"
            },
            {
              "kind": "field",
              "name": "_required",
              "type": {
                "text": "boolean"
              },
              "privacy": "protected",
              "default": "false",
              "inheritedFrom": {
                "name": "FormAssociatedRequiredMixin",
                "module": "src/components/common/mixins/forms/associated-required.ts"
              }
            },
            {
              "kind": "field",
              "name": "required",
              "privacy": "public",
              "description": "When set, makes the component a required field for validation.",
              "default": "false",
              "attribute": "required",
              "type": {
                "text": "boolean"
              },
              "reflects": true,
              "inheritedFrom": {
                "name": "FormAssociatedRequiredMixin",
                "module": "src/components/common/mixins/forms/associated-required.ts"
              }
            },
            {
              "kind": "field",
              "name": "defaultValue",
              "privacy": "public",
              "inheritedFrom": {
                "name": "FormAssociatedMixin",
                "module": "src/components/common/mixins/forms/associated.ts"
              }
            },
            {
              "kind": "field",
              "name": "formAssociated",
              "type": {
                "text": "boolean"
              },
              "privacy": "public",
              "static": true,
              "readonly": true,
              "default": "true",
              "inheritedFrom": {
                "name": "BaseFormAssociated",
                "module": "src/components/common/mixins/forms/associated.ts"
              }
            },
            {
              "kind": "field",
              "name": "__internals",
              "type": {
                "text": "ElementInternals"
              },
              "privacy": "private",
              "inheritedFrom": {
                "name": "BaseFormAssociated",
                "module": "src/components/common/mixins/forms/associated.ts"
              }
            },
            {
              "kind": "field",
              "name": "_disabled",
              "type": {
                "text": "boolean"
              },
              "privacy": "protected",
              "default": "false",
              "inheritedFrom": {
                "name": "BaseFormAssociated",
                "module": "src/components/common/mixins/forms/associated.ts"
              }
            },
            {
              "kind": "field",
              "name": "_invalid",
              "type": {
                "text": "boolean"
              },
              "privacy": "protected",
              "default": "false",
              "inheritedFrom": {
                "name": "BaseFormAssociated",
                "module": "src/components/common/mixins/forms/associated.ts"
              }
            },
            {
              "kind": "field",
              "name": "_dirty",
              "type": {
                "text": "boolean"
              },
              "privacy": "protected",
              "default": "false",
              "inheritedFrom": {
                "name": "BaseFormAssociated",
                "module": "src/components/common/mixins/forms/associated.ts"
              }
            },
            {
              "kind": "field",
              "name": "_pristine",
              "type": {
                "text": "boolean"
              },
              "privacy": "protected",
              "default": "true",
              "inheritedFrom": {
                "name": "BaseFormAssociated",
                "module": "src/components/common/mixins/forms/associated.ts"
              }
            },
            {
              "kind": "field",
              "name": "name",
              "type": {
                "text": "string"
              },
              "privacy": "public",
              "description": "The name attribute of the control.",
              "attribute": "name",
              "reflects": true,
              "inheritedFrom": {
                "name": "BaseFormAssociated",
                "module": "src/components/common/mixins/forms/associated.ts"
              }
            },
            {
              "kind": "field",
              "name": "disabled",
              "privacy": "public",
              "description": "The disabled state of the component.",
              "default": "false",
              "attribute": "disabled",
              "type": {
                "text": "boolean"
              },
              "reflects": true,
              "inheritedFrom": {
                "name": "BaseFormAssociated",
                "module": "src/components/common/mixins/forms/associated.ts"
              }
            },
            {
              "kind": "field",
              "name": "invalid",
              "privacy": "public",
              "description": "Sets the control into invalid state (visual state only).",
              "default": "false",
              "attribute": "invalid",
              "type": {
                "text": "boolean"
              },
              "reflects": true,
              "inheritedFrom": {
                "name": "BaseFormAssociated",
                "module": "src/components/common/mixins/forms/associated.ts"
              }
            },
            {
              "kind": "field",
              "name": "form",
              "type": {
                "text": "HTMLFormElement | null"
              },
              "privacy": "public",
              "description": "Returns the HTMLFormElement associated with this element.",
              "readonly": true,
              "inheritedFrom": {
                "name": "BaseFormAssociated",
                "module": "src/components/common/mixins/forms/associated.ts"
              }
            },
            {
              "kind": "field",
              "name": "validity",
              "type": {
                "text": "ValidityState"
              },
              "privacy": "public",
              "description": "Returns a ValidityState object which represents the different validity states\nthe element can be in, with respect to constraint validation.",
              "readonly": true,
              "inheritedFrom": {
                "name": "BaseFormAssociated",
                "module": "src/components/common/mixins/forms/associated.ts"
              }
            },
            {
              "kind": "field",
              "name": "validationMessage",
              "type": {
                "text": "string"
              },
              "privacy": "public",
              "description": "A string containing the validation message of this element.",
              "readonly": true,
              "inheritedFrom": {
                "name": "BaseFormAssociated",
                "module": "src/components/common/mixins/forms/associated.ts"
              }
            },
            {
              "kind": "field",
              "name": "willValidate",
              "type": {
                "text": "boolean"
              },
              "privacy": "public",
              "description": "A boolean value which returns true if the element is a submittable element\nthat is a candidate for constraint validation.",
              "readonly": true,
              "inheritedFrom": {
                "name": "BaseFormAssociated",
                "module": "src/components/common/mixins/forms/associated.ts"
              }
            },
            {
              "kind": "method",
              "name": "_handleInvalid",
              "privacy": "private",
              "parameters": [
                {
                  "name": "event",
                  "type": {
                    "text": "Event"
                  }
                }
              ],
              "inheritedFrom": {
                "name": "BaseFormAssociated",
                "module": "src/components/common/mixins/forms/associated.ts"
              }
            },
            {
              "kind": "method",
              "name": "_setInvalidState",
              "privacy": "private",
              "return": {
                "type": {
                  "text": "void"
                }
              },
              "inheritedFrom": {
                "name": "BaseFormAssociated",
                "module": "src/components/common/mixins/forms/associated.ts"
              }
            },
            {
              "kind": "method",
              "name": "__runValidators",
              "privacy": "private",
              "inheritedFrom": {
                "name": "BaseFormAssociated",
                "module": "src/components/common/mixins/forms/associated.ts"
              }
            },
            {
              "kind": "method",
              "name": "_setDefaultValue",
              "privacy": "protected",
              "return": {
                "type": {
                  "text": "void"
                }
              },
              "parameters": [
                {
                  "name": "current",
                  "type": {
                    "text": "string | null"
                  }
                }
              ],
              "inheritedFrom": {
                "name": "BaseFormAssociated",
                "module": "src/components/common/mixins/forms/associated.ts"
              }
            },
            {
              "kind": "method",
              "name": "_restoreDefaultValue",
              "privacy": "protected",
              "return": {
                "type": {
                  "text": "void"
                }
              },
              "inheritedFrom": {
                "name": "BaseFormAssociated",
                "module": "src/components/common/mixins/forms/associated.ts"
              }
            },
            {
              "kind": "method",
              "name": "_validate",
              "privacy": "protected",
              "return": {
                "type": {
                  "text": "void"
                }
              },
              "parameters": [
                {
                  "name": "message",
                  "optional": true,
                  "type": {
                    "text": "string"
                  }
                }
              ],
              "inheritedFrom": {
                "name": "BaseFormAssociated",
                "module": "src/components/common/mixins/forms/associated.ts"
              }
            },
            {
              "kind": "method",
              "name": "_updateValidity",
              "privacy": "protected",
              "parameters": [
                {
                  "name": "error",
                  "optional": true,
                  "type": {
                    "text": "string"
                  }
                }
              ],
              "description": "Executes the component validators and updates the internal validity state.",
              "inheritedFrom": {
                "name": "BaseFormAssociated",
                "module": "src/components/common/mixins/forms/associated.ts"
              }
            },
            {
              "kind": "method",
              "name": "_setFormValue",
              "privacy": "protected",
              "return": {
                "type": {
                  "text": "void"
                }
              },
              "parameters": [
                {
                  "name": "value",
                  "type": {
                    "text": "FormValueType"
                  }
                },
                {
                  "name": "state",
                  "optional": true,
                  "type": {
                    "text": "FormValueType"
                  }
                }
              ],
              "inheritedFrom": {
                "name": "BaseFormAssociated",
                "module": "src/components/common/mixins/forms/associated.ts"
              }
            },
            {
              "kind": "method",
              "name": "formAssociatedCallback",
              "privacy": "protected",
              "return": {
                "type": {
                  "text": "void"
                }
              },
              "parameters": [
                {
                  "name": "_form",
                  "type": {
                    "text": "HTMLFormElement"
                  }
                }
              ],
              "inheritedFrom": {
                "name": "BaseFormAssociated",
                "module": "src/components/common/mixins/forms/associated.ts"
              }
            },
            {
              "kind": "method",
              "name": "formDisabledCallback",
              "privacy": "protected",
              "return": {
                "type": {
                  "text": "void"
                }
              },
              "parameters": [
                {
                  "name": "state",
                  "type": {
                    "text": "boolean"
                  }
                }
              ],
              "inheritedFrom": {
                "name": "BaseFormAssociated",
                "module": "src/components/common/mixins/forms/associated.ts"
              }
            },
            {
              "kind": "method",
              "name": "formResetCallback",
              "privacy": "protected",
              "return": {
                "type": {
                  "text": "void"
                }
              },
              "inheritedFrom": {
                "name": "BaseFormAssociated",
                "module": "src/components/common/mixins/forms/associated.ts"
              }
            },
            {
              "kind": "method",
              "name": "formStateRestoreCallback",
              "privacy": "protected",
              "return": {
                "type": {
                  "text": "void"
                }
              },
              "parameters": [
                {
                  "name": "_state",
                  "type": {
                    "text": "FormValueType"
                  }
                },
                {
                  "name": "_mode",
                  "type": {
                    "text": "FormRestoreMode"
                  }
                }
              ],
              "inheritedFrom": {
                "name": "BaseFormAssociated",
                "module": "src/components/common/mixins/forms/associated.ts"
              }
            },
            {
              "kind": "method",
              "name": "checkValidity",
              "privacy": "public",
              "description": "Checks for validity of the control and emits the invalid event if it invalid.",
              "inheritedFrom": {
                "name": "BaseFormAssociated",
                "module": "src/components/common/mixins/forms/associated.ts"
              }
            },
            {
              "kind": "method",
              "name": "setCustomValidity",
              "privacy": "public",
              "parameters": [
                {
                  "name": "message",
                  "type": {
                    "text": "string"
                  }
                }
              ],
              "description": "Sets a custom validation message for the control.\nAs long as `message` is not empty, the control is considered invalid.",
              "inheritedFrom": {
                "name": "BaseFormAssociated",
                "module": "src/components/common/mixins/forms/associated.ts"
              }
            },
            {
              "kind": "method",
              "name": "addEventListener",
              "privacy": "public",
              "return": {
                "type": {
                  "text": "void"
                }
              },
              "parameters": [
                {
                  "name": "type",
                  "type": {
                    "text": "K"
                  }
                },
                {
                  "name": "listener",
                  "type": {
                    "text": "(this: HTMLElement, ev: M[K]) => any"
                  }
                },
                {
                  "name": "options",
                  "optional": true,
                  "type": {
                    "text": "boolean | AddEventListenerOptions"
                  }
                }
              ],
              "inheritedFrom": {
                "name": "EventEmitterMixin",
                "module": "src/components/common/mixins/event-emitter.ts"
              }
            },
            {
              "kind": "method",
              "name": "removeEventListener",
              "privacy": "public",
              "return": {
                "type": {
                  "text": "void"
                }
              },
              "parameters": [
                {
                  "name": "type",
                  "type": {
                    "text": "K"
                  }
                },
                {
                  "name": "listener",
                  "type": {
                    "text": "(this: HTMLElement, ev: M[K]) => any"
                  }
                },
                {
                  "name": "options",
                  "optional": true,
                  "type": {
                    "text": "boolean | EventListenerOptions"
                  }
                }
              ],
              "inheritedFrom": {
                "name": "EventEmitterMixin",
                "module": "src/components/common/mixins/event-emitter.ts"
              }
            },
            {
              "kind": "method",
              "name": "emitEvent",
              "type": {
                "text": "<\n    K extends keyof IgcBaseComboBoxEventMap,\n    D extends UnpackCustomEvent<IgcBaseComboBoxEventMap[K]>,\n  >(\n    event: K,\n    eventInitDict?: CustomEventInit<D>\n  ) => boolean"
              },
              "privacy": "public",
              "return": {
                "type": {
                  "text": "boolean"
                }
              },
              "parameters": [
                {
                  "name": "type",
                  "type": {
                    "text": "K"
                  }
                },
                {
                  "name": "eventInitDict",
                  "optional": true,
                  "type": {
                    "text": "CustomEventInit<D>"
                  }
                }
              ],
              "inheritedFrom": {
                "name": "IgcBaseComboBoxLikeComponent",
                "module": "src/components/common/mixins/combo-box.ts"
              }
            },
            {
              "kind": "field",
              "name": "keepOpenOnSelect",
              "type": {
                "text": "boolean"
              },
              "privacy": "public",
              "default": "false",
              "description": "Whether the component dropdown should be kept open on selection.",
              "attribute": "keep-open-on-select",
              "reflects": true,
              "inheritedFrom": {
                "name": "IgcBaseComboBoxLikeComponent",
                "module": "src/components/common/mixins/combo-box.ts"
              }
            },
            {
              "kind": "field",
              "name": "keepOpenOnOutsideClick",
              "type": {
                "text": "boolean"
              },
              "privacy": "public",
              "default": "false",
              "description": "Whether the component dropdown should be kept open on clicking outside of it.",
              "attribute": "keep-open-on-outside-click",
              "reflects": true,
              "inheritedFrom": {
                "name": "IgcBaseComboBoxLikeComponent",
                "module": "src/components/common/mixins/combo-box.ts"
              }
            },
            {
              "kind": "field",
              "name": "open",
              "type": {
                "text": "boolean"
              },
              "privacy": "public",
              "default": "false",
              "description": "Sets the open state of the component.",
              "attribute": "open",
              "reflects": true,
              "inheritedFrom": {
                "name": "IgcBaseComboBoxLikeComponent",
                "module": "src/components/common/mixins/combo-box.ts"
              }
            },
            {
              "kind": "method",
              "name": "emitClosing",
              "privacy": "protected",
              "inheritedFrom": {
                "name": "IgcBaseComboBoxLikeComponent",
                "module": "src/components/common/mixins/combo-box.ts"
              }
            },
            {
              "kind": "method",
              "name": "emitClosed",
              "privacy": "protected",
              "inheritedFrom": {
                "name": "IgcBaseComboBoxLikeComponent",
                "module": "src/components/common/mixins/combo-box.ts"
              }
            },
            {
              "kind": "method",
              "name": "emitOpening",
              "privacy": "protected",
              "inheritedFrom": {
                "name": "IgcBaseComboBoxLikeComponent",
                "module": "src/components/common/mixins/combo-box.ts"
              }
            },
            {
              "kind": "method",
              "name": "emitOpened",
              "privacy": "protected",
              "inheritedFrom": {
                "name": "IgcBaseComboBoxLikeComponent",
                "module": "src/components/common/mixins/combo-box.ts"
              }
            },
            {
              "kind": "method",
              "name": "_hide",
              "privacy": "protected",
              "parameters": [
                {
                  "name": "emitEvent",
                  "default": "false"
                }
              ],
              "inheritedFrom": {
                "name": "IgcBaseComboBoxLikeComponent",
                "module": "src/components/common/mixins/combo-box.ts"
              }
            },
            {
              "kind": "method",
              "name": "_show",
              "privacy": "protected",
              "parameters": [
                {
                  "name": "emitEvent",
                  "default": "false"
                }
              ],
              "inheritedFrom": {
                "name": "IgcBaseComboBoxLikeComponent",
                "module": "src/components/common/mixins/combo-box.ts"
              }
            },
            {
              "kind": "method",
              "name": "show",
              "privacy": "public",
              "return": {
                "type": {
                  "text": "Promise<boolean>"
                }
              },
              "description": "Shows the component.",
              "inheritedFrom": {
                "name": "IgcBaseComboBoxLikeComponent",
                "module": "src/components/common/mixins/combo-box.ts"
              }
            },
            {
              "kind": "method",
              "name": "hide",
              "privacy": "public",
              "return": {
                "type": {
                  "text": "Promise<boolean>"
                }
              },
              "description": "Hides the component.",
              "inheritedFrom": {
                "name": "IgcBaseComboBoxLikeComponent",
                "module": "src/components/common/mixins/combo-box.ts"
              }
            },
            {
              "kind": "method",
              "name": "toggle",
              "privacy": "public",
              "return": {
                "type": {
                  "text": "Promise<boolean>"
                }
              },
              "description": "Toggles the open state of the component.",
              "inheritedFrom": {
                "name": "IgcBaseComboBoxLikeComponent",
                "module": "src/components/common/mixins/combo-box.ts"
              }
            }
          ],
          "events": [
            {
              "description": "Emitted when the control's checked state changes.",
              "name": "igcChange"
            },
            {
              "description": "Emitted just before the list of options is opened.",
              "name": "igcOpening"
            },
            {
              "description": "Emitted after the list of options is opened.",
              "name": "igcOpened"
            },
            {
              "description": "Emitter just before the list of options is closed.",
              "name": "igcClosing"
            },
            {
              "description": "Emitted after the list of options is closed.",
              "name": "igcClosed"
            },
            {
              "type": {
                "text": "CustomEvent"
              },
              "inheritedFrom": {
                "name": "EventEmitterMixin",
                "module": "src/components/common/mixins/event-emitter.ts"
              }
            }
          ],
          "attributes": [
            {
              "name": "value",
              "description": "The value attribute of the control.",
              "fieldName": "value",
              "attribute": "value",
              "type": {
                "text": "string | undefined"
              }
            },
            {
              "name": "outlined",
              "type": {
                "text": "boolean"
              },
              "default": "false",
              "description": "The outlined attribute of the control.",
              "fieldName": "outlined",
              "attribute": "outlined"
            },
            {
              "name": "autofocus",
              "type": {
                "text": "boolean"
              },
              "description": "The autofocus attribute of the control.",
              "fieldName": "autofocus",
              "attribute": "autofocus"
            },
            {
              "name": "distance",
              "type": {
                "text": "number"
              },
              "default": "0",
              "description": "The distance of the select dropdown from its input.",
              "fieldName": "distance",
              "attribute": "distance"
            },
            {
              "name": "label",
              "type": {
                "text": "string"
              },
              "description": "The label attribute of the control.",
              "fieldName": "label",
              "attribute": "label"
            },
            {
              "name": "placeholder",
              "type": {
                "text": "string"
              },
              "description": "The placeholder attribute of the control.",
              "fieldName": "placeholder",
              "attribute": "placeholder"
            },
            {
              "name": "placement",
              "type": {
                "text": "PopoverPlacement"
              },
              "default": "'bottom-start'",
              "description": "The preferred placement of the select dropdown around its input.",
              "fieldName": "placement",
              "attribute": "placement",
              "expandedType": {
                "text": "'top' | 'top-start' | 'top-end' | 'bottom' | 'bottom-start' | 'bottom-end' | 'right' | 'right-start' | 'right-end' | 'left' | 'left-start' | 'left-end'"
              }
            },
            {
              "name": "scroll-strategy",
              "type": {
                "text": "PopoverScrollStrategy"
              },
              "default": "'scroll'",
              "description": "Determines the behavior of the component during scrolling of the parent container.",
              "fieldName": "scrollStrategy",
              "attribute": "scroll-strategy",
              "expandedType": {
                "text": "'scroll' | 'block' | 'close'"
              }
            },
            {
              "name": "required",
              "description": "When set, makes the component a required field for validation.",
              "default": "false",
              "fieldName": "required",
              "attribute": "required",
              "type": {
                "text": "boolean"
              },
              "inheritedFrom": {
                "name": "FormAssociatedRequiredMixin",
                "module": "src/components/common/mixins/forms/associated-required.ts"
              }
            },
            {
              "name": "name",
              "type": {
                "text": "string"
              },
              "description": "The name attribute of the control.",
              "fieldName": "name",
              "attribute": "name",
              "inheritedFrom": {
                "name": "BaseFormAssociated",
                "module": "src/components/common/mixins/forms/associated.ts"
              }
            },
            {
              "name": "disabled",
              "description": "The disabled state of the component.",
              "default": "false",
              "fieldName": "disabled",
              "attribute": "disabled",
              "type": {
                "text": "boolean"
              },
              "inheritedFrom": {
                "name": "BaseFormAssociated",
                "module": "src/components/common/mixins/forms/associated.ts"
              }
            },
            {
              "name": "invalid",
              "description": "Sets the control into invalid state (visual state only).",
              "default": "false",
              "fieldName": "invalid",
              "attribute": "invalid",
              "type": {
                "text": "boolean"
              },
              "inheritedFrom": {
                "name": "BaseFormAssociated",
                "module": "src/components/common/mixins/forms/associated.ts"
              }
            },
            {
              "name": "keep-open-on-select",
              "type": {
                "text": "boolean"
              },
              "default": "false",
              "description": "Whether the component dropdown should be kept open on selection.",
              "fieldName": "keepOpenOnSelect",
              "attribute": "keep-open-on-select",
              "inheritedFrom": {
                "name": "IgcBaseComboBoxLikeComponent",
                "module": "src/components/common/mixins/combo-box.ts"
              }
            },
            {
              "name": "keep-open-on-outside-click",
              "type": {
                "text": "boolean"
              },
              "default": "false",
              "description": "Whether the component dropdown should be kept open on clicking outside of it.",
              "fieldName": "keepOpenOnOutsideClick",
              "attribute": "keep-open-on-outside-click",
              "inheritedFrom": {
                "name": "IgcBaseComboBoxLikeComponent",
                "module": "src/components/common/mixins/combo-box.ts"
              }
            },
            {
              "name": "open",
              "type": {
                "text": "boolean"
              },
              "default": "false",
              "description": "Sets the open state of the component.",
              "fieldName": "open",
              "attribute": "open",
              "inheritedFrom": {
                "name": "IgcBaseComboBoxLikeComponent",
                "module": "src/components/common/mixins/combo-box.ts"
              }
            }
          ],
          "mixins": [
            {
              "name": "FormAssociatedRequiredMixin",
              "module": "/src/components/common/mixins/forms/associated-required.js"
            },
            {
              "name": "EventEmitterMixin",
              "module": "/src/components/common/mixins/event-emitter.js"
            }
          ],
          "superclass": {
            "name": "IgcBaseComboBoxLikeComponent",
            "module": "/src/components/common/mixins/combo-box.js"
          },
          "tagName": "igc-select",
          "customElement": true
        }
      ],
      "exports": [
        {
          "kind": "js",
          "name": "default",
          "declaration": {
            "name": "IgcSelectComponent",
            "module": "src/components/select/select.ts"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "src/components/progress/linear-progress.ts",
      "declarations": [
        {
          "kind": "class",
          "description": "A linear progress indicator used to express unspecified wait time or display\nthe length of a process.",
          "name": "IgcLinearProgressComponent",
          "cssParts": [
            {
              "description": "The igc-linear-progress track area.",
              "name": "track"
            },
            {
              "description": "The igc-linear-progress indicator area.",
              "name": "fill"
            },
            {
              "description": "The igc-linear-progress striped indicator.",
              "name": "striped"
            },
            {
              "description": "The igc-linear-progress label.",
              "name": "label"
            },
            {
              "description": "The igc-linear-progress label value.",
              "name": "value"
            },
            {
              "description": "The igc-linear-progress indeterminate state.",
              "name": "indeterminate"
            },
            {
              "description": "The igc-linear-progress indicator primary state.",
              "name": "primary"
            },
            {
              "description": "The igc-linear-progress indicator error state.",
              "name": "danger"
            },
            {
              "description": "The igc-linear-progress indicator warning state.",
              "name": "warning"
            },
            {
              "description": "The igc-linear-progress indicator info state.",
              "name": "info"
            },
            {
              "description": "The igc-linear-progress indicator success state.",
              "name": "success"
            }
          ],
          "slots": [
            {
              "description": "The text area container.",
              "name": ""
            }
          ],
          "members": [
            {
              "kind": "field",
              "name": "tagName",
              "type": {
                "text": "string"
              },
              "privacy": "public",
              "static": true,
              "readonly": true,
              "default": "'igc-linear-progress'"
            },
            {
              "kind": "method",
              "name": "register",
              "privacy": "public",
              "static": true
            },
            {
              "kind": "field",
              "name": "striped",
              "type": {
                "text": "boolean"
              },
              "privacy": "public",
              "default": "false",
              "description": "Sets the striped look of the control.",
              "attribute": "striped",
              "reflects": true
            },
            {
              "kind": "field",
              "name": "labelAlign",
              "type": {
                "text": "LinearProgressLabelAlign"
              },
              "privacy": "public",
              "default": "'top-start'",
              "description": "The position for the default label of the control.",
              "attribute": "label-align",
              "reflects": true,
              "expandedType": {
                "text": "'top-start' | 'top' | 'top-end' | 'bottom-start' | 'bottom' | 'bottom-end'"
              }
            },
            {
              "kind": "field",
              "name": "_internals",
              "privacy": "private",
              "readonly": true,
              "inheritedFrom": {
                "name": "IgcProgressBaseComponent",
                "module": "src/components/progress/base.ts"
              }
            },
            {
              "kind": "field",
              "name": "_assignedElements",
              "type": {
                "text": "HTMLElement[]"
              },
              "privacy": "protected",
              "inheritedFrom": {
                "name": "IgcProgressBaseComponent",
                "module": "src/components/progress/base.ts"
              }
            },
            {
              "kind": "field",
              "name": "_base",
              "type": {
                "text": "HTMLElement"
              },
              "privacy": "protected",
              "inheritedFrom": {
                "name": "IgcProgressBaseComponent",
                "module": "src/components/progress/base.ts"
              }
            },
            {
              "kind": "field",
              "name": "_percentage",
              "type": {
                "text": "number"
              },
              "privacy": "protected",
              "default": "0",
              "inheritedFrom": {
                "name": "IgcProgressBaseComponent",
                "module": "src/components/progress/base.ts"
              }
            },
            {
              "kind": "field",
              "name": "_progress",
              "type": {
                "text": "number"
              },
              "privacy": "protected",
              "default": "0",
              "inheritedFrom": {
                "name": "IgcProgressBaseComponent",
                "module": "src/components/progress/base.ts"
              }
            },
            {
              "kind": "field",
              "name": "_hasFraction",
              "type": {
                "text": "boolean"
              },
              "privacy": "protected",
              "default": "false",
              "inheritedFrom": {
                "name": "IgcProgressBaseComponent",
                "module": "src/components/progress/base.ts"
              }
            },
            {
              "kind": "field",
              "name": "_styleInfo",
              "type": {
                "text": "StyleInfo"
              },
              "privacy": "protected",
              "default": "{ '--_progress-whole': '0.00', '--_progress-integer': '0', '--_progress-fraction': '0', '--_transition-duration': '0ms', }",
              "inheritedFrom": {
                "name": "IgcProgressBaseComponent",
                "module": "src/components/progress/base.ts"
              }
            },
            {
              "kind": "field",
              "name": "max",
              "type": {
                "text": "number"
              },
              "privacy": "public",
              "default": "100",
              "description": "Maximum value of the control.",
              "attribute": "max",
              "inheritedFrom": {
                "name": "IgcProgressBaseComponent",
                "module": "src/components/progress/base.ts"
              }
            },
            {
              "kind": "field",
              "name": "value",
              "type": {
                "text": "number"
              },
              "privacy": "public",
              "default": "0",
              "description": "The value of the control.",
              "attribute": "value",
              "inheritedFrom": {
                "name": "IgcProgressBaseComponent",
                "module": "src/components/progress/base.ts"
              }
            },
            {
              "kind": "field",
              "name": "variant",
              "type": {
                "text": "StyleVariant"
              },
              "privacy": "public",
              "default": "'primary'",
              "description": "The variant of the control.",
              "attribute": "variant",
              "reflects": true,
              "expandedType": {
                "text": "'primary' | 'info' | 'success' | 'warning' | 'danger'"
              },
              "inheritedFrom": {
                "name": "IgcProgressBaseComponent",
                "module": "src/components/progress/base.ts"
              }
            },
            {
              "kind": "field",
              "name": "animationDuration",
              "type": {
                "text": "number"
              },
              "privacy": "public",
              "default": "500",
              "description": "Animation duration in milliseconds.",
              "attribute": "animation-duration",
              "inheritedFrom": {
                "name": "IgcProgressBaseComponent",
                "module": "src/components/progress/base.ts"
              }
            },
            {
              "kind": "field",
              "name": "indeterminate",
              "type": {
                "text": "boolean"
              },
              "privacy": "public",
              "default": "false",
              "description": "The indeterminate state of the control.",
              "attribute": "indeterminate",
              "inheritedFrom": {
                "name": "IgcProgressBaseComponent",
                "module": "src/components/progress/base.ts"
              }
            },
            {
              "kind": "field",
              "name": "hideLabel",
              "type": {
                "text": "boolean"
              },
              "privacy": "public",
              "default": "false",
              "description": "Shows/hides the label of the control.",
              "attribute": "hide-label",
              "inheritedFrom": {
                "name": "IgcProgressBaseComponent",
                "module": "src/components/progress/base.ts"
              }
            },
            {
              "kind": "field",
              "name": "labelFormat",
              "type": {
                "text": "string"
              },
              "privacy": "public",
              "description": "Format string for the default label of the control.\nPlaceholders:\n {0} - current value of the control.\n {1} - max value of the control.",
              "attribute": "label-format",
              "inheritedFrom": {
                "name": "IgcProgressBaseComponent",
                "module": "src/components/progress/base.ts"
              }
            },
            {
              "kind": "method",
              "name": "indeterminateChange",
              "privacy": "protected",
              "inheritedFrom": {
                "name": "IgcProgressBaseComponent",
                "module": "src/components/progress/base.ts"
              }
            },
            {
              "kind": "method",
              "name": "maxChange",
              "privacy": "protected",
              "inheritedFrom": {
                "name": "IgcProgressBaseComponent",
                "module": "src/components/progress/base.ts"
              }
            },
            {
              "kind": "method",
              "name": "valueChange",
              "privacy": "protected",
              "inheritedFrom": {
                "name": "IgcProgressBaseComponent",
                "module": "src/components/progress/base.ts"
              }
            },
            {
              "kind": "method",
              "name": "_updateARIA",
              "privacy": "private",
              "inheritedFrom": {
                "name": "IgcProgressBaseComponent",
                "module": "src/components/progress/base.ts"
              }
            },
            {
              "kind": "method",
              "name": "_updateProgress",
              "privacy": "private",
              "inheritedFrom": {
                "name": "IgcProgressBaseComponent",
                "module": "src/components/progress/base.ts"
              }
            },
            {
              "kind": "method",
              "name": "renderLabel",
              "privacy": "protected",
              "inheritedFrom": {
                "name": "IgcProgressBaseComponent",
                "module": "src/components/progress/base.ts"
              }
            },
            {
              "kind": "method",
              "name": "renderLabelFormat",
              "privacy": "protected",
              "inheritedFrom": {
                "name": "IgcProgressBaseComponent",
                "module": "src/components/progress/base.ts"
              }
            },
            {
              "kind": "method",
              "name": "renderDefaultSlot",
              "privacy": "protected",
              "inheritedFrom": {
                "name": "IgcProgressBaseComponent",
                "module": "src/components/progress/base.ts"
              }
            }
          ],
          "attributes": [
            {
              "name": "striped",
              "type": {
                "text": "boolean"
              },
              "default": "false",
              "description": "Sets the striped look of the control.",
              "fieldName": "striped",
              "attribute": "striped"
            },
            {
              "name": "label-align",
              "type": {
                "text": "LinearProgressLabelAlign"
              },
              "default": "'top-start'",
              "description": "The position for the default label of the control.",
              "fieldName": "labelAlign",
              "attribute": "label-align",
              "expandedType": {
                "text": "'top-start' | 'top' | 'top-end' | 'bottom-start' | 'bottom' | 'bottom-end'"
              }
            },
            {
              "name": "max",
              "type": {
                "text": "number"
              },
              "default": "100",
              "description": "Maximum value of the control.",
              "fieldName": "max",
              "attribute": "max",
              "inheritedFrom": {
                "name": "IgcProgressBaseComponent",
                "module": "src/components/progress/base.ts"
              }
            },
            {
              "name": "value",
              "type": {
                "text": "number"
              },
              "default": "0",
              "description": "The value of the control.",
              "fieldName": "value",
              "attribute": "value",
              "inheritedFrom": {
                "name": "IgcProgressBaseComponent",
                "module": "src/components/progress/base.ts"
              }
            },
            {
              "name": "variant",
              "type": {
                "text": "StyleVariant"
              },
              "default": "'primary'",
              "description": "The variant of the control.",
              "fieldName": "variant",
              "attribute": "variant",
              "expandedType": {
                "text": "'primary' | 'info' | 'success' | 'warning' | 'danger'"
              },
              "inheritedFrom": {
                "name": "IgcProgressBaseComponent",
                "module": "src/components/progress/base.ts"
              }
            },
            {
              "name": "animation-duration",
              "type": {
                "text": "number"
              },
              "default": "500",
              "description": "Animation duration in milliseconds.",
              "fieldName": "animationDuration",
              "attribute": "animation-duration",
              "inheritedFrom": {
                "name": "IgcProgressBaseComponent",
                "module": "src/components/progress/base.ts"
              }
            },
            {
              "name": "indeterminate",
              "type": {
                "text": "boolean"
              },
              "default": "false",
              "description": "The indeterminate state of the control.",
              "fieldName": "indeterminate",
              "attribute": "indeterminate",
              "inheritedFrom": {
                "name": "IgcProgressBaseComponent",
                "module": "src/components/progress/base.ts"
              }
            },
            {
              "name": "hide-label",
              "type": {
                "text": "boolean"
              },
              "default": "false",
              "description": "Shows/hides the label of the control.",
              "fieldName": "hideLabel",
              "attribute": "hide-label",
              "inheritedFrom": {
                "name": "IgcProgressBaseComponent",
                "module": "src/components/progress/base.ts"
              }
            },
            {
              "name": "label-format",
              "type": {
                "text": "string"
              },
              "description": "Format string for the default label of the control.\nPlaceholders:\n {0} - current value of the control.\n {1} - max value of the control.",
              "fieldName": "labelFormat",
              "attribute": "label-format",
              "inheritedFrom": {
                "name": "IgcProgressBaseComponent",
                "module": "src/components/progress/base.ts"
              }
            }
          ],
          "superclass": {
            "name": "IgcProgressBaseComponent",
            "module": "/src/components/progress/base.js"
          },
          "tagName": "igc-linear-progress",
          "customElement": true
        }
      ],
      "exports": [
        {
          "kind": "js",
          "name": "default",
          "declaration": {
            "name": "IgcLinearProgressComponent",
            "module": "src/components/progress/linear-progress.ts"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "src/components/list/list-header.ts",
      "declarations": [
        {
          "kind": "class",
          "description": "Header list item.",
          "name": "IgcListHeaderComponent",
          "slots": [
            {
              "description": "Renders header list item's content.",
              "name": ""
            }
          ],
          "members": [
            {
              "kind": "field",
              "name": "tagName",
              "type": {
                "text": "string"
              },
              "privacy": "public",
              "static": true,
              "readonly": true,
              "default": "'igc-list-header'"
            },
            {
              "kind": "method",
              "name": "register",
              "privacy": "public",
              "static": true,
              "return": {
                "type": {
                  "text": "void"
                }
              }
            }
          ],
          "superclass": {
            "name": "LitElement",
            "package": "lit"
          },
          "tagName": "igc-list-header",
          "customElement": true
        }
      ],
      "exports": [
        {
          "kind": "js",
          "name": "default",
          "declaration": {
            "name": "IgcListHeaderComponent",
            "module": "src/components/list/list-header.ts"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "src/components/list/list-item.ts",
      "declarations": [
        {
          "kind": "class",
          "description": "The list-item component is a container\nintended for row items in the list component.",
          "name": "IgcListItemComponent",
          "cssParts": [
            {
              "description": "The start container.",
              "name": "start"
            },
            {
              "description": "The end container.",
              "name": "end"
            },
            {
              "description": "The header and custom content container.",
              "name": "content"
            },
            {
              "description": "The title and subtitle container.",
              "name": "header"
            },
            {
              "description": "The title container.",
              "name": "title"
            },
            {
              "description": "The subtitle container.",
              "name": "subtitle"
            }
          ],
          "slots": [
            {
              "description": "Renders custom content.",
              "name": ""
            },
            {
              "description": "Renders content before all other content.",
              "name": "start"
            },
            {
              "description": "Renders content after all other content.",
              "name": "end"
            },
            {
              "description": "Renders the title.",
              "name": "title"
            },
            {
              "description": "Renders the subtitle.",
              "name": "subtitle"
            }
          ],
          "members": [
            {
              "kind": "field",
              "name": "tagName",
              "type": {
                "text": "string"
              },
              "privacy": "public",
              "static": true,
              "readonly": true,
              "default": "'igc-list-item'"
            },
            {
              "kind": "method",
              "name": "register",
              "privacy": "public",
              "static": true,
              "return": {
                "type": {
                  "text": "void"
                }
              }
            },
            {
              "kind": "field",
              "name": "selected",
              "type": {
                "text": "boolean"
              },
              "privacy": "public",
              "default": "false",
              "description": "Defines if the list item is selected or not.",
              "attribute": "selected",
              "reflects": true
            }
          ],
          "attributes": [
            {
              "name": "selected",
              "type": {
                "text": "boolean"
              },
              "default": "false",
              "description": "Defines if the list item is selected or not.",
              "fieldName": "selected",
              "attribute": "selected"
            }
          ],
          "superclass": {
            "name": "LitElement",
            "package": "lit"
          },
          "tagName": "igc-list-item",
          "customElement": true
        }
      ],
      "exports": [
        {
          "kind": "js",
          "name": "default",
          "declaration": {
            "name": "IgcListItemComponent",
            "module": "src/components/list/list-item.ts"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "src/components/list/list.ts",
      "declarations": [
        {
          "kind": "class",
          "description": "Displays a collection of data items in a templatable list format.",
          "name": "IgcListComponent",
          "slots": [
            {
              "description": "Renders the list items and list headers inside default slot.",
              "name": ""
            }
          ],
          "members": [
            {
              "kind": "field",
              "name": "tagName",
              "type": {
                "text": "string"
              },
              "privacy": "public",
              "static": true,
              "readonly": true,
              "default": "'igc-list'"
            },
            {
              "kind": "method",
              "name": "register",
              "privacy": "public",
              "static": true,
              "return": {
                "type": {
                  "text": "void"
                }
              }
            }
          ],
          "superclass": {
            "name": "LitElement",
            "package": "lit"
          },
          "tagName": "igc-list",
          "customElement": true
        }
      ],
      "exports": [
        {
          "kind": "js",
          "name": "default",
          "declaration": {
            "name": "IgcListComponent",
            "module": "src/components/list/list.ts"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "src/components/mask-input/validators.ts",
      "declarations": [
        {
          "kind": "variable",
          "name": "maskValidators",
          "type": {
            "text": "Validator<IgcMaskInputComponent>[]"
          },
          "default": "[ requiredValidator, { key: 'badInput', message: messages.mask, // @ts-expect-error - protected access isValid: ({ parser, maskedValue }) => parser.isValidString(maskedValue), }, ]"
        }
      ],
      "exports": [
        {
          "kind": "js",
          "name": "maskValidators",
          "declaration": {
            "name": "maskValidators",
            "module": "src/components/mask-input/validators.ts"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "src/components/mask-input/mask-input.ts",
      "declarations": [
        {
          "kind": "class",
          "description": "A masked input is an input field where a developer can control user input and format the visible value,\nbased on configurable rules",
          "name": "IgcMaskInputComponent",
          "cssParts": [
            {
              "description": "The main wrapper that holds all main input elements",
              "name": "container"
            },
            {
              "description": "The native input element",
              "name": "input"
            },
            {
              "description": "The native label element",
              "name": "label"
            },
            {
              "description": "The prefix wrapper",
              "name": "prefix"
            },
            {
              "description": "The suffix wrapper",
              "name": "suffix"
            },
            {
              "description": "The helper text wrapper",
              "name": "helper-text"
            }
          ],
          "slots": [
            {
              "description": "Renders content before the input",
              "name": "prefix"
            },
            {
              "description": "Renders content after the input",
              "name": "suffix"
            },
            {
              "description": "Renders content below the input",
              "name": "helper-text"
            },
            {
              "description": "Renders content when the required validation fails.",
              "name": "value-missing"
            },
            {
              "description": "Renders content when a required mask pattern validation fails.",
              "name": "bad-input"
            },
            {
              "description": "Renders content when setCustomValidity(message) is set.",
              "name": "custom-error"
            },
            {
              "description": "Renders content when the component is in invalid state (validity.valid = false).",
              "name": "invalid"
            }
          ],
          "members": [
            {
              "kind": "field",
              "name": "tagName",
              "type": {
                "text": "string"
              },
              "privacy": "public",
              "static": true,
              "readonly": true,
              "default": "'igc-mask-input'"
            },
            {
              "kind": "method",
              "name": "register",
              "privacy": "public",
              "static": true
            },
            {
              "kind": "field",
              "name": "__validators",
              "type": {
                "text": "Validator[]"
              },
              "privacy": "protected",
              "readonly": true,
              "inheritedFrom": {
                "name": "IgcInputBaseComponent",
                "module": "src/components/input/input-base.ts"
              }
            },
            {
              "kind": "field",
              "name": "_formValue",
              "type": {
                "text": "FormValue<unknown>"
              },
              "privacy": "protected",
              "inheritedFrom": {
                "name": "IgcInputBaseComponent",
                "module": "src/components/input/input-base.ts"
              },
              "readonly": true
            },
            {
              "kind": "field",
              "name": "_isRawMode",
              "privacy": "protected",
              "readonly": true
            },
            {
              "kind": "field",
              "name": "valueMode",
              "type": {
                "text": "MaskInputValueMode"
              },
              "privacy": "public",
              "default": "'raw'",
              "description": "Dictates the behavior when retrieving the value of the control:\n\n- `raw` will return the clean user input.\n- `withFormatting` will return the value with all literals and prompts.",
              "attribute": "value-mode",
              "expandedType": {
                "text": "'raw' | 'withFormatting'"
              }
            },
            {
              "kind": "field",
              "name": "value",
              "type": {
                "text": "string | Date | null"
              },
              "privacy": "public",
              "description": "The value of the input.\n\nRegardless of the currently set `value-mode`, an empty value will return an empty string.",
              "inheritedFrom": {
                "name": "IgcInputBaseComponent",
                "module": "src/components/input/input-base.ts"
              },
              "attribute": "value"
            },
            {
              "kind": "field",
              "name": "mask",
              "type": {
                "text": "string"
              },
              "privacy": "public",
              "description": "The mask pattern to apply on the input.",
              "attribute": "mask"
            },
            {
              "kind": "method",
              "name": "promptChange",
              "privacy": "protected"
            },
            {
              "kind": "method",
              "name": "_restoreDefaultValue",
              "privacy": "protected",
              "return": {
                "type": {
                  "text": "void"
                }
              },
              "inheritedFrom": {
                "name": "IgcInputBaseComponent",
                "module": "src/components/input/input-base.ts"
              }
            },
            {
              "kind": "method",
              "name": "updateInput",
              "privacy": "protected",
              "return": {
                "type": {
                  "text": "void"
                }
              },
              "parameters": [
                {
                  "name": "string",
                  "type": {
                    "text": "string"
                  }
                },
                {
                  "name": "range",
                  "type": {
                    "text": "MaskRange"
                  }
                }
              ],
              "inheritedFrom": {
                "name": "IgcMaskInputBaseComponent",
                "module": "src/components/mask-input/mask-input-base.ts"
              }
            },
            {
              "kind": "method",
              "name": "handleDragEnter",
              "privacy": "protected"
            },
            {
              "kind": "method",
              "name": "handleDragLeave",
              "privacy": "protected"
            },
            {
              "kind": "method",
              "name": "handleFocus",
              "privacy": "protected"
            },
            {
              "kind": "method",
              "name": "handleBlur",
              "privacy": "protected"
            },
            {
              "kind": "method",
              "name": "handleChange",
              "privacy": "protected"
            },
            {
              "kind": "method",
              "name": "updateMaskedValue",
              "privacy": "protected"
            },
            {
              "kind": "method",
              "name": "_updateSetRangeTextValue",
              "privacy": "protected",
              "return": {
                "type": {
                  "text": "void"
                }
              },
              "inheritedFrom": {
                "name": "IgcMaskInputBaseComponent",
                "module": "src/components/mask-input/mask-input-base.ts"
              }
            },
            {
              "kind": "method",
              "name": "renderInput",
              "privacy": "protected",
              "return": {
                "type": {
                  "text": "TemplateResult"
                }
              },
              "inheritedFrom": {
                "name": "IgcInputBaseComponent",
                "module": "src/components/input/input-base.ts"
              }
            },
            {
              "kind": "field",
              "name": "parser",
              "privacy": "protected",
              "default": "new MaskParser()",
              "inheritedFrom": {
                "name": "IgcMaskInputBaseComponent",
                "module": "src/components/mask-input/mask-input-base.ts"
              }
            },
            {
              "kind": "field",
              "name": "selection",
              "type": {
                "text": "MaskRange"
              },
              "privacy": "protected",
              "default": "{ start: 0, end: 0 }",
              "inheritedFrom": {
                "name": "IgcMaskInputBaseComponent",
                "module": "src/components/mask-input/mask-input-base.ts"
              }
            },
            {
              "kind": "field",
              "name": "compositionStart",
              "type": {
                "text": "number"
              },
              "privacy": "protected",
              "default": "0",
              "inheritedFrom": {
                "name": "IgcMaskInputBaseComponent",
                "module": "src/components/mask-input/mask-input-base.ts"
              }
            },
            {
              "kind": "field",
              "name": "focused",
              "type": {
                "text": "boolean"
              },
              "privacy": "protected",
              "default": "false",
              "inheritedFrom": {
                "name": "IgcMaskInputBaseComponent",
                "module": "src/components/mask-input/mask-input-base.ts"
              }
            },
            {
              "kind": "field",
              "name": "maskedValue",
              "type": {
                "text": "string"
              },
              "privacy": "protected",
              "default": "''",
              "inheritedFrom": {
                "name": "IgcMaskInputBaseComponent",
                "module": "src/components/mask-input/mask-input-base.ts"
              }
            },
            {
              "kind": "field",
              "name": "_mask",
              "type": {
                "text": "string"
              },
              "privacy": "protected",
              "default": "''",
              "inheritedFrom": {
                "name": "IgcMaskInputBaseComponent",
                "module": "src/components/mask-input/mask-input-base.ts"
              }
            },
            {
              "kind": "field",
              "name": "prompt",
              "type": {
                "text": "string"
              },
              "privacy": "public",
              "description": "The prompt symbol to use for unfilled parts of the mask.",
              "attribute": "prompt",
              "inheritedFrom": {
                "name": "IgcMaskInputBaseComponent",
                "module": "src/components/mask-input/mask-input-base.ts"
              }
            },
            {
              "kind": "field",
              "name": "inputSelection",
              "type": {
                "text": "MaskRange"
              },
              "privacy": "protected",
              "readonly": true,
              "inheritedFrom": {
                "name": "IgcMaskInputBaseComponent",
                "module": "src/components/mask-input/mask-input-base.ts"
              }
            },
            {
              "kind": "field",
              "name": "emptyMask",
              "type": {
                "text": "string"
              },
              "privacy": "protected",
              "readonly": true,
              "inheritedFrom": {
                "name": "IgcMaskInputBaseComponent",
                "module": "src/components/mask-input/mask-input-base.ts"
              }
            },
            {
              "kind": "method",
              "name": "select",
              "privacy": "public",
              "description": "Selects all text within the input.",
              "inheritedFrom": {
                "name": "IgcMaskInputBaseComponent",
                "module": "src/components/mask-input/mask-input-base.ts"
              }
            },
            {
              "kind": "method",
              "name": "handleInput",
              "privacy": "protected",
              "parameters": [
                {
                  "name": "{ inputType, isComposing }",
                  "type": {
                    "text": "InputEvent"
                  }
                }
              ],
              "inheritedFrom": {
                "name": "IgcMaskInputBaseComponent",
                "module": "src/components/mask-input/mask-input-base.ts"
              }
            },
            {
              "kind": "method",
              "name": "handleKeydown",
              "privacy": "protected",
              "parameters": [
                {
                  "name": "{ key }",
                  "type": {
                    "text": "KeyboardEvent"
                  }
                }
              ],
              "inheritedFrom": {
                "name": "IgcMaskInputBaseComponent",
                "module": "src/components/mask-input/mask-input-base.ts"
              }
            },
            {
              "kind": "method",
              "name": "handleCut",
              "privacy": "protected",
              "inheritedFrom": {
                "name": "IgcMaskInputBaseComponent",
                "module": "src/components/mask-input/mask-input-base.ts"
              }
            },
            {
              "kind": "method",
              "name": "handleDragStart",
              "privacy": "protected",
              "inheritedFrom": {
                "name": "IgcMaskInputBaseComponent",
                "module": "src/components/mask-input/mask-input-base.ts"
              }
            },
            {
              "kind": "method",
              "name": "handleCompositionStart",
              "privacy": "protected",
              "inheritedFrom": {
                "name": "IgcMaskInputBaseComponent",
                "module": "src/components/mask-input/mask-input-base.ts"
              }
            },
            {
              "kind": "method",
              "name": "handleCompositionEnd",
              "privacy": "protected",
              "parameters": [
                {
                  "name": "{ data }",
                  "type": {
                    "text": "CompositionEvent"
                  }
                }
              ],
              "inheritedFrom": {
                "name": "IgcMaskInputBaseComponent",
                "module": "src/components/mask-input/mask-input-base.ts"
              }
            },
            {
              "kind": "method",
              "name": "handleClick",
              "privacy": "protected",
              "inheritedFrom": {
                "name": "IgcMaskInputBaseComponent",
                "module": "src/components/mask-input/mask-input-base.ts"
              }
            },
            {
              "kind": "method",
              "name": "setSelectionRange",
              "privacy": "public",
              "parameters": [
                {
                  "name": "start",
                  "type": {
                    "text": "number"
                  }
                },
                {
                  "name": "end",
                  "type": {
                    "text": "number"
                  }
                },
                {
                  "name": "direction",
                  "optional": true,
                  "type": {
                    "text": "SelectionRangeDirection"
                  }
                }
              ],
              "description": "Sets the text selection range of the control",
              "return": {
                "type": {
                  "text": "void"
                }
              },
              "inheritedFrom": {
                "name": "IgcInputBaseComponent",
                "module": "src/components/input/input-base.ts"
              }
            },
            {
              "kind": "method",
              "name": "setRangeText",
              "privacy": "public",
              "parameters": [
                {
                  "name": "replacement",
                  "type": {
                    "text": "string"
                  }
                },
                {
                  "name": "start",
                  "optional": true,
                  "type": {
                    "text": "number"
                  }
                },
                {
                  "name": "end",
                  "optional": true,
                  "type": {
                    "text": "number"
                  }
                },
                {
                  "name": "selectMode",
                  "optional": true,
                  "type": {
                    "text": "RangeTextSelectMode"
                  }
                }
              ],
              "description": "Replaces the selected text in the control and re-applies the mask",
              "inheritedFrom": {
                "name": "IgcInputBaseComponent",
                "module": "src/components/input/input-base.ts"
              }
            },
            {
              "kind": "field",
              "name": "_required",
              "type": {
                "text": "boolean"
              },
              "privacy": "protected",
              "default": "false",
              "inheritedFrom": {
                "name": "IgcInputBaseComponent",
                "module": "src/components/input/input-base.ts"
              }
            },
            {
              "kind": "field",
              "name": "required",
              "privacy": "public",
              "description": "When set, makes the component a required field for validation.",
              "default": "false",
              "attribute": "required",
              "type": {
                "text": "boolean"
              },
              "reflects": true,
              "inheritedFrom": {
                "name": "IgcInputBaseComponent",
                "module": "src/components/input/input-base.ts"
              }
            },
            {
              "kind": "field",
              "name": "defaultValue",
              "privacy": "public",
              "inheritedFrom": {
                "name": "IgcInputBaseComponent",
                "module": "src/components/input/input-base.ts"
              }
            },
            {
              "kind": "field",
              "name": "formAssociated",
              "type": {
                "text": "boolean"
              },
              "privacy": "public",
              "static": true,
              "readonly": true,
              "default": "true",
              "inheritedFrom": {
                "name": "IgcInputBaseComponent",
                "module": "src/components/input/input-base.ts"
              }
            },
            {
              "kind": "field",
              "name": "__internals",
              "type": {
                "text": "ElementInternals"
              },
              "privacy": "private",
              "inheritedFrom": {
                "name": "IgcInputBaseComponent",
                "module": "src/components/input/input-base.ts"
              }
            },
            {
              "kind": "field",
              "name": "_disabled",
              "type": {
                "text": "boolean"
              },
              "privacy": "protected",
              "default": "false",
              "inheritedFrom": {
                "name": "IgcInputBaseComponent",
                "module": "src/components/input/input-base.ts"
              }
            },
            {
              "kind": "field",
              "name": "_invalid",
              "type": {
                "text": "boolean"
              },
              "privacy": "protected",
              "default": "false",
              "inheritedFrom": {
                "name": "IgcInputBaseComponent",
                "module": "src/components/input/input-base.ts"
              }
            },
            {
              "kind": "field",
              "name": "_dirty",
              "type": {
                "text": "boolean"
              },
              "privacy": "protected",
              "default": "false",
              "inheritedFrom": {
                "name": "IgcInputBaseComponent",
                "module": "src/components/input/input-base.ts"
              }
            },
            {
              "kind": "field",
              "name": "_pristine",
              "type": {
                "text": "boolean"
              },
              "privacy": "protected",
              "default": "true",
              "inheritedFrom": {
                "name": "IgcInputBaseComponent",
                "module": "src/components/input/input-base.ts"
              }
            },
            {
              "kind": "field",
              "name": "name",
              "type": {
                "text": "string"
              },
              "privacy": "public",
              "description": "The name attribute of the control.",
              "attribute": "name",
              "reflects": true,
              "inheritedFrom": {
                "name": "IgcInputBaseComponent",
                "module": "src/components/input/input-base.ts"
              }
            },
            {
              "kind": "field",
              "name": "disabled",
              "privacy": "public",
              "description": "The disabled state of the component.",
              "default": "false",
              "attribute": "disabled",
              "type": {
                "text": "boolean"
              },
              "reflects": true,
              "inheritedFrom": {
                "name": "IgcInputBaseComponent",
                "module": "src/components/input/input-base.ts"
              }
            },
            {
              "kind": "field",
              "name": "invalid",
              "privacy": "public",
              "description": "Sets the control into invalid state (visual state only).",
              "default": "false",
              "attribute": "invalid",
              "type": {
                "text": "boolean"
              },
              "reflects": true,
              "inheritedFrom": {
                "name": "IgcInputBaseComponent",
                "module": "src/components/input/input-base.ts"
              }
            },
            {
              "kind": "field",
              "name": "form",
              "type": {
                "text": "HTMLFormElement | null"
              },
              "privacy": "public",
              "description": "Returns the HTMLFormElement associated with this element.",
              "readonly": true,
              "inheritedFrom": {
                "name": "IgcInputBaseComponent",
                "module": "src/components/input/input-base.ts"
              }
            },
            {
              "kind": "field",
              "name": "validity",
              "type": {
                "text": "ValidityState"
              },
              "privacy": "public",
              "description": "Returns a ValidityState object which represents the different validity states\nthe element can be in, with respect to constraint validation.",
              "readonly": true,
              "inheritedFrom": {
                "name": "IgcInputBaseComponent",
                "module": "src/components/input/input-base.ts"
              }
            },
            {
              "kind": "field",
              "name": "validationMessage",
              "type": {
                "text": "string"
              },
              "privacy": "public",
              "description": "A string containing the validation message of this element.",
              "readonly": true,
              "inheritedFrom": {
                "name": "IgcInputBaseComponent",
                "module": "src/components/input/input-base.ts"
              }
            },
            {
              "kind": "field",
              "name": "willValidate",
              "type": {
                "text": "boolean"
              },
              "privacy": "public",
              "description": "A boolean value which returns true if the element is a submittable element\nthat is a candidate for constraint validation.",
              "readonly": true,
              "inheritedFrom": {
                "name": "IgcInputBaseComponent",
                "module": "src/components/input/input-base.ts"
              }
            },
            {
              "kind": "method",
              "name": "_handleInvalid",
              "privacy": "private",
              "parameters": [
                {
                  "name": "event",
                  "type": {
                    "text": "Event"
                  }
                }
              ],
              "inheritedFrom": {
                "name": "IgcInputBaseComponent",
                "module": "src/components/input/input-base.ts"
              }
            },
            {
              "kind": "method",
              "name": "_setInvalidState",
              "privacy": "private",
              "return": {
                "type": {
                  "text": "void"
                }
              },
              "inheritedFrom": {
                "name": "IgcInputBaseComponent",
                "module": "src/components/input/input-base.ts"
              }
            },
            {
              "kind": "method",
              "name": "__runValidators",
              "privacy": "private",
              "inheritedFrom": {
                "name": "IgcInputBaseComponent",
                "module": "src/components/input/input-base.ts"
              }
            },
            {
              "kind": "method",
              "name": "_setDefaultValue",
              "privacy": "protected",
              "return": {
                "type": {
                  "text": "void"
                }
              },
              "parameters": [
                {
                  "name": "current",
                  "type": {
                    "text": "string | null"
                  }
                }
              ],
              "inheritedFrom": {
                "name": "IgcInputBaseComponent",
                "module": "src/components/input/input-base.ts"
              }
            },
            {
              "kind": "method",
              "name": "_validate",
              "privacy": "protected",
              "return": {
                "type": {
                  "text": "void"
                }
              },
              "parameters": [
                {
                  "name": "message",
                  "optional": true,
                  "type": {
                    "text": "string"
                  }
                }
              ],
              "inheritedFrom": {
                "name": "IgcInputBaseComponent",
                "module": "src/components/input/input-base.ts"
              }
            },
            {
              "kind": "method",
              "name": "_updateValidity",
              "privacy": "protected",
              "parameters": [
                {
                  "name": "error",
                  "optional": true,
                  "type": {
                    "text": "string"
                  }
                }
              ],
              "description": "Executes the component validators and updates the internal validity state.",
              "inheritedFrom": {
                "name": "IgcInputBaseComponent",
                "module": "src/components/input/input-base.ts"
              }
            },
            {
              "kind": "method",
              "name": "_setFormValue",
              "privacy": "protected",
              "return": {
                "type": {
                  "text": "void"
                }
              },
              "parameters": [
                {
                  "name": "value",
                  "type": {
                    "text": "FormValueType"
                  }
                },
                {
                  "name": "state",
                  "optional": true,
                  "type": {
                    "text": "FormValueType"
                  }
                }
              ],
              "inheritedFrom": {
                "name": "IgcInputBaseComponent",
                "module": "src/components/input/input-base.ts"
              }
            },
            {
              "kind": "method",
              "name": "formAssociatedCallback",
              "privacy": "protected",
              "return": {
                "type": {
                  "text": "void"
                }
              },
              "parameters": [
                {
                  "name": "_form",
                  "type": {
                    "text": "HTMLFormElement"
                  }
                }
              ],
              "inheritedFrom": {
                "name": "IgcInputBaseComponent",
                "module": "src/components/input/input-base.ts"
              }
            },
            {
              "kind": "method",
              "name": "formDisabledCallback",
              "privacy": "protected",
              "return": {
                "type": {
                  "text": "void"
                }
              },
              "parameters": [
                {
                  "name": "state",
                  "type": {
                    "text": "boolean"
                  }
                }
              ],
              "inheritedFrom": {
                "name": "IgcInputBaseComponent",
                "module": "src/components/input/input-base.ts"
              }
            },
            {
              "kind": "method",
              "name": "formResetCallback",
              "privacy": "protected",
              "return": {
                "type": {
                  "text": "void"
                }
              },
              "inheritedFrom": {
                "name": "IgcInputBaseComponent",
                "module": "src/components/input/input-base.ts"
              }
            },
            {
              "kind": "method",
              "name": "formStateRestoreCallback",
              "privacy": "protected",
              "return": {
                "type": {
                  "text": "void"
                }
              },
              "parameters": [
                {
                  "name": "_state",
                  "type": {
                    "text": "FormValueType"
                  }
                },
                {
                  "name": "_mode",
                  "type": {
                    "text": "FormRestoreMode"
                  }
                }
              ],
              "inheritedFrom": {
                "name": "IgcInputBaseComponent",
                "module": "src/components/input/input-base.ts"
              }
            },
            {
              "kind": "method",
              "name": "reportValidity",
              "privacy": "public",
              "description": "Checks for validity of the control and shows the browser message if it invalid.",
              "inheritedFrom": {
                "name": "IgcInputBaseComponent",
                "module": "src/components/input/input-base.ts"
              }
            },
            {
              "kind": "method",
              "name": "checkValidity",
              "privacy": "public",
              "description": "Checks for validity of the control and emits the invalid event if it invalid.",
              "inheritedFrom": {
                "name": "IgcInputBaseComponent",
                "module": "src/components/input/input-base.ts"
              }
            },
            {
              "kind": "method",
              "name": "setCustomValidity",
              "privacy": "public",
              "parameters": [
                {
                  "name": "message",
                  "type": {
                    "text": "string"
                  }
                }
              ],
              "description": "Sets a custom validation message for the control.\nAs long as `message` is not empty, the control is considered invalid.",
              "inheritedFrom": {
                "name": "IgcInputBaseComponent",
                "module": "src/components/input/input-base.ts"
              }
            },
            {
              "kind": "method",
              "name": "addEventListener",
              "privacy": "public",
              "return": {
                "type": {
                  "text": "void"
                }
              },
              "parameters": [
                {
                  "name": "type",
                  "type": {
                    "text": "K"
                  }
                },
                {
                  "name": "listener",
                  "type": {
                    "text": "(this: HTMLElement, ev: M[K]) => any"
                  }
                },
                {
                  "name": "options",
                  "optional": true,
                  "type": {
                    "text": "boolean | AddEventListenerOptions"
                  }
                }
              ],
              "inheritedFrom": {
                "name": "IgcInputBaseComponent",
                "module": "src/components/input/input-base.ts"
              }
            },
            {
              "kind": "method",
              "name": "removeEventListener",
              "privacy": "public",
              "return": {
                "type": {
                  "text": "void"
                }
              },
              "parameters": [
                {
                  "name": "type",
                  "type": {
                    "text": "K"
                  }
                },
                {
                  "name": "listener",
                  "type": {
                    "text": "(this: HTMLElement, ev: M[K]) => any"
                  }
                },
                {
                  "name": "options",
                  "optional": true,
                  "type": {
                    "text": "boolean | EventListenerOptions"
                  }
                }
              ],
              "inheritedFrom": {
                "name": "IgcInputBaseComponent",
                "module": "src/components/input/input-base.ts"
              }
            },
            {
              "kind": "method",
              "name": "emitEvent",
              "privacy": "private",
              "return": {
                "type": {
                  "text": "boolean"
                }
              },
              "parameters": [
                {
                  "name": "type",
                  "type": {
                    "text": "K"
                  }
                },
                {
                  "name": "eventInitDict",
                  "optional": true,
                  "type": {
                    "text": "CustomEventInit<D>"
                  }
                }
              ],
              "inheritedFrom": {
                "name": "IgcInputBaseComponent",
                "module": "src/components/input/input-base.ts"
              }
            },
            {
              "kind": "field",
              "name": "increment",
              "privacy": "private",
              "static": true,
              "readonly": true,
              "inheritedFrom": {
                "name": "IgcInputBaseComponent",
                "module": "src/components/input/input-base.ts"
              }
            },
            {
              "kind": "field",
              "name": "_themes",
              "privacy": "protected",
              "readonly": true,
              "inheritedFrom": {
                "name": "IgcInputBaseComponent",
                "module": "src/components/input/input-base.ts"
              }
            },
            {
              "kind": "field",
              "name": "inputId",
              "privacy": "protected",
              "default": "`input-${IgcInputBaseComponent.increment()}`",
              "inheritedFrom": {
                "name": "IgcInputBaseComponent",
                "module": "src/components/input/input-base.ts"
              }
            },
            {
              "kind": "field",
              "name": "input",
              "type": {
                "text": "HTMLInputElement"
              },
              "privacy": "protected",
              "inheritedFrom": {
                "name": "IgcInputBaseComponent",
                "module": "src/components/input/input-base.ts"
              }
            },
            {
              "kind": "field",
              "name": "_helperText",
              "type": {
                "text": "Array<HTMLElement>"
              },
              "privacy": "protected",
              "inheritedFrom": {
                "name": "IgcInputBaseComponent",
                "module": "src/components/input/input-base.ts"
              }
            },
            {
              "kind": "field",
              "name": "prefixes",
              "type": {
                "text": "Array<HTMLElement>"
              },
              "privacy": "protected",
              "inheritedFrom": {
                "name": "IgcInputBaseComponent",
                "module": "src/components/input/input-base.ts"
              }
            },
            {
              "kind": "field",
              "name": "suffixes",
              "type": {
                "text": "Array<HTMLElement>"
              },
              "privacy": "protected",
              "inheritedFrom": {
                "name": "IgcInputBaseComponent",
                "module": "src/components/input/input-base.ts"
              }
            },
            {
              "kind": "field",
              "name": "outlined",
              "type": {
                "text": "boolean"
              },
              "privacy": "public",
              "default": "false",
              "description": "Whether the control will have outlined appearance.",
              "attribute": "outlined",
              "reflects": true,
              "inheritedFrom": {
                "name": "IgcInputBaseComponent",
                "module": "src/components/input/input-base.ts"
              }
            },
            {
              "kind": "field",
              "name": "readOnly",
              "type": {
                "text": "boolean"
              },
              "privacy": "public",
              "default": "false",
              "description": "Makes the control a readonly field.",
              "attribute": "readonly",
              "reflects": true,
              "inheritedFrom": {
                "name": "IgcInputBaseComponent",
                "module": "src/components/input/input-base.ts"
              }
            },
            {
              "kind": "field",
              "name": "placeholder",
              "type": {
                "text": "string"
              },
              "privacy": "public",
              "description": "The placeholder attribute of the control.",
              "attribute": "placeholder",
              "inheritedFrom": {
                "name": "IgcInputBaseComponent",
                "module": "src/components/input/input-base.ts"
              }
            },
            {
              "kind": "field",
              "name": "label",
              "type": {
                "text": "string"
              },
              "privacy": "public",
              "description": "The label for the control.",
              "attribute": "label",
              "inheritedFrom": {
                "name": "IgcInputBaseComponent",
                "module": "src/components/input/input-base.ts"
              }
            },
            {
              "kind": "method",
              "name": "focus",
              "privacy": "public",
              "parameters": [
                {
                  "name": "options",
                  "optional": true,
                  "type": {
                    "text": "FocusOptions"
                  }
                }
              ],
              "description": "Sets focus on the control.",
              "inheritedFrom": {
                "name": "IgcInputBaseComponent",
                "module": "src/components/input/input-base.ts"
              }
            },
            {
              "kind": "method",
              "name": "blur",
              "privacy": "public",
              "description": "Removes focus from the control.",
              "inheritedFrom": {
                "name": "IgcInputBaseComponent",
                "module": "src/components/input/input-base.ts"
              }
            },
            {
              "kind": "method",
              "name": "renderValidatorContainer",
              "privacy": "protected",
              "return": {
                "type": {
                  "text": "TemplateResult"
                }
              },
              "inheritedFrom": {
                "name": "IgcInputBaseComponent",
                "module": "src/components/input/input-base.ts"
              }
            },
            {
              "kind": "method",
              "name": "resolvePartNames",
              "privacy": "protected",
              "parameters": [
                {
                  "name": "base",
                  "type": {
                    "text": "string"
                  }
                }
              ],
              "inheritedFrom": {
                "name": "IgcInputBaseComponent",
                "module": "src/components/input/input-base.ts"
              }
            },
            {
              "kind": "method",
              "name": "renderFileParts",
              "privacy": "protected",
              "return": {
                "type": {
                  "text": "TemplateResult | typeof nothing"
                }
              },
              "inheritedFrom": {
                "name": "IgcInputBaseComponent",
                "module": "src/components/input/input-base.ts"
              }
            },
            {
              "kind": "method",
              "name": "renderPrefix",
              "privacy": "private",
              "inheritedFrom": {
                "name": "IgcInputBaseComponent",
                "module": "src/components/input/input-base.ts"
              }
            },
            {
              "kind": "method",
              "name": "renderSuffix",
              "privacy": "private",
              "inheritedFrom": {
                "name": "IgcInputBaseComponent",
                "module": "src/components/input/input-base.ts"
              }
            },
            {
              "kind": "method",
              "name": "renderLabel",
              "privacy": "private",
              "inheritedFrom": {
                "name": "IgcInputBaseComponent",
                "module": "src/components/input/input-base.ts"
              }
            },
            {
              "kind": "method",
              "name": "renderMaterial",
              "privacy": "private",
              "inheritedFrom": {
                "name": "IgcInputBaseComponent",
                "module": "src/components/input/input-base.ts"
              }
            },
            {
              "kind": "method",
              "name": "renderStandard",
              "privacy": "private",
              "inheritedFrom": {
                "name": "IgcInputBaseComponent",
                "module": "src/components/input/input-base.ts"
              }
            }
          ],
          "events": [
            {
              "description": "Emitted when the control receives user input",
              "name": "igcInput"
            },
            {
              "description": "Emitted when an alteration of the control's value is committed by the user",
              "name": "igcChange"
            },
            {
              "type": {
                "text": "CustomEvent"
              },
              "inheritedFrom": {
                "name": "IgcInputBaseComponent",
                "module": "src/components/input/input-base.ts"
              }
            }
          ],
          "attributes": [
            {
              "name": "value-mode",
              "type": {
                "text": "MaskInputValueMode"
              },
              "default": "'raw'",
              "description": "Dictates the behavior when retrieving the value of the control:\n\n- `raw` will return the clean user input.\n- `withFormatting` will return the value with all literals and prompts.",
              "fieldName": "valueMode",
              "attribute": "value-mode",
              "expandedType": {
                "text": "'raw' | 'withFormatting'"
              }
            },
            {
              "name": "value",
              "type": {
                "text": "string"
              },
              "description": "The value of the input.\n\nRegardless of the currently set `value-mode`, an empty value will return an empty string.",
              "fieldName": "value",
              "attribute": "value"
            },
            {
              "name": "mask",
              "type": {
                "text": "string"
              },
              "description": "The mask pattern to apply on the input.",
              "fieldName": "mask",
              "attribute": "mask"
            },
            {
              "name": "prompt",
              "type": {
                "text": "string"
              },
              "description": "The prompt symbol to use for unfilled parts of the mask.",
              "fieldName": "prompt",
              "inheritedFrom": {
                "name": "IgcMaskInputBaseComponent",
                "module": "src/components/mask-input/mask-input-base.ts"
              }
            },
            {
              "name": "required",
              "description": "When set, makes the component a required field for validation.",
              "default": "false",
              "fieldName": "required",
              "attribute": "required",
              "type": {
                "text": "boolean"
              },
              "inheritedFrom": {
                "name": "IgcInputBaseComponent",
                "module": "src/components/input/input-base.ts"
              }
            },
            {
              "name": "name",
              "type": {
                "text": "string"
              },
              "description": "The name attribute of the control.",
              "fieldName": "name",
              "attribute": "name",
              "inheritedFrom": {
                "name": "IgcInputBaseComponent",
                "module": "src/components/input/input-base.ts"
              }
            },
            {
              "name": "disabled",
              "description": "The disabled state of the component.",
              "default": "false",
              "fieldName": "disabled",
              "attribute": "disabled",
              "type": {
                "text": "boolean"
              },
              "inheritedFrom": {
                "name": "IgcInputBaseComponent",
                "module": "src/components/input/input-base.ts"
              }
            },
            {
              "name": "invalid",
              "description": "Sets the control into invalid state (visual state only).",
              "default": "false",
              "fieldName": "invalid",
              "attribute": "invalid",
              "type": {
                "text": "boolean"
              },
              "inheritedFrom": {
                "name": "IgcInputBaseComponent",
                "module": "src/components/input/input-base.ts"
              }
            },
            {
              "name": "outlined",
              "type": {
                "text": "boolean"
              },
              "default": "false",
              "description": "Whether the control will have outlined appearance.",
              "fieldName": "outlined",
              "attribute": "outlined",
              "inheritedFrom": {
                "name": "IgcInputBaseComponent",
                "module": "src/components/input/input-base.ts"
              }
            },
            {
              "name": "readonly",
              "type": {
                "text": "boolean"
              },
              "default": "false",
              "description": "Makes the control a readonly field.",
              "fieldName": "readOnly",
              "attribute": "readonly",
              "inheritedFrom": {
                "name": "IgcInputBaseComponent",
                "module": "src/components/input/input-base.ts"
              }
            },
            {
              "name": "placeholder",
              "type": {
                "text": "string"
              },
              "description": "The placeholder attribute of the control.",
              "fieldName": "placeholder",
              "attribute": "placeholder",
              "inheritedFrom": {
                "name": "IgcInputBaseComponent",
                "module": "src/components/input/input-base.ts"
              }
            },
            {
              "name": "label",
              "type": {
                "text": "string"
              },
              "description": "The label for the control.",
              "fieldName": "label",
              "attribute": "label",
              "inheritedFrom": {
                "name": "IgcInputBaseComponent",
                "module": "src/components/input/input-base.ts"
              }
            }
          ],
          "superclass": {
            "name": "IgcMaskInputBaseComponent",
            "module": "/src/components/mask-input/mask-input-base.js"
          },
          "tagName": "igc-mask-input",
          "customElement": true
        }
      ],
      "exports": [
        {
          "kind": "js",
          "name": "default",
          "declaration": {
            "name": "IgcMaskInputComponent",
            "module": "src/components/mask-input/mask-input.ts"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "src/components/nav-drawer/nav-drawer-header-item.ts",
      "declarations": [
        {
          "kind": "class",
          "description": "A wrapper for navigation drawer's header.",
          "name": "IgcNavDrawerHeaderItemComponent",
          "slots": [
            {
              "description": "Renders the header content",
              "name": ""
            }
          ],
          "members": [
            {
              "kind": "field",
              "name": "tagName",
              "type": {
                "text": "string"
              },
              "privacy": "public",
              "static": true,
              "readonly": true,
              "default": "'igc-nav-drawer-header-item'"
            },
            {
              "kind": "method",
              "name": "register",
              "privacy": "public",
              "static": true,
              "return": {
                "type": {
                  "text": "void"
                }
              }
            }
          ],
          "superclass": {
            "name": "LitElement",
            "package": "lit"
          },
          "tagName": "igc-nav-drawer-header-item",
          "customElement": true
        }
      ],
      "exports": [
        {
          "kind": "js",
          "name": "default",
          "declaration": {
            "name": "IgcNavDrawerHeaderItemComponent",
            "module": "src/components/nav-drawer/nav-drawer-header-item.ts"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "src/components/nav-drawer/nav-drawer-item.ts",
      "declarations": [
        {
          "kind": "class",
          "description": "Represents a navigation drawer item.",
          "name": "IgcNavDrawerItemComponent",
          "cssParts": [
            {
              "description": "The base wrapper of the drawer item.",
              "name": "base"
            },
            {
              "description": "The icon container.",
              "name": "icon"
            },
            {
              "description": "The content container.",
              "name": "content"
            }
          ],
          "slots": [
            {
              "description": "The content slot for the drawer item.",
              "name": "content"
            },
            {
              "description": "The slot for the icon of the drawer item.",
              "name": "icon"
            }
          ],
          "members": [
            {
              "kind": "field",
              "name": "tagName",
              "type": {
                "text": "string"
              },
              "privacy": "public",
              "static": true,
              "readonly": true,
              "default": "'igc-nav-drawer-item'"
            },
            {
              "kind": "method",
              "name": "register",
              "privacy": "public",
              "static": true
            },
            {
              "kind": "field",
              "name": "disabled",
              "type": {
                "text": "boolean"
              },
              "privacy": "public",
              "default": "false",
              "description": "Determines whether the drawer is disabled.",
              "attribute": "disabled",
              "reflects": true
            },
            {
              "kind": "field",
              "name": "active",
              "type": {
                "text": "boolean"
              },
              "privacy": "public",
              "default": "false",
              "description": "Determines whether the drawer is active.",
              "attribute": "active",
              "reflects": true
            },
            {
              "kind": "field",
              "name": "_textLength",
              "type": {
                "text": "number"
              },
              "privacy": "private"
            },
            {
              "kind": "field",
              "name": "_text",
              "type": {
                "text": "Array<HTMLElement>"
              },
              "privacy": "private"
            },
            {
              "kind": "field",
              "name": "navdrawerIcon",
              "type": {
                "text": "Array<Node>"
              },
              "privacy": "protected"
            }
          ],
          "attributes": [
            {
              "name": "disabled",
              "type": {
                "text": "boolean"
              },
              "default": "false",
              "description": "Determines whether the drawer is disabled.",
              "fieldName": "disabled",
              "attribute": "disabled"
            },
            {
              "name": "active",
              "type": {
                "text": "boolean"
              },
              "default": "false",
              "description": "Determines whether the drawer is active.",
              "fieldName": "active",
              "attribute": "active"
            }
          ],
          "superclass": {
            "name": "LitElement",
            "package": "lit"
          },
          "tagName": "igc-nav-drawer-item",
          "customElement": true
        }
      ],
      "exports": [
        {
          "kind": "js",
          "name": "default",
          "declaration": {
            "name": "IgcNavDrawerItemComponent",
            "module": "src/components/nav-drawer/nav-drawer-item.ts"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "src/components/nav-drawer/nav-drawer.ts",
      "declarations": [
        {
          "kind": "class",
          "description": "Represents a side navigation container that provides\nquick access between views.",
          "name": "IgcNavDrawerComponent",
          "cssParts": [
            {
              "description": "The base wrapper of the igc-navigation-drawer.",
              "name": "base"
            },
            {
              "description": "The main container of the igc-navigation-drawer.",
              "name": "main"
            },
            {
              "description": "The mini container of the igc-navigation-drawer.",
              "name": "mini"
            }
          ],
          "slots": [
            {
              "description": "The default slot for the igc-navigation-drawer.",
              "name": ""
            },
            {
              "description": "The slot for the mini variant of the igc-navigation-drawer.",
              "name": "mini"
            }
          ],
          "members": [
            {
              "kind": "field",
              "name": "tagName",
              "type": {
                "text": "string"
              },
              "privacy": "public",
              "static": true,
              "readonly": true,
              "default": "'igc-nav-drawer'"
            },
            {
              "kind": "method",
              "name": "register",
              "privacy": "public",
              "static": true
            },
            {
              "kind": "field",
              "name": "_miniSlotElements",
              "type": {
                "text": "Array<HTMLElement>"
              },
              "privacy": "private"
            },
            {
              "kind": "field",
              "name": "position",
              "type": {
                "text": "NavDrawerPosition"
              },
              "privacy": "public",
              "default": "'start'",
              "description": "The position of the drawer.",
              "attribute": "position",
              "reflects": true,
              "expandedType": {
                "text": "'start' | 'end' | 'top' | 'bottom' | 'relative'"
              }
            },
            {
              "kind": "field",
              "name": "open",
              "type": {
                "text": "boolean"
              },
              "privacy": "public",
              "default": "false",
              "description": "Determines whether the drawer is opened.",
              "attribute": "open",
              "reflects": true
            },
            {
              "kind": "method",
              "name": "_waitTransitions",
              "privacy": "private"
            },
            {
              "kind": "method",
              "name": "show",
              "privacy": "public",
              "return": {
                "type": {
                  "text": "Promise<boolean>"
                }
              },
              "description": "Opens the drawer."
            },
            {
              "kind": "method",
              "name": "hide",
              "privacy": "public",
              "return": {
                "type": {
                  "text": "Promise<boolean>"
                }
              },
              "description": "Closes the drawer."
            },
            {
              "kind": "method",
              "name": "toggle",
              "privacy": "public",
              "return": {
                "type": {
                  "text": "Promise<boolean>"
                }
              },
              "description": "Toggles the open state of the drawer."
            }
          ],
          "attributes": [
            {
              "name": "position",
              "type": {
                "text": "NavDrawerPosition"
              },
              "default": "'start'",
              "description": "The position of the drawer.",
              "fieldName": "position",
              "attribute": "position",
              "expandedType": {
                "text": "'start' | 'end' | 'top' | 'bottom' | 'relative'"
              }
            },
            {
              "name": "open",
              "type": {
                "text": "boolean"
              },
              "default": "false",
              "description": "Determines whether the drawer is opened.",
              "fieldName": "open",
              "attribute": "open"
            }
          ],
          "superclass": {
            "name": "LitElement",
            "package": "lit"
          },
          "tagName": "igc-nav-drawer",
          "customElement": true
        }
      ],
      "exports": [
        {
          "kind": "js",
          "name": "default",
          "declaration": {
            "name": "IgcNavDrawerComponent",
            "module": "src/components/nav-drawer/nav-drawer.ts"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "src/components/navbar/navbar.ts",
      "declarations": [
        {
          "kind": "class",
          "description": "A navigation bar component is used to facilitate navigation through\na series of hierarchical screens within an app.",
          "name": "IgcNavbarComponent",
          "cssParts": [
            {
              "description": "The base wrapper of the navigation bar.",
              "name": "base"
            },
            {
              "description": "The left aligned icon container.",
              "name": "start"
            },
            {
              "description": "The navigation bar title container.",
              "name": "middle"
            },
            {
              "description": "The right aligned action icons container.",
              "name": "end"
            }
          ],
          "slots": [
            {
              "description": "Renders a title inside the default slot.",
              "name": ""
            },
            {
              "description": "Renders left aligned icons.",
              "name": "start"
            },
            {
              "description": "Renders right aligned action icons.",
              "name": "end"
            }
          ],
          "members": [
            {
              "kind": "field",
              "name": "tagName",
              "type": {
                "text": "string"
              },
              "privacy": "public",
              "static": true,
              "readonly": true,
              "default": "'igc-navbar'"
            },
            {
              "kind": "method",
              "name": "register",
              "privacy": "public",
              "static": true,
              "return": {
                "type": {
                  "text": "void"
                }
              }
            }
          ],
          "superclass": {
            "name": "LitElement",
            "package": "lit"
          },
          "tagName": "igc-navbar",
          "customElement": true
        }
      ],
      "exports": [
        {
          "kind": "js",
          "name": "default",
          "declaration": {
            "name": "IgcNavbarComponent",
            "module": "src/components/navbar/navbar.ts"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "src/components/radio/utils.ts",
      "declarations": [
        {
          "kind": "function",
          "name": "getGroup",
          "parameters": [
            {
              "name": "member",
              "type": {
                "text": "IgcRadioComponent"
              }
            }
          ]
        }
      ],
      "exports": [
        {
          "kind": "js",
          "name": "getGroup",
          "declaration": {
            "name": "getGroup",
            "module": "src/components/radio/utils.ts"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "src/components/radio/validators.ts",
      "declarations": [
        {
          "kind": "variable",
          "name": "radioValidators",
          "type": {
            "text": "Validator<IgcRadioComponent>[]"
          },
          "default": "[ { key: 'valueMissing', message: messages.required, isValid: (host) => { const { radios, checked } = getGroup(host); return radios.some((radio) => radio.required) ? checked.length > 0 : true; }, }, ]"
        }
      ],
      "exports": [
        {
          "kind": "js",
          "name": "radioValidators",
          "declaration": {
            "name": "radioValidators",
            "module": "src/components/radio/validators.ts"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "src/components/radio/radio.ts",
      "declarations": [
        {
          "kind": "class",
          "description": "",
          "name": "IgcRadioComponent",
          "cssParts": [
            {
              "description": "The radio control base wrapper.",
              "name": "base"
            },
            {
              "description": "The radio input control.",
              "name": "control"
            },
            {
              "description": "The radio control label.",
              "name": "label"
            }
          ],
          "slots": [
            {
              "description": "The radio label.",
              "name": ""
            },
            {
              "description": "Renders content below the input.",
              "name": "helper-text"
            },
            {
              "description": "Renders content when the required validation fails.",
              "name": "value-missing"
            },
            {
              "description": "Renders content when setCustomValidity(message) is set.",
              "name": "custom-error"
            },
            {
              "description": "Renders content when the component is in invalid state (validity.valid = false).",
              "name": "invalid"
            }
          ],
          "members": [
            {
              "kind": "field",
              "name": "tagName",
              "type": {
                "text": "string"
              },
              "privacy": "public",
              "static": true,
              "readonly": true,
              "default": "'igc-radio'"
            },
            {
              "kind": "method",
              "name": "register",
              "privacy": "public",
              "static": true,
              "return": {
                "type": {
                  "text": "void"
                }
              }
            },
            {
              "kind": "field",
              "name": "increment",
              "privacy": "private",
              "static": true,
              "readonly": true
            },
            {
              "kind": "field",
              "name": "__validators",
              "type": {
                "text": "Validator[]"
              },
              "privacy": "protected",
              "readonly": true,
              "inheritedFrom": {
                "name": "BaseFormAssociated",
                "module": "src/components/common/mixins/forms/associated.ts"
              }
            },
            {
              "kind": "field",
              "name": "_formValue",
              "type": {
                "text": "FormValue<unknown>"
              },
              "privacy": "protected",
              "readonly": true,
              "inheritedFrom": {
                "name": "BaseFormAssociated",
                "module": "src/components/common/mixins/forms/associated.ts"
              }
            },
            {
              "kind": "field",
              "name": "_inputId",
              "privacy": "private",
              "readonly": true,
              "default": "`radio-${IgcRadioComponent.increment()}`"
            },
            {
              "kind": "field",
              "name": "_labelId",
              "privacy": "private",
              "readonly": true,
              "default": "`radio-label-${this._inputId}`"
            },
            {
              "kind": "field",
              "name": "_focusRingManager",
              "privacy": "private",
              "readonly": true
            },
            {
              "kind": "field",
              "name": "_value",
              "type": {
                "text": "string"
              },
              "privacy": "protected"
            },
            {
              "kind": "field",
              "name": "_input",
              "type": {
                "text": "HTMLInputElement"
              },
              "privacy": "protected",
              "readonly": true
            },
            {
              "kind": "field",
              "name": "_label",
              "type": {
                "text": "Array<Node>"
              },
              "privacy": "protected",
              "readonly": true
            },
            {
              "kind": "field",
              "name": "_hideLabel",
              "type": {
                "text": "boolean"
              },
              "privacy": "protected",
              "default": "false"
            },
            {
              "kind": "field",
              "name": "_tabIndex",
              "type": {
                "text": "number"
              },
              "privacy": "private",
              "default": "0"
            },
            {
              "kind": "field",
              "name": "_radios",
              "privacy": "private",
              "description": "Returns all radio elements from the group, that is having the same name property.",
              "readonly": true
            },
            {
              "kind": "field",
              "name": "_siblings",
              "privacy": "private",
              "description": "All sibling radio elements of the one invoking the getter.",
              "readonly": true
            },
            {
              "kind": "field",
              "name": "_active",
              "privacy": "private",
              "description": "All non-disabled radio elements from the group.",
              "readonly": true
            },
            {
              "kind": "field",
              "name": "_checkedRadios",
              "privacy": "private",
              "description": "All checked radio elements from the group.",
              "readonly": true
            },
            {
              "kind": "field",
              "name": "required",
              "privacy": "public",
              "description": "When set, makes the component a required field for validation.",
              "default": "false",
              "attribute": "required",
              "type": {
                "text": "boolean"
              },
              "reflects": true,
              "inheritedFrom": {
                "name": "FormAssociatedCheckboxRequiredMixin",
                "module": "src/components/common/mixins/forms/associated-required.ts"
              }
            },
            {
              "kind": "field",
              "name": "value",
              "privacy": "public",
              "description": "The value attribute of the control.",
              "attribute": "value",
              "type": {
                "text": "string"
              }
            },
            {
              "kind": "field",
              "name": "checked",
              "privacy": "public",
              "description": "The checked state of the control.",
              "attribute": "checked",
              "type": {
                "text": "boolean"
              }
            },
            {
              "kind": "field",
              "name": "labelPosition",
              "type": {
                "text": "ToggleLabelPosition"
              },
              "privacy": "public",
              "default": "'after'",
              "description": "The label position of the radio control.",
              "attribute": "label-position",
              "reflects": true,
              "expandedType": {
                "text": "'after' | 'before'"
              }
            },
            {
              "kind": "method",
              "name": "_setDefaultValue",
              "privacy": "protected",
              "return": {
                "type": {
                  "text": "void"
                }
              },
              "parameters": [
                {
                  "name": "current",
                  "type": {
                    "text": "string | null"
                  }
                }
              ],
              "inheritedFrom": {
                "name": "BaseFormAssociated",
                "module": "src/components/common/mixins/forms/associated.ts"
              }
            },
            {
              "kind": "method",
              "name": "click",
              "privacy": "public",
              "return": {
                "type": {
                  "text": "void"
                }
              },
              "description": "Simulates a click on the radio control."
            },
            {
              "kind": "method",
              "name": "focus",
              "privacy": "public",
              "return": {
                "type": {
                  "text": "void"
                }
              },
              "parameters": [
                {
                  "name": "options",
                  "optional": true,
                  "type": {
                    "text": "FocusOptions"
                  }
                }
              ],
              "description": "Sets focus on the radio control."
            },
            {
              "kind": "method",
              "name": "blur",
              "privacy": "public",
              "return": {
                "type": {
                  "text": "void"
                }
              },
              "description": "Removes focus from the radio control."
            },
            {
              "kind": "method",
              "name": "_checkValidity",
              "privacy": "private",
              "return": {
                "type": {
                  "text": "boolean"
                }
              }
            },
            {
              "kind": "method",
              "name": "_reportValidity",
              "privacy": "private",
              "return": {
                "type": {
                  "text": "boolean"
                }
              }
            },
            {
              "kind": "method",
              "name": "checkValidity",
              "privacy": "public",
              "description": "Checks for validity of the control and emits the invalid event if it invalid.",
              "return": {
                "type": {
                  "text": "boolean"
                }
              },
              "inheritedFrom": {
                "name": "BaseFormAssociated",
                "module": "src/components/common/mixins/forms/associated.ts"
              }
            },
            {
              "kind": "method",
              "name": "reportValidity",
              "privacy": "public",
              "description": "Checks for validity of the control and shows the browser message if it invalid.",
              "return": {
                "type": {
                  "text": "boolean"
                }
              },
              "inheritedFrom": {
                "name": "BaseFormAssociated",
                "module": "src/components/common/mixins/forms/associated.ts"
              }
            },
            {
              "kind": "method",
              "name": "setCustomValidity",
              "privacy": "public",
              "parameters": [
                {
                  "name": "message",
                  "type": {
                    "text": "string"
                  }
                }
              ],
              "description": "Sets a custom validation message for the control.\nAs long as `message` is not empty, the control is considered invalid.",
              "return": {
                "type": {
                  "text": "void"
                }
              },
              "inheritedFrom": {
                "name": "BaseFormAssociated",
                "module": "src/components/common/mixins/forms/associated.ts"
              }
            },
            {
              "kind": "method",
              "name": "_updateCheckedState",
              "privacy": "private",
              "return": {
                "type": {
                  "text": "void"
                }
              }
            },
            {
              "kind": "method",
              "name": "formResetCallback",
              "privacy": "protected",
              "return": {
                "type": {
                  "text": "void"
                }
              },
              "inheritedFrom": {
                "name": "BaseFormAssociated",
                "module": "src/components/common/mixins/forms/associated.ts"
              }
            },
            {
              "kind": "method",
              "name": "_resetTabIndexes",
              "privacy": "private",
              "return": {
                "type": {
                  "text": "void"
                }
              },
              "description": "Called after a form reset callback to restore default keyboard navigation."
            },
            {
              "kind": "method",
              "name": "_handleClick",
              "privacy": "protected",
              "parameters": [
                {
                  "name": "event",
                  "type": {
                    "text": "PointerEvent"
                  }
                }
              ]
            },
            {
              "kind": "method",
              "name": "_navigate",
              "privacy": "protected",
              "return": {
                "type": {
                  "text": "void"
                }
              },
              "parameters": [
                {
                  "name": "idx",
                  "type": {
                    "text": "number"
                  }
                }
              ]
            },
            {
              "kind": "method",
              "name": "_renderValidatorContainer",
              "privacy": "protected",
              "return": {
                "type": {
                  "text": "TemplateResult"
                }
              }
            },
            {
              "kind": "field",
              "name": "_required",
              "type": {
                "text": "boolean"
              },
              "privacy": "protected",
              "default": "false",
              "inheritedFrom": {
                "name": "FormAssociatedCheckboxRequiredMixin",
                "module": "src/components/common/mixins/forms/associated-required.ts"
              }
            },
            {
              "kind": "field",
              "name": "defaultChecked",
              "privacy": "public",
              "type": {
                "text": "boolean"
              },
              "inheritedFrom": {
                "name": "FormAssociatedCheckboxMixin",
                "module": "src/components/common/mixins/forms/associated.ts"
              }
            },
            {
              "kind": "field",
              "name": "formAssociated",
              "type": {
                "text": "boolean"
              },
              "privacy": "public",
              "static": true,
              "readonly": true,
              "default": "true",
              "inheritedFrom": {
                "name": "BaseFormAssociated",
                "module": "src/components/common/mixins/forms/associated.ts"
              }
            },
            {
              "kind": "field",
              "name": "__internals",
              "type": {
                "text": "ElementInternals"
              },
              "privacy": "private",
              "inheritedFrom": {
                "name": "BaseFormAssociated",
                "module": "src/components/common/mixins/forms/associated.ts"
              }
            },
            {
              "kind": "field",
              "name": "_disabled",
              "type": {
                "text": "boolean"
              },
              "privacy": "protected",
              "default": "false",
              "inheritedFrom": {
                "name": "BaseFormAssociated",
                "module": "src/components/common/mixins/forms/associated.ts"
              }
            },
            {
              "kind": "field",
              "name": "_invalid",
              "type": {
                "text": "boolean"
              },
              "privacy": "protected",
              "default": "false",
              "inheritedFrom": {
                "name": "BaseFormAssociated",
                "module": "src/components/common/mixins/forms/associated.ts"
              }
            },
            {
              "kind": "field",
              "name": "_dirty",
              "type": {
                "text": "boolean"
              },
              "privacy": "protected",
              "default": "false",
              "inheritedFrom": {
                "name": "BaseFormAssociated",
                "module": "src/components/common/mixins/forms/associated.ts"
              }
            },
            {
              "kind": "field",
              "name": "_pristine",
              "type": {
                "text": "boolean"
              },
              "privacy": "protected",
              "default": "true",
              "inheritedFrom": {
                "name": "BaseFormAssociated",
                "module": "src/components/common/mixins/forms/associated.ts"
              }
            },
            {
              "kind": "field",
              "name": "name",
              "type": {
                "text": "string"
              },
              "privacy": "public",
              "description": "The name attribute of the control.",
              "attribute": "name",
              "reflects": true,
              "inheritedFrom": {
                "name": "BaseFormAssociated",
                "module": "src/components/common/mixins/forms/associated.ts"
              }
            },
            {
              "kind": "field",
              "name": "disabled",
              "privacy": "public",
              "description": "The disabled state of the component.",
              "default": "false",
              "attribute": "disabled",
              "type": {
                "text": "boolean"
              },
              "reflects": true,
              "inheritedFrom": {
                "name": "BaseFormAssociated",
                "module": "src/components/common/mixins/forms/associated.ts"
              }
            },
            {
              "kind": "field",
              "name": "invalid",
              "privacy": "public",
              "description": "Sets the control into invalid state (visual state only).",
              "default": "false",
              "attribute": "invalid",
              "type": {
                "text": "boolean"
              },
              "reflects": true,
              "inheritedFrom": {
                "name": "BaseFormAssociated",
                "module": "src/components/common/mixins/forms/associated.ts"
              }
            },
            {
              "kind": "field",
              "name": "form",
              "type": {
                "text": "HTMLFormElement | null"
              },
              "privacy": "public",
              "description": "Returns the HTMLFormElement associated with this element.",
              "readonly": true,
              "inheritedFrom": {
                "name": "BaseFormAssociated",
                "module": "src/components/common/mixins/forms/associated.ts"
              }
            },
            {
              "kind": "field",
              "name": "validity",
              "type": {
                "text": "ValidityState"
              },
              "privacy": "public",
              "description": "Returns a ValidityState object which represents the different validity states\nthe element can be in, with respect to constraint validation.",
              "readonly": true,
              "inheritedFrom": {
                "name": "BaseFormAssociated",
                "module": "src/components/common/mixins/forms/associated.ts"
              }
            },
            {
              "kind": "field",
              "name": "validationMessage",
              "type": {
                "text": "string"
              },
              "privacy": "public",
              "description": "A string containing the validation message of this element.",
              "readonly": true,
              "inheritedFrom": {
                "name": "BaseFormAssociated",
                "module": "src/components/common/mixins/forms/associated.ts"
              }
            },
            {
              "kind": "field",
              "name": "willValidate",
              "type": {
                "text": "boolean"
              },
              "privacy": "public",
              "description": "A boolean value which returns true if the element is a submittable element\nthat is a candidate for constraint validation.",
              "readonly": true,
              "inheritedFrom": {
                "name": "BaseFormAssociated",
                "module": "src/components/common/mixins/forms/associated.ts"
              }
            },
            {
              "kind": "method",
              "name": "_handleInvalid",
              "privacy": "private",
              "parameters": [
                {
                  "name": "event",
                  "type": {
                    "text": "Event"
                  }
                }
              ],
              "inheritedFrom": {
                "name": "BaseFormAssociated",
                "module": "src/components/common/mixins/forms/associated.ts"
              }
            },
            {
              "kind": "method",
              "name": "_setInvalidState",
              "privacy": "private",
              "return": {
                "type": {
                  "text": "void"
                }
              },
              "inheritedFrom": {
                "name": "BaseFormAssociated",
                "module": "src/components/common/mixins/forms/associated.ts"
              }
            },
            {
              "kind": "method",
              "name": "__runValidators",
              "privacy": "private",
              "inheritedFrom": {
                "name": "BaseFormAssociated",
                "module": "src/components/common/mixins/forms/associated.ts"
              }
            },
            {
              "kind": "method",
              "name": "_restoreDefaultValue",
              "privacy": "protected",
              "return": {
                "type": {
                  "text": "void"
                }
              },
              "inheritedFrom": {
                "name": "BaseFormAssociated",
                "module": "src/components/common/mixins/forms/associated.ts"
              }
            },
            {
              "kind": "method",
              "name": "_validate",
              "privacy": "protected",
              "return": {
                "type": {
                  "text": "void"
                }
              },
              "parameters": [
                {
                  "name": "message",
                  "optional": true,
                  "type": {
                    "text": "string"
                  }
                }
              ],
              "inheritedFrom": {
                "name": "BaseFormAssociated",
                "module": "src/components/common/mixins/forms/associated.ts"
              }
            },
            {
              "kind": "method",
              "name": "_updateValidity",
              "privacy": "protected",
              "parameters": [
                {
                  "name": "error",
                  "optional": true,
                  "type": {
                    "text": "string"
                  }
                }
              ],
              "description": "Executes the component validators and updates the internal validity state.",
              "inheritedFrom": {
                "name": "BaseFormAssociated",
                "module": "src/components/common/mixins/forms/associated.ts"
              }
            },
            {
              "kind": "method",
              "name": "_setFormValue",
              "privacy": "protected",
              "return": {
                "type": {
                  "text": "void"
                }
              },
              "parameters": [
                {
                  "name": "value",
                  "type": {
                    "text": "FormValueType"
                  }
                },
                {
                  "name": "state",
                  "optional": true,
                  "type": {
                    "text": "FormValueType"
                  }
                }
              ],
              "inheritedFrom": {
                "name": "BaseFormAssociated",
                "module": "src/components/common/mixins/forms/associated.ts"
              }
            },
            {
              "kind": "method",
              "name": "formAssociatedCallback",
              "privacy": "protected",
              "return": {
                "type": {
                  "text": "void"
                }
              },
              "parameters": [
                {
                  "name": "_form",
                  "type": {
                    "text": "HTMLFormElement"
                  }
                }
              ],
              "inheritedFrom": {
                "name": "BaseFormAssociated",
                "module": "src/components/common/mixins/forms/associated.ts"
              }
            },
            {
              "kind": "method",
              "name": "formDisabledCallback",
              "privacy": "protected",
              "return": {
                "type": {
                  "text": "void"
                }
              },
              "parameters": [
                {
                  "name": "state",
                  "type": {
                    "text": "boolean"
                  }
                }
              ],
              "inheritedFrom": {
                "name": "BaseFormAssociated",
                "module": "src/components/common/mixins/forms/associated.ts"
              }
            },
            {
              "kind": "method",
              "name": "formStateRestoreCallback",
              "privacy": "protected",
              "return": {
                "type": {
                  "text": "void"
                }
              },
              "parameters": [
                {
                  "name": "_state",
                  "type": {
                    "text": "FormValueType"
                  }
                },
                {
                  "name": "_mode",
                  "type": {
                    "text": "FormRestoreMode"
                  }
                }
              ],
              "inheritedFrom": {
                "name": "BaseFormAssociated",
                "module": "src/components/common/mixins/forms/associated.ts"
              }
            },
            {
              "kind": "method",
              "name": "addEventListener",
              "privacy": "public",
              "return": {
                "type": {
                  "text": "void"
                }
              },
              "parameters": [
                {
                  "name": "type",
                  "type": {
                    "text": "K"
                  }
                },
                {
                  "name": "listener",
                  "type": {
                    "text": "(this: HTMLElement, ev: M[K]) => any"
                  }
                },
                {
                  "name": "options",
                  "optional": true,
                  "type": {
                    "text": "boolean | AddEventListenerOptions"
                  }
                }
              ],
              "inheritedFrom": {
                "name": "EventEmitterMixin",
                "module": "src/components/common/mixins/event-emitter.ts"
              }
            },
            {
              "kind": "method",
              "name": "removeEventListener",
              "privacy": "public",
              "return": {
                "type": {
                  "text": "void"
                }
              },
              "parameters": [
                {
                  "name": "type",
                  "type": {
                    "text": "K"
                  }
                },
                {
                  "name": "listener",
                  "type": {
                    "text": "(this: HTMLElement, ev: M[K]) => any"
                  }
                },
                {
                  "name": "options",
                  "optional": true,
                  "type": {
                    "text": "boolean | EventListenerOptions"
                  }
                }
              ],
              "inheritedFrom": {
                "name": "EventEmitterMixin",
                "module": "src/components/common/mixins/event-emitter.ts"
              }
            },
            {
              "kind": "method",
              "name": "emitEvent",
              "privacy": "private",
              "return": {
                "type": {
                  "text": "boolean"
                }
              },
              "parameters": [
                {
                  "name": "type",
                  "type": {
                    "text": "K"
                  }
                },
                {
                  "name": "eventInitDict",
                  "optional": true,
                  "type": {
                    "text": "CustomEventInit<D>"
                  }
                }
              ],
              "inheritedFrom": {
                "name": "EventEmitterMixin",
                "module": "src/components/common/mixins/event-emitter.ts"
              }
            }
          ],
          "events": [
            {
              "description": "Emitted when the control's checked state changes.",
              "name": "igcChange"
            },
            {
              "type": {
                "text": "CustomEvent"
              },
              "inheritedFrom": {
                "name": "EventEmitterMixin",
                "module": "src/components/common/mixins/event-emitter.ts"
              }
            }
          ],
          "attributes": [
            {
              "name": "value",
              "description": "The value attribute of the control.",
              "fieldName": "value",
              "attribute": "value",
              "type": {
                "text": "string"
              }
            },
            {
              "name": "checked",
              "description": "The checked state of the control.",
              "fieldName": "checked",
              "attribute": "checked",
              "type": {
                "text": "boolean"
              }
            },
            {
              "name": "label-position",
              "type": {
                "text": "ToggleLabelPosition"
              },
              "default": "'after'",
              "description": "The label position of the radio control.",
              "fieldName": "labelPosition",
              "attribute": "label-position",
              "expandedType": {
                "text": "'after' | 'before'"
              }
            },
            {
              "name": "required",
              "description": "When set, makes the component a required field for validation.",
              "default": "false",
              "fieldName": "required",
              "attribute": "required",
              "type": {
                "text": "boolean"
              },
              "inheritedFrom": {
                "name": "FormAssociatedCheckboxRequiredMixin",
                "module": "src/components/common/mixins/forms/associated-required.ts"
              }
            },
            {
              "name": "name",
              "type": {
                "text": "string"
              },
              "description": "The name attribute of the control.",
              "fieldName": "name",
              "attribute": "name",
              "inheritedFrom": {
                "name": "BaseFormAssociated",
                "module": "src/components/common/mixins/forms/associated.ts"
              }
            },
            {
              "name": "disabled",
              "description": "The disabled state of the component.",
              "default": "false",
              "fieldName": "disabled",
              "attribute": "disabled",
              "type": {
                "text": "boolean"
              },
              "inheritedFrom": {
                "name": "BaseFormAssociated",
                "module": "src/components/common/mixins/forms/associated.ts"
              }
            },
            {
              "name": "invalid",
              "description": "Sets the control into invalid state (visual state only).",
              "default": "false",
              "fieldName": "invalid",
              "attribute": "invalid",
              "type": {
                "text": "boolean"
              },
              "inheritedFrom": {
                "name": "BaseFormAssociated",
                "module": "src/components/common/mixins/forms/associated.ts"
              }
            }
          ],
          "mixins": [
            {
              "name": "FormAssociatedCheckboxRequiredMixin",
              "module": "/src/components/common/mixins/forms/associated-required.js"
            },
            {
              "name": "EventEmitterMixin",
              "module": "/src/components/common/mixins/event-emitter.js"
            }
          ],
          "superclass": {
            "name": "LitElement",
            "package": "lit"
          },
          "tagName": "igc-radio",
          "customElement": true
        }
      ],
      "exports": [
        {
          "kind": "js",
          "name": "default",
          "declaration": {
            "name": "IgcRadioComponent",
            "module": "src/components/radio/radio.ts"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "src/components/radio-group/radio-group.ts",
      "declarations": [
        {
          "kind": "class",
          "description": "The igc-radio-group component unifies one or more igc-radio buttons.",
          "name": "IgcRadioGroupComponent",
          "slots": [
            {
              "description": "Default slot",
              "name": ""
            }
          ],
          "members": [
            {
              "kind": "field",
              "name": "tagName",
              "type": {
                "text": "string"
              },
              "privacy": "public",
              "static": true,
              "readonly": true,
              "default": "'igc-radio-group'"
            },
            {
              "kind": "method",
              "name": "register",
              "privacy": "public",
              "static": true,
              "return": {
                "type": {
                  "text": "void"
                }
              }
            },
            {
              "kind": "field",
              "name": "_internals",
              "privacy": "private",
              "readonly": true
            },
            {
              "kind": "field",
              "name": "_defaultValue",
              "type": {
                "text": "string"
              },
              "privacy": "private"
            },
            {
              "kind": "field",
              "name": "_name",
              "type": {
                "text": "string"
              },
              "privacy": "private"
            },
            {
              "kind": "field",
              "name": "_value",
              "type": {
                "text": "string"
              },
              "privacy": "private"
            },
            {
              "kind": "field",
              "name": "_radios",
              "type": {
                "text": "NodeListOf<IgcRadioComponent>"
              },
              "privacy": "private"
            },
            {
              "kind": "field",
              "name": "alignment",
              "type": {
                "text": "ContentOrientation"
              },
              "privacy": "public",
              "default": "'vertical'",
              "description": "Alignment of the radio controls inside this group.",
              "attribute": "alignment",
              "reflects": true,
              "expandedType": {
                "text": "'horizontal' | 'vertical'"
              }
            },
            {
              "kind": "field",
              "name": "defaultValue",
              "privacy": "public",
              "type": {
                "text": "string"
              }
            },
            {
              "kind": "field",
              "name": "name",
              "privacy": "public",
              "description": "Gets/Sets the name for all child igc-radio components.",
              "attribute": "name",
              "type": {
                "text": "string"
              },
              "reflects": true
            },
            {
              "kind": "field",
              "name": "value",
              "privacy": "public",
              "description": "Gets/Sets the checked igc-radio element that matches `value`",
              "attribute": "value",
              "type": {
                "text": "string"
              }
            },
            {
              "kind": "method",
              "name": "_observerCallback",
              "privacy": "private",
              "return": {
                "type": {
                  "text": "void"
                }
              }
            },
            {
              "kind": "method",
              "name": "_setCSSGridVars",
              "privacy": "private"
            },
            {
              "kind": "method",
              "name": "_setRadiosDefaultChecked",
              "privacy": "private"
            },
            {
              "kind": "method",
              "name": "_setRadiosName",
              "privacy": "private"
            },
            {
              "kind": "method",
              "name": "_setDefaultValue",
              "privacy": "private"
            },
            {
              "kind": "method",
              "name": "_setSelectedRadio",
              "privacy": "private"
            }
          ],
          "attributes": [
            {
              "name": "alignment",
              "type": {
                "text": "ContentOrientation"
              },
              "default": "'vertical'",
              "description": "Alignment of the radio controls inside this group.",
              "fieldName": "alignment",
              "attribute": "alignment",
              "expandedType": {
                "text": "'horizontal' | 'vertical'"
              }
            },
            {
              "name": "name",
              "description": "Gets/Sets the name for all child igc-radio components.",
              "fieldName": "name",
              "attribute": "name",
              "type": {
                "text": "string"
              }
            },
            {
              "name": "value",
              "description": "Gets/Sets the checked igc-radio element that matches `value`",
              "fieldName": "value",
              "attribute": "value",
              "type": {
                "text": "string"
              }
            }
          ],
          "superclass": {
            "name": "LitElement",
            "package": "lit"
          },
          "tagName": "igc-radio-group",
          "customElement": true
        }
      ],
      "exports": [
        {
          "kind": "js",
          "name": "default",
          "declaration": {
            "name": "IgcRadioGroupComponent",
            "module": "src/components/radio-group/radio-group.ts"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "src/components/rating/rating-symbol.ts",
      "declarations": [
        {
          "kind": "class",
          "description": "\nUsed when a custom icon/symbol/element needs to be passed to the igc-rating component.",
          "name": "IgcRatingSymbolComponent",
          "cssParts": [
            {
              "description": "The symbol wrapping container.",
              "name": "symbol"
            },
            {
              "description": "The full symbol wrapping container.",
              "name": "full"
            },
            {
              "description": "The empty symbol wrapping container.",
              "name": "empty"
            }
          ],
          "slots": [
            {
              "description": "Default slot for projected full symbols/icons.",
              "name": ""
            },
            {
              "description": "Default slot for projected empty symbols/icons.",
              "name": "empty"
            }
          ],
          "members": [
            {
              "kind": "field",
              "name": "tagName",
              "type": {
                "text": "string"
              },
              "privacy": "public",
              "static": true,
              "readonly": true,
              "default": "'igc-rating-symbol'"
            },
            {
              "kind": "method",
              "name": "register",
              "privacy": "public",
              "static": true
            }
          ],
          "superclass": {
            "name": "LitElement",
            "package": "lit"
          },
          "tagName": "igc-rating-symbol",
          "customElement": true
        }
      ],
      "exports": [
        {
          "kind": "js",
          "name": "default",
          "declaration": {
            "name": "IgcRatingSymbolComponent",
            "module": "src/components/rating/rating-symbol.ts"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "src/components/rating/rating.ts",
      "declarations": [
        {
          "kind": "class",
          "description": "Rating provides insight regarding others' opinions and experiences,\nand can allow the user to submit a rating of their own",
          "name": "IgcRatingComponent",
          "cssProperties": [
            {
              "description": "The size of the symbols.",
              "name": "--symbol-size"
            },
            {
              "description": "The color of the filled symbol.",
              "name": "--symbol-full-color"
            },
            {
              "description": "The color of the empty symbol.",
              "name": "--symbol-empty-color"
            },
            {
              "description": "The filter(s) used for the filled symbol.",
              "name": "--symbol-full-filter"
            },
            {
              "description": "The filter(s) used for the empty symbol.",
              "name": "--symbol-empty-filter"
            }
          ],
          "cssParts": [
            {
              "description": "The main wrapper which holds all of the rating elements.",
              "name": "base"
            },
            {
              "description": "The label part.",
              "name": "label"
            },
            {
              "description": "The value label part.",
              "name": "value-label"
            },
            {
              "description": "A wrapper for all rating symbols.",
              "name": "symbols"
            },
            {
              "description": "The part of the encapsulated default symbol.",
              "name": "symbol"
            },
            {
              "description": "The part of the encapsulated full symbols.",
              "name": "full"
            },
            {
              "description": "The part of the encapsulated empty symbols.",
              "name": "empty"
            }
          ],
          "members": [
            {
              "kind": "field",
              "name": "tagName",
              "type": {
                "text": "string"
              },
              "privacy": "public",
              "static": true,
              "readonly": true,
              "default": "'igc-rating'"
            },
            {
              "kind": "method",
              "name": "register",
              "privacy": "public",
              "static": true
            },
            {
              "kind": "field",
              "name": "_formValue",
              "type": {
                "text": "FormValue<unknown>"
              },
              "privacy": "protected",
              "readonly": true,
              "inheritedFrom": {
                "name": "BaseFormAssociated",
                "module": "src/components/common/mixins/forms/associated.ts"
              }
            },
            {
              "kind": "field",
              "name": "_max",
              "type": {
                "text": "number"
              },
              "privacy": "private",
              "default": "5"
            },
            {
              "kind": "field",
              "name": "_step",
              "type": {
                "text": "number"
              },
              "privacy": "private",
              "default": "1"
            },
            {
              "kind": "field",
              "name": "_single",
              "type": {
                "text": "boolean"
              },
              "privacy": "private",
              "default": "false"
            },
            {
              "kind": "field",
              "name": "ratingSymbols",
              "type": {
                "text": "IgcRatingSymbolComponent[]"
              },
              "privacy": "protected"
            },
            {
              "kind": "field",
              "name": "container",
              "type": {
                "text": "HTMLElement"
              },
              "privacy": "protected"
            },
            {
              "kind": "field",
              "name": "valueLabel",
              "type": {
                "text": "Node[]"
              },
              "privacy": "protected"
            },
            {
              "kind": "field",
              "name": "hoverValue",
              "type": {
                "text": "number"
              },
              "privacy": "protected",
              "default": "-1"
            },
            {
              "kind": "field",
              "name": "hoverState",
              "type": {
                "text": "boolean"
              },
              "privacy": "protected",
              "default": "false"
            },
            {
              "kind": "field",
              "name": "isInteractive",
              "privacy": "protected",
              "readonly": true
            },
            {
              "kind": "field",
              "name": "hasProjectedSymbols",
              "privacy": "protected",
              "readonly": true
            },
            {
              "kind": "field",
              "name": "valueText",
              "privacy": "protected",
              "readonly": true
            },
            {
              "kind": "field",
              "name": "max",
              "privacy": "public",
              "description": "The maximum value for the rating.\n\nIf there are projected symbols, the maximum value will be resolved\nbased on the number of symbols.",
              "default": "5",
              "attribute": "max",
              "type": {
                "text": "number"
              }
            },
            {
              "kind": "field",
              "name": "step",
              "privacy": "public",
              "description": "The minimum value change allowed.\n\nValid values are in the interval between 0 and 1 inclusive.",
              "default": "1",
              "attribute": "step",
              "type": {
                "text": "number"
              }
            },
            {
              "kind": "field",
              "name": "label",
              "type": {
                "text": "string"
              },
              "privacy": "public",
              "description": "The label of the control.",
              "attribute": "label"
            },
            {
              "kind": "field",
              "name": "valueFormat",
              "type": {
                "text": "string"
              },
              "privacy": "public",
              "description": "A format string which sets aria-valuetext. Instances of '{0}' will be replaced\nwith the current value of the control and instances of '{1}' with the maximum value for the control.\n\nImportant for screen-readers and useful for localization.",
              "attribute": "value-format"
            },
            {
              "kind": "field",
              "name": "value",
              "privacy": "public",
              "description": "The current value of the component",
              "default": "0",
              "attribute": "value",
              "type": {
                "text": "number"
              }
            },
            {
              "kind": "field",
              "name": "hoverPreview",
              "type": {
                "text": "boolean"
              },
              "privacy": "public",
              "default": "false",
              "description": "Sets hover preview behavior for the component",
              "attribute": "hover-preview",
              "reflects": true
            },
            {
              "kind": "field",
              "name": "readOnly",
              "type": {
                "text": "boolean"
              },
              "privacy": "public",
              "default": "false",
              "description": "Makes the control a readonly field.",
              "attribute": "readonly",
              "reflects": true
            },
            {
              "kind": "field",
              "name": "single",
              "privacy": "public",
              "description": "Toggles single selection visual mode.",
              "default": "false",
              "attribute": "single",
              "type": {
                "text": "boolean"
              },
              "reflects": true
            },
            {
              "kind": "field",
              "name": "allowReset",
              "type": {
                "text": "boolean"
              },
              "privacy": "public",
              "default": "false",
              "description": "Whether to reset the rating when the user selects the same value.",
              "attribute": "allow-reset",
              "reflects": true
            },
            {
              "kind": "method",
              "name": "handleClick",
              "privacy": "protected",
              "parameters": [
                {
                  "name": "{ clientX }",
                  "type": {
                    "text": "PointerEvent"
                  }
                }
              ]
            },
            {
              "kind": "method",
              "name": "handlePointerMove",
              "privacy": "protected",
              "parameters": [
                {
                  "name": "{ clientX }",
                  "type": {
                    "text": "PointerEvent"
                  }
                }
              ]
            },
            {
              "kind": "method",
              "name": "emitValueUpdate",
              "privacy": "protected",
              "parameters": [
                {
                  "name": "value",
                  "type": {
                    "text": "number"
                  }
                }
              ]
            },
            {
              "kind": "method",
              "name": "handleSlotChange",
              "privacy": "protected"
            },
            {
              "kind": "method",
              "name": "handleHoverEnabled",
              "privacy": "protected"
            },
            {
              "kind": "method",
              "name": "handleHoverDisabled",
              "privacy": "protected"
            },
            {
              "kind": "method",
              "name": "calcNewValue",
              "privacy": "protected",
              "parameters": [
                {
                  "name": "x",
                  "type": {
                    "text": "number"
                  }
                }
              ]
            },
            {
              "kind": "method",
              "name": "round",
              "privacy": "protected",
              "parameters": [
                {
                  "name": "value",
                  "type": {
                    "text": "number"
                  }
                }
              ]
            },
            {
              "kind": "method",
              "name": "clipSymbol",
              "privacy": "protected",
              "parameters": [
                {
                  "name": "index",
                  "type": {
                    "text": "number"
                  }
                },
                {
                  "name": "isLTR",
                  "default": "true"
                }
              ]
            },
            {
              "kind": "method",
              "name": "stepUp",
              "privacy": "public",
              "parameters": [
                {
                  "name": "n",
                  "default": "1"
                }
              ],
              "description": "Increments the value of the control by `n` steps multiplied by the\nstep factor."
            },
            {
              "kind": "method",
              "name": "stepDown",
              "privacy": "public",
              "parameters": [
                {
                  "name": "n",
                  "default": "1"
                }
              ],
              "description": "Decrements the value of the control by `n` steps multiplied by\nthe step factor."
            },
            {
              "kind": "method",
              "name": "renderSymbols",
              "privacy": "protected"
            },
            {
              "kind": "method",
              "name": "clipProjected",
              "privacy": "protected"
            },
            {
              "kind": "field",
              "name": "defaultValue",
              "privacy": "public",
              "inheritedFrom": {
                "name": "FormAssociatedMixin",
                "module": "src/components/common/mixins/forms/associated.ts"
              }
            },
            {
              "kind": "field",
              "name": "formAssociated",
              "type": {
                "text": "boolean"
              },
              "privacy": "public",
              "static": true,
              "readonly": true,
              "default": "true",
              "inheritedFrom": {
                "name": "BaseFormAssociated",
                "module": "src/components/common/mixins/forms/associated.ts"
              }
            },
            {
              "kind": "field",
              "name": "__internals",
              "type": {
                "text": "ElementInternals"
              },
              "privacy": "private",
              "inheritedFrom": {
                "name": "BaseFormAssociated",
                "module": "src/components/common/mixins/forms/associated.ts"
              }
            },
            {
              "kind": "field",
              "name": "_disabled",
              "type": {
                "text": "boolean"
              },
              "privacy": "protected",
              "default": "false",
              "inheritedFrom": {
                "name": "BaseFormAssociated",
                "module": "src/components/common/mixins/forms/associated.ts"
              }
            },
            {
              "kind": "field",
              "name": "_invalid",
              "type": {
                "text": "boolean"
              },
              "privacy": "protected",
              "default": "false",
              "inheritedFrom": {
                "name": "BaseFormAssociated",
                "module": "src/components/common/mixins/forms/associated.ts"
              }
            },
            {
              "kind": "field",
              "name": "_dirty",
              "type": {
                "text": "boolean"
              },
              "privacy": "protected",
              "default": "false",
              "inheritedFrom": {
                "name": "BaseFormAssociated",
                "module": "src/components/common/mixins/forms/associated.ts"
              }
            },
            {
              "kind": "field",
              "name": "_pristine",
              "type": {
                "text": "boolean"
              },
              "privacy": "protected",
              "default": "true",
              "inheritedFrom": {
                "name": "BaseFormAssociated",
                "module": "src/components/common/mixins/forms/associated.ts"
              }
            },
            {
              "kind": "field",
              "name": "__validators",
              "type": {
                "text": "Validator[]"
              },
              "privacy": "protected",
              "readonly": true,
              "inheritedFrom": {
                "name": "BaseFormAssociated",
                "module": "src/components/common/mixins/forms/associated.ts"
              }
            },
            {
              "kind": "field",
              "name": "name",
              "type": {
                "text": "string"
              },
              "privacy": "public",
              "description": "The name attribute of the control.",
              "attribute": "name",
              "reflects": true,
              "inheritedFrom": {
                "name": "BaseFormAssociated",
                "module": "src/components/common/mixins/forms/associated.ts"
              }
            },
            {
              "kind": "field",
              "name": "disabled",
              "privacy": "public",
              "description": "The disabled state of the component.",
              "default": "false",
              "attribute": "disabled",
              "type": {
                "text": "boolean"
              },
              "reflects": true,
              "inheritedFrom": {
                "name": "BaseFormAssociated",
                "module": "src/components/common/mixins/forms/associated.ts"
              }
            },
            {
              "kind": "field",
              "name": "invalid",
              "privacy": "public",
              "description": "Sets the control into invalid state (visual state only).",
              "default": "false",
              "attribute": "invalid",
              "type": {
                "text": "boolean"
              },
              "reflects": true,
              "inheritedFrom": {
                "name": "BaseFormAssociated",
                "module": "src/components/common/mixins/forms/associated.ts"
              }
            },
            {
              "kind": "field",
              "name": "form",
              "type": {
                "text": "HTMLFormElement | null"
              },
              "privacy": "public",
              "description": "Returns the HTMLFormElement associated with this element.",
              "readonly": true,
              "inheritedFrom": {
                "name": "BaseFormAssociated",
                "module": "src/components/common/mixins/forms/associated.ts"
              }
            },
            {
              "kind": "field",
              "name": "validity",
              "type": {
                "text": "ValidityState"
              },
              "privacy": "public",
              "description": "Returns a ValidityState object which represents the different validity states\nthe element can be in, with respect to constraint validation.",
              "readonly": true,
              "inheritedFrom": {
                "name": "BaseFormAssociated",
                "module": "src/components/common/mixins/forms/associated.ts"
              }
            },
            {
              "kind": "field",
              "name": "validationMessage",
              "type": {
                "text": "string"
              },
              "privacy": "public",
              "description": "A string containing the validation message of this element.",
              "readonly": true,
              "inheritedFrom": {
                "name": "BaseFormAssociated",
                "module": "src/components/common/mixins/forms/associated.ts"
              }
            },
            {
              "kind": "field",
              "name": "willValidate",
              "type": {
                "text": "boolean"
              },
              "privacy": "public",
              "description": "A boolean value which returns true if the element is a submittable element\nthat is a candidate for constraint validation.",
              "readonly": true,
              "inheritedFrom": {
                "name": "BaseFormAssociated",
                "module": "src/components/common/mixins/forms/associated.ts"
              }
            },
            {
              "kind": "method",
              "name": "_handleInvalid",
              "privacy": "private",
              "parameters": [
                {
                  "name": "event",
                  "type": {
                    "text": "Event"
                  }
                }
              ],
              "inheritedFrom": {
                "name": "BaseFormAssociated",
                "module": "src/components/common/mixins/forms/associated.ts"
              }
            },
            {
              "kind": "method",
              "name": "_setInvalidState",
              "privacy": "private",
              "return": {
                "type": {
                  "text": "void"
                }
              },
              "inheritedFrom": {
                "name": "BaseFormAssociated",
                "module": "src/components/common/mixins/forms/associated.ts"
              }
            },
            {
              "kind": "method",
              "name": "__runValidators",
              "privacy": "private",
              "inheritedFrom": {
                "name": "BaseFormAssociated",
                "module": "src/components/common/mixins/forms/associated.ts"
              }
            },
            {
              "kind": "method",
              "name": "_setDefaultValue",
              "privacy": "protected",
              "return": {
                "type": {
                  "text": "void"
                }
              },
              "parameters": [
                {
                  "name": "current",
                  "type": {
                    "text": "string | null"
                  }
                }
              ],
              "inheritedFrom": {
                "name": "BaseFormAssociated",
                "module": "src/components/common/mixins/forms/associated.ts"
              }
            },
            {
              "kind": "method",
              "name": "_restoreDefaultValue",
              "privacy": "protected",
              "return": {
                "type": {
                  "text": "void"
                }
              },
              "inheritedFrom": {
                "name": "BaseFormAssociated",
                "module": "src/components/common/mixins/forms/associated.ts"
              }
            },
            {
              "kind": "method",
              "name": "_validate",
              "privacy": "protected",
              "return": {
                "type": {
                  "text": "void"
                }
              },
              "parameters": [
                {
                  "name": "message",
                  "optional": true,
                  "type": {
                    "text": "string"
                  }
                }
              ],
              "inheritedFrom": {
                "name": "BaseFormAssociated",
                "module": "src/components/common/mixins/forms/associated.ts"
              }
            },
            {
              "kind": "method",
              "name": "_updateValidity",
              "privacy": "protected",
              "parameters": [
                {
                  "name": "error",
                  "optional": true,
                  "type": {
                    "text": "string"
                  }
                }
              ],
              "description": "Executes the component validators and updates the internal validity state.",
              "inheritedFrom": {
                "name": "BaseFormAssociated",
                "module": "src/components/common/mixins/forms/associated.ts"
              }
            },
            {
              "kind": "method",
              "name": "_setFormValue",
              "privacy": "protected",
              "return": {
                "type": {
                  "text": "void"
                }
              },
              "parameters": [
                {
                  "name": "value",
                  "type": {
                    "text": "FormValueType"
                  }
                },
                {
                  "name": "state",
                  "optional": true,
                  "type": {
                    "text": "FormValueType"
                  }
                }
              ],
              "inheritedFrom": {
                "name": "BaseFormAssociated",
                "module": "src/components/common/mixins/forms/associated.ts"
              }
            },
            {
              "kind": "method",
              "name": "formAssociatedCallback",
              "privacy": "protected",
              "return": {
                "type": {
                  "text": "void"
                }
              },
              "parameters": [
                {
                  "name": "_form",
                  "type": {
                    "text": "HTMLFormElement"
                  }
                }
              ],
              "inheritedFrom": {
                "name": "BaseFormAssociated",
                "module": "src/components/common/mixins/forms/associated.ts"
              }
            },
            {
              "kind": "method",
              "name": "formDisabledCallback",
              "privacy": "protected",
              "return": {
                "type": {
                  "text": "void"
                }
              },
              "parameters": [
                {
                  "name": "state",
                  "type": {
                    "text": "boolean"
                  }
                }
              ],
              "inheritedFrom": {
                "name": "BaseFormAssociated",
                "module": "src/components/common/mixins/forms/associated.ts"
              }
            },
            {
              "kind": "method",
              "name": "formResetCallback",
              "privacy": "protected",
              "return": {
                "type": {
                  "text": "void"
                }
              },
              "inheritedFrom": {
                "name": "BaseFormAssociated",
                "module": "src/components/common/mixins/forms/associated.ts"
              }
            },
            {
              "kind": "method",
              "name": "formStateRestoreCallback",
              "privacy": "protected",
              "return": {
                "type": {
                  "text": "void"
                }
              },
              "parameters": [
                {
                  "name": "_state",
                  "type": {
                    "text": "FormValueType"
                  }
                },
                {
                  "name": "_mode",
                  "type": {
                    "text": "FormRestoreMode"
                  }
                }
              ],
              "inheritedFrom": {
                "name": "BaseFormAssociated",
                "module": "src/components/common/mixins/forms/associated.ts"
              }
            },
            {
              "kind": "method",
              "name": "reportValidity",
              "privacy": "public",
              "description": "Checks for validity of the control and shows the browser message if it invalid.",
              "inheritedFrom": {
                "name": "BaseFormAssociated",
                "module": "src/components/common/mixins/forms/associated.ts"
              }
            },
            {
              "kind": "method",
              "name": "checkValidity",
              "privacy": "public",
              "description": "Checks for validity of the control and emits the invalid event if it invalid.",
              "inheritedFrom": {
                "name": "BaseFormAssociated",
                "module": "src/components/common/mixins/forms/associated.ts"
              }
            },
            {
              "kind": "method",
              "name": "setCustomValidity",
              "privacy": "public",
              "parameters": [
                {
                  "name": "message",
                  "type": {
                    "text": "string"
                  }
                }
              ],
              "description": "Sets a custom validation message for the control.\nAs long as `message` is not empty, the control is considered invalid.",
              "inheritedFrom": {
                "name": "BaseFormAssociated",
                "module": "src/components/common/mixins/forms/associated.ts"
              }
            },
            {
              "kind": "method",
              "name": "addEventListener",
              "privacy": "public",
              "return": {
                "type": {
                  "text": "void"
                }
              },
              "parameters": [
                {
                  "name": "type",
                  "type": {
                    "text": "K"
                  }
                },
                {
                  "name": "listener",
                  "type": {
                    "text": "(this: HTMLElement, ev: M[K]) => any"
                  }
                },
                {
                  "name": "options",
                  "optional": true,
                  "type": {
                    "text": "boolean | AddEventListenerOptions"
                  }
                }
              ],
              "inheritedFrom": {
                "name": "EventEmitterMixin",
                "module": "src/components/common/mixins/event-emitter.ts"
              }
            },
            {
              "kind": "method",
              "name": "removeEventListener",
              "privacy": "public",
              "return": {
                "type": {
                  "text": "void"
                }
              },
              "parameters": [
                {
                  "name": "type",
                  "type": {
                    "text": "K"
                  }
                },
                {
                  "name": "listener",
                  "type": {
                    "text": "(this: HTMLElement, ev: M[K]) => any"
                  }
                },
                {
                  "name": "options",
                  "optional": true,
                  "type": {
                    "text": "boolean | EventListenerOptions"
                  }
                }
              ],
              "inheritedFrom": {
                "name": "EventEmitterMixin",
                "module": "src/components/common/mixins/event-emitter.ts"
              }
            },
            {
              "kind": "method",
              "name": "emitEvent",
              "privacy": "private",
              "return": {
                "type": {
                  "text": "boolean"
                }
              },
              "parameters": [
                {
                  "name": "type",
                  "type": {
                    "text": "K"
                  }
                },
                {
                  "name": "eventInitDict",
                  "optional": true,
                  "type": {
                    "text": "CustomEventInit<D>"
                  }
                }
              ],
              "inheritedFrom": {
                "name": "EventEmitterMixin",
                "module": "src/components/common/mixins/event-emitter.ts"
              }
            }
          ],
          "events": [
            {
              "description": "Emitted when the value of the control changes.",
              "name": "igcChange"
            },
            {
              "description": "Emitted when hover is enabled and the user mouses over a symbol of the rating.",
              "name": "igcHover"
            },
            {
              "type": {
                "text": "CustomEvent"
              },
              "inheritedFrom": {
                "name": "EventEmitterMixin",
                "module": "src/components/common/mixins/event-emitter.ts"
              }
            }
          ],
          "attributes": [
            {
              "name": "max",
              "description": "The maximum value for the rating.\n\nIf there are projected symbols, the maximum value will be resolved\nbased on the number of symbols.",
              "default": "5",
              "fieldName": "max",
              "attribute": "max",
              "type": {
                "text": "number"
              }
            },
            {
              "name": "step",
              "description": "The minimum value change allowed.\n\nValid values are in the interval between 0 and 1 inclusive.",
              "default": "1",
              "fieldName": "step",
              "attribute": "step",
              "type": {
                "text": "number"
              }
            },
            {
              "name": "label",
              "type": {
                "text": "string"
              },
              "description": "The label of the control.",
              "fieldName": "label",
              "attribute": "label"
            },
            {
              "name": "value-format",
              "type": {
                "text": "string"
              },
              "description": "A format string which sets aria-valuetext. Instances of '{0}' will be replaced\nwith the current value of the control and instances of '{1}' with the maximum value for the control.\n\nImportant for screen-readers and useful for localization.",
              "fieldName": "valueFormat",
              "attribute": "value-format"
            },
            {
              "name": "value",
              "description": "The current value of the component",
              "default": "0",
              "fieldName": "value",
              "attribute": "value",
              "type": {
                "text": "number"
              }
            },
            {
              "name": "hover-preview",
              "type": {
                "text": "boolean"
              },
              "default": "false",
              "description": "Sets hover preview behavior for the component",
              "fieldName": "hoverPreview",
              "attribute": "hover-preview"
            },
            {
              "name": "readonly",
              "type": {
                "text": "boolean"
              },
              "default": "false",
              "description": "Makes the control a readonly field.",
              "fieldName": "readOnly",
              "attribute": "readonly"
            },
            {
              "name": "single",
              "description": "Toggles single selection visual mode.",
              "default": "false",
              "fieldName": "single",
              "attribute": "single",
              "type": {
                "text": "boolean"
              }
            },
            {
              "name": "allow-reset",
              "type": {
                "text": "boolean"
              },
              "default": "false",
              "description": "Whether to reset the rating when the user selects the same value.",
              "fieldName": "allowReset",
              "attribute": "allow-reset"
            },
            {
              "name": "name",
              "type": {
                "text": "string"
              },
              "description": "The name attribute of the control.",
              "fieldName": "name",
              "attribute": "name",
              "inheritedFrom": {
                "name": "BaseFormAssociated",
                "module": "src/components/common/mixins/forms/associated.ts"
              }
            },
            {
              "name": "disabled",
              "description": "The disabled state of the component.",
              "default": "false",
              "fieldName": "disabled",
              "attribute": "disabled",
              "type": {
                "text": "boolean"
              },
              "inheritedFrom": {
                "name": "BaseFormAssociated",
                "module": "src/components/common/mixins/forms/associated.ts"
              }
            },
            {
              "name": "invalid",
              "description": "Sets the control into invalid state (visual state only).",
              "default": "false",
              "fieldName": "invalid",
              "attribute": "invalid",
              "type": {
                "text": "boolean"
              },
              "inheritedFrom": {
                "name": "BaseFormAssociated",
                "module": "src/components/common/mixins/forms/associated.ts"
              }
            }
          ],
          "mixins": [
            {
              "name": "FormAssociatedMixin",
              "module": "/src/components/common/mixins/forms/associated.js"
            },
            {
              "name": "EventEmitterMixin",
              "module": "/src/components/common/mixins/event-emitter.js"
            }
          ],
          "superclass": {
            "name": "LitElement",
            "package": "lit"
          },
          "tagName": "igc-rating",
          "customElement": true
        }
      ],
      "exports": [
        {
          "kind": "js",
          "name": "default",
          "declaration": {
            "name": "IgcRatingComponent",
            "module": "src/components/rating/rating.ts"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "src/components/ripple/ripple.ts",
      "declarations": [
        {
          "kind": "class",
          "description": "A ripple can be applied to an element to represent\ninteractive surface.",
          "name": "IgcRippleComponent",
          "members": [
            {
              "kind": "field",
              "name": "tagName",
              "type": {
                "text": "string"
              },
              "privacy": "public",
              "static": true,
              "readonly": true,
              "default": "'igc-ripple'"
            },
            {
              "kind": "method",
              "name": "register",
              "privacy": "public",
              "static": true,
              "return": {
                "type": {
                  "text": "void"
                }
              }
            },
            {
              "kind": "field",
              "name": "handler",
              "privacy": "private"
            },
            {
              "kind": "method",
              "name": "getDimensions",
              "privacy": "private",
              "parameters": [
                {
                  "name": "x",
                  "type": {
                    "text": "number"
                  }
                },
                {
                  "name": "y",
                  "type": {
                    "text": "number"
                  }
                }
              ]
            }
          ],
          "superclass": {
            "name": "LitElement",
            "package": "lit"
          },
          "tagName": "igc-ripple",
          "customElement": true
        }
      ],
      "exports": [
        {
          "kind": "js",
          "name": "default",
          "declaration": {
            "name": "IgcRippleComponent",
            "module": "src/components/ripple/ripple.ts"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "src/components/slider/slider-base.ts",
      "declarations": [
        {
          "kind": "class",
          "description": "",
          "name": "IgcSliderBaseComponent",
          "members": [
            {
              "kind": "field",
              "name": "thumb",
              "type": {
                "text": "HTMLElement"
              },
              "privacy": "protected"
            },
            {
              "kind": "field",
              "name": "base",
              "type": {
                "text": "HTMLDivElement"
              },
              "privacy": "protected"
            },
            {
              "kind": "field",
              "name": "labelElements",
              "type": {
                "text": "HTMLElement[]"
              },
              "privacy": "private"
            },
            {
              "kind": "field",
              "name": "_min",
              "type": {
                "text": "number"
              },
              "privacy": "private",
              "default": "0"
            },
            {
              "kind": "field",
              "name": "_max",
              "type": {
                "text": "number"
              },
              "privacy": "private",
              "default": "100"
            },
            {
              "kind": "field",
              "name": "_lowerBound",
              "type": {
                "text": "number | undefined"
              },
              "privacy": "private"
            },
            {
              "kind": "field",
              "name": "_upperBound",
              "type": {
                "text": "number | undefined"
              },
              "privacy": "private"
            },
            {
              "kind": "field",
              "name": "_step",
              "type": {
                "text": "number"
              },
              "privacy": "private",
              "default": "1"
            },
            {
              "kind": "field",
              "name": "startValue",
              "type": {
                "text": "number | undefined"
              },
              "privacy": "private"
            },
            {
              "kind": "field",
              "name": "pointerCaptured",
              "type": {
                "text": "boolean"
              },
              "privacy": "private",
              "default": "false"
            },
            {
              "kind": "field",
              "name": "thumbHoverTimer",
              "type": {
                "text": "any"
              },
              "privacy": "private"
            },
            {
              "kind": "field",
              "name": "activeThumb",
              "type": {
                "text": "HTMLElement | undefined"
              },
              "privacy": "protected"
            },
            {
              "kind": "field",
              "name": "thumbLabelsVisible",
              "type": {
                "text": "boolean"
              },
              "privacy": "protected",
              "default": "false"
            },
            {
              "kind": "field",
              "name": "labels",
              "type": {
                "text": "string[]"
              },
              "privacy": "protected",
              "default": "[]"
            },
            {
              "kind": "field",
              "name": "hasLabels",
              "privacy": "protected",
              "readonly": true
            },
            {
              "kind": "field",
              "name": "distance",
              "privacy": "protected",
              "readonly": true
            },
            {
              "kind": "field",
              "name": "min",
              "privacy": "public",
              "description": "The minimum value of the slider scale. Defaults to 0.\n\nIf `min` is greater than `max` the call is a no-op.\n\nIf `labels` are provided (projected), then `min` is always set to 0.\n\nIf `lowerBound` ends up being less than than the current `min` value,\nit is automatically assigned the new `min` value.",
              "attribute": "min",
              "type": {
                "text": "number"
              }
            },
            {
              "kind": "field",
              "name": "max",
              "privacy": "public",
              "description": "The maximum value of the slider scale. Defaults to 100.\n\nIf `max` is less than `min` the call is a no-op.\n\nIf `labels` are provided (projected), then `max` is always set to\nthe number of labels.\n\nIf `upperBound` ends up being greater than than the current `max` value,\nit is automatically assigned the new `max` value.",
              "attribute": "max",
              "type": {
                "text": "number"
              }
            },
            {
              "kind": "field",
              "name": "lowerBound",
              "privacy": "public",
              "description": "The lower bound of the slider value. If not set, the `min` value is applied.",
              "attribute": "lower-bound",
              "type": {
                "text": "number"
              }
            },
            {
              "kind": "field",
              "name": "upperBound",
              "privacy": "public",
              "description": "The upper bound of the slider value. If not set, the `max` value is applied.",
              "attribute": "upper-bound",
              "type": {
                "text": "number"
              }
            },
            {
              "kind": "field",
              "name": "disabled",
              "type": {
                "text": "boolean"
              },
              "privacy": "public",
              "default": "false",
              "description": "Disables the UI interactions of the slider.",
              "attribute": "disabled",
              "reflects": true
            },
            {
              "kind": "field",
              "name": "discreteTrack",
              "type": {
                "text": "boolean"
              },
              "privacy": "public",
              "default": "false",
              "description": "Marks the slider track as discrete so it displays the steps.\nIf the `step` is 0, the slider will remain continuos even if `discreteTrack` is `true`.",
              "attribute": "discrete-track"
            },
            {
              "kind": "field",
              "name": "hideTooltip",
              "type": {
                "text": "boolean"
              },
              "privacy": "public",
              "default": "false",
              "description": "Hides the thumb tooltip.",
              "attribute": "hide-tooltip"
            },
            {
              "kind": "field",
              "name": "step",
              "privacy": "public",
              "description": "Specifies the granularity that the value must adhere to.\n\nIf set to 0 no stepping is implied and any value in the range is allowed.\nIf `labels` are provided (projected) then the step is always assumed to be 1 since it is a discrete slider.",
              "attribute": "step",
              "type": {
                "text": "number"
              }
            },
            {
              "kind": "field",
              "name": "primaryTicks",
              "type": {
                "text": "number"
              },
              "privacy": "public",
              "default": "0",
              "description": "The number of primary ticks. It defaults to 0 which means no primary ticks are displayed.",
              "attribute": "primary-ticks"
            },
            {
              "kind": "field",
              "name": "secondaryTicks",
              "type": {
                "text": "number"
              },
              "privacy": "public",
              "default": "0",
              "description": "The number of secondary ticks. It defaults to 0 which means no secondary ticks are displayed.",
              "attribute": "secondary-ticks"
            },
            {
              "kind": "field",
              "name": "tickOrientation",
              "type": {
                "text": "SliderTickOrientation"
              },
              "privacy": "public",
              "default": "'end'",
              "description": "Changes the orientation of the ticks.",
              "attribute": "tick-orientation",
              "expandedType": {
                "text": "'end' | 'mirror' | 'start'"
              }
            },
            {
              "kind": "field",
              "name": "hidePrimaryLabels",
              "type": {
                "text": "boolean"
              },
              "privacy": "public",
              "default": "false",
              "description": "Hides the primary tick labels.",
              "attribute": "hide-primary-labels"
            },
            {
              "kind": "field",
              "name": "hideSecondaryLabels",
              "type": {
                "text": "boolean"
              },
              "privacy": "public",
              "default": "false",
              "description": "Hides the secondary tick labels.",
              "attribute": "hide-secondary-labels"
            },
            {
              "kind": "field",
              "name": "locale",
              "type": {
                "text": "string"
              },
              "privacy": "public",
              "default": "'en'",
              "description": "The locale used to format the thumb and tick label values in the slider.",
              "attribute": "locale"
            },
            {
              "kind": "field",
              "name": "valueFormat",
              "type": {
                "text": "string | undefined"
              },
              "privacy": "public",
              "description": "String format used for the thumb and tick label values in the slider.",
              "attribute": "value-format"
            },
            {
              "kind": "field",
              "name": "valueFormatOptions",
              "type": {
                "text": "Intl.NumberFormatOptions | undefined"
              },
              "privacy": "public",
              "description": "Number format options used for the thumb and tick label values in the slider."
            },
            {
              "kind": "field",
              "name": "tickLabelRotation",
              "type": {
                "text": "SliderTickLabelRotation"
              },
              "privacy": "public",
              "default": "0",
              "description": "The degrees for the rotation of the tick labels. Defaults to 0.",
              "attribute": "tick-label-rotation",
              "reflects": true,
              "expandedType": {
                "text": "'0' | '90' | "
              }
            },
            {
              "kind": "method",
              "name": "constraintsChange",
              "privacy": "protected"
            },
            {
              "kind": "method",
              "name": "handleArrowKeys",
              "privacy": "private",
              "parameters": [
                {
                  "name": "delta",
                  "type": {
                    "text": "-1 | 1"
                  }
                }
              ]
            },
            {
              "kind": "method",
              "name": "handlePageKeys",
              "privacy": "private",
              "parameters": [
                {
                  "name": "delta",
                  "type": {
                    "text": "-1 | 1"
                  }
                }
              ]
            },
            {
              "kind": "method",
              "name": "handleKeyboardIncrement",
              "privacy": "private",
              "parameters": [
                {
                  "name": "increment",
                  "type": {
                    "text": "number"
                  }
                }
              ]
            },
            {
              "kind": "method",
              "name": "handleKeyUp",
              "privacy": "private"
            },
            {
              "kind": "method",
              "name": "handleSlotChange",
              "privacy": "protected"
            },
            {
              "kind": "field",
              "name": "activeValue",
              "privacy": "protected",
              "readonly": true
            },
            {
              "kind": "method",
              "name": "normalizeValue",
              "privacy": "protected",
              "return": {
                "type": {
                  "text": "void"
                }
              }
            },
            {
              "kind": "method",
              "name": "getTrackStyle",
              "privacy": "protected",
              "return": {
                "type": {
                  "text": "StyleInfo"
                }
              }
            },
            {
              "kind": "method",
              "name": "updateValue",
              "privacy": "protected",
              "return": {
                "type": {
                  "text": "boolean"
                }
              },
              "parameters": [
                {
                  "name": "_increment",
                  "type": {
                    "text": "number"
                  }
                }
              ]
            },
            {
              "kind": "method",
              "name": "renderThumbs",
              "privacy": "protected",
              "return": {
                "type": {
                  "text": "TemplateResult<1>"
                }
              }
            },
            {
              "kind": "method",
              "name": "emitInputEvent",
              "privacy": "protected"
            },
            {
              "kind": "method",
              "name": "emitChangeEvent",
              "privacy": "protected"
            },
            {
              "kind": "method",
              "name": "validateValue",
              "privacy": "protected",
              "parameters": [
                {
                  "name": "value",
                  "type": {
                    "text": "number"
                  }
                }
              ]
            },
            {
              "kind": "method",
              "name": "formatValue",
              "privacy": "protected",
              "parameters": [
                {
                  "name": "value",
                  "type": {
                    "text": "number"
                  }
                }
              ]
            },
            {
              "kind": "method",
              "name": "normalizeByStep",
              "privacy": "private",
              "parameters": [
                {
                  "name": "value",
                  "type": {
                    "text": "number"
                  }
                }
              ]
            },
            {
              "kind": "method",
              "name": "closestHandle",
              "privacy": "protected",
              "return": {
                "type": {
                  "text": "HTMLElement"
                }
              },
              "parameters": [
                {
                  "name": "_event",
                  "type": {
                    "text": "PointerEvent"
                  }
                }
              ]
            },
            {
              "kind": "method",
              "name": "totalTickCount",
              "privacy": "private"
            },
            {
              "kind": "method",
              "name": "tickValue",
              "privacy": "private",
              "parameters": [
                {
                  "name": "idx",
                  "type": {
                    "text": "number"
                  }
                }
              ]
            },
            {
              "kind": "method",
              "name": "isPrimary",
              "privacy": "private",
              "parameters": [
                {
                  "name": "idx",
                  "type": {
                    "text": "number"
                  }
                }
              ]
            },
            {
              "kind": "method",
              "name": "showThumbLabels",
              "privacy": "protected"
            },
            {
              "kind": "method",
              "name": "hideThumbLabels",
              "privacy": "protected"
            },
            {
              "kind": "method",
              "name": "calculateTrackUpdate",
              "privacy": "private",
              "return": {
                "type": {
                  "text": "number"
                }
              },
              "parameters": [
                {
                  "name": "mouseX",
                  "type": {
                    "text": "number"
                  }
                }
              ]
            },
            {
              "kind": "method",
              "name": "updateSlider",
              "privacy": "private",
              "parameters": [
                {
                  "name": "mouseX",
                  "type": {
                    "text": "number"
                  }
                }
              ]
            },
            {
              "kind": "method",
              "name": "pointerDown",
              "privacy": "private",
              "parameters": [
                {
                  "name": "event",
                  "type": {
                    "text": "PointerEvent"
                  }
                }
              ]
            },
            {
              "kind": "method",
              "name": "pointerMove",
              "privacy": "private",
              "parameters": [
                {
                  "name": "event",
                  "type": {
                    "text": "PointerEvent"
                  }
                }
              ]
            },
            {
              "kind": "method",
              "name": "lostPointerCapture",
              "privacy": "private"
            },
            {
              "kind": "method",
              "name": "handleThumbFocus",
              "privacy": "protected",
              "parameters": [
                {
                  "name": "event",
                  "type": {
                    "text": "FocusEvent"
                  }
                }
              ]
            },
            {
              "kind": "method",
              "name": "handleThumbBlur",
              "privacy": "protected"
            },
            {
              "kind": "method",
              "name": "_renderTicks",
              "privacy": "protected"
            },
            {
              "kind": "method",
              "name": "renderTicks",
              "privacy": "protected"
            },
            {
              "kind": "method",
              "name": "renderThumb",
              "privacy": "protected",
              "parameters": [
                {
                  "name": "value",
                  "type": {
                    "text": "number"
                  }
                },
                {
                  "name": "ariaLabel",
                  "optional": true,
                  "type": {
                    "text": "string"
                  }
                },
                {
                  "name": "thumbId",
                  "optional": true,
                  "type": {
                    "text": "string"
                  }
                }
              ]
            },
            {
              "kind": "method",
              "name": "renderSteps",
              "privacy": "private"
            }
          ],
          "attributes": [
            {
              "name": "min",
              "description": "The minimum value of the slider scale. Defaults to 0.\n\nIf `min` is greater than `max` the call is a no-op.\n\nIf `labels` are provided (projected), then `min` is always set to 0.\n\nIf `lowerBound` ends up being less than than the current `min` value,\nit is automatically assigned the new `min` value.",
              "fieldName": "min",
              "attribute": "min",
              "type": {
                "text": "number"
              }
            },
            {
              "name": "max",
              "description": "The maximum value of the slider scale. Defaults to 100.\n\nIf `max` is less than `min` the call is a no-op.\n\nIf `labels` are provided (projected), then `max` is always set to\nthe number of labels.\n\nIf `upperBound` ends up being greater than than the current `max` value,\nit is automatically assigned the new `max` value.",
              "fieldName": "max",
              "attribute": "max",
              "type": {
                "text": "number"
              }
            },
            {
              "name": "lower-bound",
              "description": "The lower bound of the slider value. If not set, the `min` value is applied.",
              "fieldName": "lowerBound",
              "attribute": "lower-bound",
              "type": {
                "text": "number"
              }
            },
            {
              "name": "upper-bound",
              "description": "The upper bound of the slider value. If not set, the `max` value is applied.",
              "fieldName": "upperBound",
              "attribute": "upper-bound",
              "type": {
                "text": "number"
              }
            },
            {
              "name": "disabled",
              "type": {
                "text": "boolean"
              },
              "default": "false",
              "description": "Disables the UI interactions of the slider.",
              "fieldName": "disabled",
              "attribute": "disabled"
            },
            {
              "name": "discrete-track",
              "type": {
                "text": "boolean"
              },
              "default": "false",
              "description": "Marks the slider track as discrete so it displays the steps.\nIf the `step` is 0, the slider will remain continuos even if `discreteTrack` is `true`.",
              "fieldName": "discreteTrack",
              "attribute": "discrete-track"
            },
            {
              "name": "hide-tooltip",
              "type": {
                "text": "boolean"
              },
              "default": "false",
              "description": "Hides the thumb tooltip.",
              "fieldName": "hideTooltip",
              "attribute": "hide-tooltip"
            },
            {
              "name": "step",
              "description": "Specifies the granularity that the value must adhere to.\n\nIf set to 0 no stepping is implied and any value in the range is allowed.\nIf `labels` are provided (projected) then the step is always assumed to be 1 since it is a discrete slider.",
              "fieldName": "step",
              "attribute": "step",
              "type": {
                "text": "number"
              }
            },
            {
              "name": "primary-ticks",
              "type": {
                "text": "number"
              },
              "default": "0",
              "description": "The number of primary ticks. It defaults to 0 which means no primary ticks are displayed.",
              "fieldName": "primaryTicks",
              "attribute": "primary-ticks"
            },
            {
              "name": "secondary-ticks",
              "type": {
                "text": "number"
              },
              "default": "0",
              "description": "The number of secondary ticks. It defaults to 0 which means no secondary ticks are displayed.",
              "fieldName": "secondaryTicks",
              "attribute": "secondary-ticks"
            },
            {
              "name": "tick-orientation",
              "type": {
                "text": "SliderTickOrientation"
              },
              "default": "'end'",
              "description": "Changes the orientation of the ticks.",
              "fieldName": "tickOrientation",
              "attribute": "tick-orientation",
              "expandedType": {
                "text": "'end' | 'mirror' | 'start'"
              }
            },
            {
              "name": "hide-primary-labels",
              "type": {
                "text": "boolean"
              },
              "default": "false",
              "description": "Hides the primary tick labels.",
              "fieldName": "hidePrimaryLabels",
              "attribute": "hide-primary-labels"
            },
            {
              "name": "hide-secondary-labels",
              "type": {
                "text": "boolean"
              },
              "default": "false",
              "description": "Hides the secondary tick labels.",
              "fieldName": "hideSecondaryLabels",
              "attribute": "hide-secondary-labels"
            },
            {
              "name": "locale",
              "type": {
                "text": "string"
              },
              "default": "'en'",
              "description": "The locale used to format the thumb and tick label values in the slider.",
              "fieldName": "locale",
              "attribute": "locale"
            },
            {
              "name": "value-format",
              "type": {
                "text": "string | undefined"
              },
              "description": "String format used for the thumb and tick label values in the slider.",
              "fieldName": "valueFormat",
              "attribute": "value-format"
            },
            {
              "name": "tick-label-rotation",
              "type": {
                "text": "SliderTickLabelRotation"
              },
              "default": "0",
              "description": "The degrees for the rotation of the tick labels. Defaults to 0.",
              "fieldName": "tickLabelRotation",
              "attribute": "tick-label-rotation",
              "expandedType": {
                "text": "'0' | '90' | "
              }
            }
          ],
          "superclass": {
            "name": "LitElement",
            "package": "lit"
          },
          "customElement": true
        }
      ],
      "exports": [
        {
          "kind": "js",
          "name": "IgcSliderBaseComponent",
          "declaration": {
            "name": "IgcSliderBaseComponent",
            "module": "src/components/slider/slider-base.ts"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "src/components/slider/slider-label.ts",
      "declarations": [
        {
          "kind": "class",
          "description": "Allows formatting the values of the slider as string values.\nThe text content of the slider labels is used for thumb and tick labels.",
          "name": "IgcSliderLabelComponent",
          "members": [
            {
              "kind": "field",
              "name": "tagName",
              "type": {
                "text": "string"
              },
              "privacy": "public",
              "static": true,
              "readonly": true,
              "default": "'igc-slider-label'"
            },
            {
              "kind": "method",
              "name": "register",
              "privacy": "public",
              "static": true
            }
          ],
          "superclass": {
            "name": "LitElement",
            "package": "lit"
          },
          "tagName": "igc-slider-label",
          "customElement": true
        }
      ],
      "exports": [
        {
          "kind": "js",
          "name": "default",
          "declaration": {
            "name": "IgcSliderLabelComponent",
            "module": "src/components/slider/slider-label.ts"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "src/components/slider/range-slider.ts",
      "declarations": [
        {
          "kind": "class",
          "description": "A range slider component used to select two numeric values within a range.",
          "name": "IgcRangeSliderComponent",
          "cssParts": [
            {
              "description": "The base wrapper of the slider.",
              "name": "base"
            },
            {
              "description": "The ticks container.",
              "name": "ticks"
            },
            {
              "description": "The tick group container.",
              "name": "tick-group"
            },
            {
              "description": "The tick element.",
              "name": "tick"
            },
            {
              "description": "The tick label element.",
              "name": "tick-label"
            },
            {
              "description": "The inner element of the tick label.",
              "name": "tick-label-inner"
            },
            {
              "description": "The thumbs container.",
              "name": "thumbs"
            },
            {
              "description": "The thumb element.",
              "name": "thumb"
            },
            {
              "description": "The thumb tooltip label container.",
              "name": "thumb-label"
            },
            {
              "description": "The thumb tooltip label inner element.",
              "name": "thumb-label-inner"
            },
            {
              "description": "The track container.",
              "name": "track"
            },
            {
              "description": "The track steps element.",
              "name": "steps"
            },
            {
              "description": "The inactive element of the track.",
              "name": "inactive"
            },
            {
              "description": "The filled part of the track.",
              "name": "fill"
            }
          ],
          "members": [
            {
              "kind": "field",
              "name": "tagName",
              "type": {
                "text": "string"
              },
              "privacy": "public",
              "static": true,
              "readonly": true,
              "default": "'igc-range-slider'"
            },
            {
              "kind": "method",
              "name": "register",
              "privacy": "public",
              "static": true
            },
            {
              "kind": "field",
              "name": "thumbFrom",
              "type": {
                "text": "HTMLElement"
              },
              "privacy": "private"
            },
            {
              "kind": "field",
              "name": "thumbTo",
              "type": {
                "text": "HTMLElement"
              },
              "privacy": "private"
            },
            {
              "kind": "field",
              "name": "_lower",
              "type": {
                "text": "number"
              },
              "privacy": "private",
              "default": "0"
            },
            {
              "kind": "field",
              "name": "_upper",
              "type": {
                "text": "number"
              },
              "privacy": "private",
              "default": "0"
            },
            {
              "kind": "field",
              "name": "lower",
              "privacy": "public",
              "description": "The current value of the lower thumb.",
              "attribute": "lower",
              "type": {
                "text": "number"
              }
            },
            {
              "kind": "field",
              "name": "upper",
              "privacy": "public",
              "description": "The current value of the upper thumb.",
              "attribute": "upper",
              "type": {
                "text": "number"
              }
            },
            {
              "kind": "field",
              "name": "thumbLabelLower",
              "type": {
                "text": "string"
              },
              "privacy": "public",
              "description": "The aria label for the lower thumb.",
              "attribute": "thumb-label-lower"
            },
            {
              "kind": "field",
              "name": "thumbLabelUpper",
              "type": {
                "text": "string"
              },
              "privacy": "public",
              "description": "The aria label for the upper thumb.",
              "attribute": "thumb-label-upper"
            },
            {
              "kind": "field",
              "name": "activeValue",
              "privacy": "protected",
              "readonly": true,
              "type": {
                "text": "number"
              },
              "inheritedFrom": {
                "name": "IgcSliderBaseComponent",
                "module": "src/components/slider/slider-base.ts"
              }
            },
            {
              "kind": "method",
              "name": "normalizeValue",
              "privacy": "protected",
              "return": {
                "type": {
                  "text": "void"
                }
              },
              "inheritedFrom": {
                "name": "IgcSliderBaseComponent",
                "module": "src/components/slider/slider-base.ts"
              }
            },
            {
              "kind": "method",
              "name": "getTrackStyle",
              "privacy": "protected",
              "return": {
                "type": {
                  "text": "StyleInfo"
                }
              },
              "inheritedFrom": {
                "name": "IgcSliderBaseComponent",
                "module": "src/components/slider/slider-base.ts"
              }
            },
            {
              "kind": "method",
              "name": "closestTo",
              "privacy": "private",
              "return": {
                "type": {
                  "text": "number"
                }
              },
              "parameters": [
                {
                  "name": "goal",
                  "type": {
                    "text": "number"
                  }
                },
                {
                  "name": "positions",
                  "type": {
                    "text": "number[]"
                  }
                }
              ]
            },
            {
              "kind": "method",
              "name": "closestHandle",
              "privacy": "protected",
              "return": {
                "type": {
                  "text": "HTMLElement"
                }
              },
              "parameters": [
                {
                  "name": "event",
                  "type": {
                    "text": "PointerEvent"
                  }
                }
              ],
              "inheritedFrom": {
                "name": "IgcSliderBaseComponent",
                "module": "src/components/slider/slider-base.ts"
              }
            },
            {
              "kind": "method",
              "name": "updateValue",
              "privacy": "protected",
              "return": {
                "type": {
                  "text": "boolean"
                }
              },
              "parameters": [
                {
                  "name": "increment",
                  "type": {
                    "text": "number"
                  }
                }
              ],
              "inheritedFrom": {
                "name": "IgcSliderBaseComponent",
                "module": "src/components/slider/slider-base.ts"
              }
            },
            {
              "kind": "method",
              "name": "emitInputEvent",
              "privacy": "protected",
              "inheritedFrom": {
                "name": "IgcSliderBaseComponent",
                "module": "src/components/slider/slider-base.ts"
              }
            },
            {
              "kind": "method",
              "name": "emitChangeEvent",
              "privacy": "protected",
              "inheritedFrom": {
                "name": "IgcSliderBaseComponent",
                "module": "src/components/slider/slider-base.ts"
              }
            },
            {
              "kind": "method",
              "name": "toggleActiveThumb",
              "privacy": "private"
            },
            {
              "kind": "method",
              "name": "handleFocus",
              "privacy": "private",
              "parameters": [
                {
                  "name": "event",
                  "type": {
                    "text": "FocusEvent"
                  }
                }
              ]
            },
            {
              "kind": "method",
              "name": "renderThumb",
              "privacy": "protected",
              "parameters": [
                {
                  "name": "value",
                  "type": {
                    "text": "number"
                  }
                },
                {
                  "name": "ariaLabel",
                  "optional": true,
                  "type": {
                    "text": "string"
                  }
                },
                {
                  "name": "thumbId",
                  "optional": true,
                  "type": {
                    "text": "string"
                  }
                }
              ],
              "inheritedFrom": {
                "name": "IgcSliderBaseComponent",
                "module": "src/components/slider/slider-base.ts"
              }
            },
            {
              "kind": "method",
              "name": "renderThumbs",
              "privacy": "protected",
              "return": {
                "type": {
                  "text": "TemplateResult<1>"
                }
              },
              "inheritedFrom": {
                "name": "IgcSliderBaseComponent",
                "module": "src/components/slider/slider-base.ts"
              }
            },
            {
              "kind": "method",
              "name": "addEventListener",
              "privacy": "public",
              "return": {
                "type": {
                  "text": "void"
                }
              },
              "parameters": [
                {
                  "name": "type",
                  "type": {
                    "text": "K"
                  }
                },
                {
                  "name": "listener",
                  "type": {
                    "text": "(this: HTMLElement, ev: M[K]) => any"
                  }
                },
                {
                  "name": "options",
                  "optional": true,
                  "type": {
                    "text": "boolean | AddEventListenerOptions"
                  }
                }
              ],
              "inheritedFrom": {
                "name": "EventEmitterMixin",
                "module": "src/components/common/mixins/event-emitter.ts"
              }
            },
            {
              "kind": "method",
              "name": "removeEventListener",
              "privacy": "public",
              "return": {
                "type": {
                  "text": "void"
                }
              },
              "parameters": [
                {
                  "name": "type",
                  "type": {
                    "text": "K"
                  }
                },
                {
                  "name": "listener",
                  "type": {
                    "text": "(this: HTMLElement, ev: M[K]) => any"
                  }
                },
                {
                  "name": "options",
                  "optional": true,
                  "type": {
                    "text": "boolean | EventListenerOptions"
                  }
                }
              ],
              "inheritedFrom": {
                "name": "EventEmitterMixin",
                "module": "src/components/common/mixins/event-emitter.ts"
              }
            },
            {
              "kind": "method",
              "name": "emitEvent",
              "privacy": "private",
              "return": {
                "type": {
                  "text": "boolean"
                }
              },
              "parameters": [
                {
                  "name": "type",
                  "type": {
                    "text": "K"
                  }
                },
                {
                  "name": "eventInitDict",
                  "optional": true,
                  "type": {
                    "text": "CustomEventInit<D>"
                  }
                }
              ],
              "inheritedFrom": {
                "name": "EventEmitterMixin",
                "module": "src/components/common/mixins/event-emitter.ts"
              }
            },
            {
              "kind": "field",
              "name": "thumb",
              "type": {
                "text": "HTMLElement"
              },
              "privacy": "protected",
              "inheritedFrom": {
                "name": "IgcSliderBaseComponent",
                "module": "src/components/slider/slider-base.ts"
              }
            },
            {
              "kind": "field",
              "name": "base",
              "type": {
                "text": "HTMLDivElement"
              },
              "privacy": "protected",
              "inheritedFrom": {
                "name": "IgcSliderBaseComponent",
                "module": "src/components/slider/slider-base.ts"
              }
            },
            {
              "kind": "field",
              "name": "labelElements",
              "type": {
                "text": "HTMLElement[]"
              },
              "privacy": "private",
              "inheritedFrom": {
                "name": "IgcSliderBaseComponent",
                "module": "src/components/slider/slider-base.ts"
              }
            },
            {
              "kind": "field",
              "name": "_min",
              "type": {
                "text": "number"
              },
              "privacy": "private",
              "default": "0",
              "inheritedFrom": {
                "name": "IgcSliderBaseComponent",
                "module": "src/components/slider/slider-base.ts"
              }
            },
            {
              "kind": "field",
              "name": "_max",
              "type": {
                "text": "number"
              },
              "privacy": "private",
              "default": "100",
              "inheritedFrom": {
                "name": "IgcSliderBaseComponent",
                "module": "src/components/slider/slider-base.ts"
              }
            },
            {
              "kind": "field",
              "name": "_lowerBound",
              "type": {
                "text": "number | undefined"
              },
              "privacy": "private",
              "inheritedFrom": {
                "name": "IgcSliderBaseComponent",
                "module": "src/components/slider/slider-base.ts"
              }
            },
            {
              "kind": "field",
              "name": "_upperBound",
              "type": {
                "text": "number | undefined"
              },
              "privacy": "private",
              "inheritedFrom": {
                "name": "IgcSliderBaseComponent",
                "module": "src/components/slider/slider-base.ts"
              }
            },
            {
              "kind": "field",
              "name": "_step",
              "type": {
                "text": "number"
              },
              "privacy": "private",
              "default": "1",
              "inheritedFrom": {
                "name": "IgcSliderBaseComponent",
                "module": "src/components/slider/slider-base.ts"
              }
            },
            {
              "kind": "field",
              "name": "startValue",
              "type": {
                "text": "number | undefined"
              },
              "privacy": "private",
              "inheritedFrom": {
                "name": "IgcSliderBaseComponent",
                "module": "src/components/slider/slider-base.ts"
              }
            },
            {
              "kind": "field",
              "name": "pointerCaptured",
              "type": {
                "text": "boolean"
              },
              "privacy": "private",
              "default": "false",
              "inheritedFrom": {
                "name": "IgcSliderBaseComponent",
                "module": "src/components/slider/slider-base.ts"
              }
            },
            {
              "kind": "field",
              "name": "thumbHoverTimer",
              "type": {
                "text": "any"
              },
              "privacy": "private",
              "inheritedFrom": {
                "name": "IgcSliderBaseComponent",
                "module": "src/components/slider/slider-base.ts"
              }
            },
            {
              "kind": "field",
              "name": "activeThumb",
              "type": {
                "text": "HTMLElement | undefined"
              },
              "privacy": "protected",
              "inheritedFrom": {
                "name": "IgcSliderBaseComponent",
                "module": "src/components/slider/slider-base.ts"
              }
            },
            {
              "kind": "field",
              "name": "thumbLabelsVisible",
              "type": {
                "text": "boolean"
              },
              "privacy": "protected",
              "default": "false",
              "inheritedFrom": {
                "name": "IgcSliderBaseComponent",
                "module": "src/components/slider/slider-base.ts"
              }
            },
            {
              "kind": "field",
              "name": "labels",
              "type": {
                "text": "string[]"
              },
              "privacy": "protected",
              "default": "[]",
              "inheritedFrom": {
                "name": "IgcSliderBaseComponent",
                "module": "src/components/slider/slider-base.ts"
              }
            },
            {
              "kind": "field",
              "name": "hasLabels",
              "privacy": "protected",
              "readonly": true,
              "inheritedFrom": {
                "name": "IgcSliderBaseComponent",
                "module": "src/components/slider/slider-base.ts"
              }
            },
            {
              "kind": "field",
              "name": "distance",
              "privacy": "protected",
              "readonly": true,
              "inheritedFrom": {
                "name": "IgcSliderBaseComponent",
                "module": "src/components/slider/slider-base.ts"
              }
            },
            {
              "kind": "field",
              "name": "min",
              "privacy": "public",
              "description": "The minimum value of the slider scale. Defaults to 0.\n\nIf `min` is greater than `max` the call is a no-op.\n\nIf `labels` are provided (projected), then `min` is always set to 0.\n\nIf `lowerBound` ends up being less than than the current `min` value,\nit is automatically assigned the new `min` value.",
              "attribute": "min",
              "type": {
                "text": "number"
              },
              "inheritedFrom": {
                "name": "IgcSliderBaseComponent",
                "module": "src/components/slider/slider-base.ts"
              }
            },
            {
              "kind": "field",
              "name": "max",
              "privacy": "public",
              "description": "The maximum value of the slider scale. Defaults to 100.\n\nIf `max` is less than `min` the call is a no-op.\n\nIf `labels` are provided (projected), then `max` is always set to\nthe number of labels.\n\nIf `upperBound` ends up being greater than than the current `max` value,\nit is automatically assigned the new `max` value.",
              "attribute": "max",
              "type": {
                "text": "number"
              },
              "inheritedFrom": {
                "name": "IgcSliderBaseComponent",
                "module": "src/components/slider/slider-base.ts"
              }
            },
            {
              "kind": "field",
              "name": "lowerBound",
              "privacy": "public",
              "description": "The lower bound of the slider value. If not set, the `min` value is applied.",
              "attribute": "lower-bound",
              "type": {
                "text": "number"
              },
              "inheritedFrom": {
                "name": "IgcSliderBaseComponent",
                "module": "src/components/slider/slider-base.ts"
              }
            },
            {
              "kind": "field",
              "name": "upperBound",
              "privacy": "public",
              "description": "The upper bound of the slider value. If not set, the `max` value is applied.",
              "attribute": "upper-bound",
              "type": {
                "text": "number"
              },
              "inheritedFrom": {
                "name": "IgcSliderBaseComponent",
                "module": "src/components/slider/slider-base.ts"
              }
            },
            {
              "kind": "field",
              "name": "disabled",
              "type": {
                "text": "boolean"
              },
              "privacy": "public",
              "default": "false",
              "description": "Disables the UI interactions of the slider.",
              "attribute": "disabled",
              "reflects": true,
              "inheritedFrom": {
                "name": "IgcSliderBaseComponent",
                "module": "src/components/slider/slider-base.ts"
              }
            },
            {
              "kind": "field",
              "name": "discreteTrack",
              "type": {
                "text": "boolean"
              },
              "privacy": "public",
              "default": "false",
              "description": "Marks the slider track as discrete so it displays the steps.\nIf the `step` is 0, the slider will remain continuos even if `discreteTrack` is `true`.",
              "attribute": "discrete-track",
              "inheritedFrom": {
                "name": "IgcSliderBaseComponent",
                "module": "src/components/slider/slider-base.ts"
              }
            },
            {
              "kind": "field",
              "name": "hideTooltip",
              "type": {
                "text": "boolean"
              },
              "privacy": "public",
              "default": "false",
              "description": "Hides the thumb tooltip.",
              "attribute": "hide-tooltip",
              "inheritedFrom": {
                "name": "IgcSliderBaseComponent",
                "module": "src/components/slider/slider-base.ts"
              }
            },
            {
              "kind": "field",
              "name": "step",
              "privacy": "public",
              "description": "Specifies the granularity that the value must adhere to.\n\nIf set to 0 no stepping is implied and any value in the range is allowed.\nIf `labels` are provided (projected) then the step is always assumed to be 1 since it is a discrete slider.",
              "attribute": "step",
              "type": {
                "text": "number"
              },
              "inheritedFrom": {
                "name": "IgcSliderBaseComponent",
                "module": "src/components/slider/slider-base.ts"
              }
            },
            {
              "kind": "field",
              "name": "primaryTicks",
              "type": {
                "text": "number"
              },
              "privacy": "public",
              "default": "0",
              "description": "The number of primary ticks. It defaults to 0 which means no primary ticks are displayed.",
              "attribute": "primary-ticks",
              "inheritedFrom": {
                "name": "IgcSliderBaseComponent",
                "module": "src/components/slider/slider-base.ts"
              }
            },
            {
              "kind": "field",
              "name": "secondaryTicks",
              "type": {
                "text": "number"
              },
              "privacy": "public",
              "default": "0",
              "description": "The number of secondary ticks. It defaults to 0 which means no secondary ticks are displayed.",
              "attribute": "secondary-ticks",
              "inheritedFrom": {
                "name": "IgcSliderBaseComponent",
                "module": "src/components/slider/slider-base.ts"
              }
            },
            {
              "kind": "field",
              "name": "tickOrientation",
              "type": {
                "text": "SliderTickOrientation"
              },
              "privacy": "public",
              "default": "'end'",
              "description": "Changes the orientation of the ticks.",
              "attribute": "tick-orientation",
              "expandedType": {
                "text": "'end' | 'mirror' | 'start'"
              },
              "inheritedFrom": {
                "name": "IgcSliderBaseComponent",
                "module": "src/components/slider/slider-base.ts"
              }
            },
            {
              "kind": "field",
              "name": "hidePrimaryLabels",
              "type": {
                "text": "boolean"
              },
              "privacy": "public",
              "default": "false",
              "description": "Hides the primary tick labels.",
              "attribute": "hide-primary-labels",
              "inheritedFrom": {
                "name": "IgcSliderBaseComponent",
                "module": "src/components/slider/slider-base.ts"
              }
            },
            {
              "kind": "field",
              "name": "hideSecondaryLabels",
              "type": {
                "text": "boolean"
              },
              "privacy": "public",
              "default": "false",
              "description": "Hides the secondary tick labels.",
              "attribute": "hide-secondary-labels",
              "inheritedFrom": {
                "name": "IgcSliderBaseComponent",
                "module": "src/components/slider/slider-base.ts"
              }
            },
            {
              "kind": "field",
              "name": "locale",
              "type": {
                "text": "string"
              },
              "privacy": "public",
              "default": "'en'",
              "description": "The locale used to format the thumb and tick label values in the slider.",
              "attribute": "locale",
              "inheritedFrom": {
                "name": "IgcSliderBaseComponent",
                "module": "src/components/slider/slider-base.ts"
              }
            },
            {
              "kind": "field",
              "name": "valueFormat",
              "type": {
                "text": "string | undefined"
              },
              "privacy": "public",
              "description": "String format used for the thumb and tick label values in the slider.",
              "attribute": "value-format",
              "inheritedFrom": {
                "name": "IgcSliderBaseComponent",
                "module": "src/components/slider/slider-base.ts"
              }
            },
            {
              "kind": "field",
              "name": "valueFormatOptions",
              "type": {
                "text": "Intl.NumberFormatOptions | undefined"
              },
              "privacy": "public",
              "description": "Number format options used for the thumb and tick label values in the slider.",
              "inheritedFrom": {
                "name": "IgcSliderBaseComponent",
                "module": "src/components/slider/slider-base.ts"
              }
            },
            {
              "kind": "field",
              "name": "tickLabelRotation",
              "type": {
                "text": "SliderTickLabelRotation"
              },
              "privacy": "public",
              "default": "0",
              "description": "The degrees for the rotation of the tick labels. Defaults to 0.",
              "attribute": "tick-label-rotation",
              "reflects": true,
              "expandedType": {
                "text": "'0' | '90' | "
              },
              "inheritedFrom": {
                "name": "IgcSliderBaseComponent",
                "module": "src/components/slider/slider-base.ts"
              }
            },
            {
              "kind": "method",
              "name": "constraintsChange",
              "privacy": "protected",
              "inheritedFrom": {
                "name": "IgcSliderBaseComponent",
                "module": "src/components/slider/slider-base.ts"
              }
            },
            {
              "kind": "method",
              "name": "handleArrowKeys",
              "privacy": "private",
              "parameters": [
                {
                  "name": "delta",
                  "type": {
                    "text": "-1 | 1"
                  }
                }
              ],
              "inheritedFrom": {
                "name": "IgcSliderBaseComponent",
                "module": "src/components/slider/slider-base.ts"
              }
            },
            {
              "kind": "method",
              "name": "handlePageKeys",
              "privacy": "private",
              "parameters": [
                {
                  "name": "delta",
                  "type": {
                    "text": "-1 | 1"
                  }
                }
              ],
              "inheritedFrom": {
                "name": "IgcSliderBaseComponent",
                "module": "src/components/slider/slider-base.ts"
              }
            },
            {
              "kind": "method",
              "name": "handleKeyboardIncrement",
              "privacy": "private",
              "parameters": [
                {
                  "name": "increment",
                  "type": {
                    "text": "number"
                  }
                }
              ],
              "inheritedFrom": {
                "name": "IgcSliderBaseComponent",
                "module": "src/components/slider/slider-base.ts"
              }
            },
            {
              "kind": "method",
              "name": "handleKeyUp",
              "privacy": "private",
              "inheritedFrom": {
                "name": "IgcSliderBaseComponent",
                "module": "src/components/slider/slider-base.ts"
              }
            },
            {
              "kind": "method",
              "name": "handleSlotChange",
              "privacy": "protected",
              "inheritedFrom": {
                "name": "IgcSliderBaseComponent",
                "module": "src/components/slider/slider-base.ts"
              }
            },
            {
              "kind": "method",
              "name": "validateValue",
              "privacy": "protected",
              "parameters": [
                {
                  "name": "value",
                  "type": {
                    "text": "number"
                  }
                }
              ],
              "inheritedFrom": {
                "name": "IgcSliderBaseComponent",
                "module": "src/components/slider/slider-base.ts"
              }
            },
            {
              "kind": "method",
              "name": "formatValue",
              "privacy": "protected",
              "parameters": [
                {
                  "name": "value",
                  "type": {
                    "text": "number"
                  }
                }
              ],
              "inheritedFrom": {
                "name": "IgcSliderBaseComponent",
                "module": "src/components/slider/slider-base.ts"
              }
            },
            {
              "kind": "method",
              "name": "normalizeByStep",
              "privacy": "private",
              "parameters": [
                {
                  "name": "value",
                  "type": {
                    "text": "number"
                  }
                }
              ],
              "inheritedFrom": {
                "name": "IgcSliderBaseComponent",
                "module": "src/components/slider/slider-base.ts"
              }
            },
            {
              "kind": "method",
              "name": "totalTickCount",
              "privacy": "private",
              "inheritedFrom": {
                "name": "IgcSliderBaseComponent",
                "module": "src/components/slider/slider-base.ts"
              }
            },
            {
              "kind": "method",
              "name": "tickValue",
              "privacy": "private",
              "parameters": [
                {
                  "name": "idx",
                  "type": {
                    "text": "number"
                  }
                }
              ],
              "inheritedFrom": {
                "name": "IgcSliderBaseComponent",
                "module": "src/components/slider/slider-base.ts"
              }
            },
            {
              "kind": "method",
              "name": "isPrimary",
              "privacy": "private",
              "parameters": [
                {
                  "name": "idx",
                  "type": {
                    "text": "number"
                  }
                }
              ],
              "inheritedFrom": {
                "name": "IgcSliderBaseComponent",
                "module": "src/components/slider/slider-base.ts"
              }
            },
            {
              "kind": "method",
              "name": "showThumbLabels",
              "privacy": "protected",
              "inheritedFrom": {
                "name": "IgcSliderBaseComponent",
                "module": "src/components/slider/slider-base.ts"
              }
            },
            {
              "kind": "method",
              "name": "hideThumbLabels",
              "privacy": "protected",
              "inheritedFrom": {
                "name": "IgcSliderBaseComponent",
                "module": "src/components/slider/slider-base.ts"
              }
            },
            {
              "kind": "method",
              "name": "calculateTrackUpdate",
              "privacy": "private",
              "return": {
                "type": {
                  "text": "number"
                }
              },
              "parameters": [
                {
                  "name": "mouseX",
                  "type": {
                    "text": "number"
                  }
                }
              ],
              "inheritedFrom": {
                "name": "IgcSliderBaseComponent",
                "module": "src/components/slider/slider-base.ts"
              }
            },
            {
              "kind": "method",
              "name": "updateSlider",
              "privacy": "private",
              "parameters": [
                {
                  "name": "mouseX",
                  "type": {
                    "text": "number"
                  }
                }
              ],
              "inheritedFrom": {
                "name": "IgcSliderBaseComponent",
                "module": "src/components/slider/slider-base.ts"
              }
            },
            {
              "kind": "method",
              "name": "pointerDown",
              "privacy": "private",
              "parameters": [
                {
                  "name": "event",
                  "type": {
                    "text": "PointerEvent"
                  }
                }
              ],
              "inheritedFrom": {
                "name": "IgcSliderBaseComponent",
                "module": "src/components/slider/slider-base.ts"
              }
            },
            {
              "kind": "method",
              "name": "pointerMove",
              "privacy": "private",
              "parameters": [
                {
                  "name": "event",
                  "type": {
                    "text": "PointerEvent"
                  }
                }
              ],
              "inheritedFrom": {
                "name": "IgcSliderBaseComponent",
                "module": "src/components/slider/slider-base.ts"
              }
            },
            {
              "kind": "method",
              "name": "lostPointerCapture",
              "privacy": "private",
              "inheritedFrom": {
                "name": "IgcSliderBaseComponent",
                "module": "src/components/slider/slider-base.ts"
              }
            },
            {
              "kind": "method",
              "name": "handleThumbFocus",
              "privacy": "protected",
              "parameters": [
                {
                  "name": "event",
                  "type": {
                    "text": "FocusEvent"
                  }
                }
              ],
              "inheritedFrom": {
                "name": "IgcSliderBaseComponent",
                "module": "src/components/slider/slider-base.ts"
              }
            },
            {
              "kind": "method",
              "name": "handleThumbBlur",
              "privacy": "protected",
              "inheritedFrom": {
                "name": "IgcSliderBaseComponent",
                "module": "src/components/slider/slider-base.ts"
              }
            },
            {
              "kind": "method",
              "name": "_renderTicks",
              "privacy": "protected",
              "inheritedFrom": {
                "name": "IgcSliderBaseComponent",
                "module": "src/components/slider/slider-base.ts"
              }
            },
            {
              "kind": "method",
              "name": "renderTicks",
              "privacy": "protected",
              "inheritedFrom": {
                "name": "IgcSliderBaseComponent",
                "module": "src/components/slider/slider-base.ts"
              }
            },
            {
              "kind": "method",
              "name": "renderSteps",
              "privacy": "private",
              "inheritedFrom": {
                "name": "IgcSliderBaseComponent",
                "module": "src/components/slider/slider-base.ts"
              }
            }
          ],
          "events": [
            {
              "description": "Emitted when a value is changed via thumb drag or keyboard interaction.",
              "name": "igcInput"
            },
            {
              "description": "Emitted when a value change is committed on a thumb drag end or keyboard interaction.",
              "name": "igcChange"
            },
            {
              "type": {
                "text": "CustomEvent"
              },
              "inheritedFrom": {
                "name": "EventEmitterMixin",
                "module": "src/components/common/mixins/event-emitter.ts"
              }
            }
          ],
          "attributes": [
            {
              "name": "lower",
              "description": "The current value of the lower thumb.",
              "fieldName": "lower",
              "attribute": "lower",
              "type": {
                "text": "number"
              }
            },
            {
              "name": "upper",
              "description": "The current value of the upper thumb.",
              "fieldName": "upper",
              "attribute": "upper",
              "type": {
                "text": "number"
              }
            },
            {
              "name": "thumb-label-lower",
              "type": {
                "text": "string"
              },
              "description": "The aria label for the lower thumb.",
              "fieldName": "thumbLabelLower",
              "attribute": "thumb-label-lower"
            },
            {
              "name": "thumb-label-upper",
              "type": {
                "text": "string"
              },
              "description": "The aria label for the upper thumb.",
              "fieldName": "thumbLabelUpper",
              "attribute": "thumb-label-upper"
            },
            {
              "name": "min",
              "description": "The minimum value of the slider scale. Defaults to 0.\n\nIf `min` is greater than `max` the call is a no-op.\n\nIf `labels` are provided (projected), then `min` is always set to 0.\n\nIf `lowerBound` ends up being less than than the current `min` value,\nit is automatically assigned the new `min` value.",
              "fieldName": "min",
              "attribute": "min",
              "type": {
                "text": "number"
              },
              "inheritedFrom": {
                "name": "IgcSliderBaseComponent",
                "module": "src/components/slider/slider-base.ts"
              }
            },
            {
              "name": "max",
              "description": "The maximum value of the slider scale. Defaults to 100.\n\nIf `max` is less than `min` the call is a no-op.\n\nIf `labels` are provided (projected), then `max` is always set to\nthe number of labels.\n\nIf `upperBound` ends up being greater than than the current `max` value,\nit is automatically assigned the new `max` value.",
              "fieldName": "max",
              "attribute": "max",
              "type": {
                "text": "number"
              },
              "inheritedFrom": {
                "name": "IgcSliderBaseComponent",
                "module": "src/components/slider/slider-base.ts"
              }
            },
            {
              "name": "lower-bound",
              "description": "The lower bound of the slider value. If not set, the `min` value is applied.",
              "fieldName": "lowerBound",
              "attribute": "lower-bound",
              "type": {
                "text": "number"
              },
              "inheritedFrom": {
                "name": "IgcSliderBaseComponent",
                "module": "src/components/slider/slider-base.ts"
              }
            },
            {
              "name": "upper-bound",
              "description": "The upper bound of the slider value. If not set, the `max` value is applied.",
              "fieldName": "upperBound",
              "attribute": "upper-bound",
              "type": {
                "text": "number"
              },
              "inheritedFrom": {
                "name": "IgcSliderBaseComponent",
                "module": "src/components/slider/slider-base.ts"
              }
            },
            {
              "name": "disabled",
              "type": {
                "text": "boolean"
              },
              "default": "false",
              "description": "Disables the UI interactions of the slider.",
              "fieldName": "disabled",
              "attribute": "disabled",
              "inheritedFrom": {
                "name": "IgcSliderBaseComponent",
                "module": "src/components/slider/slider-base.ts"
              }
            },
            {
              "name": "discrete-track",
              "type": {
                "text": "boolean"
              },
              "default": "false",
              "description": "Marks the slider track as discrete so it displays the steps.\nIf the `step` is 0, the slider will remain continuos even if `discreteTrack` is `true`.",
              "fieldName": "discreteTrack",
              "attribute": "discrete-track",
              "inheritedFrom": {
                "name": "IgcSliderBaseComponent",
                "module": "src/components/slider/slider-base.ts"
              }
            },
            {
              "name": "hide-tooltip",
              "type": {
                "text": "boolean"
              },
              "default": "false",
              "description": "Hides the thumb tooltip.",
              "fieldName": "hideTooltip",
              "attribute": "hide-tooltip",
              "inheritedFrom": {
                "name": "IgcSliderBaseComponent",
                "module": "src/components/slider/slider-base.ts"
              }
            },
            {
              "name": "step",
              "description": "Specifies the granularity that the value must adhere to.\n\nIf set to 0 no stepping is implied and any value in the range is allowed.\nIf `labels` are provided (projected) then the step is always assumed to be 1 since it is a discrete slider.",
              "fieldName": "step",
              "attribute": "step",
              "type": {
                "text": "number"
              },
              "inheritedFrom": {
                "name": "IgcSliderBaseComponent",
                "module": "src/components/slider/slider-base.ts"
              }
            },
            {
              "name": "primary-ticks",
              "type": {
                "text": "number"
              },
              "default": "0",
              "description": "The number of primary ticks. It defaults to 0 which means no primary ticks are displayed.",
              "fieldName": "primaryTicks",
              "attribute": "primary-ticks",
              "inheritedFrom": {
                "name": "IgcSliderBaseComponent",
                "module": "src/components/slider/slider-base.ts"
              }
            },
            {
              "name": "secondary-ticks",
              "type": {
                "text": "number"
              },
              "default": "0",
              "description": "The number of secondary ticks. It defaults to 0 which means no secondary ticks are displayed.",
              "fieldName": "secondaryTicks",
              "attribute": "secondary-ticks",
              "inheritedFrom": {
                "name": "IgcSliderBaseComponent",
                "module": "src/components/slider/slider-base.ts"
              }
            },
            {
              "name": "tick-orientation",
              "type": {
                "text": "SliderTickOrientation"
              },
              "default": "'end'",
              "description": "Changes the orientation of the ticks.",
              "fieldName": "tickOrientation",
              "attribute": "tick-orientation",
              "expandedType": {
                "text": "'end' | 'mirror' | 'start'"
              },
              "inheritedFrom": {
                "name": "IgcSliderBaseComponent",
                "module": "src/components/slider/slider-base.ts"
              }
            },
            {
              "name": "hide-primary-labels",
              "type": {
                "text": "boolean"
              },
              "default": "false",
              "description": "Hides the primary tick labels.",
              "fieldName": "hidePrimaryLabels",
              "attribute": "hide-primary-labels",
              "inheritedFrom": {
                "name": "IgcSliderBaseComponent",
                "module": "src/components/slider/slider-base.ts"
              }
            },
            {
              "name": "hide-secondary-labels",
              "type": {
                "text": "boolean"
              },
              "default": "false",
              "description": "Hides the secondary tick labels.",
              "fieldName": "hideSecondaryLabels",
              "attribute": "hide-secondary-labels",
              "inheritedFrom": {
                "name": "IgcSliderBaseComponent",
                "module": "src/components/slider/slider-base.ts"
              }
            },
            {
              "name": "locale",
              "type": {
                "text": "string"
              },
              "default": "'en'",
              "description": "The locale used to format the thumb and tick label values in the slider.",
              "fieldName": "locale",
              "attribute": "locale",
              "inheritedFrom": {
                "name": "IgcSliderBaseComponent",
                "module": "src/components/slider/slider-base.ts"
              }
            },
            {
              "name": "value-format",
              "type": {
                "text": "string | undefined"
              },
              "description": "String format used for the thumb and tick label values in the slider.",
              "fieldName": "valueFormat",
              "attribute": "value-format",
              "inheritedFrom": {
                "name": "IgcSliderBaseComponent",
                "module": "src/components/slider/slider-base.ts"
              }
            },
            {
              "name": "tick-label-rotation",
              "type": {
                "text": "SliderTickLabelRotation"
              },
              "default": "0",
              "description": "The degrees for the rotation of the tick labels. Defaults to 0.",
              "fieldName": "tickLabelRotation",
              "attribute": "tick-label-rotation",
              "expandedType": {
                "text": "'0' | '90' | "
              },
              "inheritedFrom": {
                "name": "IgcSliderBaseComponent",
                "module": "src/components/slider/slider-base.ts"
              }
            }
          ],
          "mixins": [
            {
              "name": "EventEmitterMixin",
              "module": "/src/components/common/mixins/event-emitter.js"
            }
          ],
          "superclass": {
            "name": "IgcSliderBaseComponent",
            "module": "/src/components/slider/slider-base.js"
          },
          "tagName": "igc-range-slider",
          "customElement": true
        }
      ],
      "exports": [
        {
          "kind": "js",
          "name": "default",
          "declaration": {
            "name": "IgcRangeSliderComponent",
            "module": "src/components/slider/range-slider.ts"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "src/components/common/mixins/alert.ts",
      "declarations": [
        {
          "kind": "class",
          "description": "",
          "name": "IgcBaseAlertLikeComponent",
          "members": [
            {
              "kind": "field",
              "name": "_player",
              "type": {
                "text": "AnimationController"
              },
              "privacy": "protected",
              "readonly": true
            },
            {
              "kind": "field",
              "name": "_autoHideTimeout",
              "type": {
                "text": "ReturnType<typeof setTimeout> | undefined"
              },
              "privacy": "protected"
            },
            {
              "kind": "field",
              "name": "open",
              "type": {
                "text": "boolean"
              },
              "privacy": "public",
              "default": "false",
              "description": "Whether the component is in shown state.",
              "attribute": "open",
              "reflects": true
            },
            {
              "kind": "field",
              "name": "displayTime",
              "type": {
                "text": "number"
              },
              "privacy": "public",
              "default": "4000",
              "description": "Determines the duration in ms in which the component will be visible.",
              "attribute": "display-time"
            },
            {
              "kind": "field",
              "name": "keepOpen",
              "type": {
                "text": "boolean"
              },
              "privacy": "public",
              "default": "false",
              "description": "Determines whether the component should close after the `displayTime` is over.",
              "attribute": "keep-open",
              "reflects": true
            },
            {
              "kind": "field",
              "name": "position",
              "type": {
                "text": "AbsolutePosition"
              },
              "privacy": "public",
              "default": "'bottom'",
              "description": "Sets the position of the component in the viewport.",
              "attribute": "position",
              "reflects": true,
              "expandedType": {
                "text": "'bottom' | 'middle' | 'top'"
              }
            },
            {
              "kind": "method",
              "name": "_setOpenState",
              "privacy": "private",
              "return": {
                "type": {
                  "text": "Promise<boolean>"
                }
              },
              "parameters": [
                {
                  "name": "open",
                  "type": {
                    "text": "boolean"
                  }
                }
              ]
            },
            {
              "kind": "method",
              "name": "_setAutoHideTimer",
              "privacy": "private",
              "return": {
                "type": {
                  "text": "void"
                }
              }
            },
            {
              "kind": "method",
              "name": "show",
              "privacy": "public",
              "return": {
                "type": {
                  "text": "Promise<boolean>"
                }
              },
              "description": "Opens the component."
            },
            {
              "kind": "method",
              "name": "hide",
              "privacy": "public",
              "return": {
                "type": {
                  "text": "Promise<boolean>"
                }
              },
              "description": "Closes the component."
            },
            {
              "kind": "method",
              "name": "toggle",
              "privacy": "public",
              "return": {
                "type": {
                  "text": "Promise<boolean>"
                }
              },
              "description": "Toggles the open state of the component."
            }
          ],
          "attributes": [
            {
              "name": "open",
              "type": {
                "text": "boolean"
              },
              "default": "false",
              "description": "Whether the component is in shown state.",
              "fieldName": "open",
              "attribute": "open"
            },
            {
              "name": "display-time",
              "type": {
                "text": "number"
              },
              "default": "4000",
              "description": "Determines the duration in ms in which the component will be visible.",
              "fieldName": "displayTime",
              "attribute": "display-time"
            },
            {
              "name": "keep-open",
              "type": {
                "text": "boolean"
              },
              "default": "false",
              "description": "Determines whether the component should close after the `displayTime` is over.",
              "fieldName": "keepOpen",
              "attribute": "keep-open"
            },
            {
              "name": "position",
              "type": {
                "text": "AbsolutePosition"
              },
              "default": "'bottom'",
              "description": "Sets the position of the component in the viewport.",
              "fieldName": "position",
              "attribute": "position",
              "expandedType": {
                "text": "'bottom' | 'middle' | 'top'"
              }
            }
          ],
          "superclass": {
            "name": "LitElement",
            "package": "lit"
          },
          "customElement": true
        }
      ],
      "exports": [
        {
          "kind": "js",
          "name": "IgcBaseAlertLikeComponent",
          "declaration": {
            "name": "IgcBaseAlertLikeComponent",
            "module": "src/components/common/mixins/alert.ts"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "src/components/snackbar/snackbar.ts",
      "declarations": [
        {
          "kind": "class",
          "description": "A snackbar component is used to provide feedback about an operation\nby showing a brief message at the bottom of the screen.",
          "name": "IgcSnackbarComponent",
          "cssParts": [
            {
              "description": "The base wrapper of the snackbar component.",
              "name": "base"
            },
            {
              "description": "The snackbar message.",
              "name": "message"
            },
            {
              "description": "The default snackbar action button.",
              "name": "action"
            },
            {
              "description": "The area holding the actions.",
              "name": "action-container"
            }
          ],
          "slots": [
            {
              "description": "Default slot to render the snackbar content.",
              "name": ""
            },
            {
              "description": "Renders the action part of the snackbar. Usually an interactive element (button)",
              "name": "action"
            }
          ],
          "members": [
            {
              "kind": "field",
              "name": "tagName",
              "type": {
                "text": "string"
              },
              "privacy": "public",
              "static": true,
              "readonly": true,
              "default": "'igc-snackbar'"
            },
            {
              "kind": "method",
              "name": "register",
              "privacy": "public",
              "static": true,
              "return": {
                "type": {
                  "text": "void"
                }
              }
            },
            {
              "kind": "field",
              "name": "_contentRef",
              "privacy": "protected",
              "readonly": true
            },
            {
              "kind": "field",
              "name": "_player",
              "type": {
                "text": "AnimationController"
              },
              "privacy": "protected",
              "readonly": true,
              "inheritedFrom": {
                "name": "IgcBaseAlertLikeComponent",
                "module": "src/components/common/mixins/alert.ts"
              }
            },
            {
              "kind": "field",
              "name": "actionText",
              "type": {
                "text": "string"
              },
              "privacy": "public",
              "description": "The snackbar action button.",
              "attribute": "action-text"
            },
            {
              "kind": "method",
              "name": "_handleClick",
              "privacy": "private",
              "return": {
                "type": {
                  "text": "void"
                }
              }
            },
            {
              "kind": "method",
              "name": "addEventListener",
              "privacy": "public",
              "return": {
                "type": {
                  "text": "void"
                }
              },
              "parameters": [
                {
                  "name": "type",
                  "type": {
                    "text": "K"
                  }
                },
                {
                  "name": "listener",
                  "type": {
                    "text": "(this: HTMLElement, ev: M[K]) => any"
                  }
                },
                {
                  "name": "options",
                  "optional": true,
                  "type": {
                    "text": "boolean | AddEventListenerOptions"
                  }
                }
              ],
              "inheritedFrom": {
                "name": "EventEmitterMixin",
                "module": "src/components/common/mixins/event-emitter.ts"
              }
            },
            {
              "kind": "method",
              "name": "removeEventListener",
              "privacy": "public",
              "return": {
                "type": {
                  "text": "void"
                }
              },
              "parameters": [
                {
                  "name": "type",
                  "type": {
                    "text": "K"
                  }
                },
                {
                  "name": "listener",
                  "type": {
                    "text": "(this: HTMLElement, ev: M[K]) => any"
                  }
                },
                {
                  "name": "options",
                  "optional": true,
                  "type": {
                    "text": "boolean | EventListenerOptions"
                  }
                }
              ],
              "inheritedFrom": {
                "name": "EventEmitterMixin",
                "module": "src/components/common/mixins/event-emitter.ts"
              }
            },
            {
              "kind": "method",
              "name": "emitEvent",
              "privacy": "private",
              "return": {
                "type": {
                  "text": "boolean"
                }
              },
              "parameters": [
                {
                  "name": "type",
                  "type": {
                    "text": "K"
                  }
                },
                {
                  "name": "eventInitDict",
                  "optional": true,
                  "type": {
                    "text": "CustomEventInit<D>"
                  }
                }
              ],
              "inheritedFrom": {
                "name": "EventEmitterMixin",
                "module": "src/components/common/mixins/event-emitter.ts"
              }
            },
            {
              "kind": "field",
              "name": "_autoHideTimeout",
              "type": {
                "text": "ReturnType<typeof setTimeout> | undefined"
              },
              "privacy": "protected",
              "inheritedFrom": {
                "name": "IgcBaseAlertLikeComponent",
                "module": "src/components/common/mixins/alert.ts"
              }
            },
            {
              "kind": "field",
              "name": "open",
              "type": {
                "text": "boolean"
              },
              "privacy": "public",
              "default": "false",
              "description": "Whether the component is in shown state.",
              "attribute": "open",
              "reflects": true,
              "inheritedFrom": {
                "name": "IgcBaseAlertLikeComponent",
                "module": "src/components/common/mixins/alert.ts"
              }
            },
            {
              "kind": "field",
              "name": "displayTime",
              "type": {
                "text": "number"
              },
              "privacy": "public",
              "default": "4000",
              "description": "Determines the duration in ms in which the component will be visible.",
              "attribute": "display-time",
              "inheritedFrom": {
                "name": "IgcBaseAlertLikeComponent",
                "module": "src/components/common/mixins/alert.ts"
              }
            },
            {
              "kind": "field",
              "name": "keepOpen",
              "type": {
                "text": "boolean"
              },
              "privacy": "public",
              "default": "false",
              "description": "Determines whether the component should close after the `displayTime` is over.",
              "attribute": "keep-open",
              "reflects": true,
              "inheritedFrom": {
                "name": "IgcBaseAlertLikeComponent",
                "module": "src/components/common/mixins/alert.ts"
              }
            },
            {
              "kind": "field",
              "name": "position",
              "type": {
                "text": "AbsolutePosition"
              },
              "privacy": "public",
              "default": "'bottom'",
              "description": "Sets the position of the component in the viewport.",
              "attribute": "position",
              "reflects": true,
              "expandedType": {
                "text": "'bottom' | 'middle' | 'top'"
              },
              "inheritedFrom": {
                "name": "IgcBaseAlertLikeComponent",
                "module": "src/components/common/mixins/alert.ts"
              }
            },
            {
              "kind": "method",
              "name": "_setOpenState",
              "privacy": "private",
              "return": {
                "type": {
                  "text": "Promise<boolean>"
                }
              },
              "parameters": [
                {
                  "name": "open",
                  "type": {
                    "text": "boolean"
                  }
                }
              ],
              "inheritedFrom": {
                "name": "IgcBaseAlertLikeComponent",
                "module": "src/components/common/mixins/alert.ts"
              }
            },
            {
              "kind": "method",
              "name": "_setAutoHideTimer",
              "privacy": "private",
              "return": {
                "type": {
                  "text": "void"
                }
              },
              "inheritedFrom": {
                "name": "IgcBaseAlertLikeComponent",
                "module": "src/components/common/mixins/alert.ts"
              }
            },
            {
              "kind": "method",
              "name": "show",
              "privacy": "public",
              "return": {
                "type": {
                  "text": "Promise<boolean>"
                }
              },
              "description": "Opens the component.",
              "inheritedFrom": {
                "name": "IgcBaseAlertLikeComponent",
                "module": "src/components/common/mixins/alert.ts"
              }
            },
            {
              "kind": "method",
              "name": "hide",
              "privacy": "public",
              "return": {
                "type": {
                  "text": "Promise<boolean>"
                }
              },
              "description": "Closes the component.",
              "inheritedFrom": {
                "name": "IgcBaseAlertLikeComponent",
                "module": "src/components/common/mixins/alert.ts"
              }
            },
            {
              "kind": "method",
              "name": "toggle",
              "privacy": "public",
              "return": {
                "type": {
                  "text": "Promise<boolean>"
                }
              },
              "description": "Toggles the open state of the component.",
              "inheritedFrom": {
                "name": "IgcBaseAlertLikeComponent",
                "module": "src/components/common/mixins/alert.ts"
              }
            }
          ],
          "events": [
            {
              "description": "Emitted when the snackbar action button is clicked.",
              "name": "igcAction"
            },
            {
              "type": {
                "text": "CustomEvent"
              },
              "inheritedFrom": {
                "name": "EventEmitterMixin",
                "module": "src/components/common/mixins/event-emitter.ts"
              }
            }
          ],
          "attributes": [
            {
              "name": "action-text",
              "type": {
                "text": "string"
              },
              "description": "The snackbar action button.",
              "fieldName": "actionText",
              "attribute": "action-text"
            },
            {
              "name": "open",
              "type": {
                "text": "boolean"
              },
              "default": "false",
              "description": "Whether the component is in shown state.",
              "fieldName": "open",
              "attribute": "open",
              "inheritedFrom": {
                "name": "IgcBaseAlertLikeComponent",
                "module": "src/components/common/mixins/alert.ts"
              }
            },
            {
              "name": "display-time",
              "type": {
                "text": "number"
              },
              "default": "4000",
              "description": "Determines the duration in ms in which the component will be visible.",
              "fieldName": "displayTime",
              "attribute": "display-time",
              "inheritedFrom": {
                "name": "IgcBaseAlertLikeComponent",
                "module": "src/components/common/mixins/alert.ts"
              }
            },
            {
              "name": "keep-open",
              "type": {
                "text": "boolean"
              },
              "default": "false",
              "description": "Determines whether the component should close after the `displayTime` is over.",
              "fieldName": "keepOpen",
              "attribute": "keep-open",
              "inheritedFrom": {
                "name": "IgcBaseAlertLikeComponent",
                "module": "src/components/common/mixins/alert.ts"
              }
            },
            {
              "name": "position",
              "type": {
                "text": "AbsolutePosition"
              },
              "default": "'bottom'",
              "description": "Sets the position of the component in the viewport.",
              "fieldName": "position",
              "attribute": "position",
              "expandedType": {
                "text": "'bottom' | 'middle' | 'top'"
              },
              "inheritedFrom": {
                "name": "IgcBaseAlertLikeComponent",
                "module": "src/components/common/mixins/alert.ts"
              }
            }
          ],
          "mixins": [
            {
              "name": "EventEmitterMixin",
              "module": "/src/components/common/mixins/event-emitter.js"
            }
          ],
          "superclass": {
            "name": "IgcBaseAlertLikeComponent",
            "module": "/src/components/common/mixins/alert.js"
          },
          "tagName": "igc-snackbar",
          "customElement": true
        }
      ],
      "exports": [
        {
          "kind": "js",
          "name": "default",
          "declaration": {
            "name": "IgcSnackbarComponent",
            "module": "src/components/snackbar/snackbar.ts"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "src/components/slider/slider.ts",
      "declarations": [
        {
          "kind": "class",
          "description": "A slider component used to select numeric value within a range.",
          "name": "IgcSliderComponent",
          "cssParts": [
            {
              "description": "The base wrapper of the slider.",
              "name": "base"
            },
            {
              "description": "The ticks container.",
              "name": "ticks"
            },
            {
              "description": "The tick group container.",
              "name": "tick-group"
            },
            {
              "description": "The tick element.",
              "name": "tick"
            },
            {
              "description": "The tick label element.",
              "name": "tick-label"
            },
            {
              "description": "The inner element of the tick label.",
              "name": "tick-label-inner"
            },
            {
              "description": "The thumbs container.",
              "name": "thumbs"
            },
            {
              "description": "The thumb element.",
              "name": "thumb"
            },
            {
              "description": "The thumb tooltip label container.",
              "name": "thumb-label"
            },
            {
              "description": "The thumb tooltip label inner element.",
              "name": "thumb-label-inner"
            },
            {
              "description": "The track container.",
              "name": "track"
            },
            {
              "description": "The track steps element.",
              "name": "steps"
            },
            {
              "description": "The inactive element of the track.",
              "name": "inactive"
            },
            {
              "description": "The filled part of the track.",
              "name": "fill"
            }
          ],
          "members": [
            {
              "kind": "field",
              "name": "tagName",
              "type": {
                "text": "string"
              },
              "privacy": "public",
              "static": true,
              "readonly": true,
              "default": "'igc-slider'"
            },
            {
              "kind": "method",
              "name": "register",
              "privacy": "public",
              "static": true
            },
            {
              "kind": "field",
              "name": "_formValue",
              "type": {
                "text": "FormValue<unknown>"
              },
              "privacy": "protected",
              "readonly": true,
              "inheritedFrom": {
                "name": "BaseFormAssociated",
                "module": "src/components/common/mixins/forms/associated.ts"
              }
            },
            {
              "kind": "field",
              "name": "value",
              "privacy": "public",
              "description": "The current value of the component.",
              "attribute": "value",
              "type": {
                "text": "number"
              }
            },
            {
              "kind": "field",
              "name": "activeValue",
              "privacy": "protected",
              "readonly": true,
              "type": {
                "text": "number"
              },
              "inheritedFrom": {
                "name": "IgcSliderBaseComponent",
                "module": "src/components/slider/slider-base.ts"
              }
            },
            {
              "kind": "method",
              "name": "normalizeValue",
              "privacy": "protected",
              "return": {
                "type": {
                  "text": "void"
                }
              },
              "inheritedFrom": {
                "name": "IgcSliderBaseComponent",
                "module": "src/components/slider/slider-base.ts"
              }
            },
            {
              "kind": "method",
              "name": "getTrackStyle",
              "privacy": "protected",
              "return": {
                "type": {
                  "text": "StyleInfo"
                }
              },
              "inheritedFrom": {
                "name": "IgcSliderBaseComponent",
                "module": "src/components/slider/slider-base.ts"
              }
            },
            {
              "kind": "method",
              "name": "updateValue",
              "privacy": "protected",
              "return": {
                "type": {
                  "text": "boolean"
                }
              },
              "parameters": [
                {
                  "name": "increment",
                  "type": {
                    "text": "number"
                  }
                }
              ],
              "inheritedFrom": {
                "name": "IgcSliderBaseComponent",
                "module": "src/components/slider/slider-base.ts"
              }
            },
            {
              "kind": "method",
              "name": "emitInputEvent",
              "privacy": "protected",
              "inheritedFrom": {
                "name": "IgcSliderBaseComponent",
                "module": "src/components/slider/slider-base.ts"
              }
            },
            {
              "kind": "method",
              "name": "emitChangeEvent",
              "privacy": "protected",
              "inheritedFrom": {
                "name": "IgcSliderBaseComponent",
                "module": "src/components/slider/slider-base.ts"
              }
            },
            {
              "kind": "method",
              "name": "stepUp",
              "privacy": "public",
              "parameters": [
                {
                  "name": "stepIncrement",
                  "default": "1",
                  "description": "Optional step increment. If no parameter is passed, it defaults to 1."
                }
              ],
              "description": "Increments the value of the slider by `stepIncrement * step`, where `stepIncrement` defaults to 1."
            },
            {
              "kind": "method",
              "name": "stepDown",
              "privacy": "public",
              "parameters": [
                {
                  "name": "stepDecrement",
                  "default": "1",
                  "description": "Optional step decrement. If no parameter is passed, it defaults to 1."
                }
              ],
              "description": "Decrements the value of the slider by `stepDecrement * step`, where `stepDecrement` defaults to 1."
            },
            {
              "kind": "method",
              "name": "renderThumbs",
              "privacy": "protected",
              "return": {
                "type": {
                  "text": "TemplateResult<1>"
                }
              },
              "inheritedFrom": {
                "name": "IgcSliderBaseComponent",
                "module": "src/components/slider/slider-base.ts"
              }
            },
            {
              "kind": "field",
              "name": "defaultValue",
              "privacy": "public",
              "inheritedFrom": {
                "name": "FormAssociatedMixin",
                "module": "src/components/common/mixins/forms/associated.ts"
              }
            },
            {
              "kind": "field",
              "name": "formAssociated",
              "type": {
                "text": "boolean"
              },
              "privacy": "public",
              "static": true,
              "readonly": true,
              "default": "true",
              "inheritedFrom": {
                "name": "BaseFormAssociated",
                "module": "src/components/common/mixins/forms/associated.ts"
              }
            },
            {
              "kind": "field",
              "name": "__internals",
              "type": {
                "text": "ElementInternals"
              },
              "privacy": "private",
              "inheritedFrom": {
                "name": "BaseFormAssociated",
                "module": "src/components/common/mixins/forms/associated.ts"
              }
            },
            {
              "kind": "field",
              "name": "_disabled",
              "type": {
                "text": "boolean"
              },
              "privacy": "protected",
              "default": "false",
              "inheritedFrom": {
                "name": "BaseFormAssociated",
                "module": "src/components/common/mixins/forms/associated.ts"
              }
            },
            {
              "kind": "field",
              "name": "_invalid",
              "type": {
                "text": "boolean"
              },
              "privacy": "protected",
              "default": "false",
              "inheritedFrom": {
                "name": "BaseFormAssociated",
                "module": "src/components/common/mixins/forms/associated.ts"
              }
            },
            {
              "kind": "field",
              "name": "_dirty",
              "type": {
                "text": "boolean"
              },
              "privacy": "protected",
              "default": "false",
              "inheritedFrom": {
                "name": "BaseFormAssociated",
                "module": "src/components/common/mixins/forms/associated.ts"
              }
            },
            {
              "kind": "field",
              "name": "_pristine",
              "type": {
                "text": "boolean"
              },
              "privacy": "protected",
              "default": "true",
              "inheritedFrom": {
                "name": "BaseFormAssociated",
                "module": "src/components/common/mixins/forms/associated.ts"
              }
            },
            {
              "kind": "field",
              "name": "__validators",
              "type": {
                "text": "Validator[]"
              },
              "privacy": "protected",
              "readonly": true,
              "inheritedFrom": {
                "name": "BaseFormAssociated",
                "module": "src/components/common/mixins/forms/associated.ts"
              }
            },
            {
              "kind": "field",
              "name": "name",
              "type": {
                "text": "string"
              },
              "privacy": "public",
              "description": "The name attribute of the control.",
              "attribute": "name",
              "reflects": true,
              "inheritedFrom": {
                "name": "BaseFormAssociated",
                "module": "src/components/common/mixins/forms/associated.ts"
              }
            },
            {
              "kind": "field",
              "name": "disabled",
              "type": {
                "text": "boolean"
              },
              "privacy": "public",
              "default": "false",
              "description": "The disabled state of the component.",
              "attribute": "disabled",
              "reflects": true,
              "inheritedFrom": {
                "name": "IgcSliderBaseComponent",
                "module": "src/components/slider/slider-base.ts"
              }
            },
            {
              "kind": "field",
              "name": "invalid",
              "privacy": "public",
              "description": "Sets the control into invalid state (visual state only).",
              "default": "false",
              "attribute": "invalid",
              "type": {
                "text": "boolean"
              },
              "reflects": true,
              "inheritedFrom": {
                "name": "BaseFormAssociated",
                "module": "src/components/common/mixins/forms/associated.ts"
              }
            },
            {
              "kind": "field",
              "name": "form",
              "type": {
                "text": "HTMLFormElement | null"
              },
              "privacy": "public",
              "description": "Returns the HTMLFormElement associated with this element.",
              "readonly": true,
              "inheritedFrom": {
                "name": "BaseFormAssociated",
                "module": "src/components/common/mixins/forms/associated.ts"
              }
            },
            {
              "kind": "field",
              "name": "validity",
              "type": {
                "text": "ValidityState"
              },
              "privacy": "public",
              "description": "Returns a ValidityState object which represents the different validity states\nthe element can be in, with respect to constraint validation.",
              "readonly": true,
              "inheritedFrom": {
                "name": "BaseFormAssociated",
                "module": "src/components/common/mixins/forms/associated.ts"
              }
            },
            {
              "kind": "field",
              "name": "validationMessage",
              "type": {
                "text": "string"
              },
              "privacy": "public",
              "description": "A string containing the validation message of this element.",
              "readonly": true,
              "inheritedFrom": {
                "name": "BaseFormAssociated",
                "module": "src/components/common/mixins/forms/associated.ts"
              }
            },
            {
              "kind": "field",
              "name": "willValidate",
              "type": {
                "text": "boolean"
              },
              "privacy": "public",
              "description": "A boolean value which returns true if the element is a submittable element\nthat is a candidate for constraint validation.",
              "readonly": true,
              "inheritedFrom": {
                "name": "BaseFormAssociated",
                "module": "src/components/common/mixins/forms/associated.ts"
              }
            },
            {
              "kind": "method",
              "name": "_handleInvalid",
              "privacy": "private",
              "parameters": [
                {
                  "name": "event",
                  "type": {
                    "text": "Event"
                  }
                }
              ],
              "inheritedFrom": {
                "name": "BaseFormAssociated",
                "module": "src/components/common/mixins/forms/associated.ts"
              }
            },
            {
              "kind": "method",
              "name": "_setInvalidState",
              "privacy": "private",
              "return": {
                "type": {
                  "text": "void"
                }
              },
              "inheritedFrom": {
                "name": "BaseFormAssociated",
                "module": "src/components/common/mixins/forms/associated.ts"
              }
            },
            {
              "kind": "method",
              "name": "__runValidators",
              "privacy": "private",
              "inheritedFrom": {
                "name": "BaseFormAssociated",
                "module": "src/components/common/mixins/forms/associated.ts"
              }
            },
            {
              "kind": "method",
              "name": "_setDefaultValue",
              "privacy": "protected",
              "return": {
                "type": {
                  "text": "void"
                }
              },
              "parameters": [
                {
                  "name": "current",
                  "type": {
                    "text": "string | null"
                  }
                }
              ],
              "inheritedFrom": {
                "name": "BaseFormAssociated",
                "module": "src/components/common/mixins/forms/associated.ts"
              }
            },
            {
              "kind": "method",
              "name": "_restoreDefaultValue",
              "privacy": "protected",
              "return": {
                "type": {
                  "text": "void"
                }
              },
              "inheritedFrom": {
                "name": "BaseFormAssociated",
                "module": "src/components/common/mixins/forms/associated.ts"
              }
            },
            {
              "kind": "method",
              "name": "_validate",
              "privacy": "protected",
              "return": {
                "type": {
                  "text": "void"
                }
              },
              "parameters": [
                {
                  "name": "message",
                  "optional": true,
                  "type": {
                    "text": "string"
                  }
                }
              ],
              "inheritedFrom": {
                "name": "BaseFormAssociated",
                "module": "src/components/common/mixins/forms/associated.ts"
              }
            },
            {
              "kind": "method",
              "name": "_updateValidity",
              "privacy": "protected",
              "parameters": [
                {
                  "name": "error",
                  "optional": true,
                  "type": {
                    "text": "string"
                  }
                }
              ],
              "description": "Executes the component validators and updates the internal validity state.",
              "inheritedFrom": {
                "name": "BaseFormAssociated",
                "module": "src/components/common/mixins/forms/associated.ts"
              }
            },
            {
              "kind": "method",
              "name": "_setFormValue",
              "privacy": "protected",
              "return": {
                "type": {
                  "text": "void"
                }
              },
              "parameters": [
                {
                  "name": "value",
                  "type": {
                    "text": "FormValueType"
                  }
                },
                {
                  "name": "state",
                  "optional": true,
                  "type": {
                    "text": "FormValueType"
                  }
                }
              ],
              "inheritedFrom": {
                "name": "BaseFormAssociated",
                "module": "src/components/common/mixins/forms/associated.ts"
              }
            },
            {
              "kind": "method",
              "name": "formAssociatedCallback",
              "privacy": "protected",
              "return": {
                "type": {
                  "text": "void"
                }
              },
              "parameters": [
                {
                  "name": "_form",
                  "type": {
                    "text": "HTMLFormElement"
                  }
                }
              ],
              "inheritedFrom": {
                "name": "BaseFormAssociated",
                "module": "src/components/common/mixins/forms/associated.ts"
              }
            },
            {
              "kind": "method",
              "name": "formDisabledCallback",
              "privacy": "protected",
              "return": {
                "type": {
                  "text": "void"
                }
              },
              "parameters": [
                {
                  "name": "state",
                  "type": {
                    "text": "boolean"
                  }
                }
              ],
              "inheritedFrom": {
                "name": "BaseFormAssociated",
                "module": "src/components/common/mixins/forms/associated.ts"
              }
            },
            {
              "kind": "method",
              "name": "formResetCallback",
              "privacy": "protected",
              "return": {
                "type": {
                  "text": "void"
                }
              },
              "inheritedFrom": {
                "name": "BaseFormAssociated",
                "module": "src/components/common/mixins/forms/associated.ts"
              }
            },
            {
              "kind": "method",
              "name": "formStateRestoreCallback",
              "privacy": "protected",
              "return": {
                "type": {
                  "text": "void"
                }
              },
              "parameters": [
                {
                  "name": "_state",
                  "type": {
                    "text": "FormValueType"
                  }
                },
                {
                  "name": "_mode",
                  "type": {
                    "text": "FormRestoreMode"
                  }
                }
              ],
              "inheritedFrom": {
                "name": "BaseFormAssociated",
                "module": "src/components/common/mixins/forms/associated.ts"
              }
            },
            {
              "kind": "method",
              "name": "reportValidity",
              "privacy": "public",
              "description": "Checks for validity of the control and shows the browser message if it invalid.",
              "inheritedFrom": {
                "name": "BaseFormAssociated",
                "module": "src/components/common/mixins/forms/associated.ts"
              }
            },
            {
              "kind": "method",
              "name": "checkValidity",
              "privacy": "public",
              "description": "Checks for validity of the control and emits the invalid event if it invalid.",
              "inheritedFrom": {
                "name": "BaseFormAssociated",
                "module": "src/components/common/mixins/forms/associated.ts"
              }
            },
            {
              "kind": "method",
              "name": "setCustomValidity",
              "privacy": "public",
              "parameters": [
                {
                  "name": "message",
                  "type": {
                    "text": "string"
                  }
                }
              ],
              "description": "Sets a custom validation message for the control.\nAs long as `message` is not empty, the control is considered invalid.",
              "inheritedFrom": {
                "name": "BaseFormAssociated",
                "module": "src/components/common/mixins/forms/associated.ts"
              }
            },
            {
              "kind": "method",
              "name": "addEventListener",
              "privacy": "public",
              "return": {
                "type": {
                  "text": "void"
                }
              },
              "parameters": [
                {
                  "name": "type",
                  "type": {
                    "text": "K"
                  }
                },
                {
                  "name": "listener",
                  "type": {
                    "text": "(this: HTMLElement, ev: M[K]) => any"
                  }
                },
                {
                  "name": "options",
                  "optional": true,
                  "type": {
                    "text": "boolean | AddEventListenerOptions"
                  }
                }
              ],
              "inheritedFrom": {
                "name": "EventEmitterMixin",
                "module": "src/components/common/mixins/event-emitter.ts"
              }
            },
            {
              "kind": "method",
              "name": "removeEventListener",
              "privacy": "public",
              "return": {
                "type": {
                  "text": "void"
                }
              },
              "parameters": [
                {
                  "name": "type",
                  "type": {
                    "text": "K"
                  }
                },
                {
                  "name": "listener",
                  "type": {
                    "text": "(this: HTMLElement, ev: M[K]) => any"
                  }
                },
                {
                  "name": "options",
                  "optional": true,
                  "type": {
                    "text": "boolean | EventListenerOptions"
                  }
                }
              ],
              "inheritedFrom": {
                "name": "EventEmitterMixin",
                "module": "src/components/common/mixins/event-emitter.ts"
              }
            },
            {
              "kind": "method",
              "name": "emitEvent",
              "privacy": "private",
              "return": {
                "type": {
                  "text": "boolean"
                }
              },
              "parameters": [
                {
                  "name": "type",
                  "type": {
                    "text": "K"
                  }
                },
                {
                  "name": "eventInitDict",
                  "optional": true,
                  "type": {
                    "text": "CustomEventInit<D>"
                  }
                }
              ],
              "inheritedFrom": {
                "name": "EventEmitterMixin",
                "module": "src/components/common/mixins/event-emitter.ts"
              }
            },
            {
              "kind": "field",
              "name": "thumb",
              "type": {
                "text": "HTMLElement"
              },
              "privacy": "protected",
              "inheritedFrom": {
                "name": "IgcSliderBaseComponent",
                "module": "src/components/slider/slider-base.ts"
              }
            },
            {
              "kind": "field",
              "name": "base",
              "type": {
                "text": "HTMLDivElement"
              },
              "privacy": "protected",
              "inheritedFrom": {
                "name": "IgcSliderBaseComponent",
                "module": "src/components/slider/slider-base.ts"
              }
            },
            {
              "kind": "field",
              "name": "labelElements",
              "type": {
                "text": "HTMLElement[]"
              },
              "privacy": "private",
              "inheritedFrom": {
                "name": "IgcSliderBaseComponent",
                "module": "src/components/slider/slider-base.ts"
              }
            },
            {
              "kind": "field",
              "name": "_min",
              "type": {
                "text": "number"
              },
              "privacy": "private",
              "default": "0",
              "inheritedFrom": {
                "name": "IgcSliderBaseComponent",
                "module": "src/components/slider/slider-base.ts"
              }
            },
            {
              "kind": "field",
              "name": "_max",
              "type": {
                "text": "number"
              },
              "privacy": "private",
              "default": "100",
              "inheritedFrom": {
                "name": "IgcSliderBaseComponent",
                "module": "src/components/slider/slider-base.ts"
              }
            },
            {
              "kind": "field",
              "name": "_lowerBound",
              "type": {
                "text": "number | undefined"
              },
              "privacy": "private",
              "inheritedFrom": {
                "name": "IgcSliderBaseComponent",
                "module": "src/components/slider/slider-base.ts"
              }
            },
            {
              "kind": "field",
              "name": "_upperBound",
              "type": {
                "text": "number | undefined"
              },
              "privacy": "private",
              "inheritedFrom": {
                "name": "IgcSliderBaseComponent",
                "module": "src/components/slider/slider-base.ts"
              }
            },
            {
              "kind": "field",
              "name": "_step",
              "type": {
                "text": "number"
              },
              "privacy": "private",
              "default": "1",
              "inheritedFrom": {
                "name": "IgcSliderBaseComponent",
                "module": "src/components/slider/slider-base.ts"
              }
            },
            {
              "kind": "field",
              "name": "startValue",
              "type": {
                "text": "number | undefined"
              },
              "privacy": "private",
              "inheritedFrom": {
                "name": "IgcSliderBaseComponent",
                "module": "src/components/slider/slider-base.ts"
              }
            },
            {
              "kind": "field",
              "name": "pointerCaptured",
              "type": {
                "text": "boolean"
              },
              "privacy": "private",
              "default": "false",
              "inheritedFrom": {
                "name": "IgcSliderBaseComponent",
                "module": "src/components/slider/slider-base.ts"
              }
            },
            {
              "kind": "field",
              "name": "thumbHoverTimer",
              "type": {
                "text": "any"
              },
              "privacy": "private",
              "inheritedFrom": {
                "name": "IgcSliderBaseComponent",
                "module": "src/components/slider/slider-base.ts"
              }
            },
            {
              "kind": "field",
              "name": "activeThumb",
              "type": {
                "text": "HTMLElement | undefined"
              },
              "privacy": "protected",
              "inheritedFrom": {
                "name": "IgcSliderBaseComponent",
                "module": "src/components/slider/slider-base.ts"
              }
            },
            {
              "kind": "field",
              "name": "thumbLabelsVisible",
              "type": {
                "text": "boolean"
              },
              "privacy": "protected",
              "default": "false",
              "inheritedFrom": {
                "name": "IgcSliderBaseComponent",
                "module": "src/components/slider/slider-base.ts"
              }
            },
            {
              "kind": "field",
              "name": "labels",
              "type": {
                "text": "string[]"
              },
              "privacy": "protected",
              "default": "[]",
              "inheritedFrom": {
                "name": "IgcSliderBaseComponent",
                "module": "src/components/slider/slider-base.ts"
              }
            },
            {
              "kind": "field",
              "name": "hasLabels",
              "privacy": "protected",
              "readonly": true,
              "inheritedFrom": {
                "name": "IgcSliderBaseComponent",
                "module": "src/components/slider/slider-base.ts"
              }
            },
            {
              "kind": "field",
              "name": "distance",
              "privacy": "protected",
              "readonly": true,
              "inheritedFrom": {
                "name": "IgcSliderBaseComponent",
                "module": "src/components/slider/slider-base.ts"
              }
            },
            {
              "kind": "field",
              "name": "min",
              "privacy": "public",
              "description": "The minimum value of the slider scale. Defaults to 0.\n\nIf `min` is greater than `max` the call is a no-op.\n\nIf `labels` are provided (projected), then `min` is always set to 0.\n\nIf `lowerBound` ends up being less than than the current `min` value,\nit is automatically assigned the new `min` value.",
              "attribute": "min",
              "type": {
                "text": "number"
              },
              "inheritedFrom": {
                "name": "IgcSliderBaseComponent",
                "module": "src/components/slider/slider-base.ts"
              }
            },
            {
              "kind": "field",
              "name": "max",
              "privacy": "public",
              "description": "The maximum value of the slider scale. Defaults to 100.\n\nIf `max` is less than `min` the call is a no-op.\n\nIf `labels` are provided (projected), then `max` is always set to\nthe number of labels.\n\nIf `upperBound` ends up being greater than than the current `max` value,\nit is automatically assigned the new `max` value.",
              "attribute": "max",
              "type": {
                "text": "number"
              },
              "inheritedFrom": {
                "name": "IgcSliderBaseComponent",
                "module": "src/components/slider/slider-base.ts"
              }
            },
            {
              "kind": "field",
              "name": "lowerBound",
              "privacy": "public",
              "description": "The lower bound of the slider value. If not set, the `min` value is applied.",
              "attribute": "lower-bound",
              "type": {
                "text": "number"
              },
              "inheritedFrom": {
                "name": "IgcSliderBaseComponent",
                "module": "src/components/slider/slider-base.ts"
              }
            },
            {
              "kind": "field",
              "name": "upperBound",
              "privacy": "public",
              "description": "The upper bound of the slider value. If not set, the `max` value is applied.",
              "attribute": "upper-bound",
              "type": {
                "text": "number"
              },
              "inheritedFrom": {
                "name": "IgcSliderBaseComponent",
                "module": "src/components/slider/slider-base.ts"
              }
            },
            {
              "kind": "field",
              "name": "discreteTrack",
              "type": {
                "text": "boolean"
              },
              "privacy": "public",
              "default": "false",
              "description": "Marks the slider track as discrete so it displays the steps.\nIf the `step` is 0, the slider will remain continuos even if `discreteTrack` is `true`.",
              "attribute": "discrete-track",
              "inheritedFrom": {
                "name": "IgcSliderBaseComponent",
                "module": "src/components/slider/slider-base.ts"
              }
            },
            {
              "kind": "field",
              "name": "hideTooltip",
              "type": {
                "text": "boolean"
              },
              "privacy": "public",
              "default": "false",
              "description": "Hides the thumb tooltip.",
              "attribute": "hide-tooltip",
              "inheritedFrom": {
                "name": "IgcSliderBaseComponent",
                "module": "src/components/slider/slider-base.ts"
              }
            },
            {
              "kind": "field",
              "name": "step",
              "privacy": "public",
              "description": "Specifies the granularity that the value must adhere to.\n\nIf set to 0 no stepping is implied and any value in the range is allowed.\nIf `labels` are provided (projected) then the step is always assumed to be 1 since it is a discrete slider.",
              "attribute": "step",
              "type": {
                "text": "number"
              },
              "inheritedFrom": {
                "name": "IgcSliderBaseComponent",
                "module": "src/components/slider/slider-base.ts"
              }
            },
            {
              "kind": "field",
              "name": "primaryTicks",
              "type": {
                "text": "number"
              },
              "privacy": "public",
              "default": "0",
              "description": "The number of primary ticks. It defaults to 0 which means no primary ticks are displayed.",
              "attribute": "primary-ticks",
              "inheritedFrom": {
                "name": "IgcSliderBaseComponent",
                "module": "src/components/slider/slider-base.ts"
              }
            },
            {
              "kind": "field",
              "name": "secondaryTicks",
              "type": {
                "text": "number"
              },
              "privacy": "public",
              "default": "0",
              "description": "The number of secondary ticks. It defaults to 0 which means no secondary ticks are displayed.",
              "attribute": "secondary-ticks",
              "inheritedFrom": {
                "name": "IgcSliderBaseComponent",
                "module": "src/components/slider/slider-base.ts"
              }
            },
            {
              "kind": "field",
              "name": "tickOrientation",
              "type": {
                "text": "SliderTickOrientation"
              },
              "privacy": "public",
              "default": "'end'",
              "description": "Changes the orientation of the ticks.",
              "attribute": "tick-orientation",
              "expandedType": {
                "text": "'end' | 'mirror' | 'start'"
              },
              "inheritedFrom": {
                "name": "IgcSliderBaseComponent",
                "module": "src/components/slider/slider-base.ts"
              }
            },
            {
              "kind": "field",
              "name": "hidePrimaryLabels",
              "type": {
                "text": "boolean"
              },
              "privacy": "public",
              "default": "false",
              "description": "Hides the primary tick labels.",
              "attribute": "hide-primary-labels",
              "inheritedFrom": {
                "name": "IgcSliderBaseComponent",
                "module": "src/components/slider/slider-base.ts"
              }
            },
            {
              "kind": "field",
              "name": "hideSecondaryLabels",
              "type": {
                "text": "boolean"
              },
              "privacy": "public",
              "default": "false",
              "description": "Hides the secondary tick labels.",
              "attribute": "hide-secondary-labels",
              "inheritedFrom": {
                "name": "IgcSliderBaseComponent",
                "module": "src/components/slider/slider-base.ts"
              }
            },
            {
              "kind": "field",
              "name": "locale",
              "type": {
                "text": "string"
              },
              "privacy": "public",
              "default": "'en'",
              "description": "The locale used to format the thumb and tick label values in the slider.",
              "attribute": "locale",
              "inheritedFrom": {
                "name": "IgcSliderBaseComponent",
                "module": "src/components/slider/slider-base.ts"
              }
            },
            {
              "kind": "field",
              "name": "valueFormat",
              "type": {
                "text": "string | undefined"
              },
              "privacy": "public",
              "description": "String format used for the thumb and tick label values in the slider.",
              "attribute": "value-format",
              "inheritedFrom": {
                "name": "IgcSliderBaseComponent",
                "module": "src/components/slider/slider-base.ts"
              }
            },
            {
              "kind": "field",
              "name": "valueFormatOptions",
              "type": {
                "text": "Intl.NumberFormatOptions | undefined"
              },
              "privacy": "public",
              "description": "Number format options used for the thumb and tick label values in the slider.",
              "inheritedFrom": {
                "name": "IgcSliderBaseComponent",
                "module": "src/components/slider/slider-base.ts"
              }
            },
            {
              "kind": "field",
              "name": "tickLabelRotation",
              "type": {
                "text": "SliderTickLabelRotation"
              },
              "privacy": "public",
              "default": "0",
              "description": "The degrees for the rotation of the tick labels. Defaults to 0.",
              "attribute": "tick-label-rotation",
              "reflects": true,
              "expandedType": {
                "text": "'0' | '90' | "
              },
              "inheritedFrom": {
                "name": "IgcSliderBaseComponent",
                "module": "src/components/slider/slider-base.ts"
              }
            },
            {
              "kind": "method",
              "name": "constraintsChange",
              "privacy": "protected",
              "inheritedFrom": {
                "name": "IgcSliderBaseComponent",
                "module": "src/components/slider/slider-base.ts"
              }
            },
            {
              "kind": "method",
              "name": "handleArrowKeys",
              "privacy": "private",
              "parameters": [
                {
                  "name": "delta",
                  "type": {
                    "text": "-1 | 1"
                  }
                }
              ],
              "inheritedFrom": {
                "name": "IgcSliderBaseComponent",
                "module": "src/components/slider/slider-base.ts"
              }
            },
            {
              "kind": "method",
              "name": "handlePageKeys",
              "privacy": "private",
              "parameters": [
                {
                  "name": "delta",
                  "type": {
                    "text": "-1 | 1"
                  }
                }
              ],
              "inheritedFrom": {
                "name": "IgcSliderBaseComponent",
                "module": "src/components/slider/slider-base.ts"
              }
            },
            {
              "kind": "method",
              "name": "handleKeyboardIncrement",
              "privacy": "private",
              "parameters": [
                {
                  "name": "increment",
                  "type": {
                    "text": "number"
                  }
                }
              ],
              "inheritedFrom": {
                "name": "IgcSliderBaseComponent",
                "module": "src/components/slider/slider-base.ts"
              }
            },
            {
              "kind": "method",
              "name": "handleKeyUp",
              "privacy": "private",
              "inheritedFrom": {
                "name": "IgcSliderBaseComponent",
                "module": "src/components/slider/slider-base.ts"
              }
            },
            {
              "kind": "method",
              "name": "handleSlotChange",
              "privacy": "protected",
              "inheritedFrom": {
                "name": "IgcSliderBaseComponent",
                "module": "src/components/slider/slider-base.ts"
              }
            },
            {
              "kind": "method",
              "name": "validateValue",
              "privacy": "protected",
              "parameters": [
                {
                  "name": "value",
                  "type": {
                    "text": "number"
                  }
                }
              ],
              "inheritedFrom": {
                "name": "IgcSliderBaseComponent",
                "module": "src/components/slider/slider-base.ts"
              }
            },
            {
              "kind": "method",
              "name": "formatValue",
              "privacy": "protected",
              "parameters": [
                {
                  "name": "value",
                  "type": {
                    "text": "number"
                  }
                }
              ],
              "inheritedFrom": {
                "name": "IgcSliderBaseComponent",
                "module": "src/components/slider/slider-base.ts"
              }
            },
            {
              "kind": "method",
              "name": "normalizeByStep",
              "privacy": "private",
              "parameters": [
                {
                  "name": "value",
                  "type": {
                    "text": "number"
                  }
                }
              ],
              "inheritedFrom": {
                "name": "IgcSliderBaseComponent",
                "module": "src/components/slider/slider-base.ts"
              }
            },
            {
              "kind": "method",
              "name": "closestHandle",
              "privacy": "protected",
              "return": {
                "type": {
                  "text": "HTMLElement"
                }
              },
              "parameters": [
                {
                  "name": "_event",
                  "type": {
                    "text": "PointerEvent"
                  }
                }
              ],
              "inheritedFrom": {
                "name": "IgcSliderBaseComponent",
                "module": "src/components/slider/slider-base.ts"
              }
            },
            {
              "kind": "method",
              "name": "totalTickCount",
              "privacy": "private",
              "inheritedFrom": {
                "name": "IgcSliderBaseComponent",
                "module": "src/components/slider/slider-base.ts"
              }
            },
            {
              "kind": "method",
              "name": "tickValue",
              "privacy": "private",
              "parameters": [
                {
                  "name": "idx",
                  "type": {
                    "text": "number"
                  }
                }
              ],
              "inheritedFrom": {
                "name": "IgcSliderBaseComponent",
                "module": "src/components/slider/slider-base.ts"
              }
            },
            {
              "kind": "method",
              "name": "isPrimary",
              "privacy": "private",
              "parameters": [
                {
                  "name": "idx",
                  "type": {
                    "text": "number"
                  }
                }
              ],
              "inheritedFrom": {
                "name": "IgcSliderBaseComponent",
                "module": "src/components/slider/slider-base.ts"
              }
            },
            {
              "kind": "method",
              "name": "showThumbLabels",
              "privacy": "protected",
              "inheritedFrom": {
                "name": "IgcSliderBaseComponent",
                "module": "src/components/slider/slider-base.ts"
              }
            },
            {
              "kind": "method",
              "name": "hideThumbLabels",
              "privacy": "protected",
              "inheritedFrom": {
                "name": "IgcSliderBaseComponent",
                "module": "src/components/slider/slider-base.ts"
              }
            },
            {
              "kind": "method",
              "name": "calculateTrackUpdate",
              "privacy": "private",
              "return": {
                "type": {
                  "text": "number"
                }
              },
              "parameters": [
                {
                  "name": "mouseX",
                  "type": {
                    "text": "number"
                  }
                }
              ],
              "inheritedFrom": {
                "name": "IgcSliderBaseComponent",
                "module": "src/components/slider/slider-base.ts"
              }
            },
            {
              "kind": "method",
              "name": "updateSlider",
              "privacy": "private",
              "parameters": [
                {
                  "name": "mouseX",
                  "type": {
                    "text": "number"
                  }
                }
              ],
              "inheritedFrom": {
                "name": "IgcSliderBaseComponent",
                "module": "src/components/slider/slider-base.ts"
              }
            },
            {
              "kind": "method",
              "name": "pointerDown",
              "privacy": "private",
              "parameters": [
                {
                  "name": "event",
                  "type": {
                    "text": "PointerEvent"
                  }
                }
              ],
              "inheritedFrom": {
                "name": "IgcSliderBaseComponent",
                "module": "src/components/slider/slider-base.ts"
              }
            },
            {
              "kind": "method",
              "name": "pointerMove",
              "privacy": "private",
              "parameters": [
                {
                  "name": "event",
                  "type": {
                    "text": "PointerEvent"
                  }
                }
              ],
              "inheritedFrom": {
                "name": "IgcSliderBaseComponent",
                "module": "src/components/slider/slider-base.ts"
              }
            },
            {
              "kind": "method",
              "name": "lostPointerCapture",
              "privacy": "private",
              "inheritedFrom": {
                "name": "IgcSliderBaseComponent",
                "module": "src/components/slider/slider-base.ts"
              }
            },
            {
              "kind": "method",
              "name": "handleThumbFocus",
              "privacy": "protected",
              "parameters": [
                {
                  "name": "event",
                  "type": {
                    "text": "FocusEvent"
                  }
                }
              ],
              "inheritedFrom": {
                "name": "IgcSliderBaseComponent",
                "module": "src/components/slider/slider-base.ts"
              }
            },
            {
              "kind": "method",
              "name": "handleThumbBlur",
              "privacy": "protected",
              "inheritedFrom": {
                "name": "IgcSliderBaseComponent",
                "module": "src/components/slider/slider-base.ts"
              }
            },
            {
              "kind": "method",
              "name": "_renderTicks",
              "privacy": "protected",
              "inheritedFrom": {
                "name": "IgcSliderBaseComponent",
                "module": "src/components/slider/slider-base.ts"
              }
            },
            {
              "kind": "method",
              "name": "renderTicks",
              "privacy": "protected",
              "inheritedFrom": {
                "name": "IgcSliderBaseComponent",
                "module": "src/components/slider/slider-base.ts"
              }
            },
            {
              "kind": "method",
              "name": "renderThumb",
              "privacy": "protected",
              "parameters": [
                {
                  "name": "value",
                  "type": {
                    "text": "number"
                  }
                },
                {
                  "name": "ariaLabel",
                  "optional": true,
                  "type": {
                    "text": "string"
                  }
                },
                {
                  "name": "thumbId",
                  "optional": true,
                  "type": {
                    "text": "string"
                  }
                }
              ],
              "inheritedFrom": {
                "name": "IgcSliderBaseComponent",
                "module": "src/components/slider/slider-base.ts"
              }
            },
            {
              "kind": "method",
              "name": "renderSteps",
              "privacy": "private",
              "inheritedFrom": {
                "name": "IgcSliderBaseComponent",
                "module": "src/components/slider/slider-base.ts"
              }
            }
          ],
          "events": [
            {
              "description": "Emitted when a value is changed via thumb drag or keyboard interaction.",
              "name": "igcInput"
            },
            {
              "description": "Emitted when a value change is committed on a thumb drag end or keyboard interaction.",
              "name": "igcChange"
            },
            {
              "type": {
                "text": "CustomEvent"
              },
              "inheritedFrom": {
                "name": "EventEmitterMixin",
                "module": "src/components/common/mixins/event-emitter.ts"
              }
            }
          ],
          "attributes": [
            {
              "name": "value",
              "description": "The current value of the component.",
              "fieldName": "value",
              "attribute": "value",
              "type": {
                "text": "number"
              }
            },
            {
              "name": "name",
              "type": {
                "text": "string"
              },
              "description": "The name attribute of the control.",
              "fieldName": "name",
              "attribute": "name",
              "inheritedFrom": {
                "name": "BaseFormAssociated",
                "module": "src/components/common/mixins/forms/associated.ts"
              }
            },
            {
              "name": "disabled",
              "type": {
                "text": "boolean"
              },
              "default": "false",
              "description": "The disabled state of the component.",
              "fieldName": "disabled",
              "attribute": "disabled",
              "inheritedFrom": {
                "name": "IgcSliderBaseComponent",
                "module": "src/components/slider/slider-base.ts"
              }
            },
            {
              "name": "invalid",
              "description": "Sets the control into invalid state (visual state only).",
              "default": "false",
              "fieldName": "invalid",
              "attribute": "invalid",
              "type": {
                "text": "boolean"
              },
              "inheritedFrom": {
                "name": "BaseFormAssociated",
                "module": "src/components/common/mixins/forms/associated.ts"
              }
            },
            {
              "name": "min",
              "description": "The minimum value of the slider scale. Defaults to 0.\n\nIf `min` is greater than `max` the call is a no-op.\n\nIf `labels` are provided (projected), then `min` is always set to 0.\n\nIf `lowerBound` ends up being less than than the current `min` value,\nit is automatically assigned the new `min` value.",
              "fieldName": "min",
              "attribute": "min",
              "type": {
                "text": "number"
              },
              "inheritedFrom": {
                "name": "IgcSliderBaseComponent",
                "module": "src/components/slider/slider-base.ts"
              }
            },
            {
              "name": "max",
              "description": "The maximum value of the slider scale. Defaults to 100.\n\nIf `max` is less than `min` the call is a no-op.\n\nIf `labels` are provided (projected), then `max` is always set to\nthe number of labels.\n\nIf `upperBound` ends up being greater than than the current `max` value,\nit is automatically assigned the new `max` value.",
              "fieldName": "max",
              "attribute": "max",
              "type": {
                "text": "number"
              },
              "inheritedFrom": {
                "name": "IgcSliderBaseComponent",
                "module": "src/components/slider/slider-base.ts"
              }
            },
            {
              "name": "lower-bound",
              "description": "The lower bound of the slider value. If not set, the `min` value is applied.",
              "fieldName": "lowerBound",
              "attribute": "lower-bound",
              "type": {
                "text": "number"
              },
              "inheritedFrom": {
                "name": "IgcSliderBaseComponent",
                "module": "src/components/slider/slider-base.ts"
              }
            },
            {
              "name": "upper-bound",
              "description": "The upper bound of the slider value. If not set, the `max` value is applied.",
              "fieldName": "upperBound",
              "attribute": "upper-bound",
              "type": {
                "text": "number"
              },
              "inheritedFrom": {
                "name": "IgcSliderBaseComponent",
                "module": "src/components/slider/slider-base.ts"
              }
            },
            {
              "name": "discrete-track",
              "type": {
                "text": "boolean"
              },
              "default": "false",
              "description": "Marks the slider track as discrete so it displays the steps.\nIf the `step` is 0, the slider will remain continuos even if `discreteTrack` is `true`.",
              "fieldName": "discreteTrack",
              "attribute": "discrete-track",
              "inheritedFrom": {
                "name": "IgcSliderBaseComponent",
                "module": "src/components/slider/slider-base.ts"
              }
            },
            {
              "name": "hide-tooltip",
              "type": {
                "text": "boolean"
              },
              "default": "false",
              "description": "Hides the thumb tooltip.",
              "fieldName": "hideTooltip",
              "attribute": "hide-tooltip",
              "inheritedFrom": {
                "name": "IgcSliderBaseComponent",
                "module": "src/components/slider/slider-base.ts"
              }
            },
            {
              "name": "step",
              "description": "Specifies the granularity that the value must adhere to.\n\nIf set to 0 no stepping is implied and any value in the range is allowed.\nIf `labels` are provided (projected) then the step is always assumed to be 1 since it is a discrete slider.",
              "fieldName": "step",
              "attribute": "step",
              "type": {
                "text": "number"
              },
              "inheritedFrom": {
                "name": "IgcSliderBaseComponent",
                "module": "src/components/slider/slider-base.ts"
              }
            },
            {
              "name": "primary-ticks",
              "type": {
                "text": "number"
              },
              "default": "0",
              "description": "The number of primary ticks. It defaults to 0 which means no primary ticks are displayed.",
              "fieldName": "primaryTicks",
              "attribute": "primary-ticks",
              "inheritedFrom": {
                "name": "IgcSliderBaseComponent",
                "module": "src/components/slider/slider-base.ts"
              }
            },
            {
              "name": "secondary-ticks",
              "type": {
                "text": "number"
              },
              "default": "0",
              "description": "The number of secondary ticks. It defaults to 0 which means no secondary ticks are displayed.",
              "fieldName": "secondaryTicks",
              "attribute": "secondary-ticks",
              "inheritedFrom": {
                "name": "IgcSliderBaseComponent",
                "module": "src/components/slider/slider-base.ts"
              }
            },
            {
              "name": "tick-orientation",
              "type": {
                "text": "SliderTickOrientation"
              },
              "default": "'end'",
              "description": "Changes the orientation of the ticks.",
              "fieldName": "tickOrientation",
              "attribute": "tick-orientation",
              "expandedType": {
                "text": "'end' | 'mirror' | 'start'"
              },
              "inheritedFrom": {
                "name": "IgcSliderBaseComponent",
                "module": "src/components/slider/slider-base.ts"
              }
            },
            {
              "name": "hide-primary-labels",
              "type": {
                "text": "boolean"
              },
              "default": "false",
              "description": "Hides the primary tick labels.",
              "fieldName": "hidePrimaryLabels",
              "attribute": "hide-primary-labels",
              "inheritedFrom": {
                "name": "IgcSliderBaseComponent",
                "module": "src/components/slider/slider-base.ts"
              }
            },
            {
              "name": "hide-secondary-labels",
              "type": {
                "text": "boolean"
              },
              "default": "false",
              "description": "Hides the secondary tick labels.",
              "fieldName": "hideSecondaryLabels",
              "attribute": "hide-secondary-labels",
              "inheritedFrom": {
                "name": "IgcSliderBaseComponent",
                "module": "src/components/slider/slider-base.ts"
              }
            },
            {
              "name": "locale",
              "type": {
                "text": "string"
              },
              "default": "'en'",
              "description": "The locale used to format the thumb and tick label values in the slider.",
              "fieldName": "locale",
              "attribute": "locale",
              "inheritedFrom": {
                "name": "IgcSliderBaseComponent",
                "module": "src/components/slider/slider-base.ts"
              }
            },
            {
              "name": "value-format",
              "type": {
                "text": "string | undefined"
              },
              "description": "String format used for the thumb and tick label values in the slider.",
              "fieldName": "valueFormat",
              "attribute": "value-format",
              "inheritedFrom": {
                "name": "IgcSliderBaseComponent",
                "module": "src/components/slider/slider-base.ts"
              }
            },
            {
              "name": "tick-label-rotation",
              "type": {
                "text": "SliderTickLabelRotation"
              },
              "default": "0",
              "description": "The degrees for the rotation of the tick labels. Defaults to 0.",
              "fieldName": "tickLabelRotation",
              "attribute": "tick-label-rotation",
              "expandedType": {
                "text": "'0' | '90' | "
              },
              "inheritedFrom": {
                "name": "IgcSliderBaseComponent",
                "module": "src/components/slider/slider-base.ts"
              }
            }
          ],
          "mixins": [
            {
              "name": "FormAssociatedMixin",
              "module": "/src/components/common/mixins/forms/associated.js"
            },
            {
              "name": "EventEmitterMixin",
              "module": "/src/components/common/mixins/event-emitter.js"
            }
          ],
          "superclass": {
            "name": "IgcSliderBaseComponent",
            "module": "/src/components/slider/slider-base.js"
          },
          "tagName": "igc-slider",
          "customElement": true
        }
      ],
      "exports": [
        {
          "kind": "js",
          "name": "default",
          "declaration": {
            "name": "IgcSliderComponent",
            "module": "src/components/slider/slider.ts"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "src/components/common/controllers/resize-observer.ts",
      "declarations": [
        {
          "kind": "function",
          "name": "createResizeObserverController",
          "return": {
            "type": {
              "text": "ResizeObserverController"
            }
          },
          "parameters": [
            {
              "name": "host",
              "type": {
                "text": "ReactiveControllerHost & Element"
              }
            },
            {
              "name": "config",
              "type": {
                "text": "ResizeObserverControllerConfig"
              }
            }
          ],
          "description": "Creates a new resize controller bound to the given `host`\nwith ResizeObserverControllerConfig| `config`."
        }
      ],
      "exports": [
        {
          "kind": "js",
          "name": "createResizeObserverController",
          "declaration": {
            "name": "createResizeObserverController",
            "module": "src/components/common/controllers/resize-observer.ts"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "src/components/tabs/tab.ts",
      "declarations": [
        {
          "kind": "class",
          "description": "A tab element slotted into an `igc-tabs` container.",
          "name": "IgcTabComponent",
          "cssParts": [
            {
              "description": "The header of a single tab.",
              "name": "tab-header"
            },
            {
              "description": "Tab header's label prefix.",
              "name": "prefix"
            },
            {
              "description": "Tab header's label slot container.",
              "name": "content"
            },
            {
              "description": "Tab header's label suffix.",
              "name": "suffix"
            },
            {
              "description": "Holds the body content of a single tab, only the body of the selected tab is visible.",
              "name": "tab-body"
            }
          ],
          "slots": [
            {
              "description": "Renders the tab's content.",
              "name": ""
            },
            {
              "description": "Renders the tab header's label.",
              "name": "label"
            },
            {
              "description": "Renders the tab header's prefix.",
              "name": "prefix"
            },
            {
              "description": "Renders the tab header's suffix.",
              "name": "suffix"
            }
          ],
          "members": [
            {
              "kind": "field",
              "name": "tagName",
              "type": {
                "text": "string"
              },
              "privacy": "public",
              "static": true,
              "readonly": true,
              "default": "'igc-tab'"
            },
            {
              "kind": "method",
              "name": "register",
              "privacy": "public",
              "static": true,
              "return": {
                "type": {
                  "text": "void"
                }
              }
            },
            {
              "kind": "field",
              "name": "increment",
              "privacy": "private",
              "static": true
            },
            {
              "kind": "field",
              "name": "label",
              "type": {
                "text": "string"
              },
              "privacy": "public",
              "default": "''",
              "description": "The tab item label.",
              "attribute": "label"
            },
            {
              "kind": "field",
              "name": "selected",
              "type": {
                "text": "boolean"
              },
              "privacy": "public",
              "default": "false",
              "description": "Determines whether the tab is selected.",
              "attribute": "selected",
              "reflects": true
            },
            {
              "kind": "field",
              "name": "disabled",
              "type": {
                "text": "boolean"
              },
              "privacy": "public",
              "default": "false",
              "description": "Determines whether the tab is disabled.",
              "attribute": "disabled",
              "reflects": true
            }
          ],
          "attributes": [
            {
              "name": "label",
              "type": {
                "text": "string"
              },
              "default": "''",
              "description": "The tab item label.",
              "fieldName": "label",
              "attribute": "label"
            },
            {
              "name": "selected",
              "type": {
                "text": "boolean"
              },
              "default": "false",
              "description": "Determines whether the tab is selected.",
              "fieldName": "selected",
              "attribute": "selected"
            },
            {
              "name": "disabled",
              "type": {
                "text": "boolean"
              },
              "default": "false",
              "description": "Determines whether the tab is disabled.",
              "fieldName": "disabled",
              "attribute": "disabled"
            }
          ],
          "superclass": {
            "name": "LitElement",
            "package": "lit"
          },
          "tagName": "igc-tab",
          "customElement": true
        }
      ],
      "exports": [
        {
          "kind": "js",
          "name": "default",
          "declaration": {
            "name": "IgcTabComponent",
            "module": "src/components/tabs/tab.ts"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "src/components/tabs/tab-dom.ts",
      "declarations": [
        {
          "kind": "function",
          "name": "createTabHelpers",
          "parameters": [
            {
              "name": "host",
              "type": {
                "text": "IgcTabsComponent"
              }
            },
            {
              "name": "container",
              "type": {
                "text": "Ref<HTMLElement>"
              }
            },
            {
              "name": "indicator",
              "type": {
                "text": "Ref<HTMLElement>"
              }
            }
          ]
        },
        {
          "kind": "function",
          "name": "getTabHeader",
          "return": {
            "type": {
              "text": "HTMLElement"
            }
          },
          "parameters": [
            {
              "name": "tab",
              "type": {
                "text": "IgcTabComponent"
              }
            }
          ]
        }
      ],
      "exports": [
        {
          "kind": "js",
          "name": "createTabHelpers",
          "declaration": {
            "name": "createTabHelpers",
            "module": "src/components/tabs/tab-dom.ts"
          }
        },
        {
          "kind": "js",
          "name": "getTabHeader",
          "declaration": {
            "name": "getTabHeader",
            "module": "src/components/tabs/tab-dom.ts"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "src/components/tabs/tabs.ts",
      "declarations": [
        {
          "kind": "class",
          "description": "Tabs organize and allow navigation between groups of content that are related and at the same level of hierarchy.\n\nThe `<igc-tabs>` component allows the user to navigate between multiple `<igc-tab>` elements.\nIt supports keyboard navigation and provides API methods to control the selected tab.",
          "name": "IgcTabsComponent",
          "cssParts": [
            {
              "description": "The start scroll button displayed when the tabs overflow.",
              "name": "start-scroll-button"
            },
            {
              "description": "The end scroll button displayed when the tabs overflow.",
              "name": "end-scroll-button"
            },
            {
              "description": "The indicator that shows which tab is selected.",
              "name": "selected-indicator"
            }
          ],
          "slots": [
            {
              "description": "Renders the `IgcTabComponents` inside default slot.",
              "name": ""
            }
          ],
          "members": [
            {
              "kind": "field",
              "name": "tagName",
              "type": {
                "text": "string"
              },
              "privacy": "public",
              "static": true,
              "readonly": true,
              "default": "'igc-tabs'"
            },
            {
              "kind": "method",
              "name": "register",
              "privacy": "public",
              "static": true,
              "return": {
                "type": {
                  "text": "void"
                }
              }
            },
            {
              "kind": "field",
              "name": "_resizeController",
              "privacy": "private",
              "readonly": true
            },
            {
              "kind": "field",
              "name": "_headerRef",
              "privacy": "private",
              "readonly": true,
              "description": "The tabs container reference holding the tab headers."
            },
            {
              "kind": "field",
              "name": "_indicatorRef",
              "privacy": "private",
              "readonly": true,
              "description": "The selected tab indicator reference."
            },
            {
              "kind": "field",
              "name": "_domHelpers",
              "privacy": "private",
              "readonly": true
            },
            {
              "kind": "field",
              "name": "_tabs",
              "type": {
                "text": "IgcTabComponent[]"
              },
              "privacy": "private"
            },
            {
              "kind": "field",
              "name": "_enabledTabs",
              "type": {
                "text": "IgcTabComponent[]"
              },
              "privacy": "protected",
              "readonly": true
            },
            {
              "kind": "field",
              "name": "_activeTab",
              "type": {
                "text": "IgcTabComponent | undefined"
              },
              "privacy": "private"
            },
            {
              "kind": "field",
              "name": "alignment",
              "type": {
                "text": "TabsAlignment"
              },
              "privacy": "public",
              "default": "'start'",
              "description": "Sets the alignment for the tab headers",
              "attribute": "alignment",
              "reflects": true,
              "expandedType": {
                "text": "'start' | 'end' | 'center' | 'justify'"
              }
            },
            {
              "kind": "field",
              "name": "activation",
              "type": {
                "text": "TabsActivation"
              },
              "privacy": "public",
              "default": "'auto'",
              "description": "Determines the tab activation. When set to auto,\nthe tab is instantly selected while navigating with the Left/Right Arrows, Home or End keys\nand the corresponding panel is displayed.\nWhen set to manual, the tab is only focused. The selection happens after pressing Space or Enter.",
              "attribute": "activation",
              "expandedType": {
                "text": "'auto' | 'manual'"
              }
            },
            {
              "kind": "field",
              "name": "tabs",
              "type": {
                "text": "IgcTabComponent[]"
              },
              "privacy": "public",
              "description": "Returns the direct `igc-tab` elements that are children of this element.",
              "readonly": true
            },
            {
              "kind": "field",
              "name": "selected",
              "type": {
                "text": "string"
              },
              "privacy": "public",
              "description": "Returns the currently selected tab label or IDREF if no label property is set.",
              "readonly": true
            },
            {
              "kind": "method",
              "name": "_alignmentChanged",
              "privacy": "protected",
              "return": {
                "type": {
                  "text": "void"
                }
              }
            },
            {
              "kind": "method",
              "name": "_resizeCallback",
              "privacy": "private",
              "return": {
                "type": {
                  "text": "void"
                }
              }
            },
            {
              "kind": "method",
              "name": "_mutationCallback",
              "privacy": "private",
              "return": {
                "type": {
                  "text": "void"
                }
              },
              "parameters": [
                {
                  "name": "parameters",
                  "type": {
                    "text": "MutationControllerParams<IgcTabComponent>"
                  }
                }
              ]
            },
            {
              "kind": "method",
              "name": "_selectedAttributeChanged",
              "privacy": "private",
              "return": {
                "type": {
                  "text": "void"
                }
              },
              "parameters": [
                {
                  "name": "{\n    changes,\n  }",
                  "type": {
                    "text": "MutationControllerParams<IgcTabComponent>"
                  }
                }
              ]
            },
            {
              "kind": "method",
              "name": "_handleTabsAdded",
              "privacy": "private",
              "return": {
                "type": {
                  "text": "void"
                }
              },
              "parameters": [
                {
                  "name": "{\n    changes,\n  }",
                  "type": {
                    "text": "MutationControllerParams<IgcTabComponent>"
                  }
                }
              ]
            },
            {
              "kind": "method",
              "name": "_handleTabsRemoved",
              "privacy": "private",
              "return": {
                "type": {
                  "text": "void"
                }
              },
              "parameters": [
                {
                  "name": "{\n    changes,\n  }",
                  "type": {
                    "text": "MutationControllerParams<IgcTabComponent>"
                  }
                }
              ]
            },
            {
              "kind": "method",
              "name": "_getClosestActiveTabIndex",
              "privacy": "private",
              "return": {
                "type": {
                  "text": "number"
                }
              }
            },
            {
              "kind": "method",
              "name": "_setSelectedTab",
              "privacy": "private",
              "return": {
                "type": {
                  "text": "void"
                }
              },
              "parameters": [
                {
                  "name": "tab",
                  "optional": true,
                  "type": {
                    "text": "IgcTabComponent"
                  }
                },
                {
                  "name": "shouldEmit",
                  "default": "true"
                }
              ]
            },
            {
              "kind": "method",
              "name": "_keyboardActivateTab",
              "privacy": "private",
              "parameters": [
                {
                  "name": "tab",
                  "type": {
                    "text": "IgcTabComponent"
                  }
                }
              ]
            },
            {
              "kind": "method",
              "name": "_skipKeyboard",
              "privacy": "private",
              "return": {
                "type": {
                  "text": "boolean"
                }
              },
              "parameters": [
                {
                  "name": "node",
                  "type": {
                    "text": "Element"
                  }
                },
                {
                  "name": "event",
                  "type": {
                    "text": "KeyboardEvent"
                  }
                }
              ]
            },
            {
              "kind": "method",
              "name": "_isEventFromTabHeader",
              "privacy": "private",
              "parameters": [
                {
                  "name": "event",
                  "type": {
                    "text": "Event"
                  }
                }
              ]
            },
            {
              "kind": "method",
              "name": "_handleArrowKeys",
              "privacy": "protected",
              "return": {
                "type": {
                  "text": "void"
                }
              },
              "parameters": [
                {
                  "name": "delta",
                  "type": {
                    "text": "-1 | 1"
                  }
                }
              ]
            },
            {
              "kind": "method",
              "name": "_handleHomeKey",
              "privacy": "protected",
              "return": {
                "type": {
                  "text": "void"
                }
              }
            },
            {
              "kind": "method",
              "name": "_handleEndKey",
              "privacy": "protected",
              "return": {
                "type": {
                  "text": "void"
                }
              }
            },
            {
              "kind": "method",
              "name": "_handleActivationKeys",
              "privacy": "protected",
              "return": {
                "type": {
                  "text": "void"
                }
              }
            },
            {
              "kind": "method",
              "name": "_handleClick",
              "privacy": "protected",
              "return": {
                "type": {
                  "text": "void"
                }
              },
              "parameters": [
                {
                  "name": "event",
                  "type": {
                    "text": "PointerEvent"
                  }
                }
              ]
            },
            {
              "kind": "method",
              "name": "_handleScroll",
              "privacy": "protected",
              "return": {
                "type": {
                  "text": "void"
                }
              }
            },
            {
              "kind": "method",
              "name": "select",
              "privacy": "public",
              "return": {
                "type": {
                  "text": "void"
                }
              },
              "parameters": [
                {
                  "name": "id",
                  "type": {
                    "text": "string"
                  }
                }
              ],
              "description": "Selects the specified tab and displays the corresponding panel."
            },
            {
              "kind": "method",
              "name": "select",
              "privacy": "public",
              "return": {
                "type": {
                  "text": "void"
                }
              },
              "parameters": [
                {
                  "name": "ref",
                  "type": {
                    "text": "IgcTabComponent"
                  }
                }
              ]
            },
            {
              "kind": "method",
              "name": "select",
              "privacy": "public",
              "return": {
                "type": {
                  "text": "void"
                }
              },
              "parameters": [
                {
                  "name": "ref",
                  "type": {
                    "text": "IgcTabComponent | string"
                  }
                }
              ]
            },
            {
              "kind": "method",
              "name": "_renderScrollButton",
              "privacy": "protected",
              "parameters": [
                {
                  "name": "direction",
                  "type": {
                    "text": "'start' | 'end'"
                  }
                }
              ]
            },
            {
              "kind": "method",
              "name": "addEventListener",
              "privacy": "public",
              "return": {
                "type": {
                  "text": "void"
                }
              },
              "parameters": [
                {
                  "name": "type",
                  "type": {
                    "text": "K"
                  }
                },
                {
                  "name": "listener",
                  "type": {
                    "text": "(this: HTMLElement, ev: M[K]) => any"
                  }
                },
                {
                  "name": "options",
                  "optional": true,
                  "type": {
                    "text": "boolean | AddEventListenerOptions"
                  }
                }
              ],
              "inheritedFrom": {
                "name": "EventEmitterMixin",
                "module": "src/components/common/mixins/event-emitter.ts"
              }
            },
            {
              "kind": "method",
              "name": "removeEventListener",
              "privacy": "public",
              "return": {
                "type": {
                  "text": "void"
                }
              },
              "parameters": [
                {
                  "name": "type",
                  "type": {
                    "text": "K"
                  }
                },
                {
                  "name": "listener",
                  "type": {
                    "text": "(this: HTMLElement, ev: M[K]) => any"
                  }
                },
                {
                  "name": "options",
                  "optional": true,
                  "type": {
                    "text": "boolean | EventListenerOptions"
                  }
                }
              ],
              "inheritedFrom": {
                "name": "EventEmitterMixin",
                "module": "src/components/common/mixins/event-emitter.ts"
              }
            },
            {
              "kind": "method",
              "name": "emitEvent",
              "privacy": "private",
              "return": {
                "type": {
                  "text": "boolean"
                }
              },
              "parameters": [
                {
                  "name": "type",
                  "type": {
                    "text": "K"
                  }
                },
                {
                  "name": "eventInitDict",
                  "optional": true,
                  "type": {
                    "text": "CustomEventInit<D>"
                  }
                }
              ],
              "inheritedFrom": {
                "name": "EventEmitterMixin",
                "module": "src/components/common/mixins/event-emitter.ts"
              }
            }
          ],
          "events": [
            {
              "description": "Emitted when the selected tab changes.",
              "name": "igcChange"
            },
            {
              "type": {
                "text": "CustomEvent"
              },
              "inheritedFrom": {
                "name": "EventEmitterMixin",
                "module": "src/components/common/mixins/event-emitter.ts"
              }
            }
          ],
          "attributes": [
            {
              "name": "alignment",
              "type": {
                "text": "TabsAlignment"
              },
              "default": "'start'",
              "description": "Sets the alignment for the tab headers",
              "fieldName": "alignment",
              "attribute": "alignment",
              "expandedType": {
                "text": "'start' | 'end' | 'center' | 'justify'"
              }
            },
            {
              "name": "activation",
              "type": {
                "text": "TabsActivation"
              },
              "default": "'auto'",
              "description": "Determines the tab activation. When set to auto,\nthe tab is instantly selected while navigating with the Left/Right Arrows, Home or End keys\nand the corresponding panel is displayed.\nWhen set to manual, the tab is only focused. The selection happens after pressing Space or Enter.",
              "fieldName": "activation",
              "attribute": "activation",
              "expandedType": {
                "text": "'auto' | 'manual'"
              }
            }
          ],
          "mixins": [
            {
              "name": "EventEmitterMixin",
              "module": "/src/components/common/mixins/event-emitter.js"
            }
          ],
          "superclass": {
            "name": "LitElement",
            "package": "lit"
          },
          "tagName": "igc-tabs",
          "customElement": true
        }
      ],
      "exports": [
        {
          "kind": "js",
          "name": "default",
          "declaration": {
            "name": "IgcTabsComponent",
            "module": "src/components/tabs/tabs.ts"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "src/components/toast/toast.ts",
      "declarations": [
        {
          "kind": "class",
          "description": "A toast component is used to show a notification",
          "name": "IgcToastComponent",
          "cssParts": [
            {
              "description": "The base wrapper of the toast.",
              "name": "base"
            }
          ],
          "members": [
            {
              "kind": "field",
              "name": "tagName",
              "type": {
                "text": "string"
              },
              "privacy": "public",
              "static": true,
              "readonly": true,
              "default": "'igc-toast'"
            },
            {
              "kind": "field",
              "name": "_player",
              "type": {
                "text": "AnimationController"
              },
              "privacy": "protected",
              "readonly": true,
              "inheritedFrom": {
                "name": "IgcBaseAlertLikeComponent",
                "module": "src/components/common/mixins/alert.ts"
              }
            },
            {
              "kind": "method",
              "name": "register",
              "privacy": "public",
              "static": true,
              "return": {
                "type": {
                  "text": "void"
                }
              }
            },
            {
              "kind": "field",
              "name": "_autoHideTimeout",
              "type": {
                "text": "ReturnType<typeof setTimeout> | undefined"
              },
              "privacy": "protected",
              "inheritedFrom": {
                "name": "IgcBaseAlertLikeComponent",
                "module": "src/components/common/mixins/alert.ts"
              }
            },
            {
              "kind": "field",
              "name": "open",
              "type": {
                "text": "boolean"
              },
              "privacy": "public",
              "default": "false",
              "description": "Whether the component is in shown state.",
              "attribute": "open",
              "reflects": true,
              "inheritedFrom": {
                "name": "IgcBaseAlertLikeComponent",
                "module": "src/components/common/mixins/alert.ts"
              }
            },
            {
              "kind": "field",
              "name": "displayTime",
              "type": {
                "text": "number"
              },
              "privacy": "public",
              "default": "4000",
              "description": "Determines the duration in ms in which the component will be visible.",
              "attribute": "display-time",
              "inheritedFrom": {
                "name": "IgcBaseAlertLikeComponent",
                "module": "src/components/common/mixins/alert.ts"
              }
            },
            {
              "kind": "field",
              "name": "keepOpen",
              "type": {
                "text": "boolean"
              },
              "privacy": "public",
              "default": "false",
              "description": "Determines whether the component should close after the `displayTime` is over.",
              "attribute": "keep-open",
              "reflects": true,
              "inheritedFrom": {
                "name": "IgcBaseAlertLikeComponent",
                "module": "src/components/common/mixins/alert.ts"
              }
            },
            {
              "kind": "field",
              "name": "position",
              "type": {
                "text": "AbsolutePosition"
              },
              "privacy": "public",
              "default": "'bottom'",
              "description": "Sets the position of the component in the viewport.",
              "attribute": "position",
              "reflects": true,
              "expandedType": {
                "text": "'bottom' | 'middle' | 'top'"
              },
              "inheritedFrom": {
                "name": "IgcBaseAlertLikeComponent",
                "module": "src/components/common/mixins/alert.ts"
              }
            },
            {
              "kind": "method",
              "name": "_setOpenState",
              "privacy": "private",
              "return": {
                "type": {
                  "text": "Promise<boolean>"
                }
              },
              "parameters": [
                {
                  "name": "open",
                  "type": {
                    "text": "boolean"
                  }
                }
              ],
              "inheritedFrom": {
                "name": "IgcBaseAlertLikeComponent",
                "module": "src/components/common/mixins/alert.ts"
              }
            },
            {
              "kind": "method",
              "name": "_setAutoHideTimer",
              "privacy": "private",
              "return": {
                "type": {
                  "text": "void"
                }
              },
              "inheritedFrom": {
                "name": "IgcBaseAlertLikeComponent",
                "module": "src/components/common/mixins/alert.ts"
              }
            },
            {
              "kind": "method",
              "name": "show",
              "privacy": "public",
              "return": {
                "type": {
                  "text": "Promise<boolean>"
                }
              },
              "description": "Opens the component.",
              "inheritedFrom": {
                "name": "IgcBaseAlertLikeComponent",
                "module": "src/components/common/mixins/alert.ts"
              }
            },
            {
              "kind": "method",
              "name": "hide",
              "privacy": "public",
              "return": {
                "type": {
                  "text": "Promise<boolean>"
                }
              },
              "description": "Closes the component.",
              "inheritedFrom": {
                "name": "IgcBaseAlertLikeComponent",
                "module": "src/components/common/mixins/alert.ts"
              }
            },
            {
              "kind": "method",
              "name": "toggle",
              "privacy": "public",
              "return": {
                "type": {
                  "text": "Promise<boolean>"
                }
              },
              "description": "Toggles the open state of the component.",
              "inheritedFrom": {
                "name": "IgcBaseAlertLikeComponent",
                "module": "src/components/common/mixins/alert.ts"
              }
            }
          ],
          "superclass": {
            "name": "IgcBaseAlertLikeComponent",
            "module": "/src/components/common/mixins/alert.js"
          },
          "tagName": "igc-toast",
          "customElement": true,
          "attributes": [
            {
              "name": "open",
              "type": {
                "text": "boolean"
              },
              "default": "false",
              "description": "Whether the component is in shown state.",
              "fieldName": "open",
              "attribute": "open",
              "inheritedFrom": {
                "name": "IgcBaseAlertLikeComponent",
                "module": "src/components/common/mixins/alert.ts"
              }
            },
            {
              "name": "display-time",
              "type": {
                "text": "number"
              },
              "default": "4000",
              "description": "Determines the duration in ms in which the component will be visible.",
              "fieldName": "displayTime",
              "attribute": "display-time",
              "inheritedFrom": {
                "name": "IgcBaseAlertLikeComponent",
                "module": "src/components/common/mixins/alert.ts"
              }
            },
            {
              "name": "keep-open",
              "type": {
                "text": "boolean"
              },
              "default": "false",
              "description": "Determines whether the component should close after the `displayTime` is over.",
              "fieldName": "keepOpen",
              "attribute": "keep-open",
              "inheritedFrom": {
                "name": "IgcBaseAlertLikeComponent",
                "module": "src/components/common/mixins/alert.ts"
              }
            },
            {
              "name": "position",
              "type": {
                "text": "AbsolutePosition"
              },
              "default": "'bottom'",
              "description": "Sets the position of the component in the viewport.",
              "fieldName": "position",
              "attribute": "position",
              "expandedType": {
                "text": "'bottom' | 'middle' | 'top'"
              },
              "inheritedFrom": {
                "name": "IgcBaseAlertLikeComponent",
                "module": "src/components/common/mixins/alert.ts"
              }
            }
          ]
        }
      ],
      "exports": [
        {
          "kind": "js",
          "name": "default",
          "declaration": {
            "name": "IgcToastComponent",
            "module": "src/components/toast/toast.ts"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "src/components/checkbox/switch.ts",
      "declarations": [
        {
          "kind": "class",
          "description": "Similar to a checkbox, a switch controls the state of a single setting on or off.",
          "name": "IgcSwitchComponent",
          "cssParts": [
            {
              "description": "The base wrapper of the switch.",
              "name": "base"
            },
            {
              "description": "The switch input element.",
              "name": "control"
            },
            {
              "description": "The position indicator of the switch.",
              "name": "thumb"
            },
            {
              "description": "The switch label.",
              "name": "label"
            }
          ],
          "slots": [
            {
              "description": "The switch label.",
              "name": ""
            }
          ],
          "members": [
            {
              "kind": "field",
              "name": "tagName",
              "type": {
                "text": "string"
              },
              "privacy": "public",
              "static": true,
              "readonly": true,
              "default": "'igc-switch'"
            },
            {
              "kind": "method",
              "name": "register",
              "privacy": "public",
              "static": true,
              "return": {
                "type": {
                  "text": "void"
                }
              }
            },
            {
              "kind": "field",
              "name": "increment",
              "privacy": "private",
              "static": true,
              "readonly": true
            },
            {
              "kind": "field",
              "name": "_inputId",
              "privacy": "private",
              "readonly": true,
              "default": "`switch-${IgcSwitchComponent.increment()}`"
            },
            {
              "kind": "field",
              "name": "_labelId",
              "privacy": "private",
              "readonly": true,
              "default": "`switch-label-${this._inputId}`"
            },
            {
              "kind": "field",
              "name": "_required",
              "type": {
                "text": "boolean"
              },
              "privacy": "protected",
              "default": "false",
              "inheritedFrom": {
                "name": "IgcCheckboxBaseComponent",
                "module": "src/components/checkbox/checkbox-base.ts"
              }
            },
            {
              "kind": "field",
              "name": "required",
              "privacy": "public",
              "description": "When set, makes the component a required field for validation.",
              "default": "false",
              "attribute": "required",
              "type": {
                "text": "boolean"
              },
              "reflects": true,
              "inheritedFrom": {
                "name": "IgcCheckboxBaseComponent",
                "module": "src/components/checkbox/checkbox-base.ts"
              }
            },
            {
              "kind": "field",
              "name": "defaultChecked",
              "privacy": "public",
              "type": {
                "text": "boolean"
              },
              "inheritedFrom": {
                "name": "IgcCheckboxBaseComponent",
                "module": "src/components/checkbox/checkbox-base.ts"
              }
            },
            {
              "kind": "field",
              "name": "formAssociated",
              "type": {
                "text": "boolean"
              },
              "privacy": "public",
              "static": true,
              "readonly": true,
              "default": "true",
              "inheritedFrom": {
                "name": "IgcCheckboxBaseComponent",
                "module": "src/components/checkbox/checkbox-base.ts"
              }
            },
            {
              "kind": "field",
              "name": "__internals",
              "type": {
                "text": "ElementInternals"
              },
              "privacy": "private",
              "inheritedFrom": {
                "name": "IgcCheckboxBaseComponent",
                "module": "src/components/checkbox/checkbox-base.ts"
              }
            },
            {
              "kind": "field",
              "name": "_formValue",
              "type": {
                "text": "FormValue<unknown>"
              },
              "privacy": "protected",
              "readonly": true,
              "inheritedFrom": {
                "name": "IgcCheckboxBaseComponent",
                "module": "src/components/checkbox/checkbox-base.ts"
              }
            },
            {
              "kind": "field",
              "name": "_disabled",
              "type": {
                "text": "boolean"
              },
              "privacy": "protected",
              "default": "false",
              "inheritedFrom": {
                "name": "IgcCheckboxBaseComponent",
                "module": "src/components/checkbox/checkbox-base.ts"
              }
            },
            {
              "kind": "field",
              "name": "_invalid",
              "type": {
                "text": "boolean"
              },
              "privacy": "protected",
              "default": "false",
              "inheritedFrom": {
                "name": "IgcCheckboxBaseComponent",
                "module": "src/components/checkbox/checkbox-base.ts"
              }
            },
            {
              "kind": "field",
              "name": "_dirty",
              "type": {
                "text": "boolean"
              },
              "privacy": "protected",
              "default": "false",
              "inheritedFrom": {
                "name": "IgcCheckboxBaseComponent",
                "module": "src/components/checkbox/checkbox-base.ts"
              }
            },
            {
              "kind": "field",
              "name": "_pristine",
              "type": {
                "text": "boolean"
              },
              "privacy": "protected",
              "default": "true",
              "inheritedFrom": {
                "name": "IgcCheckboxBaseComponent",
                "module": "src/components/checkbox/checkbox-base.ts"
              }
            },
            {
              "kind": "field",
              "name": "__validators",
              "type": {
                "text": "Validator[]"
              },
              "privacy": "protected",
              "readonly": true,
              "inheritedFrom": {
                "name": "IgcCheckboxBaseComponent",
                "module": "src/components/checkbox/checkbox-base.ts"
              }
            },
            {
              "kind": "field",
              "name": "name",
              "type": {
                "text": "string"
              },
              "privacy": "public",
              "description": "The name attribute of the control.",
              "attribute": "name",
              "reflects": true,
              "inheritedFrom": {
                "name": "IgcCheckboxBaseComponent",
                "module": "src/components/checkbox/checkbox-base.ts"
              }
            },
            {
              "kind": "field",
              "name": "disabled",
              "privacy": "public",
              "description": "The disabled state of the component.",
              "default": "false",
              "attribute": "disabled",
              "type": {
                "text": "boolean"
              },
              "reflects": true,
              "inheritedFrom": {
                "name": "IgcCheckboxBaseComponent",
                "module": "src/components/checkbox/checkbox-base.ts"
              }
            },
            {
              "kind": "field",
              "name": "invalid",
              "privacy": "public",
              "description": "Sets the control into invalid state (visual state only).",
              "default": "false",
              "attribute": "invalid",
              "type": {
                "text": "boolean"
              },
              "reflects": true,
              "inheritedFrom": {
                "name": "IgcCheckboxBaseComponent",
                "module": "src/components/checkbox/checkbox-base.ts"
              }
            },
            {
              "kind": "field",
              "name": "form",
              "type": {
                "text": "HTMLFormElement | null"
              },
              "privacy": "public",
              "description": "Returns the HTMLFormElement associated with this element.",
              "readonly": true,
              "inheritedFrom": {
                "name": "IgcCheckboxBaseComponent",
                "module": "src/components/checkbox/checkbox-base.ts"
              }
            },
            {
              "kind": "field",
              "name": "validity",
              "type": {
                "text": "ValidityState"
              },
              "privacy": "public",
              "description": "Returns a ValidityState object which represents the different validity states\nthe element can be in, with respect to constraint validation.",
              "readonly": true,
              "inheritedFrom": {
                "name": "IgcCheckboxBaseComponent",
                "module": "src/components/checkbox/checkbox-base.ts"
              }
            },
            {
              "kind": "field",
              "name": "validationMessage",
              "type": {
                "text": "string"
              },
              "privacy": "public",
              "description": "A string containing the validation message of this element.",
              "readonly": true,
              "inheritedFrom": {
                "name": "IgcCheckboxBaseComponent",
                "module": "src/components/checkbox/checkbox-base.ts"
              }
            },
            {
              "kind": "field",
              "name": "willValidate",
              "type": {
                "text": "boolean"
              },
              "privacy": "public",
              "description": "A boolean value which returns true if the element is a submittable element\nthat is a candidate for constraint validation.",
              "readonly": true,
              "inheritedFrom": {
                "name": "IgcCheckboxBaseComponent",
                "module": "src/components/checkbox/checkbox-base.ts"
              }
            },
            {
              "kind": "method",
              "name": "_handleInvalid",
              "privacy": "private",
              "parameters": [
                {
                  "name": "event",
                  "type": {
                    "text": "Event"
                  }
                }
              ],
              "inheritedFrom": {
                "name": "IgcCheckboxBaseComponent",
                "module": "src/components/checkbox/checkbox-base.ts"
              }
            },
            {
              "kind": "method",
              "name": "_setInvalidState",
              "privacy": "private",
              "return": {
                "type": {
                  "text": "void"
                }
              },
              "inheritedFrom": {
                "name": "IgcCheckboxBaseComponent",
                "module": "src/components/checkbox/checkbox-base.ts"
              }
            },
            {
              "kind": "method",
              "name": "__runValidators",
              "privacy": "private",
              "inheritedFrom": {
                "name": "IgcCheckboxBaseComponent",
                "module": "src/components/checkbox/checkbox-base.ts"
              }
            },
            {
              "kind": "method",
              "name": "_setDefaultValue",
              "privacy": "protected",
              "return": {
                "type": {
                  "text": "void"
                }
              },
              "parameters": [
                {
                  "name": "current",
                  "type": {
                    "text": "string | null"
                  }
                }
              ],
              "inheritedFrom": {
                "name": "IgcCheckboxBaseComponent",
                "module": "src/components/checkbox/checkbox-base.ts"
              }
            },
            {
              "kind": "method",
              "name": "_restoreDefaultValue",
              "privacy": "protected",
              "return": {
                "type": {
                  "text": "void"
                }
              },
              "inheritedFrom": {
                "name": "IgcCheckboxBaseComponent",
                "module": "src/components/checkbox/checkbox-base.ts"
              }
            },
            {
              "kind": "method",
              "name": "_validate",
              "privacy": "protected",
              "return": {
                "type": {
                  "text": "void"
                }
              },
              "parameters": [
                {
                  "name": "message",
                  "optional": true,
                  "type": {
                    "text": "string"
                  }
                }
              ],
              "inheritedFrom": {
                "name": "IgcCheckboxBaseComponent",
                "module": "src/components/checkbox/checkbox-base.ts"
              }
            },
            {
              "kind": "method",
              "name": "_updateValidity",
              "privacy": "protected",
              "parameters": [
                {
                  "name": "error",
                  "optional": true,
                  "type": {
                    "text": "string"
                  }
                }
              ],
              "description": "Executes the component validators and updates the internal validity state.",
              "inheritedFrom": {
                "name": "IgcCheckboxBaseComponent",
                "module": "src/components/checkbox/checkbox-base.ts"
              }
            },
            {
              "kind": "method",
              "name": "_setFormValue",
              "privacy": "protected",
              "return": {
                "type": {
                  "text": "void"
                }
              },
              "parameters": [
                {
                  "name": "value",
                  "type": {
                    "text": "FormValueType"
                  }
                },
                {
                  "name": "state",
                  "optional": true,
                  "type": {
                    "text": "FormValueType"
                  }
                }
              ],
              "inheritedFrom": {
                "name": "IgcCheckboxBaseComponent",
                "module": "src/components/checkbox/checkbox-base.ts"
              }
            },
            {
              "kind": "method",
              "name": "formAssociatedCallback",
              "privacy": "protected",
              "return": {
                "type": {
                  "text": "void"
                }
              },
              "parameters": [
                {
                  "name": "_form",
                  "type": {
                    "text": "HTMLFormElement"
                  }
                }
              ],
              "inheritedFrom": {
                "name": "IgcCheckboxBaseComponent",
                "module": "src/components/checkbox/checkbox-base.ts"
              }
            },
            {
              "kind": "method",
              "name": "formDisabledCallback",
              "privacy": "protected",
              "return": {
                "type": {
                  "text": "void"
                }
              },
              "parameters": [
                {
                  "name": "state",
                  "type": {
                    "text": "boolean"
                  }
                }
              ],
              "inheritedFrom": {
                "name": "IgcCheckboxBaseComponent",
                "module": "src/components/checkbox/checkbox-base.ts"
              }
            },
            {
              "kind": "method",
              "name": "formResetCallback",
              "privacy": "protected",
              "return": {
                "type": {
                  "text": "void"
                }
              },
              "inheritedFrom": {
                "name": "IgcCheckboxBaseComponent",
                "module": "src/components/checkbox/checkbox-base.ts"
              }
            },
            {
              "kind": "method",
              "name": "formStateRestoreCallback",
              "privacy": "protected",
              "return": {
                "type": {
                  "text": "void"
                }
              },
              "parameters": [
                {
                  "name": "_state",
                  "type": {
                    "text": "FormValueType"
                  }
                },
                {
                  "name": "_mode",
                  "type": {
                    "text": "FormRestoreMode"
                  }
                }
              ],
              "inheritedFrom": {
                "name": "IgcCheckboxBaseComponent",
                "module": "src/components/checkbox/checkbox-base.ts"
              }
            },
            {
              "kind": "method",
              "name": "reportValidity",
              "privacy": "public",
              "description": "Checks for validity of the control and shows the browser message if it invalid.",
              "inheritedFrom": {
                "name": "IgcCheckboxBaseComponent",
                "module": "src/components/checkbox/checkbox-base.ts"
              }
            },
            {
              "kind": "method",
              "name": "checkValidity",
              "privacy": "public",
              "description": "Checks for validity of the control and emits the invalid event if it invalid.",
              "inheritedFrom": {
                "name": "IgcCheckboxBaseComponent",
                "module": "src/components/checkbox/checkbox-base.ts"
              }
            },
            {
              "kind": "method",
              "name": "setCustomValidity",
              "privacy": "public",
              "parameters": [
                {
                  "name": "message",
                  "type": {
                    "text": "string"
                  }
                }
              ],
              "description": "Sets a custom validation message for the control.\nAs long as `message` is not empty, the control is considered invalid.",
              "inheritedFrom": {
                "name": "IgcCheckboxBaseComponent",
                "module": "src/components/checkbox/checkbox-base.ts"
              }
            },
            {
              "kind": "method",
              "name": "addEventListener",
              "privacy": "public",
              "return": {
                "type": {
                  "text": "void"
                }
              },
              "parameters": [
                {
                  "name": "type",
                  "type": {
                    "text": "K"
                  }
                },
                {
                  "name": "listener",
                  "type": {
                    "text": "(this: HTMLElement, ev: M[K]) => any"
                  }
                },
                {
                  "name": "options",
                  "optional": true,
                  "type": {
                    "text": "boolean | AddEventListenerOptions"
                  }
                }
              ],
              "inheritedFrom": {
                "name": "IgcCheckboxBaseComponent",
                "module": "src/components/checkbox/checkbox-base.ts"
              }
            },
            {
              "kind": "method",
              "name": "removeEventListener",
              "privacy": "public",
              "return": {
                "type": {
                  "text": "void"
                }
              },
              "parameters": [
                {
                  "name": "type",
                  "type": {
                    "text": "K"
                  }
                },
                {
                  "name": "listener",
                  "type": {
                    "text": "(this: HTMLElement, ev: M[K]) => any"
                  }
                },
                {
                  "name": "options",
                  "optional": true,
                  "type": {
                    "text": "boolean | EventListenerOptions"
                  }
                }
              ],
              "inheritedFrom": {
                "name": "IgcCheckboxBaseComponent",
                "module": "src/components/checkbox/checkbox-base.ts"
              }
            },
            {
              "kind": "method",
              "name": "emitEvent",
              "privacy": "private",
              "return": {
                "type": {
                  "text": "boolean"
                }
              },
              "parameters": [
                {
                  "name": "type",
                  "type": {
                    "text": "K"
                  }
                },
                {
                  "name": "eventInitDict",
                  "optional": true,
                  "type": {
                    "text": "CustomEventInit<D>"
                  }
                }
              ],
              "inheritedFrom": {
                "name": "IgcCheckboxBaseComponent",
                "module": "src/components/checkbox/checkbox-base.ts"
              }
            },
            {
              "kind": "field",
              "name": "_focusRingManager",
              "privacy": "protected",
              "readonly": true,
              "inheritedFrom": {
                "name": "IgcCheckboxBaseComponent",
                "module": "src/components/checkbox/checkbox-base.ts"
              }
            },
            {
              "kind": "field",
              "name": "_value",
              "type": {
                "text": "string"
              },
              "privacy": "protected",
              "inheritedFrom": {
                "name": "IgcCheckboxBaseComponent",
                "module": "src/components/checkbox/checkbox-base.ts"
              }
            },
            {
              "kind": "field",
              "name": "_input",
              "type": {
                "text": "HTMLInputElement"
              },
              "privacy": "protected",
              "readonly": true,
              "inheritedFrom": {
                "name": "IgcCheckboxBaseComponent",
                "module": "src/components/checkbox/checkbox-base.ts"
              }
            },
            {
              "kind": "field",
              "name": "_label",
              "type": {
                "text": "Array<Node>"
              },
              "privacy": "protected",
              "readonly": true,
              "inheritedFrom": {
                "name": "IgcCheckboxBaseComponent",
                "module": "src/components/checkbox/checkbox-base.ts"
              }
            },
            {
              "kind": "field",
              "name": "_hideLabel",
              "type": {
                "text": "boolean"
              },
              "privacy": "protected",
              "default": "false",
              "inheritedFrom": {
                "name": "IgcCheckboxBaseComponent",
                "module": "src/components/checkbox/checkbox-base.ts"
              }
            },
            {
              "kind": "field",
              "name": "value",
              "privacy": "public",
              "description": "The value attribute of the control.",
              "attribute": "value",
              "type": {
                "text": "string"
              },
              "inheritedFrom": {
                "name": "IgcCheckboxBaseComponent",
                "module": "src/components/checkbox/checkbox-base.ts"
              }
            },
            {
              "kind": "field",
              "name": "checked",
              "privacy": "public",
              "description": "The checked state of the control.",
              "attribute": "checked",
              "type": {
                "text": "boolean"
              },
              "inheritedFrom": {
                "name": "IgcCheckboxBaseComponent",
                "module": "src/components/checkbox/checkbox-base.ts"
              }
            },
            {
              "kind": "field",
              "name": "labelPosition",
              "type": {
                "text": "ToggleLabelPosition"
              },
              "privacy": "public",
              "default": "'after'",
              "description": "The label position of the control.",
              "attribute": "label-position",
              "reflects": true,
              "expandedType": {
                "text": "'after' | 'before'"
              },
              "inheritedFrom": {
                "name": "IgcCheckboxBaseComponent",
                "module": "src/components/checkbox/checkbox-base.ts"
              }
            },
            {
              "kind": "method",
              "name": "click",
              "privacy": "public",
              "return": {
                "type": {
                  "text": "void"
                }
              },
              "description": "Simulates a click on the control.",
              "inheritedFrom": {
                "name": "IgcCheckboxBaseComponent",
                "module": "src/components/checkbox/checkbox-base.ts"
              }
            },
            {
              "kind": "method",
              "name": "focus",
              "privacy": "public",
              "return": {
                "type": {
                  "text": "void"
                }
              },
              "parameters": [
                {
                  "name": "options",
                  "optional": true,
                  "type": {
                    "text": "FocusOptions"
                  }
                }
              ],
              "description": "Sets focus on the control.",
              "inheritedFrom": {
                "name": "IgcCheckboxBaseComponent",
                "module": "src/components/checkbox/checkbox-base.ts"
              }
            },
            {
              "kind": "method",
              "name": "blur",
              "privacy": "public",
              "return": {
                "type": {
                  "text": "void"
                }
              },
              "description": "Removes focus from the control.",
              "inheritedFrom": {
                "name": "IgcCheckboxBaseComponent",
                "module": "src/components/checkbox/checkbox-base.ts"
              }
            },
            {
              "kind": "method",
              "name": "_handleClick",
              "privacy": "protected",
              "return": {
                "type": {
                  "text": "void"
                }
              },
              "parameters": [
                {
                  "name": "event",
                  "type": {
                    "text": "PointerEvent"
                  }
                }
              ],
              "inheritedFrom": {
                "name": "IgcCheckboxBaseComponent",
                "module": "src/components/checkbox/checkbox-base.ts"
              }
            },
            {
              "kind": "method",
              "name": "_handleFocus",
              "privacy": "protected",
              "return": {
                "type": {
                  "text": "void"
                }
              },
              "inheritedFrom": {
                "name": "IgcCheckboxBaseComponent",
                "module": "src/components/checkbox/checkbox-base.ts"
              }
            }
          ],
          "events": [
            {
              "description": "Emitted when the control's checked state changes.",
              "name": "igcChange"
            },
            {
              "type": {
                "text": "CustomEvent"
              },
              "inheritedFrom": {
                "name": "IgcCheckboxBaseComponent",
                "module": "src/components/checkbox/checkbox-base.ts"
              }
            }
          ],
          "superclass": {
            "name": "IgcCheckboxBaseComponent",
            "module": "/src/components/checkbox/checkbox-base.js"
          },
          "tagName": "igc-switch",
          "customElement": true,
          "attributes": [
            {
              "name": "required",
              "description": "When set, makes the component a required field for validation.",
              "default": "false",
              "fieldName": "required",
              "attribute": "required",
              "type": {
                "text": "boolean"
              },
              "inheritedFrom": {
                "name": "IgcCheckboxBaseComponent",
                "module": "src/components/checkbox/checkbox-base.ts"
              }
            },
            {
              "name": "name",
              "type": {
                "text": "string"
              },
              "description": "The name attribute of the control.",
              "fieldName": "name",
              "attribute": "name",
              "inheritedFrom": {
                "name": "IgcCheckboxBaseComponent",
                "module": "src/components/checkbox/checkbox-base.ts"
              }
            },
            {
              "name": "disabled",
              "description": "The disabled state of the component.",
              "default": "false",
              "fieldName": "disabled",
              "attribute": "disabled",
              "type": {
                "text": "boolean"
              },
              "inheritedFrom": {
                "name": "IgcCheckboxBaseComponent",
                "module": "src/components/checkbox/checkbox-base.ts"
              }
            },
            {
              "name": "invalid",
              "description": "Sets the control into invalid state (visual state only).",
              "default": "false",
              "fieldName": "invalid",
              "attribute": "invalid",
              "type": {
                "text": "boolean"
              },
              "inheritedFrom": {
                "name": "IgcCheckboxBaseComponent",
                "module": "src/components/checkbox/checkbox-base.ts"
              }
            },
            {
              "name": "value",
              "description": "The value attribute of the control.",
              "fieldName": "value",
              "attribute": "value",
              "type": {
                "text": "string"
              },
              "inheritedFrom": {
                "name": "IgcCheckboxBaseComponent",
                "module": "src/components/checkbox/checkbox-base.ts"
              }
            },
            {
              "name": "checked",
              "description": "The checked state of the control.",
              "fieldName": "checked",
              "attribute": "checked",
              "type": {
                "text": "boolean"
              },
              "inheritedFrom": {
                "name": "IgcCheckboxBaseComponent",
                "module": "src/components/checkbox/checkbox-base.ts"
              }
            },
            {
              "name": "label-position",
              "type": {
                "text": "ToggleLabelPosition"
              },
              "default": "'after'",
              "description": "The label position of the control.",
              "fieldName": "labelPosition",
              "attribute": "label-position",
              "expandedType": {
                "text": "'after' | 'before'"
              },
              "inheritedFrom": {
                "name": "IgcCheckboxBaseComponent",
                "module": "src/components/checkbox/checkbox-base.ts"
              }
            }
          ]
        }
      ],
      "exports": [
        {
          "kind": "js",
          "name": "default",
          "declaration": {
            "name": "IgcSwitchComponent",
            "module": "src/components/checkbox/switch.ts"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "src/components/textarea/validators.ts",
      "declarations": [
        {
          "kind": "variable",
          "name": "textAreaValidators",
          "type": {
            "text": "Validator<IgcTextareaComponent>[]"
          },
          "default": "[ requiredValidator, minLengthValidator, maxLengthValidator, ]"
        }
      ],
      "exports": [
        {
          "kind": "js",
          "name": "textAreaValidators",
          "declaration": {
            "name": "textAreaValidators",
            "module": "src/components/textarea/validators.ts"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "src/components/textarea/textarea.ts",
      "declarations": [
        {
          "kind": "class",
          "description": "This element represents a multi-line plain-text editing control,\nuseful when you want to allow users to enter a sizeable amount of free-form text,\nfor example a comment on a review or feedback form.",
          "name": "IgcTextareaComponent",
          "cssParts": [
            {
              "description": "The main wrapper that holds all main input elements of the textarea.",
              "name": "container"
            },
            {
              "description": "The native input element of the igc-textarea.",
              "name": "input"
            },
            {
              "description": "The native label element of the igc-textarea.",
              "name": "label"
            },
            {
              "description": "The prefix wrapper of the igc-textarea.",
              "name": "prefix"
            },
            {
              "description": "The suffix wrapper of the igc-textarea.",
              "name": "suffix"
            },
            {
              "description": "The helper text wrapper of the igc-textarea.",
              "name": "helper-text"
            }
          ],
          "slots": [
            {
              "description": "Text content from the default slot will be used as the value of the component.",
              "name": ""
            },
            {
              "description": "Renders content before the input.",
              "name": "prefix"
            },
            {
              "description": "Renders content after input.",
              "name": "suffix"
            },
            {
              "description": "Renders content below the input.",
              "name": "helper-text"
            },
            {
              "description": "Renders content when the required validation fails.",
              "name": "value-missing"
            },
            {
              "description": "Renders content when the maxlength validation fails.",
              "name": "too-long"
            },
            {
              "description": "Renders content when the minlength validation fails.",
              "name": "too-short"
            },
            {
              "description": "Renders content when setCustomValidity(message) is set.",
              "name": "custom-error"
            },
            {
              "description": "Renders content when the component is in invalid state (validity.valid = false).",
              "name": "invalid"
            }
          ],
          "members": [
            {
              "kind": "field",
              "name": "tagName",
              "type": {
                "text": "string"
              },
              "privacy": "public",
              "static": true,
              "readonly": true,
              "default": "'igc-textarea'"
            },
            {
              "kind": "method",
              "name": "register",
              "privacy": "public",
              "static": true,
              "return": {
                "type": {
                  "text": "void"
                }
              }
            },
            {
              "kind": "field",
              "name": "increment",
              "privacy": "private",
              "static": true,
              "readonly": true
            },
            {
              "kind": "field",
              "name": "_themes",
              "privacy": "private",
              "readonly": true
            },
            {
              "kind": "field",
              "name": "__validators",
              "type": {
                "text": "Validator[]"
              },
              "privacy": "protected",
              "readonly": true,
              "inheritedFrom": {
                "name": "BaseFormAssociated",
                "module": "src/components/common/mixins/forms/associated.ts"
              }
            },
            {
              "kind": "field",
              "name": "_formValue",
              "type": {
                "text": "FormValue<unknown>"
              },
              "privacy": "protected",
              "readonly": true,
              "inheritedFrom": {
                "name": "BaseFormAssociated",
                "module": "src/components/common/mixins/forms/associated.ts"
              }
            },
            {
              "kind": "field",
              "name": "_inputId",
              "privacy": "protected",
              "readonly": true,
              "default": "`textarea-${IgcTextareaComponent.increment()}`"
            },
            {
              "kind": "field",
              "name": "_projected",
              "type": {
                "text": "Node[]"
              },
              "privacy": "private",
              "readonly": true
            },
            {
              "kind": "field",
              "name": "_prefixes",
              "type": {
                "text": "HTMLElement[]"
              },
              "privacy": "protected",
              "readonly": true
            },
            {
              "kind": "field",
              "name": "_suffixes",
              "type": {
                "text": "HTMLElement[]"
              },
              "privacy": "protected",
              "readonly": true
            },
            {
              "kind": "field",
              "name": "_input",
              "type": {
                "text": "HTMLTextAreaElement"
              },
              "privacy": "private",
              "readonly": true
            },
            {
              "kind": "field",
              "name": "_resizeStyles",
              "type": {
                "text": "StyleInfo"
              },
              "privacy": "private",
              "readonly": true
            },
            {
              "kind": "field",
              "name": "autocomplete",
              "type": {
                "text": "string"
              },
              "privacy": "public",
              "description": "Specifies what if any permission the browser has to provide for automated assistance in filling out form field values,\nas well as guidance to the browser as to the type of information expected in the field.\nRefer to [this page](https://developer.mozilla.org/en-US/docs/Web/HTML/Attributes/autocomplete) for additional information.",
              "attribute": "autocomplete"
            },
            {
              "kind": "field",
              "name": "autocapitalize",
              "type": {
                "text": "string"
              },
              "privacy": "public",
              "description": "Controls whether and how text input is automatically capitalized as it is entered/edited by the user.\n\n[MDN documentation](https://developer.mozilla.org/en-US/docs/Web/HTML/Global_attributes/autocapitalize).",
              "attribute": "autocapitalize"
            },
            {
              "kind": "field",
              "name": "inputMode",
              "type": {
                "text": "string"
              },
              "privacy": "public",
              "description": "Hints at the type of data that might be entered by the user while editing the element or its contents.\nThis allows a browser to display an appropriate virtual keyboard.\n\n[MDN documentation](https://developer.mozilla.org/en-US/docs/Web/HTML/Global_attributes/inputmode)",
              "attribute": "inputmode"
            },
            {
              "kind": "field",
              "name": "label",
              "type": {
                "text": "string"
              },
              "privacy": "public",
              "description": "The label for the control.",
              "attribute": "label"
            },
            {
              "kind": "field",
              "name": "maxLength",
              "type": {
                "text": "number"
              },
              "privacy": "public",
              "description": "The maximum number of characters (UTF-16 code units) that the user can enter.\nIf this value isn't specified, the user can enter an unlimited number of characters.",
              "attribute": "maxlength"
            },
            {
              "kind": "field",
              "name": "minLength",
              "type": {
                "text": "number"
              },
              "privacy": "public",
              "description": "The minimum number of characters (UTF-16 code units) required that the user should enter.",
              "attribute": "minlength"
            },
            {
              "kind": "field",
              "name": "outlined",
              "type": {
                "text": "boolean"
              },
              "privacy": "public",
              "default": "false",
              "description": "Whether the control will have outlined appearance.",
              "attribute": "outlined",
              "reflects": true
            },
            {
              "kind": "field",
              "name": "placeholder",
              "type": {
                "text": "string"
              },
              "privacy": "public",
              "description": "The placeholder attribute of the control.",
              "attribute": "placeholder"
            },
            {
              "kind": "field",
              "name": "readOnly",
              "type": {
                "text": "boolean"
              },
              "privacy": "public",
              "default": "false",
              "description": "Makes the control a readonly field.",
              "attribute": "readonly",
              "reflects": true
            },
            {
              "kind": "field",
              "name": "resize",
              "type": {
                "text": "TextareaResize"
              },
              "privacy": "public",
              "default": "'vertical'",
              "description": "Controls whether the control can be resized.\nWhen `auto` is set, the control will try to expand and fit its content.",
              "attribute": "resize",
              "expandedType": {
                "text": "'vertical' | 'auto' | 'none'"
              }
            },
            {
              "kind": "field",
              "name": "rows",
              "type": {
                "text": "number"
              },
              "privacy": "public",
              "default": "2",
              "description": "The number of visible text lines for the control. If it is specified, it must be a positive integer.\nIf it is not specified, the default value is 2.",
              "attribute": "rows"
            },
            {
              "kind": "field",
              "name": "value",
              "privacy": "public",
              "description": "The value of the component",
              "attribute": "value",
              "type": {
                "text": "string"
              }
            },
            {
              "kind": "field",
              "name": "spellcheck",
              "type": {
                "text": "boolean"
              },
              "privacy": "public",
              "default": "true",
              "description": "Controls whether the element may be checked for spelling errors.",
              "attribute": "spellcheck"
            },
            {
              "kind": "field",
              "name": "wrap",
              "type": {
                "text": "'hard' | 'soft' | 'off'"
              },
              "privacy": "public",
              "default": "'soft'",
              "description": "Indicates how the control should wrap the value for form submission.\nRefer to [this page on MDN](https://developer.mozilla.org/en-US/docs/Web/HTML/Element/textarea#attributes)\nfor explanation of the available values.",
              "attribute": "wrap"
            },
            {
              "kind": "field",
              "name": "validateOnly",
              "type": {
                "text": "boolean"
              },
              "privacy": "public",
              "default": "false",
              "description": "Enables validation rules to be evaluated without restricting user input. This applies to the `maxLength` property\nwhen it is defined.",
              "attribute": "validate-only",
              "reflects": true
            },
            {
              "kind": "method",
              "name": "_valueChanged",
              "privacy": "protected",
              "return": {
                "type": {
                  "text": "Promise<void>"
                }
              }
            },
            {
              "kind": "method",
              "name": "_setAreaHeight",
              "privacy": "protected",
              "return": {
                "type": {
                  "text": "void"
                }
              }
            },
            {
              "kind": "method",
              "name": "_resolvePartNames",
              "privacy": "protected"
            },
            {
              "kind": "method",
              "name": "_setAutoHeight",
              "privacy": "private",
              "return": {
                "type": {
                  "text": "number"
                }
              }
            },
            {
              "kind": "method",
              "name": "_handleSlotChange",
              "privacy": "protected",
              "return": {
                "type": {
                  "text": "void"
                }
              },
              "parameters": [
                {
                  "name": "{ target }",
                  "type": {
                    "text": "Event"
                  }
                }
              ]
            },
            {
              "kind": "method",
              "name": "_handleInput",
              "privacy": "protected",
              "return": {
                "type": {
                  "text": "void"
                }
              }
            },
            {
              "kind": "method",
              "name": "_handleChange",
              "privacy": "protected",
              "return": {
                "type": {
                  "text": "void"
                }
              }
            },
            {
              "kind": "method",
              "name": "_handleFocus",
              "privacy": "protected",
              "return": {
                "type": {
                  "text": "void"
                }
              }
            },
            {
              "kind": "method",
              "name": "_handleBlur",
              "privacy": "protected",
              "return": {
                "type": {
                  "text": "void"
                }
              }
            },
            {
              "kind": "method",
              "name": "select",
              "privacy": "public",
              "return": {
                "type": {
                  "text": "void"
                }
              },
              "description": "Selects all text within the control."
            },
            {
              "kind": "method",
              "name": "setSelectionRange",
              "privacy": "public",
              "return": {
                "type": {
                  "text": "void"
                }
              },
              "parameters": [
                {
                  "name": "start",
                  "type": {
                    "text": "number"
                  }
                },
                {
                  "name": "end",
                  "type": {
                    "text": "number"
                  }
                },
                {
                  "name": "direction",
                  "default": "'none'",
                  "type": {
                    "text": "SelectionRangeDirection"
                  }
                }
              ],
              "description": "Sets the text selection range of the control"
            },
            {
              "kind": "method",
              "name": "setRangeText",
              "privacy": "public",
              "return": {
                "type": {
                  "text": "void"
                }
              },
              "parameters": [
                {
                  "name": "replacement",
                  "type": {
                    "text": "string"
                  }
                },
                {
                  "name": "start",
                  "type": {
                    "text": "number"
                  }
                },
                {
                  "name": "end",
                  "type": {
                    "text": "number"
                  }
                },
                {
                  "name": "selectMode",
                  "default": "'preserve'",
                  "type": {
                    "text": "RangeTextSelectMode"
                  }
                }
              ],
              "description": "Replaces the selected text in the control."
            },
            {
              "kind": "method",
              "name": "scrollTo",
              "privacy": "public",
              "return": {
                "type": {
                  "text": "void"
                }
              },
              "parameters": [
                {
                  "name": "options",
                  "optional": true,
                  "type": {
                    "text": "ScrollToOptions | undefined"
                  }
                }
              ]
            },
            {
              "kind": "method",
              "name": "scrollTo",
              "privacy": "public",
              "return": {
                "type": {
                  "text": "void"
                }
              },
              "parameters": [
                {
                  "name": "x",
                  "type": {
                    "text": "number"
                  }
                },
                {
                  "name": "y",
                  "type": {
                    "text": "number"
                  }
                }
              ]
            },
            {
              "kind": "method",
              "name": "scrollTo",
              "privacy": "public",
              "return": {
                "type": {
                  "text": "void"
                }
              },
              "parameters": [
                {
                  "name": "x",
                  "optional": true,
                  "type": {
                    "text": "unknown"
                  }
                },
                {
                  "name": "y",
                  "optional": true,
                  "type": {
                    "text": "unknown"
                  }
                }
              ]
            },
            {
              "kind": "method",
              "name": "_renderPrefix",
              "privacy": "protected"
            },
            {
              "kind": "method",
              "name": "_renderSuffix",
              "privacy": "protected"
            },
            {
              "kind": "method",
              "name": "_renderLabel",
              "privacy": "protected"
            },
            {
              "kind": "method",
              "name": "_renderStandard",
              "privacy": "protected"
            },
            {
              "kind": "method",
              "name": "_renderMaterial",
              "privacy": "protected"
            },
            {
              "kind": "method",
              "name": "_renderInput",
              "privacy": "protected"
            },
            {
              "kind": "method",
              "name": "_renderValidationContainer",
              "privacy": "protected",
              "return": {
                "type": {
                  "text": "TemplateResult"
                }
              }
            },
            {
              "kind": "field",
              "name": "_required",
              "type": {
                "text": "boolean"
              },
              "privacy": "protected",
              "default": "false",
              "inheritedFrom": {
                "name": "FormAssociatedRequiredMixin",
                "module": "src/components/common/mixins/forms/associated-required.ts"
              }
            },
            {
              "kind": "field",
              "name": "required",
              "privacy": "public",
              "description": "When set, makes the component a required field for validation.",
              "default": "false",
              "attribute": "required",
              "type": {
                "text": "boolean"
              },
              "reflects": true,
              "inheritedFrom": {
                "name": "FormAssociatedRequiredMixin",
                "module": "src/components/common/mixins/forms/associated-required.ts"
              }
            },
            {
              "kind": "field",
              "name": "defaultValue",
              "privacy": "public",
              "inheritedFrom": {
                "name": "FormAssociatedMixin",
                "module": "src/components/common/mixins/forms/associated.ts"
              }
            },
            {
              "kind": "field",
              "name": "formAssociated",
              "type": {
                "text": "boolean"
              },
              "privacy": "public",
              "static": true,
              "readonly": true,
              "default": "true",
              "inheritedFrom": {
                "name": "BaseFormAssociated",
                "module": "src/components/common/mixins/forms/associated.ts"
              }
            },
            {
              "kind": "field",
              "name": "__internals",
              "type": {
                "text": "ElementInternals"
              },
              "privacy": "private",
              "inheritedFrom": {
                "name": "BaseFormAssociated",
                "module": "src/components/common/mixins/forms/associated.ts"
              }
            },
            {
              "kind": "field",
              "name": "_disabled",
              "type": {
                "text": "boolean"
              },
              "privacy": "protected",
              "default": "false",
              "inheritedFrom": {
                "name": "BaseFormAssociated",
                "module": "src/components/common/mixins/forms/associated.ts"
              }
            },
            {
              "kind": "field",
              "name": "_invalid",
              "type": {
                "text": "boolean"
              },
              "privacy": "protected",
              "default": "false",
              "inheritedFrom": {
                "name": "BaseFormAssociated",
                "module": "src/components/common/mixins/forms/associated.ts"
              }
            },
            {
              "kind": "field",
              "name": "_dirty",
              "type": {
                "text": "boolean"
              },
              "privacy": "protected",
              "default": "false",
              "inheritedFrom": {
                "name": "BaseFormAssociated",
                "module": "src/components/common/mixins/forms/associated.ts"
              }
            },
            {
              "kind": "field",
              "name": "_pristine",
              "type": {
                "text": "boolean"
              },
              "privacy": "protected",
              "default": "true",
              "inheritedFrom": {
                "name": "BaseFormAssociated",
                "module": "src/components/common/mixins/forms/associated.ts"
              }
            },
            {
              "kind": "field",
              "name": "name",
              "type": {
                "text": "string"
              },
              "privacy": "public",
              "description": "The name attribute of the control.",
              "attribute": "name",
              "reflects": true,
              "inheritedFrom": {
                "name": "BaseFormAssociated",
                "module": "src/components/common/mixins/forms/associated.ts"
              }
            },
            {
              "kind": "field",
              "name": "disabled",
              "privacy": "public",
              "description": "The disabled state of the component.",
              "default": "false",
              "attribute": "disabled",
              "type": {
                "text": "boolean"
              },
              "reflects": true,
              "inheritedFrom": {
                "name": "BaseFormAssociated",
                "module": "src/components/common/mixins/forms/associated.ts"
              }
            },
            {
              "kind": "field",
              "name": "invalid",
              "privacy": "public",
              "description": "Sets the control into invalid state (visual state only).",
              "default": "false",
              "attribute": "invalid",
              "type": {
                "text": "boolean"
              },
              "reflects": true,
              "inheritedFrom": {
                "name": "BaseFormAssociated",
                "module": "src/components/common/mixins/forms/associated.ts"
              }
            },
            {
              "kind": "field",
              "name": "form",
              "type": {
                "text": "HTMLFormElement | null"
              },
              "privacy": "public",
              "description": "Returns the HTMLFormElement associated with this element.",
              "readonly": true,
              "inheritedFrom": {
                "name": "BaseFormAssociated",
                "module": "src/components/common/mixins/forms/associated.ts"
              }
            },
            {
              "kind": "field",
              "name": "validity",
              "type": {
                "text": "ValidityState"
              },
              "privacy": "public",
              "description": "Returns a ValidityState object which represents the different validity states\nthe element can be in, with respect to constraint validation.",
              "readonly": true,
              "inheritedFrom": {
                "name": "BaseFormAssociated",
                "module": "src/components/common/mixins/forms/associated.ts"
              }
            },
            {
              "kind": "field",
              "name": "validationMessage",
              "type": {
                "text": "string"
              },
              "privacy": "public",
              "description": "A string containing the validation message of this element.",
              "readonly": true,
              "inheritedFrom": {
                "name": "BaseFormAssociated",
                "module": "src/components/common/mixins/forms/associated.ts"
              }
            },
            {
              "kind": "field",
              "name": "willValidate",
              "type": {
                "text": "boolean"
              },
              "privacy": "public",
              "description": "A boolean value which returns true if the element is a submittable element\nthat is a candidate for constraint validation.",
              "readonly": true,
              "inheritedFrom": {
                "name": "BaseFormAssociated",
                "module": "src/components/common/mixins/forms/associated.ts"
              }
            },
            {
              "kind": "method",
              "name": "_handleInvalid",
              "privacy": "private",
              "parameters": [
                {
                  "name": "event",
                  "type": {
                    "text": "Event"
                  }
                }
              ],
              "inheritedFrom": {
                "name": "BaseFormAssociated",
                "module": "src/components/common/mixins/forms/associated.ts"
              }
            },
            {
              "kind": "method",
              "name": "_setInvalidState",
              "privacy": "private",
              "return": {
                "type": {
                  "text": "void"
                }
              },
              "inheritedFrom": {
                "name": "BaseFormAssociated",
                "module": "src/components/common/mixins/forms/associated.ts"
              }
            },
            {
              "kind": "method",
              "name": "__runValidators",
              "privacy": "private",
              "inheritedFrom": {
                "name": "BaseFormAssociated",
                "module": "src/components/common/mixins/forms/associated.ts"
              }
            },
            {
              "kind": "method",
              "name": "_setDefaultValue",
              "privacy": "protected",
              "return": {
                "type": {
                  "text": "void"
                }
              },
              "parameters": [
                {
                  "name": "current",
                  "type": {
                    "text": "string | null"
                  }
                }
              ],
              "inheritedFrom": {
                "name": "BaseFormAssociated",
                "module": "src/components/common/mixins/forms/associated.ts"
              }
            },
            {
              "kind": "method",
              "name": "_restoreDefaultValue",
              "privacy": "protected",
              "return": {
                "type": {
                  "text": "void"
                }
              },
              "inheritedFrom": {
                "name": "BaseFormAssociated",
                "module": "src/components/common/mixins/forms/associated.ts"
              }
            },
            {
              "kind": "method",
              "name": "_validate",
              "privacy": "protected",
              "return": {
                "type": {
                  "text": "void"
                }
              },
              "parameters": [
                {
                  "name": "message",
                  "optional": true,
                  "type": {
                    "text": "string"
                  }
                }
              ],
              "inheritedFrom": {
                "name": "BaseFormAssociated",
                "module": "src/components/common/mixins/forms/associated.ts"
              }
            },
            {
              "kind": "method",
              "name": "_updateValidity",
              "privacy": "protected",
              "parameters": [
                {
                  "name": "error",
                  "optional": true,
                  "type": {
                    "text": "string"
                  }
                }
              ],
              "description": "Executes the component validators and updates the internal validity state.",
              "inheritedFrom": {
                "name": "BaseFormAssociated",
                "module": "src/components/common/mixins/forms/associated.ts"
              }
            },
            {
              "kind": "method",
              "name": "_setFormValue",
              "privacy": "protected",
              "return": {
                "type": {
                  "text": "void"
                }
              },
              "parameters": [
                {
                  "name": "value",
                  "type": {
                    "text": "FormValueType"
                  }
                },
                {
                  "name": "state",
                  "optional": true,
                  "type": {
                    "text": "FormValueType"
                  }
                }
              ],
              "inheritedFrom": {
                "name": "BaseFormAssociated",
                "module": "src/components/common/mixins/forms/associated.ts"
              }
            },
            {
              "kind": "method",
              "name": "formAssociatedCallback",
              "privacy": "protected",
              "return": {
                "type": {
                  "text": "void"
                }
              },
              "parameters": [
                {
                  "name": "_form",
                  "type": {
                    "text": "HTMLFormElement"
                  }
                }
              ],
              "inheritedFrom": {
                "name": "BaseFormAssociated",
                "module": "src/components/common/mixins/forms/associated.ts"
              }
            },
            {
              "kind": "method",
              "name": "formDisabledCallback",
              "privacy": "protected",
              "return": {
                "type": {
                  "text": "void"
                }
              },
              "parameters": [
                {
                  "name": "state",
                  "type": {
                    "text": "boolean"
                  }
                }
              ],
              "inheritedFrom": {
                "name": "BaseFormAssociated",
                "module": "src/components/common/mixins/forms/associated.ts"
              }
            },
            {
              "kind": "method",
              "name": "formResetCallback",
              "privacy": "protected",
              "return": {
                "type": {
                  "text": "void"
                }
              },
              "inheritedFrom": {
                "name": "BaseFormAssociated",
                "module": "src/components/common/mixins/forms/associated.ts"
              }
            },
            {
              "kind": "method",
              "name": "formStateRestoreCallback",
              "privacy": "protected",
              "return": {
                "type": {
                  "text": "void"
                }
              },
              "parameters": [
                {
                  "name": "_state",
                  "type": {
                    "text": "FormValueType"
                  }
                },
                {
                  "name": "_mode",
                  "type": {
                    "text": "FormRestoreMode"
                  }
                }
              ],
              "inheritedFrom": {
                "name": "BaseFormAssociated",
                "module": "src/components/common/mixins/forms/associated.ts"
              }
            },
            {
              "kind": "method",
              "name": "reportValidity",
              "privacy": "public",
              "description": "Checks for validity of the control and shows the browser message if it invalid.",
              "inheritedFrom": {
                "name": "BaseFormAssociated",
                "module": "src/components/common/mixins/forms/associated.ts"
              }
            },
            {
              "kind": "method",
              "name": "checkValidity",
              "privacy": "public",
              "description": "Checks for validity of the control and emits the invalid event if it invalid.",
              "inheritedFrom": {
                "name": "BaseFormAssociated",
                "module": "src/components/common/mixins/forms/associated.ts"
              }
            },
            {
              "kind": "method",
              "name": "setCustomValidity",
              "privacy": "public",
              "parameters": [
                {
                  "name": "message",
                  "type": {
                    "text": "string"
                  }
                }
              ],
              "description": "Sets a custom validation message for the control.\nAs long as `message` is not empty, the control is considered invalid.",
              "inheritedFrom": {
                "name": "BaseFormAssociated",
                "module": "src/components/common/mixins/forms/associated.ts"
              }
            },
            {
              "kind": "method",
              "name": "addEventListener",
              "privacy": "public",
              "return": {
                "type": {
                  "text": "void"
                }
              },
              "parameters": [
                {
                  "name": "type",
                  "type": {
                    "text": "K"
                  }
                },
                {
                  "name": "listener",
                  "type": {
                    "text": "(this: HTMLElement, ev: M[K]) => any"
                  }
                },
                {
                  "name": "options",
                  "optional": true,
                  "type": {
                    "text": "boolean | AddEventListenerOptions"
                  }
                }
              ],
              "inheritedFrom": {
                "name": "EventEmitterMixin",
                "module": "src/components/common/mixins/event-emitter.ts"
              }
            },
            {
              "kind": "method",
              "name": "removeEventListener",
              "privacy": "public",
              "return": {
                "type": {
                  "text": "void"
                }
              },
              "parameters": [
                {
                  "name": "type",
                  "type": {
                    "text": "K"
                  }
                },
                {
                  "name": "listener",
                  "type": {
                    "text": "(this: HTMLElement, ev: M[K]) => any"
                  }
                },
                {
                  "name": "options",
                  "optional": true,
                  "type": {
                    "text": "boolean | EventListenerOptions"
                  }
                }
              ],
              "inheritedFrom": {
                "name": "EventEmitterMixin",
                "module": "src/components/common/mixins/event-emitter.ts"
              }
            },
            {
              "kind": "method",
              "name": "emitEvent",
              "privacy": "private",
              "return": {
                "type": {
                  "text": "boolean"
                }
              },
              "parameters": [
                {
                  "name": "type",
                  "type": {
                    "text": "K"
                  }
                },
                {
                  "name": "eventInitDict",
                  "optional": true,
                  "type": {
                    "text": "CustomEventInit<D>"
                  }
                }
              ],
              "inheritedFrom": {
                "name": "EventEmitterMixin",
                "module": "src/components/common/mixins/event-emitter.ts"
              }
            }
          ],
          "events": [
            {
              "description": "Emitted when the control receives user input.",
              "name": "igcInput"
            },
            {
              "description": "Emitted when the a change to the control value is committed by the user.",
              "name": "igcChange"
            },
            {
              "type": {
                "text": "CustomEvent"
              },
              "inheritedFrom": {
                "name": "EventEmitterMixin",
                "module": "src/components/common/mixins/event-emitter.ts"
              }
            }
          ],
          "attributes": [
            {
              "name": "autocomplete",
              "type": {
                "text": "string"
              },
              "description": "Specifies what if any permission the browser has to provide for automated assistance in filling out form field values,\nas well as guidance to the browser as to the type of information expected in the field.\nRefer to [this page](https://developer.mozilla.org/en-US/docs/Web/HTML/Attributes/autocomplete) for additional information.",
              "fieldName": "autocomplete",
              "attribute": "autocomplete"
            },
            {
              "name": "autocapitalize",
              "type": {
                "text": "string"
              },
              "description": "Controls whether and how text input is automatically capitalized as it is entered/edited by the user.\n\n[MDN documentation](https://developer.mozilla.org/en-US/docs/Web/HTML/Global_attributes/autocapitalize).",
              "fieldName": "autocapitalize",
              "attribute": "autocapitalize"
            },
            {
              "name": "inputmode",
              "type": {
                "text": "string"
              },
              "description": "Hints at the type of data that might be entered by the user while editing the element or its contents.\nThis allows a browser to display an appropriate virtual keyboard.\n\n[MDN documentation](https://developer.mozilla.org/en-US/docs/Web/HTML/Global_attributes/inputmode)",
              "fieldName": "inputMode",
              "attribute": "inputmode"
            },
            {
              "name": "label",
              "type": {
                "text": "string"
              },
              "description": "The label for the control.",
              "fieldName": "label",
              "attribute": "label"
            },
            {
              "name": "maxlength",
              "type": {
                "text": "number"
              },
              "description": "The maximum number of characters (UTF-16 code units) that the user can enter.\nIf this value isn't specified, the user can enter an unlimited number of characters.",
              "fieldName": "maxLength",
              "attribute": "maxlength"
            },
            {
              "name": "minlength",
              "type": {
                "text": "number"
              },
              "description": "The minimum number of characters (UTF-16 code units) required that the user should enter.",
              "fieldName": "minLength",
              "attribute": "minlength"
            },
            {
              "name": "outlined",
              "type": {
                "text": "boolean"
              },
              "default": "false",
              "description": "Whether the control will have outlined appearance.",
              "fieldName": "outlined",
              "attribute": "outlined"
            },
            {
              "name": "placeholder",
              "type": {
                "text": "string"
              },
              "description": "The placeholder attribute of the control.",
              "fieldName": "placeholder",
              "attribute": "placeholder"
            },
            {
              "name": "readonly",
              "type": {
                "text": "boolean"
              },
              "default": "false",
              "description": "Makes the control a readonly field.",
              "fieldName": "readOnly",
              "attribute": "readonly"
            },
            {
              "name": "resize",
              "type": {
                "text": "TextareaResize"
              },
              "default": "'vertical'",
              "description": "Controls whether the control can be resized.\nWhen `auto` is set, the control will try to expand and fit its content.",
              "fieldName": "resize",
              "attribute": "resize",
              "expandedType": {
                "text": "'vertical' | 'auto' | 'none'"
              }
            },
            {
              "name": "rows",
              "type": {
                "text": "number"
              },
              "default": "2",
              "description": "The number of visible text lines for the control. If it is specified, it must be a positive integer.\nIf it is not specified, the default value is 2.",
              "fieldName": "rows",
              "attribute": "rows"
            },
            {
              "name": "value",
              "description": "The value of the component",
              "fieldName": "value",
              "attribute": "value",
              "type": {
                "text": "string"
              }
            },
            {
              "name": "spellcheck",
              "type": {
                "text": "boolean"
              },
              "default": "true",
              "description": "Controls whether the element may be checked for spelling errors.",
              "fieldName": "spellcheck",
              "attribute": "spellcheck"
            },
            {
              "name": "wrap",
              "type": {
                "text": "'hard' | 'soft' | 'off'"
              },
              "default": "'soft'",
              "description": "Indicates how the control should wrap the value for form submission.\nRefer to [this page on MDN](https://developer.mozilla.org/en-US/docs/Web/HTML/Element/textarea#attributes)\nfor explanation of the available values.",
              "fieldName": "wrap",
              "attribute": "wrap"
            },
            {
              "name": "validate-only",
              "type": {
                "text": "boolean"
              },
              "default": "false",
              "description": "Enables validation rules to be evaluated without restricting user input. This applies to the `maxLength` property\nwhen it is defined.",
              "fieldName": "validateOnly",
              "attribute": "validate-only"
            },
            {
              "name": "required",
              "description": "When set, makes the component a required field for validation.",
              "default": "false",
              "fieldName": "required",
              "attribute": "required",
              "type": {
                "text": "boolean"
              },
              "inheritedFrom": {
                "name": "FormAssociatedRequiredMixin",
                "module": "src/components/common/mixins/forms/associated-required.ts"
              }
            },
            {
              "name": "name",
              "type": {
                "text": "string"
              },
              "description": "The name attribute of the control.",
              "fieldName": "name",
              "attribute": "name",
              "inheritedFrom": {
                "name": "BaseFormAssociated",
                "module": "src/components/common/mixins/forms/associated.ts"
              }
            },
            {
              "name": "disabled",
              "description": "The disabled state of the component.",
              "default": "false",
              "fieldName": "disabled",
              "attribute": "disabled",
              "type": {
                "text": "boolean"
              },
              "inheritedFrom": {
                "name": "BaseFormAssociated",
                "module": "src/components/common/mixins/forms/associated.ts"
              }
            },
            {
              "name": "invalid",
              "description": "Sets the control into invalid state (visual state only).",
              "default": "false",
              "fieldName": "invalid",
              "attribute": "invalid",
              "type": {
                "text": "boolean"
              },
              "inheritedFrom": {
                "name": "BaseFormAssociated",
                "module": "src/components/common/mixins/forms/associated.ts"
              }
            }
          ],
          "mixins": [
            {
              "name": "FormAssociatedRequiredMixin",
              "module": "/src/components/common/mixins/forms/associated-required.js"
            },
            {
              "name": "EventEmitterMixin",
              "module": "/src/components/common/mixins/event-emitter.js"
            }
          ],
          "superclass": {
            "name": "LitElement",
            "package": "lit"
          },
          "tagName": "igc-textarea",
          "customElement": true
        }
      ],
      "exports": [
        {
          "kind": "js",
          "name": "default",
          "declaration": {
            "name": "IgcTextareaComponent",
            "module": "src/components/textarea/textarea.ts"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "src/components/tree/tree.selection.ts",
      "declarations": [
        {
          "kind": "class",
          "description": "",
          "name": "IgcTreeSelectionService",
          "members": [
            {
              "kind": "field",
              "name": "tree",
              "type": {
                "text": "IgcTreeComponent"
              },
              "privacy": "private",
              "default": "tree"
            },
            {
              "kind": "field",
              "name": "itemSelection",
              "type": {
                "text": "Set<IgcTreeItemComponent>"
              },
              "privacy": "private",
              "default": "new Set<IgcTreeItemComponent>()"
            },
            {
              "kind": "field",
              "name": "indeterminateItems",
              "type": {
                "text": "Set<IgcTreeItemComponent>"
              },
              "privacy": "private",
              "default": "new Set<IgcTreeItemComponent>()"
            },
            {
              "kind": "field",
              "name": "itemsToBeSelected",
              "type": {
                "text": "Set<IgcTreeItemComponent>"
              },
              "privacy": "private"
            },
            {
              "kind": "field",
              "name": "itemsToBeIndeterminate",
              "type": {
                "text": "Set<IgcTreeItemComponent>"
              },
              "privacy": "private"
            },
            {
              "kind": "method",
              "name": "selectMultipleItems",
              "privacy": "public",
              "return": {
                "type": {
                  "text": "void"
                }
              },
              "parameters": [
                {
                  "name": "item",
                  "type": {
                    "text": "IgcTreeItemComponent"
                  }
                }
              ],
              "description": "Select range from last selected item to the current specified item."
            },
            {
              "kind": "method",
              "name": "selectItem",
              "privacy": "public",
              "return": {
                "type": {
                  "text": "void"
                }
              },
              "parameters": [
                {
                  "name": "item",
                  "type": {
                    "text": "IgcTreeItemComponent"
                  }
                }
              ],
              "description": "Select the specified item and emit event."
            },
            {
              "kind": "method",
              "name": "deselectItem",
              "privacy": "public",
              "return": {
                "type": {
                  "text": "void"
                }
              },
              "parameters": [
                {
                  "name": "item",
                  "type": {
                    "text": "IgcTreeItemComponent"
                  }
                }
              ],
              "description": "Deselect the specified item and emit event."
            },
            {
              "kind": "method",
              "name": "clearItemsSelection",
              "privacy": "public",
              "return": {
                "type": {
                  "text": "void"
                }
              },
              "description": "Clears item selection"
            },
            {
              "kind": "method",
              "name": "isItemSelected",
              "privacy": "public",
              "return": {
                "type": {
                  "text": "boolean"
                }
              },
              "parameters": [
                {
                  "name": "item",
                  "type": {
                    "text": "IgcTreeItemComponent"
                  }
                }
              ]
            },
            {
              "kind": "method",
              "name": "isItemIndeterminate",
              "privacy": "public",
              "return": {
                "type": {
                  "text": "boolean"
                }
              },
              "parameters": [
                {
                  "name": "item",
                  "type": {
                    "text": "IgcTreeItemComponent"
                  }
                }
              ]
            },
            {
              "kind": "method",
              "name": "ensureStateOnItemDelete",
              "privacy": "public",
              "return": {
                "type": {
                  "text": "void"
                }
              },
              "parameters": [
                {
                  "name": "item",
                  "type": {
                    "text": "IgcTreeItemComponent"
                  }
                }
              ],
              "description": "Called on item`s disconnectedCallback"
            },
            {
              "kind": "method",
              "name": "retriggerItemState",
              "privacy": "public",
              "return": {
                "type": {
                  "text": "void"
                }
              },
              "parameters": [
                {
                  "name": "item",
                  "type": {
                    "text": "IgcTreeItemComponent"
                  }
                }
              ],
              "description": "Retrigger the selection state of the item."
            },
            {
              "kind": "method",
              "name": "emitItemSelectionEvent",
              "privacy": "private",
              "return": {
                "type": {
                  "text": "void"
                }
              },
              "parameters": [
                {
                  "name": "newSelection",
                  "type": {
                    "text": "IgcTreeItemComponent[]"
                  }
                },
                {
                  "name": "added",
                  "type": {
                    "text": "IgcTreeItemComponent[]"
                  }
                },
                {
                  "name": "removed",
                  "type": {
                    "text": "IgcTreeItemComponent[]"
                  }
                }
              ]
            },
            {
              "kind": "method",
              "name": "selectItemsWithNoEvent",
              "privacy": "public",
              "return": {
                "type": {
                  "text": "void"
                }
              },
              "parameters": [
                {
                  "name": "items",
                  "type": {
                    "text": "IgcTreeItemComponent[]"
                  }
                }
              ],
              "description": "Select specified items. No event is emitted."
            },
            {
              "kind": "method",
              "name": "deselectItemsWithNoEvent",
              "privacy": "public",
              "return": {
                "type": {
                  "text": "void"
                }
              },
              "parameters": [
                {
                  "name": "items",
                  "optional": true,
                  "type": {
                    "text": "IgcTreeItemComponent[]"
                  }
                },
                {
                  "name": "onDelete",
                  "default": "false"
                }
              ],
              "description": "Deselect specified items. No event is emitted."
            },
            {
              "kind": "method",
              "name": "emitCascadeItemSelectionEvent",
              "privacy": "private",
              "return": {
                "type": {
                  "text": "void"
                }
              },
              "parameters": [
                {
                  "name": "currSelection",
                  "type": {
                    "text": "IgcTreeItemComponent[]"
                  }
                },
                {
                  "name": "added",
                  "type": {
                    "text": "IgcTreeItemComponent[]"
                  }
                },
                {
                  "name": "removed",
                  "type": {
                    "text": "IgcTreeItemComponent[]"
                  }
                }
              ]
            },
            {
              "kind": "method",
              "name": "cascadeSelectItemsWithNoEvent",
              "privacy": "private",
              "return": {
                "type": {
                  "text": "void"
                }
              },
              "parameters": [
                {
                  "name": "items",
                  "type": {
                    "text": "IgcTreeItemComponent[]"
                  }
                },
                {
                  "name": "oldSelection",
                  "type": {
                    "text": "IgcTreeItemComponent[]"
                  }
                }
              ]
            },
            {
              "kind": "method",
              "name": "cascadeDeselectItemsWithNoEvent",
              "privacy": "private",
              "return": {
                "type": {
                  "text": "void"
                }
              },
              "parameters": [
                {
                  "name": "items",
                  "optional": true,
                  "type": {
                    "text": "IgcTreeItemComponent[]"
                  }
                },
                {
                  "name": "onDelete",
                  "default": "false"
                }
              ]
            },
            {
              "kind": "method",
              "name": "calculateItemsNewSelectionState",
              "privacy": "private",
              "return": {
                "type": {
                  "text": "void"
                }
              },
              "parameters": [
                {
                  "name": "oldSelection",
                  "type": {
                    "text": "IgcTreeItemComponent[]"
                  }
                },
                {
                  "name": "added",
                  "type": {
                    "text": "IgcTreeItemComponent[]"
                  }
                },
                {
                  "name": "removed",
                  "type": {
                    "text": "IgcTreeItemComponent[]"
                  }
                }
              ],
              "description": "populates the itemsToBeSelected and itemsToBeIndeterminate sets\nwith the items which will be eventually in selected/indeterminate state"
            },
            {
              "kind": "method",
              "name": "cascadeSelectionState",
              "privacy": "private",
              "return": {
                "type": {
                  "text": "void"
                }
              },
              "parameters": [
                {
                  "name": "items",
                  "type": {
                    "text": "IgcTreeItemComponent[] | undefined"
                  }
                },
                {
                  "name": "selected",
                  "type": {
                    "text": "boolean"
                  }
                }
              ],
              "description": "Ensures proper selection state for all predescessors and descendants during a selection event"
            },
            {
              "kind": "method",
              "name": "handleParentSelectionState",
              "privacy": "private",
              "return": {
                "type": {
                  "text": "void"
                }
              },
              "parameters": [
                {
                  "name": "item",
                  "type": {
                    "text": "IgcTreeItemComponent"
                  }
                }
              ],
              "description": "recursively handle the selection state of the direct and indirect parents"
            },
            {
              "kind": "method",
              "name": "handleItemSelectionState",
              "privacy": "private",
              "return": {
                "type": {
                  "text": "void"
                }
              },
              "parameters": [
                {
                  "name": "item",
                  "type": {
                    "text": "IgcTreeItemComponent"
                  }
                }
              ],
              "description": "Handle the selection state of a given item based the selection states of its direct children"
            },
            {
              "kind": "method",
              "name": "updateItemsState",
              "privacy": "private",
              "return": {
                "type": {
                  "text": "void"
                }
              },
              "parameters": [
                {
                  "name": "oldSelection",
                  "type": {
                    "text": "IgcTreeItemComponent[]"
                  }
                },
                {
                  "name": "oldIndeterminate",
                  "default": "[]",
                  "type": {
                    "text": "IgcTreeItemComponent[]"
                  }
                }
              ],
              "description": "Emits the `selectedChange` event for each item affected by the selection"
            },
            {
              "kind": "method",
              "name": "getSelectedItems",
              "privacy": "private",
              "return": {
                "type": {
                  "text": "IgcTreeItemComponent[]"
                }
              },
              "description": "Returns array of the selected items."
            },
            {
              "kind": "method",
              "name": "getIndeterminateItems",
              "privacy": "private",
              "return": {
                "type": {
                  "text": "IgcTreeItemComponent[]"
                }
              },
              "description": "Returns array of the items in indeterminate state."
            },
            {
              "kind": "method",
              "name": "areEqualCollections",
              "privacy": "private",
              "return": {
                "type": {
                  "text": "boolean"
                }
              },
              "parameters": [
                {
                  "name": "first",
                  "type": {
                    "text": "IgcTreeItemComponent[]"
                  }
                },
                {
                  "name": "second",
                  "type": {
                    "text": "IgcTreeItemComponent[]"
                  }
                }
              ]
            },
            {
              "kind": "method",
              "name": "selectDeselectItem",
              "privacy": "private",
              "return": {
                "type": {
                  "text": "void"
                }
              },
              "parameters": [
                {
                  "name": "item",
                  "type": {
                    "text": "IgcTreeItemComponent"
                  }
                },
                {
                  "name": "select",
                  "type": {
                    "text": "boolean"
                  }
                },
                {
                  "name": "indeterminate",
                  "default": "false"
                }
              ]
            }
          ]
        }
      ],
      "exports": [
        {
          "kind": "js",
          "name": "IgcTreeSelectionService",
          "declaration": {
            "name": "IgcTreeSelectionService",
            "module": "src/components/tree/tree.selection.ts"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "src/components/tree/tree.navigation.ts",
      "declarations": [
        {
          "kind": "variable",
          "name": "NAVIGATION_KEYS",
          "default": "new Set([ 'down', 'up', 'left', 'right', 'arrowdown', 'arrowup', 'arrowleft', 'arrowright', 'home', 'end', 'space', 'spacebar', ' ', ])"
        },
        {
          "kind": "class",
          "description": "",
          "name": "IgcTreeNavigationService",
          "members": [
            {
              "kind": "field",
              "name": "tree",
              "type": {
                "text": "IgcTreeComponent"
              },
              "privacy": "private",
              "default": "tree"
            },
            {
              "kind": "field",
              "name": "selectionService",
              "type": {
                "text": "IgcTreeSelectionService"
              },
              "privacy": "private",
              "default": "selectionService"
            },
            {
              "kind": "field",
              "name": "_focusedItem",
              "type": {
                "text": "IgcTreeItemComponent | null"
              },
              "privacy": "private",
              "default": "null"
            },
            {
              "kind": "field",
              "name": "_lastFocusedItem",
              "type": {
                "text": "IgcTreeItemComponent | null"
              },
              "privacy": "private",
              "default": "null"
            },
            {
              "kind": "field",
              "name": "_activeItem",
              "type": {
                "text": "IgcTreeItemComponent | null"
              },
              "privacy": "private",
              "default": "null"
            },
            {
              "kind": "field",
              "name": "_visibleChildren",
              "type": {
                "text": "IgcTreeItemComponent[]"
              },
              "privacy": "private",
              "default": "[]"
            },
            {
              "kind": "field",
              "name": "_invisibleChildren",
              "type": {
                "text": "Set<IgcTreeItemComponent>"
              },
              "privacy": "private",
              "default": "new Set()"
            },
            {
              "kind": "field",
              "name": "_disabledChildren",
              "type": {
                "text": "Set<IgcTreeItemComponent>"
              },
              "privacy": "private",
              "default": "new Set()"
            },
            {
              "kind": "method",
              "name": "updateVisChild",
              "privacy": "public",
              "return": {
                "type": {
                  "text": "void"
                }
              }
            },
            {
              "kind": "field",
              "name": "focusedItem",
              "type": {
                "text": "IgcTreeItemComponent | null"
              },
              "privacy": "public",
              "readonly": true
            },
            {
              "kind": "method",
              "name": "focusItem",
              "privacy": "public",
              "parameters": [
                {
                  "name": "value",
                  "type": {
                    "text": "IgcTreeItemComponent | null"
                  }
                },
                {
                  "name": "shouldFocus",
                  "default": "true"
                }
              ]
            },
            {
              "kind": "field",
              "name": "activeItem",
              "type": {
                "text": "IgcTreeItemComponent | null"
              },
              "privacy": "public",
              "readonly": true
            },
            {
              "kind": "method",
              "name": "setActiveItem",
              "privacy": "public",
              "parameters": [
                {
                  "name": "value",
                  "type": {
                    "text": "IgcTreeItemComponent | null"
                  }
                },
                {
                  "name": "shouldEmit",
                  "default": "true"
                }
              ]
            },
            {
              "kind": "field",
              "name": "visibleChildren",
              "type": {
                "text": "IgcTreeItemComponent[]"
              },
              "privacy": "public",
              "readonly": true
            },
            {
              "kind": "method",
              "name": "update_disabled_cache",
              "privacy": "public",
              "return": {
                "type": {
                  "text": "void"
                }
              },
              "parameters": [
                {
                  "name": "item",
                  "type": {
                    "text": "IgcTreeItemComponent"
                  }
                }
              ]
            },
            {
              "kind": "method",
              "name": "delete_item",
              "privacy": "public",
              "parameters": [
                {
                  "name": "item",
                  "type": {
                    "text": "IgcTreeItemComponent"
                  }
                }
              ]
            },
            {
              "kind": "method",
              "name": "update_visible_cache",
              "privacy": "public",
              "return": {
                "type": {
                  "text": "void"
                }
              },
              "parameters": [
                {
                  "name": "item",
                  "type": {
                    "text": "IgcTreeItemComponent"
                  }
                },
                {
                  "name": "expanded",
                  "type": {
                    "text": "boolean"
                  }
                },
                {
                  "name": "shouldUpdateNestedChildren",
                  "default": "true"
                },
                {
                  "name": "shouldUpdate",
                  "default": "true"
                }
              ]
            },
            {
              "kind": "method",
              "name": "setFocusedAndActiveItem",
              "privacy": "public",
              "return": {
                "type": {
                  "text": "void"
                }
              },
              "parameters": [
                {
                  "name": "item",
                  "type": {
                    "text": "IgcTreeItemComponent"
                  },
                  "description": "target item"
                },
                {
                  "name": "isActive",
                  "default": "true",
                  "description": "if true, sets the item as active"
                },
                {
                  "name": "shouldFocus",
                  "default": "true"
                }
              ],
              "description": "Sets the item as focused (and active)"
            },
            {
              "kind": "method",
              "name": "handleKeydown",
              "privacy": "public",
              "parameters": [
                {
                  "name": "event",
                  "type": {
                    "text": "KeyboardEvent"
                  }
                }
              ],
              "description": "Handler for keydown events. Used in tree.component.ts"
            },
            {
              "kind": "method",
              "name": "handleNavigation",
              "privacy": "private",
              "parameters": [
                {
                  "name": "event",
                  "type": {
                    "text": "KeyboardEvent"
                  }
                }
              ]
            },
            {
              "kind": "method",
              "name": "handleArrowLeft",
              "privacy": "private",
              "return": {
                "type": {
                  "text": "void"
                }
              }
            },
            {
              "kind": "method",
              "name": "handleArrowRight",
              "privacy": "private",
              "return": {
                "type": {
                  "text": "void"
                }
              }
            },
            {
              "kind": "method",
              "name": "handleUpDownArrow",
              "privacy": "private",
              "return": {
                "type": {
                  "text": "void"
                }
              },
              "parameters": [
                {
                  "name": "isUp",
                  "type": {
                    "text": "boolean"
                  }
                },
                {
                  "name": "event",
                  "type": {
                    "text": "KeyboardEvent"
                  }
                }
              ]
            },
            {
              "kind": "method",
              "name": "handleAsterisk",
              "privacy": "private",
              "return": {
                "type": {
                  "text": "void"
                }
              }
            },
            {
              "kind": "method",
              "name": "handleSpace",
              "privacy": "private",
              "return": {
                "type": {
                  "text": "void"
                }
              },
              "parameters": [
                {
                  "name": "shiftKey",
                  "default": "false"
                }
              ]
            },
            {
              "kind": "method",
              "name": "getVisibleItem",
              "privacy": "private",
              "return": {
                "type": {
                  "text": "IgcTreeItemComponent"
                }
              },
              "parameters": [
                {
                  "name": "item",
                  "type": {
                    "text": "IgcTreeItemComponent"
                  }
                },
                {
                  "name": "dir",
                  "default": "1",
                  "type": {
                    "text": "1 | -1"
                  }
                }
              ],
              "description": "Gets the next visible item in the given direction - 1 -> next, -1 -> previous"
            }
          ]
        }
      ],
      "exports": [
        {
          "kind": "js",
          "name": "NAVIGATION_KEYS",
          "declaration": {
            "name": "NAVIGATION_KEYS",
            "module": "src/components/tree/tree.navigation.ts"
          }
        },
        {
          "kind": "js",
          "name": "IgcTreeNavigationService",
          "declaration": {
            "name": "IgcTreeNavigationService",
            "module": "src/components/tree/tree.navigation.ts"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "src/components/tree/tree-item.ts",
      "declarations": [
        {
          "kind": "class",
          "description": "The tree-item component represents a child item of the tree component or another tree item.",
          "name": "IgcTreeItemComponent",
          "cssParts": [
            {
              "description": "The wrapper for the tree item.",
              "name": "wrapper"
            },
            {
              "description": "Indicates selected state. Applies to `wrapper`.",
              "name": "selected"
            },
            {
              "description": "Indicates focused state. Applies to `wrapper`.",
              "name": "focused"
            },
            {
              "description": "Indicates an active state. Applies to `wrapper`.",
              "name": "active"
            },
            {
              "description": "The expand indicator of the tree item.",
              "name": "indicator"
            },
            {
              "description": "The tree item content.",
              "name": "label"
            },
            {
              "description": "The tree item displayed text.",
              "name": "text"
            },
            {
              "description": "The checkbox of the tree item when selection is enabled.",
              "name": "select"
            }
          ],
          "slots": [
            {
              "description": "Renders nested tree-item component.",
              "name": ""
            },
            {
              "description": "Renders the tree item container.",
              "name": "label"
            },
            {
              "description": "Renders the expand indicator container.",
              "name": "indicator"
            },
            {
              "description": "Renders the tree item loading indicator container.",
              "name": "loading"
            },
            {
              "description": "Renders the container (by default the space) before the tree item.",
              "name": "indentation"
            }
          ],
          "members": [
            {
              "kind": "field",
              "name": "tagName",
              "type": {
                "text": "string"
              },
              "privacy": "public",
              "static": true,
              "readonly": true,
              "default": "'igc-tree-item'"
            },
            {
              "kind": "method",
              "name": "register",
              "privacy": "public",
              "static": true
            },
            {
              "kind": "field",
              "name": "tabbableEl",
              "type": {
                "text": "HTMLElement[] | undefined"
              },
              "privacy": "private"
            },
            {
              "kind": "field",
              "name": "focusedProgrammatically",
              "type": {
                "text": "boolean"
              },
              "privacy": "private",
              "default": "false"
            },
            {
              "kind": "field",
              "name": "groupRef",
              "type": {
                "text": "Ref<HTMLElement>"
              },
              "privacy": "private"
            },
            {
              "kind": "field",
              "name": "animationPlayer",
              "privacy": "private"
            },
            {
              "kind": "field",
              "name": "tree",
              "type": {
                "text": "IgcTreeComponent | undefined"
              },
              "privacy": "public",
              "description": "A reference to the tree the item is a part of."
            },
            {
              "kind": "field",
              "name": "parent",
              "type": {
                "text": "IgcTreeItemComponent | null"
              },
              "privacy": "public",
              "default": "null",
              "description": "The parent item of the current tree item (if any)"
            },
            {
              "kind": "field",
              "name": "contentList",
              "type": {
                "text": "Array<HTMLElement>"
              },
              "privacy": "private"
            },
            {
              "kind": "field",
              "name": "isFocused",
              "type": {
                "text": "boolean"
              },
              "privacy": "private",
              "default": "false"
            },
            {
              "kind": "field",
              "name": "level",
              "type": {
                "text": "number"
              },
              "privacy": "public",
              "default": "0",
              "description": "The depth of the item, relative to the root."
            },
            {
              "kind": "field",
              "name": "label",
              "type": {
                "text": "string"
              },
              "privacy": "public",
              "default": "''",
              "description": "The tree item label.",
              "attribute": "label"
            },
            {
              "kind": "field",
              "name": "expanded",
              "type": {
                "text": "boolean"
              },
              "privacy": "public",
              "default": "false",
              "description": "The tree item expansion state.",
              "attribute": "expanded",
              "reflects": true
            },
            {
              "kind": "field",
              "name": "active",
              "type": {
                "text": "boolean"
              },
              "privacy": "public",
              "default": "false",
              "description": "Marks the item as the tree's active item.",
              "attribute": "active",
              "reflects": true
            },
            {
              "kind": "field",
              "name": "disabled",
              "type": {
                "text": "boolean"
              },
              "privacy": "public",
              "default": "false",
              "description": "Get/Set whether the tree item is disabled. Disabled items are ignored for user interactions.",
              "attribute": "disabled",
              "reflects": true
            },
            {
              "kind": "field",
              "name": "selected",
              "type": {
                "text": "boolean"
              },
              "privacy": "public",
              "default": "false",
              "description": "The tree item selection state.",
              "attribute": "selected",
              "reflects": true
            },
            {
              "kind": "field",
              "name": "loading",
              "type": {
                "text": "boolean"
              },
              "privacy": "public",
              "default": "false",
              "description": "To be used for load-on-demand scenarios in order to specify whether the item is loading data.",
              "attribute": "loading",
              "reflects": true
            },
            {
              "kind": "field",
              "name": "value",
              "type": {
                "text": "any"
              },
              "privacy": "public",
              "default": "undefined",
              "description": "The value entry that the tree item is visualizing. Required for searching through items.",
              "attribute": "value"
            },
            {
              "kind": "method",
              "name": "toggleAnimation",
              "privacy": "private",
              "parameters": [
                {
                  "name": "dir",
                  "type": {
                    "text": "'open' | 'close'"
                  }
                }
              ]
            },
            {
              "kind": "method",
              "name": "bothChange",
              "privacy": "protected",
              "return": {
                "type": {
                  "text": "void"
                }
              }
            },
            {
              "kind": "method",
              "name": "expandedChange",
              "privacy": "protected",
              "return": {
                "type": {
                  "text": "void"
                }
              },
              "parameters": [
                {
                  "name": "oldValue",
                  "type": {
                    "text": "boolean"
                  }
                }
              ]
            },
            {
              "kind": "method",
              "name": "activeChange",
              "privacy": "protected",
              "return": {
                "type": {
                  "text": "void"
                }
              }
            },
            {
              "kind": "method",
              "name": "disabledChange",
              "privacy": "protected",
              "return": {
                "type": {
                  "text": "void"
                }
              }
            },
            {
              "kind": "method",
              "name": "selectedChange",
              "privacy": "protected",
              "return": {
                "type": {
                  "text": "void"
                }
              }
            },
            {
              "kind": "field",
              "name": "selectionService",
              "type": {
                "text": "IgcTreeSelectionService | undefined"
              },
              "privacy": "private",
              "readonly": true
            },
            {
              "kind": "field",
              "name": "navService",
              "type": {
                "text": "IgcTreeNavigationService | undefined"
              },
              "privacy": "private",
              "readonly": true
            },
            {
              "kind": "field",
              "name": "parts",
              "privacy": "private",
              "readonly": true
            },
            {
              "kind": "field",
              "name": "directChildren",
              "type": {
                "text": "Array<IgcTreeItemComponent>"
              },
              "privacy": "private",
              "readonly": true
            },
            {
              "kind": "field",
              "name": "allChildren",
              "type": {
                "text": "Array<IgcTreeItemComponent>"
              },
              "privacy": "private",
              "readonly": true
            },
            {
              "kind": "field",
              "name": "path",
              "type": {
                "text": "IgcTreeItemComponent[]"
              },
              "privacy": "public",
              "description": "The full path to the tree item, starting from the top-most ancestor.",
              "readonly": true
            },
            {
              "kind": "method",
              "name": "itemClick",
              "privacy": "private",
              "return": {
                "type": {
                  "text": "void"
                }
              },
              "parameters": [
                {
                  "name": "event",
                  "type": {
                    "text": "MouseEvent"
                  }
                }
              ]
            },
            {
              "kind": "method",
              "name": "expandIndicatorClick",
              "privacy": "private",
              "return": {
                "type": {
                  "text": "void"
                }
              }
            },
            {
              "kind": "method",
              "name": "selectorClick",
              "privacy": "private",
              "return": {
                "type": {
                  "text": "void"
                }
              },
              "parameters": [
                {
                  "name": "event",
                  "type": {
                    "text": "MouseEvent"
                  }
                }
              ]
            },
            {
              "kind": "method",
              "name": "onFocus",
              "privacy": "private",
              "return": {
                "type": {
                  "text": "void"
                }
              }
            },
            {
              "kind": "method",
              "name": "onBlur",
              "privacy": "private",
              "return": {
                "type": {
                  "text": "void"
                }
              }
            },
            {
              "kind": "method",
              "name": "onFocusIn",
              "privacy": "private",
              "return": {
                "type": {
                  "text": "void"
                }
              },
              "parameters": [
                {
                  "name": "ev",
                  "type": {
                    "text": "Event"
                  }
                }
              ]
            },
            {
              "kind": "method",
              "name": "onFocusOut",
              "privacy": "private",
              "return": {
                "type": {
                  "text": "void"
                }
              },
              "parameters": [
                {
                  "name": "ev",
                  "type": {
                    "text": "Event"
                  }
                }
              ]
            },
            {
              "kind": "method",
              "name": "labelChange",
              "privacy": "private",
              "return": {
                "type": {
                  "text": "void"
                }
              }
            },
            {
              "kind": "method",
              "name": "handleChange",
              "privacy": "private",
              "return": {
                "type": {
                  "text": "void"
                }
              }
            },
            {
              "kind": "method",
              "name": "getChildren",
              "privacy": "public",
              "return": {
                "type": {
                  "text": "IgcTreeItemComponent[]"
                }
              },
              "parameters": [
                {
                  "name": "options",
                  "default": "{ flatten: false }",
                  "type": {
                    "text": "{ flatten: boolean }"
                  }
                }
              ],
              "description": "Returns a collection of child items.\nIf the parameter value is true returns all tree item's direct children,\notherwise - only the direct children."
            },
            {
              "kind": "method",
              "name": "expandWithEvent",
              "privacy": "private"
            },
            {
              "kind": "method",
              "name": "collapseWithEvent",
              "privacy": "private"
            },
            {
              "kind": "method",
              "name": "toggle",
              "privacy": "public",
              "return": {
                "type": {
                  "text": "void"
                }
              },
              "description": "Toggles tree item expansion state."
            },
            {
              "kind": "method",
              "name": "expand",
              "privacy": "public",
              "return": {
                "type": {
                  "text": "void"
                }
              },
              "description": "Expands the tree item."
            },
            {
              "kind": "method",
              "name": "collapse",
              "privacy": "public",
              "return": {
                "type": {
                  "text": "void"
                }
              },
              "description": "Collapses the tree item."
            }
          ],
          "attributes": [
            {
              "name": "label",
              "type": {
                "text": "string"
              },
              "default": "''",
              "description": "The tree item label.",
              "fieldName": "label",
              "attribute": "label"
            },
            {
              "name": "expanded",
              "type": {
                "text": "boolean"
              },
              "default": "false",
              "description": "The tree item expansion state.",
              "fieldName": "expanded",
              "attribute": "expanded"
            },
            {
              "name": "active",
              "type": {
                "text": "boolean"
              },
              "default": "false",
              "description": "Marks the item as the tree's active item.",
              "fieldName": "active",
              "attribute": "active"
            },
            {
              "name": "disabled",
              "type": {
                "text": "boolean"
              },
              "default": "false",
              "description": "Get/Set whether the tree item is disabled. Disabled items are ignored for user interactions.",
              "fieldName": "disabled",
              "attribute": "disabled"
            },
            {
              "name": "selected",
              "type": {
                "text": "boolean"
              },
              "default": "false",
              "description": "The tree item selection state.",
              "fieldName": "selected",
              "attribute": "selected"
            },
            {
              "name": "loading",
              "type": {
                "text": "boolean"
              },
              "default": "false",
              "description": "To be used for load-on-demand scenarios in order to specify whether the item is loading data.",
              "fieldName": "loading",
              "attribute": "loading"
            },
            {
              "name": "value",
              "type": {
                "text": "any"
              },
              "default": "undefined",
              "description": "The value entry that the tree item is visualizing. Required for searching through items.",
              "fieldName": "value",
              "attribute": "value"
            }
          ],
          "superclass": {
            "name": "LitElement",
            "package": "lit"
          },
          "tagName": "igc-tree-item",
          "customElement": true
        }
      ],
      "exports": [
        {
          "kind": "js",
          "name": "default",
          "declaration": {
            "name": "IgcTreeItemComponent",
            "module": "src/components/tree/tree-item.ts"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "src/components/tree/tree.common.ts",
      "declarations": [],
      "exports": []
    },
    {
      "kind": "javascript-module",
      "path": "src/components/tree/tree.ts",
      "declarations": [
        {
          "kind": "class",
          "description": "The tree allows users to represent hierarchical data in a tree-view structure,\nmaintaining parent-child relationships, as well as to define static tree-view structure without a corresponding data model.",
          "name": "IgcTreeComponent",
          "slots": [
            {
              "description": "Renders the tree items inside default slot.",
              "name": ""
            }
          ],
          "members": [
            {
              "kind": "field",
              "name": "tagName",
              "type": {
                "text": "string"
              },
              "privacy": "public",
              "static": true,
              "readonly": true,
              "default": "'igc-tree'"
            },
            {
              "kind": "method",
              "name": "register",
              "privacy": "public",
              "static": true
            },
            {
              "kind": "field",
              "name": "singleBranchExpand",
              "type": {
                "text": "boolean"
              },
              "privacy": "public",
              "default": "false",
              "description": "Whether a single or multiple of a parent's child items can be expanded.",
              "attribute": "single-branch-expand",
              "reflects": true
            },
            {
              "kind": "field",
              "name": "toggleNodeOnClick",
              "type": {
                "text": "boolean"
              },
              "privacy": "public",
              "default": "false",
              "description": "Whether clicking over nodes will change their expanded state or not.",
              "attribute": "toggle-node-on-click",
              "reflects": true
            },
            {
              "kind": "field",
              "name": "selection",
              "type": {
                "text": "TreeSelection"
              },
              "privacy": "public",
              "default": "'none'",
              "description": "The selection state of the tree.",
              "attribute": "selection",
              "reflects": true,
              "expandedType": {
                "text": "'none' | 'multiple' | 'cascade'"
              }
            },
            {
              "kind": "method",
              "name": "onDirChange",
              "privacy": "protected",
              "return": {
                "type": {
                  "text": "void"
                }
              }
            },
            {
              "kind": "method",
              "name": "selectionModeChange",
              "privacy": "protected",
              "return": {
                "type": {
                  "text": "void"
                }
              }
            },
            {
              "kind": "method",
              "name": "singleBranchExpandChange",
              "privacy": "protected",
              "return": {
                "type": {
                  "text": "void"
                }
              }
            },
            {
              "kind": "field",
              "name": "items",
              "type": {
                "text": "Array<IgcTreeItemComponent>"
              },
              "privacy": "public",
              "description": "Returns all of the tree's items.",
              "readonly": true
            },
            {
              "kind": "method",
              "name": "handleKeydown",
              "privacy": "private",
              "parameters": [
                {
                  "name": "event",
                  "type": {
                    "text": "KeyboardEvent"
                  }
                }
              ]
            },
            {
              "kind": "method",
              "name": "expandToItem",
              "privacy": "private",
              "return": {
                "type": {
                  "text": "void"
                }
              },
              "parameters": [
                {
                  "name": "item",
                  "type": {
                    "text": "IgcTreeItemComponent"
                  }
                }
              ]
            },
            {
              "kind": "method",
              "name": "select",
              "privacy": "public",
              "return": {
                "type": {
                  "text": "void"
                }
              },
              "parameters": [
                {
                  "name": "items",
                  "optional": true,
                  "type": {
                    "text": "IgcTreeItemComponent[]"
                  }
                }
              ],
              "description": "Select all items if the items collection is empty. Otherwise, select the items in the items collection."
            },
            {
              "kind": "method",
              "name": "deselect",
              "privacy": "public",
              "return": {
                "type": {
                  "text": "void"
                }
              },
              "parameters": [
                {
                  "name": "items",
                  "optional": true,
                  "type": {
                    "text": "IgcTreeItemComponent[]"
                  }
                }
              ],
              "description": "Deselect all items if the items collection is empty. Otherwise, deselect the items in the items collection."
            },
            {
              "kind": "method",
              "name": "expand",
              "privacy": "public",
              "return": {
                "type": {
                  "text": "void"
                }
              },
              "parameters": [
                {
                  "name": "items",
                  "optional": true,
                  "type": {
                    "text": "IgcTreeItemComponent[]"
                  }
                }
              ],
              "description": "Expands all of the passed items.\nIf no items are passed, expands ALL items."
            },
            {
              "kind": "method",
              "name": "collapse",
              "privacy": "public",
              "return": {
                "type": {
                  "text": "void"
                }
              },
              "parameters": [
                {
                  "name": "items",
                  "optional": true,
                  "type": {
                    "text": "IgcTreeItemComponent[]"
                  }
                }
              ],
              "description": "Collapses all of the passed items.\nIf no items are passed, collapses ALL items."
            },
            {
              "kind": "field",
              "name": "selectionService",
              "default": "new IgcTreeSelectionService(this)"
            },
            {
              "kind": "field",
              "name": "navService",
              "default": "new IgcTreeNavigationService(this, this.selectionService)"
            },
            {
              "kind": "method",
              "name": "addEventListener",
              "privacy": "public",
              "return": {
                "type": {
                  "text": "void"
                }
              },
              "parameters": [
                {
                  "name": "type",
                  "type": {
                    "text": "K"
                  }
                },
                {
                  "name": "listener",
                  "type": {
                    "text": "(this: HTMLElement, ev: M[K]) => any"
                  }
                },
                {
                  "name": "options",
                  "optional": true,
                  "type": {
                    "text": "boolean | AddEventListenerOptions"
                  }
                }
              ],
              "inheritedFrom": {
                "name": "EventEmitterMixin",
                "module": "src/components/common/mixins/event-emitter.ts"
              }
            },
            {
              "kind": "method",
              "name": "removeEventListener",
              "privacy": "public",
              "return": {
                "type": {
                  "text": "void"
                }
              },
              "parameters": [
                {
                  "name": "type",
                  "type": {
                    "text": "K"
                  }
                },
                {
                  "name": "listener",
                  "type": {
                    "text": "(this: HTMLElement, ev: M[K]) => any"
                  }
                },
                {
                  "name": "options",
                  "optional": true,
                  "type": {
                    "text": "boolean | EventListenerOptions"
                  }
                }
              ],
              "inheritedFrom": {
                "name": "EventEmitterMixin",
                "module": "src/components/common/mixins/event-emitter.ts"
              }
            },
            {
              "kind": "method",
              "name": "emitEvent",
              "privacy": "private",
              "return": {
                "type": {
                  "text": "boolean"
                }
              },
              "parameters": [
                {
                  "name": "type",
                  "type": {
                    "text": "K"
                  }
                },
                {
                  "name": "eventInitDict",
                  "optional": true,
                  "type": {
                    "text": "CustomEventInit<D>"
                  }
                }
              ],
              "inheritedFrom": {
                "name": "EventEmitterMixin",
                "module": "src/components/common/mixins/event-emitter.ts"
              }
            }
          ],
          "events": [
            {
              "description": "Emitted when item selection is changing, before the selection completes.",
              "name": "igcSelection"
            },
            {
              "description": "Emitted when tree item is collapsed.",
              "name": "igcItemCollapsed"
            },
            {
              "description": "Emitted when tree item is about to collapse.",
              "name": "igcItemCollapsing"
            },
            {
              "description": "Emitted when tree item is expanded.",
              "name": "igcItemExpanded"
            },
            {
              "description": "Emitted when tree item is about to expand.",
              "name": "igcItemExpanding"
            },
            {
              "description": "Emitted when the tree's `active` item changes.",
              "name": "igcActiveItem"
            },
            {
              "type": {
                "text": "CustomEvent"
              },
              "inheritedFrom": {
                "name": "EventEmitterMixin",
                "module": "src/components/common/mixins/event-emitter.ts"
              }
            }
          ],
          "attributes": [
            {
              "name": "single-branch-expand",
              "type": {
                "text": "boolean"
              },
              "default": "false",
              "description": "Whether a single or multiple of a parent's child items can be expanded.",
              "fieldName": "singleBranchExpand",
              "attribute": "single-branch-expand"
            },
            {
              "name": "toggle-node-on-click",
              "type": {
                "text": "boolean"
              },
              "default": "false",
              "description": "Whether clicking over nodes will change their expanded state or not.",
              "fieldName": "toggleNodeOnClick",
              "attribute": "toggle-node-on-click"
            },
            {
              "name": "selection",
              "type": {
                "text": "TreeSelection"
              },
              "default": "'none'",
              "description": "The selection state of the tree.",
              "fieldName": "selection",
              "attribute": "selection",
              "expandedType": {
                "text": "'none' | 'multiple' | 'cascade'"
              }
            }
          ],
          "mixins": [
            {
              "name": "EventEmitterMixin",
              "module": "/src/components/common/mixins/event-emitter.js"
            }
          ],
          "superclass": {
            "name": "LitElement",
            "package": "lit"
          },
          "tagName": "igc-tree",
          "customElement": true
        }
      ],
      "exports": [
        {
          "kind": "js",
          "name": "default",
          "declaration": {
            "name": "IgcTreeComponent",
            "module": "src/components/tree/tree.ts"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "src/components/stepper/animations.ts",
      "declarations": [
        {
          "kind": "variable",
          "name": "bodyAnimations",
          "default": "new Map( Object.entries({ grow: animationPair({ in: growVerIn, out: growVerOut, }), fade: animationPair({ in: noopAnimation, out: noopAnimation, }), slide: animationPair({ in: slideInHor, out: slideOutHor, }), none: animationPair({ in: noopAnimation, out: noopAnimation, }), }) )"
        },
        {
          "kind": "variable",
          "name": "contentAnimations",
          "default": "new Map( Object.entries({ grow: animationPair({ in: fadeIn, out: fadeOut, }), fade: animationPair({ in: fadeIn, out: fadeOut, }), slide: animationPair({ in: fadeIn, out: fadeOut, }), none: animationPair({ in: noopAnimation, out: noopAnimation, }), }) )"
        }
      ],
      "exports": [
        {
          "kind": "js",
          "name": "bodyAnimations",
          "declaration": {
            "name": "bodyAnimations",
            "module": "src/components/stepper/animations.ts"
          }
        },
        {
          "kind": "js",
          "name": "contentAnimations",
          "declaration": {
            "name": "contentAnimations",
            "module": "src/components/stepper/animations.ts"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "src/components/stepper/step.ts",
      "declarations": [
        {
          "kind": "class",
          "description": "The step component is used within the `igc-stepper` element and it holds the content of each step.\nIt also supports custom indicators, title and subtitle.",
          "name": "IgcStepComponent",
          "cssParts": [
            {
              "description": "Wrapper of the step's `header` and its separators.",
              "name": "header-container"
            },
            {
              "description": "Indicates a disabled state. Applies to `header-container`.",
              "name": "disabled"
            },
            {
              "description": "Indicates a complete state of the current step. Applies to `header-container`.",
              "name": "complete-start"
            },
            {
              "description": "Indicates a complete state of the previous step. Applies to `header-container`.",
              "name": "complete-end"
            },
            {
              "description": "Indicates an optional state. Applies to `header-container`.",
              "name": "optional"
            },
            {
              "description": "Indicates an invalid state. Applies to `header-container`.",
              "name": "invalid"
            },
            {
              "description": "Indicates that the title should be above the indicator. Applies to `header-container`.",
              "name": "top"
            },
            {
              "description": "Indicates that the title should be below the indicator. Applies to `header-container`.",
              "name": "bottom"
            },
            {
              "description": "Indicates that the title should be before the indicator. Applies to `header-container`.",
              "name": "start"
            },
            {
              "description": "Indicates that the title should be after the indicator. Applies to `header-container`.",
              "name": "end"
            },
            {
              "description": "Wrapper of the step's `indicator` and `text`.",
              "name": "header"
            },
            {
              "description": "The indicator of the step.",
              "name": "indicator"
            },
            {
              "description": "Wrapper of the step's `title` and `subtitle`.",
              "name": "text"
            },
            {
              "description": "Indicates that no title and subtitle has been provided to the step. Applies to `text`.",
              "name": "empty"
            },
            {
              "description": "The title of the step.",
              "name": "title"
            },
            {
              "description": "The subtitle of the step.",
              "name": "subtitle"
            },
            {
              "description": "Wrapper of the step's `content`.",
              "name": "body"
            },
            {
              "description": "The steps `content`.",
              "name": "content"
            }
          ],
          "slots": [
            {
              "description": "Renders the content of the step.",
              "name": ""
            },
            {
              "description": "Renders the indicator of the step. By default, it displays the step index + 1.",
              "name": "indicator"
            },
            {
              "description": "Renders the title of the step.",
              "name": "title"
            },
            {
              "description": "Renders the subtitle of the step.",
              "name": "subtitle"
            }
          ],
          "members": [
            {
              "kind": "field",
              "name": "tagName",
              "type": {
                "text": "string"
              },
              "privacy": "public",
              "static": true,
              "readonly": true,
              "default": "'igc-step'"
            },
            {
              "kind": "method",
              "name": "register",
              "privacy": "public",
              "static": true
            },
            {
              "kind": "field",
              "name": "bodyRef",
              "type": {
                "text": "Ref<HTMLElement>"
              },
              "privacy": "private"
            },
            {
              "kind": "field",
              "name": "contentRef",
              "type": {
                "text": "Ref<HTMLElement>"
              },
              "privacy": "private"
            },
            {
              "kind": "field",
              "name": "bodyAnimationPlayer",
              "privacy": "private"
            },
            {
              "kind": "field",
              "name": "contentAnimationPlayer",
              "privacy": "private"
            },
            {
              "kind": "field",
              "name": "_titleChildren",
              "type": {
                "text": "Array<HTMLElement>"
              },
              "privacy": "private"
            },
            {
              "kind": "field",
              "name": "_subTitleChildren",
              "type": {
                "text": "Array<HTMLElement>"
              },
              "privacy": "private"
            },
            {
              "kind": "field",
              "name": "header",
              "type": {
                "text": "HTMLElement"
              },
              "privacy": "public"
            },
            {
              "kind": "field",
              "name": "contentBody",
              "type": {
                "text": "HTMLElement"
              },
              "privacy": "public"
            },
            {
              "kind": "field",
              "name": "invalid",
              "type": {
                "text": "boolean"
              },
              "privacy": "public",
              "default": "false",
              "description": "Gets/sets whether the step is invalid.",
              "attribute": "invalid",
              "reflects": true
            },
            {
              "kind": "field",
              "name": "active",
              "type": {
                "text": "boolean"
              },
              "privacy": "public",
              "default": "false",
              "description": "Gets/sets whether the step is activе.",
              "attribute": "active",
              "reflects": true
            },
            {
              "kind": "field",
              "name": "optional",
              "type": {
                "text": "boolean"
              },
              "privacy": "public",
              "default": "false",
              "description": "Gets/sets whether the step is optional.",
              "attribute": "optional"
            },
            {
              "kind": "field",
              "name": "disabled",
              "type": {
                "text": "boolean"
              },
              "privacy": "public",
              "default": "false",
              "description": "Gets/sets whether the step is interactable.",
              "attribute": "disabled",
              "reflects": true
            },
            {
              "kind": "field",
              "name": "complete",
              "type": {
                "text": "boolean"
              },
              "privacy": "public",
              "default": "false",
              "description": "Gets/sets whether the step is completed.",
              "attribute": "complete",
              "reflects": true
            },
            {
              "kind": "method",
              "name": "activeChange",
              "privacy": "protected"
            },
            {
              "kind": "method",
              "name": "disabledInvalidOptionalChange",
              "privacy": "protected"
            },
            {
              "kind": "method",
              "name": "completeChange",
              "privacy": "protected"
            },
            {
              "kind": "method",
              "name": "handleClick",
              "privacy": "private",
              "return": {
                "type": {
                  "text": "void"
                }
              },
              "parameters": [
                {
                  "name": "event",
                  "type": {
                    "text": "MouseEvent"
                  }
                }
              ]
            },
            {
              "kind": "method",
              "name": "handleKeydown",
              "privacy": "private",
              "return": {
                "type": {
                  "text": "void"
                }
              },
              "parameters": [
                {
                  "name": "event",
                  "type": {
                    "text": "KeyboardEvent"
                  }
                }
              ]
            },
            {
              "kind": "field",
              "name": "headerContainerParts",
              "privacy": "private",
              "readonly": true
            },
            {
              "kind": "field",
              "name": "textParts",
              "privacy": "private",
              "readonly": true
            },
            {
              "kind": "method",
              "name": "renderIndicator",
              "privacy": "protected"
            },
            {
              "kind": "method",
              "name": "renderTitleAndSubtitle",
              "privacy": "protected"
            },
            {
              "kind": "method",
              "name": "renderContent",
              "privacy": "protected"
            }
          ],
          "events": [
            {
              "name": "stepActiveChanged",
              "type": {
                "text": "CustomEvent"
              }
            },
            {
              "name": "stepDisabledInvalidChanged",
              "type": {
                "text": "CustomEvent"
              }
            },
            {
              "name": "stepCompleteChanged",
              "type": {
                "text": "CustomEvent"
              }
            },
            {
              "name": "stepHeaderKeydown",
              "type": {
                "text": "CustomEvent"
              }
            }
          ],
          "attributes": [
            {
              "name": "invalid",
              "type": {
                "text": "boolean"
              },
              "default": "false",
              "description": "Gets/sets whether the step is invalid.",
              "fieldName": "invalid"
            },
            {
              "name": "active",
              "type": {
                "text": "boolean"
              },
              "default": "false",
              "description": "Gets/sets whether the step is activе.",
              "fieldName": "active"
            },
            {
              "name": "optional",
              "type": {
                "text": "boolean"
              },
              "default": "false",
              "description": "Gets/sets whether the step is optional.",
              "fieldName": "optional"
            },
            {
              "name": "disabled",
              "type": {
                "text": "boolean"
              },
              "default": "false",
              "description": "Gets/sets whether the step is interactable.",
              "fieldName": "disabled"
            },
            {
              "name": "complete",
              "type": {
                "text": "boolean"
              },
              "default": "false",
              "description": "Gets/sets whether the step is completed.",
              "fieldName": "complete"
            }
          ],
          "superclass": {
            "name": "LitElement",
            "package": "lit"
          },
          "tagName": "igc-step",
          "customElement": true
        }
      ],
      "exports": [
        {
          "kind": "js",
          "name": "default",
          "declaration": {
            "name": "IgcStepComponent",
            "module": "src/components/stepper/step.ts"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "src/components/stepper/stepper.common.ts",
      "declarations": [],
      "exports": []
    },
    {
      "kind": "javascript-module",
      "path": "src/components/stepper/stepper.ts",
      "declarations": [
        {
          "kind": "class",
          "description": "IgxStepper provides a wizard-like workflow by dividing content into logical steps.",
          "name": "IgcStepperComponent",
          "slots": [
            {
              "description": "Renders the step components inside default slot.",
              "name": ""
            }
          ],
          "members": [
            {
              "kind": "field",
              "name": "tagName",
              "type": {
                "text": "string"
              },
              "privacy": "public",
              "static": true,
              "readonly": true,
              "default": "'igc-stepper'"
            },
            {
              "kind": "method",
              "name": "register",
              "privacy": "public",
              "static": true
            },
            {
              "kind": "field",
              "name": "keyDownHandlers",
              "type": {
                "text": "Map<string, Function>"
              },
              "privacy": "private",
              "readonly": true,
              "default": "new Map( Object.entries({ Enter: this.activateStep, Space: this.activateStep, SpaceBar: this.activateStep, ' ': this.activateStep, ArrowUp: this.onArrowUpKeyDown, ArrowDown: this.onArrowDownKeyDown, ArrowLeft: this.onArrowLeftKeyDown, ArrowRight: this.onArrowRightKeyDown, Home: this.onHomeKey, End: this.onEndKey, }) )"
            },
            {
              "kind": "field",
              "name": "activeStep",
              "type": {
                "text": "IgcStepComponent"
              },
              "privacy": "private"
            },
            {
              "kind": "field",
              "name": "_shouldUpdateLinearState",
              "type": {
                "text": "boolean"
              },
              "privacy": "private",
              "default": "false"
            },
            {
              "kind": "field",
              "name": "steps",
              "type": {
                "text": "Array<IgcStepComponent>"
              },
              "privacy": "public",
              "description": "Returns all of the stepper's steps."
            },
            {
              "kind": "field",
              "name": "orientation",
              "type": {
                "text": "StepperOrientation"
              },
              "privacy": "public",
              "default": "'horizontal'",
              "description": "Gets/Sets the orientation of the stepper.",
              "attribute": "orientation",
              "reflects": true,
              "expandedType": {
                "text": "'horizontal' | 'vertical'"
              }
            },
            {
              "kind": "field",
              "name": "stepType",
              "type": {
                "text": "StepperStepType"
              },
              "privacy": "public",
              "default": "'full'",
              "description": "Get/Set the type of the steps.",
              "attribute": "step-type",
              "reflects": true,
              "expandedType": {
                "text": "'full' | 'indicator' | 'title'"
              }
            },
            {
              "kind": "field",
              "name": "linear",
              "type": {
                "text": "boolean"
              },
              "privacy": "public",
              "default": "false",
              "description": "Get/Set whether the stepper is linear.",
              "attribute": "linear"
            },
            {
              "kind": "field",
              "name": "contentTop",
              "type": {
                "text": "boolean"
              },
              "privacy": "public",
              "default": "false",
              "description": "Get/Set whether the content is displayed above the steps.",
              "attribute": "content-top",
              "reflects": true
            },
            {
              "kind": "field",
              "name": "verticalAnimation",
              "type": {
                "text": "StepperVerticalAnimation"
              },
              "privacy": "public",
              "default": "'grow'",
              "description": "The animation type when in vertical mode.",
              "attribute": "vertical-animation",
              "expandedType": {
                "text": "'grow' | 'fade' | 'none'"
              }
            },
            {
              "kind": "field",
              "name": "horizontalAnimation",
              "type": {
                "text": "HorizontalTransitionAnimation"
              },
              "privacy": "public",
              "default": "'slide'",
              "description": "The animation type when in horizontal mode.",
              "attribute": "horizontal-animation",
              "expandedType": {
                "text": "'slide' | 'fade' | 'none'"
              }
            },
            {
              "kind": "field",
              "name": "animationDuration",
              "type": {
                "text": "number"
              },
              "privacy": "public",
              "default": "320",
              "description": "The animation duration in either vertical or horizontal mode.",
              "attribute": "animation-duration"
            },
            {
              "kind": "field",
              "name": "titlePosition",
              "type": {
                "text": "StepperTitlePosition"
              },
              "privacy": "public",
              "default": "'auto'",
              "description": "Get/Set the position of the steps title.",
              "attribute": "title-position",
              "expandedType": {
                "text": "'auto' | 'bottom' | 'top' | 'end' | 'start'"
              }
            },
            {
              "kind": "method",
              "name": "orientationChange",
              "privacy": "protected",
              "return": {
                "type": {
                  "text": "void"
                }
              }
            },
            {
              "kind": "method",
              "name": "stepTypeChange",
              "privacy": "protected",
              "return": {
                "type": {
                  "text": "void"
                }
              }
            },
            {
              "kind": "method",
              "name": "titlePositionChange",
              "privacy": "protected",
              "return": {
                "type": {
                  "text": "void"
                }
              }
            },
            {
              "kind": "method",
              "name": "contentTopChange",
              "privacy": "protected",
              "return": {
                "type": {
                  "text": "void"
                }
              }
            },
            {
              "kind": "method",
              "name": "linearChange",
              "privacy": "protected",
              "return": {
                "type": {
                  "text": "void"
                }
              }
            },
            {
              "kind": "method",
              "name": "animationTypeChange",
              "privacy": "protected"
            },
            {
              "kind": "method",
              "name": "animationDurationChange",
              "privacy": "protected"
            },
            {
              "kind": "method",
              "name": "activateFirstStep",
              "privacy": "private"
            },
            {
              "kind": "method",
              "name": "animateSteps",
              "privacy": "private",
              "parameters": [
                {
                  "name": "nextStep",
                  "type": {
                    "text": "IgcStepComponent"
                  }
                },
                {
                  "name": "currentStep",
                  "type": {
                    "text": "IgcStepComponent"
                  }
                }
              ]
            },
            {
              "kind": "method",
              "name": "activateStep",
              "privacy": "private",
              "parameters": [
                {
                  "name": "step",
                  "type": {
                    "text": "IgcStepComponent"
                  }
                },
                {
                  "name": "shouldEmit",
                  "default": "true"
                }
              ]
            },
            {
              "kind": "method",
              "name": "changeActiveStep",
              "privacy": "private",
              "parameters": [
                {
                  "name": "step",
                  "type": {
                    "text": "IgcStepComponent"
                  }
                }
              ]
            },
            {
              "kind": "method",
              "name": "moveToNextStep",
              "privacy": "private",
              "parameters": [
                {
                  "name": "next",
                  "default": "true"
                }
              ]
            },
            {
              "kind": "method",
              "name": "handleKeydown",
              "privacy": "private",
              "parameters": [
                {
                  "name": "event",
                  "type": {
                    "text": "KeyboardEvent"
                  }
                },
                {
                  "name": "focusedStep",
                  "type": {
                    "text": "IgcStepComponent"
                  }
                }
              ]
            },
            {
              "kind": "method",
              "name": "onHomeKey",
              "privacy": "private"
            },
            {
              "kind": "method",
              "name": "onEndKey",
              "privacy": "private"
            },
            {
              "kind": "method",
              "name": "onArrowDownKeyDown",
              "privacy": "private",
              "parameters": [
                {
                  "name": "focusedStep",
                  "type": {
                    "text": "IgcStepComponent"
                  }
                }
              ]
            },
            {
              "kind": "method",
              "name": "onArrowUpKeyDown",
              "privacy": "private",
              "parameters": [
                {
                  "name": "focusedStep",
                  "type": {
                    "text": "IgcStepComponent"
                  }
                }
              ]
            },
            {
              "kind": "method",
              "name": "onArrowRightKeyDown",
              "privacy": "private",
              "parameters": [
                {
                  "name": "focusedStep",
                  "type": {
                    "text": "IgcStepComponent"
                  }
                }
              ]
            },
            {
              "kind": "method",
              "name": "onArrowLeftKeyDown",
              "privacy": "private",
              "parameters": [
                {
                  "name": "focusedStep",
                  "type": {
                    "text": "IgcStepComponent"
                  }
                }
              ]
            },
            {
              "kind": "method",
              "name": "getNextStep",
              "privacy": "private",
              "return": {
                "type": {
                  "text": "IgcStepComponent | undefined"
                }
              },
              "parameters": [
                {
                  "name": "focusedStep",
                  "type": {
                    "text": "IgcStepComponent"
                  }
                }
              ]
            },
            {
              "kind": "method",
              "name": "getPreviousStep",
              "privacy": "private",
              "return": {
                "type": {
                  "text": "IgcStepComponent | undefined"
                }
              },
              "parameters": [
                {
                  "name": "focusedStep",
                  "type": {
                    "text": "IgcStepComponent"
                  }
                }
              ]
            },
            {
              "kind": "method",
              "name": "updateStepsLinearDisabled",
              "privacy": "private",
              "return": {
                "type": {
                  "text": "void"
                }
              }
            },
            {
              "kind": "method",
              "name": "updateAnimation",
              "privacy": "private",
              "parameters": [
                {
                  "name": "step",
                  "type": {
                    "text": "IgcStepComponent"
                  }
                }
              ]
            },
            {
              "kind": "method",
              "name": "syncProperties",
              "privacy": "private",
              "return": {
                "type": {
                  "text": "void"
                }
              }
            },
            {
              "kind": "method",
              "name": "stepsChanged",
              "privacy": "private",
              "return": {
                "type": {
                  "text": "void"
                }
              }
            },
            {
              "kind": "method",
              "name": "navigateTo",
              "privacy": "public",
              "parameters": [
                {
                  "name": "index",
                  "type": {
                    "text": "number"
                  }
                }
              ],
              "description": "Activates the step at a given index."
            },
            {
              "kind": "method",
              "name": "next",
              "privacy": "public",
              "return": {
                "type": {
                  "text": "void"
                }
              },
              "description": "Activates the next enabled step."
            },
            {
              "kind": "method",
              "name": "prev",
              "privacy": "public",
              "return": {
                "type": {
                  "text": "void"
                }
              },
              "description": "Activates the previous enabled step."
            },
            {
              "kind": "method",
              "name": "reset",
              "privacy": "public",
              "return": {
                "type": {
                  "text": "void"
                }
              },
              "description": "Resets the stepper to its initial state i.e. activates the first step."
            },
            {
              "kind": "method",
              "name": "addEventListener",
              "privacy": "public",
              "return": {
                "type": {
                  "text": "void"
                }
              },
              "parameters": [
                {
                  "name": "type",
                  "type": {
                    "text": "K"
                  }
                },
                {
                  "name": "listener",
                  "type": {
                    "text": "(this: HTMLElement, ev: M[K]) => any"
                  }
                },
                {
                  "name": "options",
                  "optional": true,
                  "type": {
                    "text": "boolean | AddEventListenerOptions"
                  }
                }
              ],
              "inheritedFrom": {
                "name": "EventEmitterMixin",
                "module": "src/components/common/mixins/event-emitter.ts"
              }
            },
            {
              "kind": "method",
              "name": "removeEventListener",
              "privacy": "public",
              "return": {
                "type": {
                  "text": "void"
                }
              },
              "parameters": [
                {
                  "name": "type",
                  "type": {
                    "text": "K"
                  }
                },
                {
                  "name": "listener",
                  "type": {
                    "text": "(this: HTMLElement, ev: M[K]) => any"
                  }
                },
                {
                  "name": "options",
                  "optional": true,
                  "type": {
                    "text": "boolean | EventListenerOptions"
                  }
                }
              ],
              "inheritedFrom": {
                "name": "EventEmitterMixin",
                "module": "src/components/common/mixins/event-emitter.ts"
              }
            },
            {
              "kind": "method",
              "name": "emitEvent",
              "privacy": "private",
              "return": {
                "type": {
                  "text": "boolean"
                }
              },
              "parameters": [
                {
                  "name": "type",
                  "type": {
                    "text": "K"
                  }
                },
                {
                  "name": "eventInitDict",
                  "optional": true,
                  "type": {
                    "text": "CustomEventInit<D>"
                  }
                }
              ],
              "inheritedFrom": {
                "name": "EventEmitterMixin",
                "module": "src/components/common/mixins/event-emitter.ts"
              }
            }
          ],
          "events": [
            {
              "description": "Emitted when the active step is about to change.",
              "name": "igcActiveStepChanging"
            },
            {
              "description": "Emitted when the active step is changed.",
              "name": "igcActiveStepChanged"
            },
            {
              "type": {
                "text": "CustomEvent"
              },
              "inheritedFrom": {
                "name": "EventEmitterMixin",
                "module": "src/components/common/mixins/event-emitter.ts"
              }
            }
          ],
          "attributes": [
            {
              "name": "vertical-animation",
              "type": {
                "text": "StepperVerticalAnimation"
              },
              "default": "'grow'",
              "description": "The animation type when in vertical mode.",
              "fieldName": "verticalAnimation",
              "attribute": "vertical-animation",
              "expandedType": {
                "text": "'grow' | 'fade' | 'none'"
              }
            },
            {
              "name": "horizontal-animation",
              "type": {
                "text": "HorizontalTransitionAnimation"
              },
              "default": "'slide'",
              "description": "The animation type when in horizontal mode.",
              "fieldName": "horizontalAnimation",
              "attribute": "horizontal-animation",
              "expandedType": {
                "text": "'slide' | 'fade' | 'none'"
              }
            },
            {
              "name": "animation-duration",
              "type": {
                "text": "number"
              },
              "default": "320",
              "description": "The animation duration in either vertical or horizontal mode.",
              "fieldName": "animationDuration",
              "attribute": "animation-duration"
            },
            {
              "name": "orientation",
              "type": {
                "text": "StepperOrientation"
              },
              "default": "'horizontal'",
              "description": "Gets/Sets the orientation of the stepper.",
              "fieldName": "orientation",
              "expandedType": {
                "text": "'horizontal' | 'vertical'"
              }
            },
            {
              "name": "step-type",
              "type": {
                "text": "StepperStepType"
              },
              "default": "'full'",
              "description": "Get/Set the type of the steps.",
              "fieldName": "stepType",
              "expandedType": {
                "text": "'full' | 'indicator' | 'title'"
              }
            },
            {
              "name": "linear",
              "type": {
                "text": "boolean"
              },
              "default": "false",
              "description": "Get/Set whether the stepper is linear.",
              "fieldName": "linear"
            },
            {
              "name": "content-top",
              "type": {
                "text": "boolean"
              },
              "default": "false",
              "description": "Get/Set whether the content is displayed above the steps.",
              "fieldName": "contentTop"
            },
            {
              "name": "title-position",
              "type": {
                "text": "StepperTitlePosition"
              },
              "default": "'auto'",
              "description": "Get/Set the position of the steps title.",
              "fieldName": "titlePosition",
              "expandedType": {
                "text": "'auto' | 'bottom' | 'top' | 'end' | 'start'"
              }
            }
          ],
          "mixins": [
            {
              "name": "EventEmitterMixin",
              "module": "/src/components/common/mixins/event-emitter.js"
            }
          ],
          "superclass": {
            "name": "LitElement",
            "package": "lit"
          },
          "tagName": "igc-stepper",
          "customElement": true
        }
      ],
      "exports": [
        {
          "kind": "js",
          "name": "default",
          "declaration": {
            "name": "IgcStepperComponent",
            "module": "src/components/stepper/stepper.ts"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "src/animations/presets/scale/index.ts",
      "declarations": [
        {
          "kind": "function",
          "name": "scaleInCenter",
          "parameters": [
            {
              "name": "options",
              "default": "baseOptions"
            }
          ]
        }
      ],
      "exports": [
        {
          "kind": "js",
          "name": "scaleInCenter",
          "declaration": {
            "name": "scaleInCenter",
            "module": "src/animations/presets/scale/index.ts"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "src/components/tooltip/service.ts",
      "declarations": [
        {
          "kind": "variable",
          "name": "service",
          "default": "new TooltipEscapeCallbacks()"
        }
      ],
      "exports": [
        {
          "kind": "js",
          "name": "default",
          "declaration": {
            "name": "service",
            "module": "src/components/tooltip/service.ts"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "src/components/tooltip/controller.ts",
      "declarations": [
        {
          "kind": "variable",
          "name": "TooltipRegexes"
        },
        {
          "kind": "function",
          "name": "addTooltipController",
          "return": {
            "type": {
              "text": "TooltipController"
            }
          },
          "parameters": [
            {
              "name": "host",
              "type": {
                "text": "IgcTooltipComponent"
              }
            },
            {
              "name": "options",
              "type": {
                "text": "TooltipCallbacks"
              }
            }
          ]
        }
      ],
      "exports": [
        {
          "kind": "js",
          "name": "TooltipRegexes",
          "declaration": {
            "name": "TooltipRegexes",
            "module": "src/components/tooltip/controller.ts"
          }
        },
        {
          "kind": "js",
          "name": "addTooltipController",
          "declaration": {
            "name": "addTooltipController",
            "module": "src/components/tooltip/controller.ts"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "src/components/tooltip/tooltip.ts",
      "declarations": [
        {
          "kind": "class",
          "description": "Provides a way to display supplementary information related to an element when a user interacts with it (e.g., hover, focus).\nIt offers features such as placement customization, delays, sticky mode, and animations.",
          "name": "IgcTooltipComponent",
          "cssParts": [
            {
              "description": "The wrapping container of the tooltip content.",
              "name": "base"
            }
          ],
          "slots": [
            {
              "description": "Default slot of the tooltip component.",
              "name": ""
            },
            {
              "description": "Slot for custom sticky-mode close action (e.g., an icon/button).",
              "name": "close-button"
            }
          ],
          "members": [
            {
              "kind": "field",
              "name": "tagName",
              "type": {
                "text": "string"
              },
              "privacy": "public",
              "static": true,
              "readonly": true,
              "default": "'igc-tooltip'"
            },
            {
              "kind": "method",
              "name": "register",
              "privacy": "public",
              "static": true,
              "return": {
                "type": {
                  "text": "void"
                }
              }
            },
            {
              "kind": "field",
              "name": "_internals",
              "privacy": "private",
              "readonly": true
            },
            {
              "kind": "field",
              "name": "_controller",
              "privacy": "private",
              "readonly": true
            },
            {
              "kind": "field",
              "name": "_containerRef",
              "privacy": "private",
              "readonly": true
            },
            {
              "kind": "field",
              "name": "_player",
              "privacy": "private",
              "readonly": true
            },
            {
              "kind": "field",
              "name": "_showAnimation",
              "privacy": "private",
              "readonly": true
            },
            {
              "kind": "field",
              "name": "_hideAnimation",
              "privacy": "private",
              "readonly": true
            },
            {
              "kind": "field",
              "name": "_timeoutId",
              "type": {
                "text": "number | undefined"
              },
              "privacy": "private"
            },
            {
              "kind": "field",
              "name": "_autoHideDelay",
              "type": {
                "text": "number"
              },
              "privacy": "private",
              "default": "180"
            },
            {
              "kind": "field",
              "name": "_showDelay",
              "type": {
                "text": "number"
              },
              "privacy": "private",
              "default": "200"
            },
            {
              "kind": "field",
              "name": "_hideDelay",
              "type": {
                "text": "number"
              },
              "privacy": "private",
              "default": "300"
            },
            {
              "kind": "field",
              "name": "_arrowElement",
              "type": {
                "text": "HTMLElement"
              },
              "privacy": "private"
            },
            {
              "kind": "field",
              "name": "_arrowOffset",
              "privacy": "private",
              "readonly": true
            },
            {
              "kind": "field",
              "name": "open",
              "privacy": "public",
              "description": "Whether the tooltip is showing.",
              "default": "false",
              "attribute": "open",
              "type": {
                "text": "boolean"
              },
              "reflects": true
            },
            {
              "kind": "field",
              "name": "disableArrow",
              "privacy": "public",
              "description": "Whether to disable the rendering of the arrow indicator for the tooltip.",
              "deprecated": "since 6.1.0. Use `with-arrow` to control the behavior of the tooltip arrow.",
              "default": "false",
              "attribute": "disable-arrow",
              "type": {
                "text": "boolean"
              }
            },
            {
              "kind": "field",
              "name": "withArrow",
              "type": {
                "text": "boolean"
              },
              "privacy": "public",
              "default": "false",
              "description": "Whether to render an arrow indicator for the tooltip.",
              "attribute": "with-arrow",
              "reflects": true
            },
            {
              "kind": "field",
              "name": "offset",
              "type": {
                "text": "number"
              },
              "privacy": "public",
              "default": "6",
              "description": "The offset of the tooltip from the anchor in pixels.",
              "attribute": "offset"
            },
            {
              "kind": "field",
              "name": "placement",
              "type": {
                "text": "PopoverPlacement"
              },
              "privacy": "public",
              "default": "'bottom'",
              "description": "Where to place the floating element relative to the parent anchor element.",
              "attribute": "placement",
              "expandedType": {
                "text": "'top' | 'top-start' | 'top-end' | 'bottom' | 'bottom-start' | 'bottom-end' | 'right' | 'right-start' | 'right-end' | 'left' | 'left-start' | 'left-end'"
              }
            },
            {
              "kind": "field",
              "name": "anchor",
              "type": {
                "text": "Element | string | undefined"
              },
              "privacy": "public",
              "description": "An element instance or an IDREF to use as the anchor for the tooltip.",
              "attribute": "anchor"
            },
            {
              "kind": "field",
              "name": "showTriggers",
              "privacy": "public",
              "description": "Which event triggers will show the tooltip.\nExpects a comma separate string of different event triggers.",
              "default": "pointerenter",
              "attribute": "show-triggers",
              "type": {
                "text": "string"
              }
            },
            {
              "kind": "field",
              "name": "hideTriggers",
              "privacy": "public",
              "description": "Which event triggers will hide the tooltip.\nExpects a comma separate string of different event triggers.",
              "default": "pointerleave, click",
              "attribute": "hide-triggers",
              "type": {
                "text": "string"
              }
            },
            {
              "kind": "field",
              "name": "showDelay",
              "privacy": "public",
              "description": "Specifies the number of milliseconds that should pass before showing the tooltip.",
              "default": "200",
              "attribute": "show-delay",
              "type": {
                "text": "number"
              }
            },
            {
              "kind": "field",
              "name": "hideDelay",
              "privacy": "public",
              "description": "Specifies the number of milliseconds that should pass before hiding the tooltip.",
              "default": "300",
              "attribute": "hide-delay",
              "type": {
                "text": "number"
              }
            },
            {
              "kind": "field",
              "name": "message",
              "type": {
                "text": "string"
              },
              "privacy": "public",
              "default": "''",
              "description": "Specifies a plain text as tooltip content.",
              "attribute": "message"
            },
            {
              "kind": "field",
              "name": "sticky",
              "type": {
                "text": "boolean"
              },
              "privacy": "public",
              "default": "false",
              "description": "Specifies if the tooltip remains visible until the user closes it via the close button or Esc key.",
              "attribute": "sticky",
              "reflects": true
            },
            {
              "kind": "method",
              "name": "_emitEvent",
              "privacy": "private",
              "return": {
                "type": {
                  "text": "boolean"
                }
              },
              "parameters": [
                {
                  "name": "name",
                  "type": {
                    "text": "keyof IgcTooltipComponentEventMap"
                  }
                }
              ]
            },
            {
              "kind": "method",
              "name": "_applyTooltipState",
              "privacy": "private",
              "return": {
                "type": {
                  "text": "Promise<boolean>"
                }
              },
              "parameters": [
                {
                  "name": "{\n    show,\n    withDelay = false,\n    withEvents = false,\n  }",
                  "type": {
                    "text": "TooltipStateOptions"
                  }
                }
              ]
            },
            {
              "kind": "method",
              "name": "show",
              "privacy": "public",
              "return": {
                "type": {
                  "text": "Promise<boolean>"
                }
              },
              "parameters": [
                {
                  "name": "target",
                  "optional": true,
                  "type": {
                    "text": "Element | string"
                  }
                }
              ],
              "description": "Shows the tooltip if not already showing.\nIf a target is provided, sets it as a transient anchor."
            },
            {
              "kind": "method",
              "name": "hide",
              "privacy": "public",
              "return": {
                "type": {
                  "text": "Promise<boolean>"
                }
              },
              "description": "Hides the tooltip if not already hidden."
            },
            {
              "kind": "method",
              "name": "toggle",
              "privacy": "public",
              "return": {
                "type": {
                  "text": "Promise<boolean>"
                }
              },
              "description": "Toggles the tooltip between shown/hidden state"
            },
            {
              "kind": "method",
              "name": "_showWithEvent",
              "privacy": "protected",
              "return": {
                "type": {
                  "text": "Promise<boolean>"
                }
              }
            },
            {
              "kind": "method",
              "name": "_hideWithEvent",
              "privacy": "protected",
              "return": {
                "type": {
                  "text": "Promise<boolean>"
                }
              }
            },
            {
              "kind": "method",
              "name": "_showOnInteraction",
              "privacy": "private",
              "return": {
                "type": {
                  "text": "void"
                }
              }
            },
            {
              "kind": "method",
              "name": "_stopTimeoutAndAnimation",
              "privacy": "private",
              "return": {
                "type": {
                  "text": "void"
                }
              }
            },
            {
              "kind": "method",
              "name": "_setAutoHide",
              "privacy": "private",
              "return": {
                "type": {
                  "text": "void"
                }
              }
            },
            {
              "kind": "method",
              "name": "_hideOnInteraction",
              "privacy": "private",
              "return": {
                "type": {
                  "text": "void"
                }
              }
            },
            {
              "kind": "method",
              "name": "_hideOnEscape",
              "privacy": "private",
              "return": {
                "type": {
                  "text": "Promise<void>"
                }
              }
            },
            {
              "kind": "method",
              "name": "addEventListener",
              "privacy": "public",
              "return": {
                "type": {
                  "text": "void"
                }
              },
              "parameters": [
                {
                  "name": "type",
                  "type": {
                    "text": "K"
                  }
                },
                {
                  "name": "listener",
                  "type": {
                    "text": "(this: HTMLElement, ev: M[K]) => any"
                  }
                },
                {
                  "name": "options",
                  "optional": true,
                  "type": {
                    "text": "boolean | AddEventListenerOptions"
                  }
                }
              ],
              "inheritedFrom": {
                "name": "EventEmitterMixin",
                "module": "src/components/common/mixins/event-emitter.ts"
              }
            },
            {
              "kind": "method",
              "name": "removeEventListener",
              "privacy": "public",
              "return": {
                "type": {
                  "text": "void"
                }
              },
              "parameters": [
                {
                  "name": "type",
                  "type": {
                    "text": "K"
                  }
                },
                {
                  "name": "listener",
                  "type": {
                    "text": "(this: HTMLElement, ev: M[K]) => any"
                  }
                },
                {
                  "name": "options",
                  "optional": true,
                  "type": {
                    "text": "boolean | EventListenerOptions"
                  }
                }
              ],
              "inheritedFrom": {
                "name": "EventEmitterMixin",
                "module": "src/components/common/mixins/event-emitter.ts"
              }
            },
            {
              "kind": "method",
              "name": "emitEvent",
              "privacy": "private",
              "return": {
                "type": {
                  "text": "boolean"
                }
              },
              "parameters": [
                {
                  "name": "type",
                  "type": {
                    "text": "K"
                  }
                },
                {
                  "name": "eventInitDict",
                  "optional": true,
                  "type": {
                    "text": "CustomEventInit<D>"
                  }
                }
              ],
              "inheritedFrom": {
                "name": "EventEmitterMixin",
                "module": "src/components/common/mixins/event-emitter.ts"
              }
            }
          ],
          "events": [
            {
              "description": "Emitted before the tooltip begins to open. Can be canceled to prevent opening.",
              "name": "igcOpening"
            },
            {
              "description": "Emitted after the tooltip has successfully opened and is visible.",
              "name": "igcOpened"
            },
            {
              "description": "Emitted before the tooltip begins to close. Can be canceled to prevent closing.",
              "name": "igcClosing"
            },
            {
              "description": "Emitted after the tooltip has been fully removed from view.",
              "name": "igcClosed"
            },
            {
              "type": {
                "text": "CustomEvent"
              },
              "inheritedFrom": {
                "name": "EventEmitterMixin",
                "module": "src/components/common/mixins/event-emitter.ts"
              }
            }
          ],
          "attributes": [
            {
              "name": "open",
              "description": "Whether the tooltip is showing.",
              "default": "false",
              "fieldName": "open",
              "attribute": "open",
              "type": {
                "text": "boolean"
              }
            },
            {
              "name": "disable-arrow",
              "description": "Whether to disable the rendering of the arrow indicator for the tooltip.",
              "deprecated": "since 6.1.0. Use `with-arrow` to control the behavior of the tooltip arrow.",
              "default": "false",
              "fieldName": "disableArrow",
              "attribute": "disable-arrow",
              "type": {
                "text": "boolean"
              }
            },
            {
              "name": "with-arrow",
              "type": {
                "text": "boolean"
              },
              "default": "false",
              "description": "Whether to render an arrow indicator for the tooltip.",
              "fieldName": "withArrow",
              "attribute": "with-arrow"
            },
            {
              "name": "offset",
              "type": {
                "text": "number"
              },
              "default": "6",
              "description": "The offset of the tooltip from the anchor in pixels.",
              "fieldName": "offset",
              "attribute": "offset"
            },
            {
              "name": "placement",
              "type": {
                "text": "PopoverPlacement"
              },
              "default": "'bottom'",
              "description": "Where to place the floating element relative to the parent anchor element.",
              "fieldName": "placement",
              "attribute": "placement",
              "expandedType": {
                "text": "'top' | 'top-start' | 'top-end' | 'bottom' | 'bottom-start' | 'bottom-end' | 'right' | 'right-start' | 'right-end' | 'left' | 'left-start' | 'left-end'"
              }
            },
            {
              "name": "anchor",
              "type": {
                "text": "Element | string | undefined"
              },
              "description": "An element instance or an IDREF to use as the anchor for the tooltip.",
              "fieldName": "anchor",
              "attribute": "anchor"
            },
            {
              "name": "show-triggers",
              "description": "Which event triggers will show the tooltip.\nExpects a comma separate string of different event triggers.",
              "default": "pointerenter",
              "fieldName": "showTriggers",
              "attribute": "show-triggers",
              "type": {
                "text": "string"
              }
            },
            {
              "name": "hide-triggers",
              "description": "Which event triggers will hide the tooltip.\nExpects a comma separate string of different event triggers.",
              "default": "pointerleave, click",
              "fieldName": "hideTriggers",
              "attribute": "hide-triggers",
              "type": {
                "text": "string"
              }
            },
            {
              "name": "show-delay",
              "description": "Specifies the number of milliseconds that should pass before showing the tooltip.",
              "default": "200",
              "fieldName": "showDelay",
              "attribute": "show-delay",
              "type": {
                "text": "number"
              }
            },
            {
              "name": "hide-delay",
              "description": "Specifies the number of milliseconds that should pass before hiding the tooltip.",
              "default": "300",
              "fieldName": "hideDelay",
              "attribute": "hide-delay",
              "type": {
                "text": "number"
              }
            },
            {
              "name": "message",
              "type": {
                "text": "string"
              },
              "default": "''",
              "description": "Specifies a plain text as tooltip content.",
              "fieldName": "message",
              "attribute": "message"
            },
            {
              "name": "sticky",
              "type": {
                "text": "boolean"
              },
              "default": "false",
              "description": "Specifies if the tooltip remains visible until the user closes it via the close button or Esc key.",
              "fieldName": "sticky",
              "attribute": "sticky"
            }
          ],
          "mixins": [
            {
              "name": "EventEmitterMixin",
              "module": "/src/components/common/mixins/event-emitter.js"
            }
          ],
          "superclass": {
            "name": "LitElement",
            "package": "lit"
          },
          "tagName": "igc-tooltip",
          "customElement": true
        }
      ],
      "exports": [
        {
          "kind": "js",
          "name": "default",
          "declaration": {
            "name": "IgcTooltipComponent",
            "module": "src/components/tooltip/tooltip.ts"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "src/components/common/definitions/defineComponents.ts",
      "declarations": [
        {
          "kind": "function",
          "name": "defineComponents",
          "parameters": [
            {
              "name": "components",
              "type": {
                "text": "IgniteComponent[]"
              }
            }
          ]
        }
      ],
      "exports": [
        {
          "kind": "js",
          "name": "defineComponents",
          "declaration": {
            "name": "defineComponents",
            "module": "src/components/common/definitions/defineComponents.ts"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "src/components/common/definitions/defineAllComponents.ts",
      "declarations": [
        {
          "kind": "function",
          "name": "defineAllComponents"
        }
      ],
      "exports": [
        {
          "kind": "js",
          "name": "defineAllComponents",
          "declaration": {
            "name": "defineAllComponents",
            "module": "src/components/common/definitions/defineAllComponents.ts"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "src/index.ts",
      "declarations": [],
      "exports": [
        {
          "kind": "js",
          "name": "IgcAvatarComponent",
          "declaration": {
            "name": "default",
            "module": "./components/avatar/avatar.js"
          }
        },
        {
          "kind": "js",
          "name": "IgcAccordionComponent",
          "declaration": {
            "name": "default",
            "module": "./components/accordion/accordion.js"
          }
        },
        {
          "kind": "js",
          "name": "IgcBadgeComponent",
          "declaration": {
            "name": "default",
            "module": "./components/badge/badge.js"
          }
        },
        {
          "kind": "js",
          "name": "IgcBannerComponent",
          "declaration": {
            "name": "default",
            "module": "./components/banner/banner.js"
          }
        },
        {
          "kind": "js",
          "name": "IgcButtonComponent",
          "declaration": {
            "name": "default",
            "module": "./components/button/button.js"
          }
        },
        {
          "kind": "js",
          "name": "IgcButtonGroupComponent",
          "declaration": {
            "name": "default",
            "module": "./components/button-group/button-group.js"
          }
        },
        {
          "kind": "js",
          "name": "IgcCalendarComponent",
          "declaration": {
            "name": "default",
            "module": "./components/calendar/calendar.js"
          }
        },
        {
          "kind": "js",
          "name": "IgcCardComponent",
          "declaration": {
            "name": "default",
            "module": "./components/card/card.js"
          }
        },
        {
          "kind": "js",
          "name": "IgcCardActionsComponent",
          "declaration": {
            "name": "default",
            "module": "./components/card/card.actions.js"
          }
        },
        {
          "kind": "js",
          "name": "IgcCardContentComponent",
          "declaration": {
            "name": "default",
            "module": "./components/card/card.content.js"
          }
        },
        {
          "kind": "js",
          "name": "IgcCardHeaderComponent",
          "declaration": {
            "name": "default",
            "module": "./components/card/card.header.js"
          }
        },
        {
          "kind": "js",
          "name": "IgcCardMediaComponent",
          "declaration": {
            "name": "default",
            "module": "./components/card/card.media.js"
          }
        },
        {
          "kind": "js",
          "name": "IgcCarouselComponent",
          "declaration": {
            "name": "default",
            "module": "./components/carousel/carousel.js"
          }
        },
        {
          "kind": "js",
          "name": "IgcCarouselIndicatorComponent",
          "declaration": {
            "name": "default",
            "module": "./components/carousel/carousel-indicator.js"
          }
        },
        {
          "kind": "js",
          "name": "IgcCarouselSlideComponent",
          "declaration": {
            "name": "default",
            "module": "./components/carousel/carousel-slide.js"
          }
        },
        {
          "kind": "js",
          "name": "IgcCheckboxComponent",
          "declaration": {
            "name": "default",
            "module": "./components/checkbox/checkbox.js"
          }
        },
        {
          "kind": "js",
          "name": "IgcCircularProgressComponent",
          "declaration": {
            "name": "default",
            "module": "./components/progress/circular-progress.js"
          }
        },
        {
          "kind": "js",
          "name": "IgcCircularGradientComponent",
          "declaration": {
            "name": "default",
            "module": "./components/progress/circular-gradient.js"
          }
        },
        {
          "kind": "js",
          "name": "IgcChipComponent",
          "declaration": {
            "name": "default",
            "module": "./components/chip/chip.js"
          }
        },
        {
          "kind": "js",
          "name": "IgcComboComponent",
          "declaration": {
            "name": "default",
            "module": "./components/combo/combo.js"
          }
        },
        {
          "kind": "js",
          "name": "IgcDatePickerComponent",
          "declaration": {
            "name": "default",
            "module": "./components/date-picker/date-picker.js"
          }
        },
        {
          "kind": "js",
          "name": "IgcDateRangePickerComponent",
          "declaration": {
            "name": "default",
            "module": "./components/date-range-picker/date-range-picker.js"
          }
        },
        {
          "kind": "js",
          "name": "IgcDateTimeInputComponent",
          "declaration": {
            "name": "default",
            "module": "./components/date-time-input/date-time-input.js"
          }
        },
        {
          "kind": "js",
          "name": "IgcDialogComponent",
          "declaration": {
            "name": "default",
            "module": "./components/dialog/dialog.js"
          }
        },
        {
          "kind": "js",
          "name": "IgcDividerComponent",
          "declaration": {
            "name": "default",
            "module": "./components/divider/divider.js"
          }
        },
        {
          "kind": "js",
          "name": "IgcDropdownComponent",
          "declaration": {
            "name": "default",
            "module": "./components/dropdown/dropdown.js"
          }
        },
        {
          "kind": "js",
          "name": "IgcDropdownGroupComponent",
          "declaration": {
            "name": "default",
            "module": "./components/dropdown/dropdown-group.js"
          }
        },
        {
          "kind": "js",
          "name": "IgcDropdownHeaderComponent",
          "declaration": {
            "name": "default",
            "module": "./components/dropdown/dropdown-header.js"
          }
        },
        {
          "kind": "js",
          "name": "IgcDropdownItemComponent",
          "declaration": {
            "name": "default",
            "module": "./components/dropdown/dropdown-item.js"
          }
        },
        {
          "kind": "js",
          "name": "IgcFileInputComponent",
          "declaration": {
            "name": "default",
            "module": "./components/file-input/file-input.js"
          }
        },
        {
          "kind": "js",
          "name": "IgcSelectComponent",
          "declaration": {
            "name": "default",
            "module": "./components/select/select.js"
          }
        },
        {
          "kind": "js",
          "name": "IgcSelectGroupComponent",
          "declaration": {
            "name": "default",
            "module": "./components/select/select-group.js"
          }
        },
        {
          "kind": "js",
          "name": "IgcSelectHeaderComponent",
          "declaration": {
            "name": "default",
            "module": "./components/select/select-header.js"
          }
        },
        {
          "kind": "js",
          "name": "IgcSelectItemComponent",
          "declaration": {
            "name": "default",
            "module": "./components/select/select-item.js"
          }
        },
        {
          "kind": "js",
          "name": "IgcExpansionPanelComponent",
          "declaration": {
            "name": "default",
            "module": "./components/expansion-panel/expansion-panel.js"
          }
        },
        {
          "kind": "js",
          "name": "IgcIconComponent",
          "declaration": {
            "name": "default",
            "module": "./components/icon/icon.js"
          }
        },
        {
          "kind": "js",
          "name": "IgcIconButtonComponent",
          "declaration": {
            "name": "default",
            "module": "./components/button/icon-button.js"
          }
        },
        {
          "kind": "js",
          "name": "IgcInputComponent",
          "declaration": {
            "name": "default",
            "module": "./components/input/input.js"
          }
        },
        {
          "kind": "js",
          "name": "IgcLinearProgressComponent",
          "declaration": {
            "name": "default",
            "module": "./components/progress/linear-progress.js"
          }
        },
        {
          "kind": "js",
          "name": "IgcListComponent",
          "declaration": {
            "name": "default",
            "module": "./components/list/list.js"
          }
        },
        {
          "kind": "js",
          "name": "IgcListHeaderComponent",
          "declaration": {
            "name": "default",
            "module": "./components/list/list-header.js"
          }
        },
        {
          "kind": "js",
          "name": "IgcListItemComponent",
          "declaration": {
            "name": "default",
            "module": "./components/list/list-item.js"
          }
        },
        {
          "kind": "js",
          "name": "IgcMaskInputComponent",
          "declaration": {
            "name": "default",
            "module": "./components/mask-input/mask-input.js"
          }
        },
        {
          "kind": "js",
          "name": "IgcNavDrawerComponent",
          "declaration": {
            "name": "default",
            "module": "./components/nav-drawer/nav-drawer.js"
          }
        },
        {
          "kind": "js",
          "name": "IgcNavDrawerHeaderItemComponent",
          "declaration": {
            "name": "default",
            "module": "./components/nav-drawer/nav-drawer-header-item.js"
          }
        },
        {
          "kind": "js",
          "name": "IgcNavDrawerItemComponent",
          "declaration": {
            "name": "default",
            "module": "./components/nav-drawer/nav-drawer-item.js"
          }
        },
        {
          "kind": "js",
          "name": "IgcNavbarComponent",
          "declaration": {
            "name": "default",
            "module": "./components/navbar/navbar.js"
          }
        },
        {
          "kind": "js",
          "name": "IgcRadioGroupComponent",
          "declaration": {
            "name": "default",
            "module": "./components/radio-group/radio-group.js"
          }
        },
        {
          "kind": "js",
          "name": "IgcRadioComponent",
          "declaration": {
            "name": "default",
            "module": "./components/radio/radio.js"
          }
        },
        {
          "kind": "js",
          "name": "IgcRatingComponent",
          "declaration": {
            "name": "default",
            "module": "./components/rating/rating.js"
          }
        },
        {
          "kind": "js",
          "name": "IgcRatingSymbolComponent",
          "declaration": {
            "name": "default",
            "module": "./components/rating/rating-symbol.js"
          }
        },
        {
          "kind": "js",
          "name": "IgcRippleComponent",
          "declaration": {
            "name": "default",
            "module": "./components/ripple/ripple.js"
          }
        },
        {
          "kind": "js",
          "name": "IgcRangeSliderComponent",
          "declaration": {
            "name": "default",
            "module": "./components/slider/range-slider.js"
          }
        },
        {
          "kind": "js",
          "name": "IgcSnackbarComponent",
          "declaration": {
            "name": "default",
            "module": "./components/snackbar/snackbar.js"
          }
        },
        {
          "kind": "js",
          "name": "IgcSliderComponent",
          "declaration": {
            "name": "default",
            "module": "./components/slider/slider.js"
          }
        },
        {
          "kind": "js",
          "name": "IgcSliderLabelComponent",
          "declaration": {
            "name": "default",
            "module": "./components/slider/slider-label.js"
          }
        },
        {
          "kind": "js",
          "name": "IgcTabsComponent",
          "declaration": {
            "name": "default",
            "module": "./components/tabs/tabs.js"
          }
        },
        {
          "kind": "js",
          "name": "IgcTabComponent",
          "declaration": {
            "name": "default",
            "module": "./components/tabs/tab.js"
          }
        },
        {
          "kind": "js",
          "name": "IgcTileComponent",
          "declaration": {
            "name": "default",
            "module": "./components/tile-manager/tile.js"
          }
        },
        {
          "kind": "js",
          "name": "IgcTileManagerComponent",
          "declaration": {
            "name": "default",
            "module": "./components/tile-manager/tile-manager.js"
          }
        },
        {
          "kind": "js",
          "name": "IgcToastComponent",
          "declaration": {
            "name": "default",
            "module": "./components/toast/toast.js"
          }
        },
        {
          "kind": "js",
          "name": "IgcToggleButtonComponent",
          "declaration": {
            "name": "default",
            "module": "./components/button-group/toggle-button.js"
          }
        },
        {
          "kind": "js",
          "name": "IgcSwitchComponent",
          "declaration": {
            "name": "default",
            "module": "./components/checkbox/switch.js"
          }
        },
        {
          "kind": "js",
          "name": "IgcTextareaComponent",
          "declaration": {
            "name": "default",
            "module": "./components/textarea/textarea.js"
          }
        },
        {
          "kind": "js",
          "name": "IgcTreeComponent",
          "declaration": {
            "name": "default",
            "module": "./components/tree/tree.js"
          }
        },
        {
          "kind": "js",
          "name": "IgcTreeItemComponent",
          "declaration": {
            "name": "default",
            "module": "./components/tree/tree-item.js"
          }
        },
        {
          "kind": "js",
          "name": "IgcStepperComponent",
          "declaration": {
            "name": "default",
            "module": "./components/stepper/stepper.js"
          }
        },
        {
          "kind": "js",
          "name": "IgcStepComponent",
          "declaration": {
            "name": "default",
            "module": "./components/stepper/step.js"
          }
        },
        {
          "kind": "js",
          "name": "IgcTooltipComponent",
          "declaration": {
            "name": "default",
            "module": "./components/tooltip/tooltip.js"
          }
        },
        {
          "kind": "js",
          "name": "defineComponents",
          "declaration": {
            "name": "defineComponents",
            "module": "./components/common/definitions/defineComponents.js"
          }
        },
        {
          "kind": "js",
          "name": "defineAllComponents",
          "declaration": {
            "name": "defineAllComponents",
            "module": "./components/common/definitions/defineAllComponents.js"
          }
        },
        {
          "kind": "js",
          "name": "registerIcon",
          "declaration": {
            "name": "registerIcon",
            "module": "./components/icon/icon.registry.js"
          }
        },
        {
          "kind": "js",
          "name": "registerIconFromText",
          "declaration": {
            "name": "registerIconFromText",
            "module": "./components/icon/icon.registry.js"
          }
        },
        {
          "kind": "js",
          "name": "setIconRef",
          "declaration": {
            "name": "setIconRef",
            "module": "./components/icon/icon.registry.js"
          }
        },
        {
          "kind": "js",
          "name": "configureTheme",
          "declaration": {
            "name": "configureTheme",
            "module": "./theming/config.js"
          }
        },
        {
          "kind": "js",
          "name": "IgcCalendarResourceStringEN",
          "declaration": {
            "name": "IgcCalendarResourceStringEN",
            "module": "./components/common/i18n/calendar.resources.js"
          }
        },
        {
          "kind": "js",
          "name": "IgcCalendarResourceStrings",
          "declaration": {
            "name": "IgcCalendarResourceStrings",
            "module": "./components/common/i18n/calendar.resources.js"
          }
        },
        {
          "kind": "js",
          "name": "IgcBannerComponentEventMap",
          "declaration": {
            "name": "IgcBannerComponentEventMap",
            "module": "./components/banner/banner.js"
          }
        },
        {
          "kind": "js",
          "name": "IgcButtonGroupComponentEventMap",
          "declaration": {
            "name": "IgcButtonGroupComponentEventMap",
            "module": "./components/button-group/button-group.js"
          }
        },
        {
          "kind": "js",
          "name": "IgcCalendarComponentEventMap",
          "declaration": {
            "name": "IgcCalendarComponentEventMap",
            "module": "./components/calendar/types.js"
          }
        },
        {
          "kind": "js",
          "name": "IgcCarouselComponentEventMap",
          "declaration": {
            "name": "IgcCarouselComponentEventMap",
            "module": "./components/carousel/carousel.js"
          }
        },
        {
          "kind": "js",
          "name": "IgcCheckboxComponentEventMap",
          "declaration": {
            "name": "IgcCheckboxComponentEventMap",
            "module": "./components/checkbox/checkbox-base.js"
          }
        },
        {
          "kind": "js",
          "name": "IgcSwitchComponentEventMap",
          "declaration": {
            "name": "IgcCheckboxComponentEventMap",
            "module": "./components/checkbox/checkbox-base.js"
          }
        },
        {
          "kind": "js",
          "name": "IgcChipComponentEventMap",
          "declaration": {
            "name": "IgcChipComponentEventMap",
            "module": "./components/chip/chip.js"
          }
        },
        {
          "kind": "js",
          "name": "IgcComboComponentEventMap",
          "declaration": {
            "name": "IgcComboComponentEventMap",
            "module": "./components/combo/types.js"
          }
        },
        {
          "kind": "js",
          "name": "IgcDatePickerComponentEventMap",
          "declaration": {
            "name": "IgcDatePickerComponentEventMap",
            "module": "./components/date-picker/date-picker.js"
          }
        },
        {
          "kind": "js",
          "name": "IgcDateRangePickerComponentEventMap",
          "declaration": {
            "name": "IgcDateRangePickerComponentEventMap",
            "module": "./components/date-range-picker/date-range-picker.js"
          }
        },
        {
          "kind": "js",
          "name": "IgcDateTimeInputComponentEventMap",
          "declaration": {
            "name": "IgcDateTimeInputComponentEventMap",
            "module": "./components/date-time-input/date-time-input.js"
          }
        },
        {
          "kind": "js",
          "name": "IgcDialogComponentEventMap",
          "declaration": {
            "name": "IgcDialogComponentEventMap",
            "module": "./components/dialog/dialog.js"
          }
        },
        {
          "kind": "js",
          "name": "IgcDropdownComponentEventMap",
          "declaration": {
            "name": "IgcDropdownComponentEventMap",
            "module": "./components/dropdown/dropdown.js"
          }
        },
        {
          "kind": "js",
          "name": "IgcExpansionPanelComponentEventMap",
          "declaration": {
            "name": "IgcExpansionPanelComponentEventMap",
            "module": "./components/expansion-panel/expansion-panel.js"
          }
        },
        {
          "kind": "js",
          "name": "IgcInputComponentEventMap",
          "declaration": {
            "name": "IgcInputComponentEventMap",
            "module": "./components/input/input-base.js"
          }
        },
        {
          "kind": "js",
          "name": "IgcMaskInputComponentEventMap",
          "declaration": {
            "name": "IgcInputComponentEventMap",
            "module": "./components/input/input-base.js"
          }
        },
        {
          "kind": "js",
          "name": "IgcFileInputComponentEventMap",
          "declaration": {
            "name": "IgcFileInputComponentEventMap",
            "module": "./components/file-input/file-input.js"
          }
        },
        {
          "kind": "js",
          "name": "IgcRadioComponentEventMap",
          "declaration": {
            "name": "IgcRadioComponentEventMap",
            "module": "./components/radio/radio.js"
          }
        },
        {
          "kind": "js",
          "name": "IgcRatingComponentEventMap",
          "declaration": {
            "name": "IgcRatingComponentEventMap",
            "module": "./components/rating/rating.js"
          }
        },
        {
          "kind": "js",
          "name": "IgcSelectComponentEventMap",
          "declaration": {
            "name": "IgcSelectComponentEventMap",
            "module": "./components/select/select.js"
          }
        },
        {
          "kind": "js",
          "name": "IgcSliderComponentEventMap",
          "declaration": {
            "name": "IgcSliderComponentEventMap",
            "module": "./components/slider/slider.js"
          }
        },
        {
          "kind": "js",
          "name": "IgcRangeSliderComponentEventMap",
          "declaration": {
            "name": "IgcRangeSliderComponentEventMap",
            "module": "./components/slider/range-slider.js"
          }
        },
        {
          "kind": "js",
          "name": "IgcSnackbarComponentEventMap",
          "declaration": {
            "name": "IgcSnackbarComponentEventMap",
            "module": "./components/snackbar/snackbar.js"
          }
        },
        {
          "kind": "js",
          "name": "IgcStepperComponentEventMap",
          "declaration": {
            "name": "IgcStepperComponentEventMap",
            "module": "./components/stepper/stepper.common.js"
          }
        },
        {
          "kind": "js",
          "name": "IgcTabsComponentEventMap",
          "declaration": {
            "name": "IgcTabsComponentEventMap",
            "module": "./components/tabs/tabs.js"
          }
        },
        {
          "kind": "js",
          "name": "IgcTextareaComponentEventMap",
          "declaration": {
            "name": "IgcTextareaComponentEventMap",
            "module": "./components/textarea/textarea.js"
          }
        },
        {
          "kind": "js",
          "name": "IgcTileComponentEventMap",
          "declaration": {
            "name": "IgcTileComponentEventMap",
            "module": "./components/tile-manager/tile.js"
          }
        },
        {
          "kind": "js",
          "name": "IgcTreeComponentEventMap",
          "declaration": {
            "name": "IgcTreeComponentEventMap",
            "module": "./components/tree/tree.common.js"
          }
        },
        {
          "kind": "js",
          "name": "IgcTooltipComponentEventMap",
          "declaration": {
            "name": "IgcTooltipComponentEventMap",
            "module": "./components/tooltip/tooltip.js"
          }
        },
        {
          "kind": "js",
          "name": "*",
          "declaration": {
            "name": "*",
            "package": "./components/types.js"
          }
        },
        {
          "kind": "js",
          "name": "IgcTileChangeStateEventArgs",
          "declaration": {
            "name": "IgcTileChangeStateEventArgs",
            "module": "./components/tile-manager/tile.js"
          }
        },
        {
          "kind": "js",
          "name": "CalendarActiveView",
          "declaration": {
            "name": "CalendarActiveView",
            "module": "./components/calendar/types.js"
          }
        },
        {
          "kind": "js",
          "name": "CalendarHeaderOrientation",
          "declaration": {
            "name": "CalendarHeaderOrientation",
            "module": "./components/calendar/types.js"
          }
        },
        {
          "kind": "js",
          "name": "CalendarSelection",
          "declaration": {
            "name": "CalendarSelection",
            "module": "./components/calendar/types.js"
          }
        },
        {
          "kind": "js",
          "name": "DateRangeDescriptor",
          "declaration": {
            "name": "DateRangeDescriptor",
            "module": "./components/calendar/types.js"
          }
        },
        {
          "kind": "js",
          "name": "WeekDays",
          "declaration": {
            "name": "WeekDays",
            "module": "./components/calendar/types.js"
          }
        },
        {
          "kind": "js",
          "name": "DateRangeType",
          "declaration": {
            "name": "DateRangeType",
            "module": "./components/calendar/types.js"
          }
        },
        {
          "kind": "js",
          "name": "IgcCheckboxChangeEventArgs",
          "declaration": {
            "name": "IgcCheckboxChangeEventArgs",
            "module": "./components/checkbox/checkbox-base.js"
          }
        },
        {
          "kind": "js",
          "name": "DatePart",
          "declaration": {
            "name": "DatePart",
            "module": "./components/date-time-input/date-util.js"
          }
        },
        {
          "kind": "js",
          "name": "DatePartDeltas",
          "declaration": {
            "name": "DatePartDeltas",
            "module": "./components/date-time-input/date-util.js"
          }
        },
        {
          "kind": "js",
          "name": "CustomDateRange",
          "declaration": {
            "name": "CustomDateRange",
            "module": "./components/date-range-picker/date-range-picker.js"
          }
        },
        {
          "kind": "js",
          "name": "DateRangeValue",
          "declaration": {
            "name": "DateRangeValue",
            "module": "./components/date-range-picker/date-range-picker.js"
          }
        },
        {
          "kind": "js",
          "name": "PopoverPlacement",
          "declaration": {
            "name": "PopoverPlacement",
            "module": "./components/popover/popover.js"
          }
        },
        {
          "kind": "js",
          "name": "IgcRadioChangeEventArgs",
          "declaration": {
            "name": "IgcRadioChangeEventArgs",
            "module": "./components/radio/radio.js"
          }
        },
        {
          "kind": "js",
          "name": "IgcRangeSliderValueEventArgs",
          "declaration": {
            "name": "IgcRangeSliderValueEventArgs",
            "module": "./components/slider/range-slider.js"
          }
        },
        {
          "kind": "js",
          "name": "IgcActiveStepChangingEventArgs",
          "declaration": {
            "name": "IgcActiveStepChangingEventArgs",
            "module": "./components/stepper/stepper.common.js"
          }
        },
        {
          "kind": "js",
          "name": "IgcActiveStepChangedEventArgs",
          "declaration": {
            "name": "IgcActiveStepChangedEventArgs",
            "module": "./components/stepper/stepper.common.js"
          }
        },
        {
          "kind": "js",
          "name": "IgcTreeSelectionEventArgs",
          "declaration": {
            "name": "IgcTreeSelectionEventArgs",
            "module": "./components/tree/tree.common.js"
          }
        },
        {
          "kind": "js",
          "name": "ComboItemTemplate",
          "declaration": {
            "name": "ComboItemTemplate",
            "module": "./components/combo/types.js"
          }
        },
        {
          "kind": "js",
          "name": "ComboTemplateProps",
          "declaration": {
            "name": "ComboTemplateProps",
            "module": "./components/combo/types.js"
          }
        },
        {
          "kind": "js",
          "name": "FilteringOptions",
          "declaration": {
            "name": "FilteringOptions",
            "module": "./components/combo/types.js"
          }
        },
        {
          "kind": "js",
          "name": "GroupingDirection",
          "declaration": {
            "name": "GroupingDirection",
            "module": "./components/combo/types.js"
          }
        },
        {
          "kind": "js",
          "name": "IgcComboChangeEventArgs",
          "declaration": {
            "name": "IgcComboChangeEventArgs",
            "module": "./components/combo/types.js"
          }
        },
        {
          "kind": "js",
          "name": "IconMeta",
          "declaration": {
            "name": "IconMeta",
            "module": "./components/icon/registry/types.js"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "src/animations/presets/slide/index.ts",
      "declarations": [
        {
          "kind": "function",
          "name": "slideInHor",
          "parameters": [
            {
              "name": "options",
              "default": "baseOptions"
            }
          ]
        },
        {
          "kind": "function",
          "name": "slideOutHor",
          "parameters": [
            {
              "name": "options",
              "default": "baseOptions"
            }
          ]
        }
      ],
      "exports": [
        {
          "kind": "js",
          "name": "slideInHor",
          "declaration": {
            "name": "slideInHor",
            "module": "src/animations/presets/slide/index.ts"
          }
        },
        {
          "kind": "js",
          "name": "slideOutHor",
          "declaration": {
            "name": "slideOutHor",
            "module": "src/animations/presets/slide/index.ts"
          }
        }
      ]
    }
  ]
}
