import DataOperation from './base.js';
export default class SortDataOperation extends DataOperation {
    constructor() {
        super(...arguments);
        this.orderBy = new Map(Object.entries({
            ascending: 1,
            descending: -1,
        }));
    }
    compareValues(first, second) {
        if (typeof first === 'string' && typeof second === 'string') {
            return first.localeCompare(second);
        }
        return first > second ? 1 : first < second ? -1 : 0;
    }
    compareObjects(first, second, expression) {
        const { direction, key, caseSensitive, comparer } = expression;
        const a = this.resolveCase(this.resolveValue(first, key), caseSensitive);
        const b = this.resolveCase(this.resolveValue(second, key), caseSensitive);
        return (this.orderBy.get(direction) * (comparer?.(a, b) ?? this.compareValues(a, b)));
    }
    apply(data, state) {
        const expressions = Array.from(state.values());
        const length = expressions.length;
        data.sort((a, b) => {
            let i = 0;
            let result = 0;
            while (i < length && !result) {
                result = this.compareObjects(a, b, expressions[i]);
                i++;
            }
            return result;
        });
        return data;
    }
}
//# sourceMappingURL=sort.js.map