{"version":3,"file":"grid.js","sourceRoot":"","sources":["../../src/components/grid.ts"],"names":[],"mappings":"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","sourcesContent":["import { ContextProvider } from '@lit/context';\nimport {\n  IgcButtonComponent,\n  IgcChipComponent,\n  IgcDropdownComponent,\n  IgcInputComponent,\n} from 'igniteui-webcomponents';\nimport { html, nothing } from 'lit';\nimport { eventOptions, property, query, queryAll, state } from 'lit/decorators.js';\nimport { styleMap } from 'lit/directives/style-map.js';\nimport { DataOperationsController } from '../controllers/data-operation.js';\nimport { GridDOMController } from '../controllers/dom.js';\nimport { gridStateContext, StateController } from '../controllers/state.js';\nimport { DEFAULT_COLUMN_CONFIG, PIPELINE } from '../internal/constants.js';\nimport { EventEmitterBase } from '../internal/mixins/event-emitter.js';\nimport { registerComponent } from '../internal/register.js';\nimport { GRID_TAG } from '../internal/tags.js';\nimport { addThemingController } from '../internal/theming.js';\nimport type {\n  ColumnConfiguration,\n  DataPipelineConfiguration,\n  GridSortConfiguration,\n  Keys,\n} from '../internal/types.js';\nimport { asArray, autoGenerateColumns, getFilterOperandsFor } from '../internal/utils.js';\nimport { watch } from '../internal/watch.js';\nimport type { FilterExpression } from '../operations/filter/types.js';\nimport type { SortExpression } from '../operations/sort/types.js';\nimport { styles as bootstrap } from '../styles/grid/themes/light/grid.bootstrap.css.js';\nimport { styles as fluent } from '../styles/grid/themes/light/grid.fluent.css.js';\nimport { styles as indigo } from '../styles/grid/themes/light/grid.indigo.css.js';\nimport { styles as material } from '../styles/grid/themes/light/grid.material.css.js';\nimport ApexGridCell from './cell.js';\nimport ApexFilterRow from './filter-row.js';\nimport ApexGridHeaderRow from './header-row.js';\nimport ApexGridRow from './row.js';\nimport ApexVirtualizer from './virtualizer.js';\n\n/**\n * Event object for the filtering event of the grid.\n */\nexport interface ApexFilteringEvent<T extends object> {\n  /**\n   * The target column for the filter operation.\n   */\n  key: Keys<T>;\n\n  /**\n   * The filter expression(s) to apply.\n   */\n  expressions: FilterExpression<T>[];\n\n  /**\n   * The type of modification which will be applied to the filter\n   * state of the column.\n   *\n   * @remarks\n   * `add` - a new filter expression will be added to the state of the column.\n   * `modify` - an existing filter expression will be modified.\n   * `remove` - the expression(s) will be removed from the state of the column.\n   */\n  type: 'add' | 'modify' | 'remove';\n}\n\n/**\n * Event object for the filtered event of the grid.\n */\nexport interface ApexFilteredEvent<T extends object> {\n  /**\n   * The target column for the filter operation.\n   */\n  key: Keys<T>;\n\n  /**\n   * The filter state of the column after the operation.\n   */\n  state: FilterExpression<T>[];\n}\n\n/**\n * Events for the apex-grid.\n */\nexport interface ApexGridEventMap<T extends object> {\n  /**\n   * Emitted when sorting is initiated through the UI.\n   * Returns the sort expression which will be used for the operation.\n   *\n   * @remarks\n   * The event is cancellable which prevents the operation from being applied.\n   * The expression can be modified prior to the operation running.\n   *\n   * @event\n   */\n  sorting: CustomEvent<SortExpression<T>>;\n  /**\n   * Emitted when a sort operation initiated through the UI has completed.\n   * Returns the sort expression used for the operation.\n   *\n   * @event\n   */\n  sorted: CustomEvent<SortExpression<T>>;\n  /**\n   * Emitted when filtering is initiated through the UI.\n   *\n   * @remarks\n   * The event is cancellable which prevents the operation from being applied.\n   * The expression can be modified prior to the operation running.\n   *\n   * @event\n   */\n  filtering: CustomEvent<ApexFilteringEvent<T>>;\n  /**\n   * Emitted when a filter operation initiated through the UI has completed.\n   * Returns the filter state for the affected column.\n   *\n   * @event\n   */\n  filtered: CustomEvent<ApexFilteredEvent<T>>;\n}\n\n/**\n * Apex grid is a web component for displaying data in a tabular format quick and easy.\n *\n * Out of the box it provides row virtualization, sort and filter operations (client and server side),\n * the ability to template cells and headers and column hiding.\n *\n * @element apex-grid\n *\n * @fires sorting - Emitted when sorting is initiated through the UI.\n * @fires sorted - Emitted when a sort operation initiated through the UI has completed.\n * @fires filtering - Emitted when filtering is initiated through the UI.\n * @fires filtered - Emitted when a filter operation initiated through the UI has completed.\n *\n */\nexport class ApexGrid<T extends object> extends EventEmitterBase<ApexGridEventMap<T>> {\n  public static get tagName() {\n    return GRID_TAG;\n  }\n\n  public static override styles = bootstrap;\n\n  public static register() {\n    registerComponent(\n      ApexGrid,\n      ApexVirtualizer,\n      ApexGridRow,\n      ApexGridHeaderRow,\n      ApexFilterRow,\n      IgcButtonComponent,\n      IgcChipComponent,\n      IgcInputComponent,\n      IgcDropdownComponent\n    );\n  }\n\n  protected stateController = new StateController<T>(this);\n  protected DOM = new GridDOMController<T>(this, this.stateController);\n  protected dataController = new DataOperationsController<T>(this);\n\n  protected stateProvider = new ContextProvider(this, {\n    context: gridStateContext,\n    initialValue: this.stateController,\n  });\n\n  @query(ApexVirtualizer.tagName)\n  protected scrollContainer!: ApexVirtualizer;\n\n  @query(ApexGridHeaderRow.tagName)\n  protected headerRow!: ApexGridHeaderRow<T>;\n\n  @query(ApexFilterRow.tagName)\n  protected filterRow!: ApexFilterRow<T>;\n\n  @state()\n  protected dataState: Array<T> = [];\n\n  @queryAll(ApexGridRow.tagName)\n  protected _rows!: NodeListOf<ApexGridRow<T>>;\n\n  /** Column configuration for the grid. */\n  @property({ attribute: false })\n  public columns: Array<ColumnConfiguration<T>> = [];\n\n  /** The data source for the grid. */\n  @property({ attribute: false })\n  public data: Array<T> = [];\n\n  /**\n   * Whether the grid will try to \"resolve\" its column configuration based on the passed\n   * data source.\n   *\n   * @remarks\n   * This is usually executed on initial rendering in the DOM. It depends on having an existing data source\n   * to infer the column configuration for the grid.\n   * Passing an empty data source or having a late bound data source (such as a HTTP request) will usually\n   * result in empty column configuration for the grid.\n   *\n   * This property is ignored if any existing column configuration already exists in the grid.\n   *\n   * In a scenario where you want to bind a new data source and still keep the auto-generation behavior,\n   * make sure to reset the column collection of the grid before passing in the new data source.\n   *\n   * @example\n   * ```typescript\n   * // assuming autoGenerate is set to true\n   * grid.columns = [];\n   * grid.data = [...];\n   * ```\n   *\n   * @attr auto-generate\n   */\n  @property({ type: Boolean, attribute: 'auto-generate' })\n  public autoGenerate = false;\n\n  /** Sort configuration property for the grid. */\n  @property({ attribute: false })\n  public sortConfiguration: GridSortConfiguration = {\n    multiple: true,\n    triState: true,\n  };\n\n  /**\n   * Configuration object which controls remote data operations for the grid.\n   */\n  @property({ attribute: false })\n  public dataPipelineConfiguration!: DataPipelineConfiguration<T>;\n\n  /**\n   * Set the sort state for the grid.\n   */\n  public set sortExpressions(expressions: SortExpression<T>[]) {\n    if (expressions.length) {\n      this.sort(expressions);\n    }\n  }\n\n  /**\n   * Get the sort state for the grid.\n   */\n  @property({ attribute: false })\n  public get sortExpressions(): SortExpression<T>[] {\n    return Array.from(this.stateController.sorting.state.values());\n  }\n\n  /**\n   * Set the filter state for the grid.\n   */\n  public set filterExpressions(expressions: FilterExpression<T>[]) {\n    if (expressions.length) {\n      this.filter(expressions);\n    }\n  }\n\n  /**\n   * Get the filter state for the grid.\n   */\n  @property({ attribute: false })\n  public get filterExpressions(): FilterExpression<T>[] {\n    const expressions: FilterExpression<T>[] = [];\n\n    for (const each of this.stateController.filtering.state.values) {\n      expressions.push(...each.all);\n    }\n\n    return expressions;\n  }\n\n  /**\n   * Returns the collection of rendered row elements in the grid.\n   *\n   * @remarks\n   * Since the grid has virtualization, this property returns only the currently rendered\n   * chunk of elements in the DOM.\n   */\n  public get rows() {\n    return Array.from(this._rows);\n  }\n\n  /**\n   * Returns the state of the data source after sort/filter operations\n   * have been applied.\n   */\n  public get dataView(): ReadonlyArray<T> {\n    return this.dataState;\n  }\n\n  /**\n   * The total number of items in the {@link ApexGrid.dataView} collection.\n   */\n  public get totalItems() {\n    return this.dataState.length;\n  }\n\n  @watch('columns')\n  protected watchColumns(_: ColumnConfiguration<T>[], newConfig: ColumnConfiguration<T>[] = []) {\n    this.columns = newConfig.map((config) => ({ ...DEFAULT_COLUMN_CONFIG, ...config }));\n  }\n\n  @watch('data')\n  protected dataChanged() {\n    this.dataState = structuredClone(this.data);\n    autoGenerateColumns(this);\n\n    if (this.hasUpdated) {\n      this.pipeline();\n    }\n  }\n\n  @watch(PIPELINE)\n  protected async pipeline() {\n    this.dataState = await this.dataController.apply(\n      structuredClone(this.data),\n      this.stateController\n    );\n  }\n\n  constructor() {\n    super();\n\n    addThemingController(this, {\n      light: { bootstrap, material, fluent, indigo },\n      dark: { bootstrap, material, fluent, indigo },\n    });\n  }\n\n  /**\n   * Performs a filter operation in the grid based on the passed expression(s).\n   */\n  public filter(config: FilterExpression<T> | FilterExpression<T>[]) {\n    this.stateController.filtering.filter(\n      asArray(config).map((each) =>\n        typeof each.condition === 'string'\n          ? // XXX: Types\n            Object.assign(each, {\n              condition: (getFilterOperandsFor(this.getColumn(each.key)!) as any)[each.condition],\n            })\n          : each\n      )\n    );\n  }\n\n  /**\n   * Performs a sort operation in the grid based on the passed expression(s).\n   */\n  public sort(expressions: SortExpression<T> | SortExpression<T>[]) {\n    this.stateController.sorting.sort(expressions);\n  }\n\n  /**\n   * Resets the current sort state of the control.\n   */\n  public clearSort(key?: Keys<T>) {\n    this.stateController.sorting.reset(key);\n    this.requestUpdate(PIPELINE);\n  }\n\n  /**\n   * Resets the current filter state of the control.\n   */\n  public clearFilter(key?: Keys<T>) {\n    this.stateController.filtering.reset(key);\n    this.requestUpdate(PIPELINE);\n  }\n\n  /**\n   * Returns a {@link ColumnConfiguration} for a given column.\n   */\n  public getColumn(id: Keys<T> | number) {\n    return typeof id === 'number'\n      ? this.columns.at(id)\n      : this.columns.find(({ key }) => key === id);\n  }\n\n  /**\n   * Updates the column configuration of the grid.\n   */\n  public updateColumns(columns: ColumnConfiguration<T> | ColumnConfiguration<T>[]) {\n    for (const column of asArray(columns)) {\n      const instance = this.columns.find((curr) => curr.key === column.key);\n      if (instance) {\n        Object.assign(instance, column);\n      }\n    }\n\n    this.requestUpdate(PIPELINE);\n  }\n\n  @eventOptions({ capture: true })\n  protected bodyClickHandler(event: MouseEvent) {\n    const target = event.composedPath().find((el) => el instanceof ApexGridCell) as ApexGridCell<T>;\n    if (target) {\n      this.stateController.active = {\n        column: target.column.key,\n        row: target.row.index,\n      };\n    }\n  }\n\n  protected bodyKeydownHandler(event: KeyboardEvent) {\n    if (this.scrollContainer.isSameNode(event.target as HTMLElement)) {\n      this.stateController.navigation.navigate(event);\n    }\n  }\n\n  protected renderHeaderRow() {\n    return html`\n      <apex-grid-header-row\n      style=${styleMap(this.DOM.columnSizes)}\n      .columns=${this.columns}\n      ></apex-grid-header-row>\n    `;\n  }\n\n  protected renderBody() {\n    return html`\n      <apex-virtualizer\n        .items=${this.dataState}\n        .renderItem=${this.DOM.rowRenderer}\n        @click=${this.bodyClickHandler}\n        @keydown=${this.bodyKeydownHandler}\n      ></apex-virtualizer>\n    `;\n  }\n\n  protected renderFilterRow() {\n    return this.columns.some((column) => column.filter)\n      ? html`<apex-filter-row style=${styleMap(this.DOM.columnSizes)}></apex-filter-row>`\n      : nothing;\n  }\n\n  protected override render() {\n    return html`\n      ${this.stateController.resizing.renderIndicator()}\n      ${this.renderHeaderRow()}\n      ${this.renderFilterRow()}\n      ${this.renderBody()}\n    `;\n  }\n}\n\ndeclare global {\n  interface HTMLElementTagNameMap {\n    [ApexGrid.tagName]: ApexGrid<object>;\n  }\n}\n"]}