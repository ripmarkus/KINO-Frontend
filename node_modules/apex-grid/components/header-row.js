var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
import { consume } from '@lit/context';
import { html, LitElement, nothing } from 'lit';
import { property, queryAll } from 'lit/decorators.js';
import { map } from 'lit/directives/map.js';
import { gridStateContext } from '../controllers/state.js';
import { partNameMap } from '../internal/part-map.js';
import { registerComponent } from '../internal/register.js';
import { GRID_HEADER_ROW_TAG } from '../internal/tags.js';
import { styles } from '../styles/header-row/header-row.base.css.js';
import ApexGridHeader from './header.js';
export default class ApexGridHeaderRow extends LitElement {
    static get tagName() {
        return GRID_HEADER_ROW_TAG;
    }
    static { this.styles = styles; }
    static register() {
        registerComponent(ApexGridHeaderRow, ApexGridHeader);
    }
    get headers() {
        return Array.from(this._headers);
    }
    constructor() {
        super();
        this.columns = [];
        this.addEventListener('click', this.#activeFilterColumn);
    }
    connectedCallback() {
        super.connectedCallback();
        this.setAttribute('tabindex', '0');
    }
    #activeFilterColumn(event) {
        const header = event
            .composedPath()
            .filter((target) => target instanceof ApexGridHeader)
            .at(0);
        this.state.filtering.setActiveColumn(header?.column);
    }
    shouldUpdate(props) {
        for (const header of this.headers) {
            header.requestUpdate();
        }
        return super.shouldUpdate(props);
    }
    render() {
        const filterRow = this.state.filtering.filterRow;
        return html `${map(this.columns, (column) => column.hidden
            ? nothing
            : html `<apex-grid-header
            part=${partNameMap({
                filtered: column === filterRow?.column,
            })}
            .column=${column}
          ></apex-grid-header>`)}`;
    }
}
__decorate([
    queryAll(ApexGridHeader.tagName)
], ApexGridHeaderRow.prototype, "_headers", void 0);
__decorate([
    consume({ context: gridStateContext, subscribe: true }),
    property({ attribute: false })
], ApexGridHeaderRow.prototype, "state", void 0);
__decorate([
    property({ attribute: false })
], ApexGridHeaderRow.prototype, "columns", void 0);
//# sourceMappingURL=header-row.js.map