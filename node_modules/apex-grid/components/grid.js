var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
import { ContextProvider } from '@lit/context';
import { IgcButtonComponent, IgcChipComponent, IgcDropdownComponent, IgcInputComponent, } from 'igniteui-webcomponents';
import { html, nothing } from 'lit';
import { eventOptions, property, query, queryAll, state } from 'lit/decorators.js';
import { styleMap } from 'lit/directives/style-map.js';
import { DataOperationsController } from '../controllers/data-operation.js';
import { GridDOMController } from '../controllers/dom.js';
import { gridStateContext, StateController } from '../controllers/state.js';
import { DEFAULT_COLUMN_CONFIG, PIPELINE } from '../internal/constants.js';
import { EventEmitterBase } from '../internal/mixins/event-emitter.js';
import { registerComponent } from '../internal/register.js';
import { GRID_TAG } from '../internal/tags.js';
import { addThemingController } from '../internal/theming.js';
import { asArray, autoGenerateColumns, getFilterOperandsFor } from '../internal/utils.js';
import { watch } from '../internal/watch.js';
import { styles as bootstrap } from '../styles/grid/themes/light/grid.bootstrap.css.js';
import { styles as fluent } from '../styles/grid/themes/light/grid.fluent.css.js';
import { styles as indigo } from '../styles/grid/themes/light/grid.indigo.css.js';
import { styles as material } from '../styles/grid/themes/light/grid.material.css.js';
import ApexGridCell from './cell.js';
import ApexFilterRow from './filter-row.js';
import ApexGridHeaderRow from './header-row.js';
import ApexGridRow from './row.js';
import ApexVirtualizer from './virtualizer.js';
export class ApexGrid extends EventEmitterBase {
    static get tagName() {
        return GRID_TAG;
    }
    static { this.styles = bootstrap; }
    static register() {
        registerComponent(ApexGrid, ApexVirtualizer, ApexGridRow, ApexGridHeaderRow, ApexFilterRow, IgcButtonComponent, IgcChipComponent, IgcInputComponent, IgcDropdownComponent);
    }
    set sortExpressions(expressions) {
        if (expressions.length) {
            this.sort(expressions);
        }
    }
    get sortExpressions() {
        return Array.from(this.stateController.sorting.state.values());
    }
    set filterExpressions(expressions) {
        if (expressions.length) {
            this.filter(expressions);
        }
    }
    get filterExpressions() {
        const expressions = [];
        for (const each of this.stateController.filtering.state.values) {
            expressions.push(...each.all);
        }
        return expressions;
    }
    get rows() {
        return Array.from(this._rows);
    }
    get dataView() {
        return this.dataState;
    }
    get totalItems() {
        return this.dataState.length;
    }
    watchColumns(_, newConfig = []) {
        this.columns = newConfig.map((config) => ({ ...DEFAULT_COLUMN_CONFIG, ...config }));
    }
    dataChanged() {
        this.dataState = structuredClone(this.data);
        autoGenerateColumns(this);
        if (this.hasUpdated) {
            this.pipeline();
        }
    }
    async pipeline() {
        this.dataState = await this.dataController.apply(structuredClone(this.data), this.stateController);
    }
    constructor() {
        super();
        this.stateController = new StateController(this);
        this.DOM = new GridDOMController(this, this.stateController);
        this.dataController = new DataOperationsController(this);
        this.stateProvider = new ContextProvider(this, {
            context: gridStateContext,
            initialValue: this.stateController,
        });
        this.dataState = [];
        this.columns = [];
        this.data = [];
        this.autoGenerate = false;
        this.sortConfiguration = {
            multiple: true,
            triState: true,
        };
        addThemingController(this, {
            light: { bootstrap, material, fluent, indigo },
            dark: { bootstrap, material, fluent, indigo },
        });
    }
    filter(config) {
        this.stateController.filtering.filter(asArray(config).map((each) => typeof each.condition === 'string'
            ?
                Object.assign(each, {
                    condition: getFilterOperandsFor(this.getColumn(each.key))[each.condition],
                })
            : each));
    }
    sort(expressions) {
        this.stateController.sorting.sort(expressions);
    }
    clearSort(key) {
        this.stateController.sorting.reset(key);
        this.requestUpdate(PIPELINE);
    }
    clearFilter(key) {
        this.stateController.filtering.reset(key);
        this.requestUpdate(PIPELINE);
    }
    getColumn(id) {
        return typeof id === 'number'
            ? this.columns.at(id)
            : this.columns.find(({ key }) => key === id);
    }
    updateColumns(columns) {
        for (const column of asArray(columns)) {
            const instance = this.columns.find((curr) => curr.key === column.key);
            if (instance) {
                Object.assign(instance, column);
            }
        }
        this.requestUpdate(PIPELINE);
    }
    bodyClickHandler(event) {
        const target = event.composedPath().find((el) => el instanceof ApexGridCell);
        if (target) {
            this.stateController.active = {
                column: target.column.key,
                row: target.row.index,
            };
        }
    }
    bodyKeydownHandler(event) {
        if (this.scrollContainer.isSameNode(event.target)) {
            this.stateController.navigation.navigate(event);
        }
    }
    renderHeaderRow() {
        return html `
      <apex-grid-header-row
      style=${styleMap(this.DOM.columnSizes)}
      .columns=${this.columns}
      ></apex-grid-header-row>
    `;
    }
    renderBody() {
        return html `
      <apex-virtualizer
        .items=${this.dataState}
        .renderItem=${this.DOM.rowRenderer}
        @click=${this.bodyClickHandler}
        @keydown=${this.bodyKeydownHandler}
      ></apex-virtualizer>
    `;
    }
    renderFilterRow() {
        return this.columns.some((column) => column.filter)
            ? html `<apex-filter-row style=${styleMap(this.DOM.columnSizes)}></apex-filter-row>`
            : nothing;
    }
    render() {
        return html `
      ${this.stateController.resizing.renderIndicator()}
      ${this.renderHeaderRow()}
      ${this.renderFilterRow()}
      ${this.renderBody()}
    `;
    }
}
__decorate([
    query(ApexVirtualizer.tagName)
], ApexGrid.prototype, "scrollContainer", void 0);
__decorate([
    query(ApexGridHeaderRow.tagName)
], ApexGrid.prototype, "headerRow", void 0);
__decorate([
    query(ApexFilterRow.tagName)
], ApexGrid.prototype, "filterRow", void 0);
__decorate([
    state()
], ApexGrid.prototype, "dataState", void 0);
__decorate([
    queryAll(ApexGridRow.tagName)
], ApexGrid.prototype, "_rows", void 0);
__decorate([
    property({ attribute: false })
], ApexGrid.prototype, "columns", void 0);
__decorate([
    property({ attribute: false })
], ApexGrid.prototype, "data", void 0);
__decorate([
    property({ type: Boolean, attribute: 'auto-generate' })
], ApexGrid.prototype, "autoGenerate", void 0);
__decorate([
    property({ attribute: false })
], ApexGrid.prototype, "sortConfiguration", void 0);
__decorate([
    property({ attribute: false })
], ApexGrid.prototype, "dataPipelineConfiguration", void 0);
__decorate([
    property({ attribute: false })
], ApexGrid.prototype, "sortExpressions", null);
__decorate([
    property({ attribute: false })
], ApexGrid.prototype, "filterExpressions", null);
__decorate([
    watch('columns')
], ApexGrid.prototype, "watchColumns", null);
__decorate([
    watch('data')
], ApexGrid.prototype, "dataChanged", null);
__decorate([
    watch(PIPELINE)
], ApexGrid.prototype, "pipeline", null);
__decorate([
    eventOptions({ capture: true })
], ApexGrid.prototype, "bodyClickHandler", null);
//# sourceMappingURL=grid.js.map