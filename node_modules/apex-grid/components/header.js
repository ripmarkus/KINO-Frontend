var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
import { consume } from '@lit/context';
import { IgcIconComponent } from 'igniteui-webcomponents';
import { html, LitElement, nothing } from 'lit';
import { property } from 'lit/decorators.js';
import { gridStateContext } from '../controllers/state.js';
import { MIN_COL_RESIZE_WIDTH, SORT_ICON_ASCENDING, SORT_ICON_DESCENDING, } from '../internal/constants.js';
import { partNameMap } from '../internal/part-map.js';
import { registerComponent } from '../internal/register.js';
import { GRID_HEADER_TAG } from '../internal/tags.js';
import { styles } from '../styles/header-cell/header-cell.css.js';
export default class ApexGridHeader extends LitElement {
    static get tagName() {
        return GRID_HEADER_TAG;
    }
    static { this.styles = styles; }
    static register() {
        registerComponent(ApexGridHeader, IgcIconComponent);
    }
    get context() {
        return {
            parent: this,
            column: this.column,
        };
    }
    get isSortable() {
        return Boolean(this.column.sort);
    }
    get resizeController() {
        return this.state.resizing;
    }
    #addResizeEventHandlers() {
        const config = { once: true };
        this.addEventListener('gotpointercapture', () => {
            this.resizeController.indicatorActive = true;
        }, config);
        this.addEventListener('lostpointercapture', this.#handlePointerLost, config);
        this.addEventListener('pointerup', (e) => this.releasePointerCapture(e.pointerId), config);
        this.addEventListener('pointermove', this.#handleResize);
    }
    #handleClick(e) {
        e.stopPropagation();
        this.state.sorting.sortFromHeaderClick(this.column);
    }
    #handleResize = ({ clientX }) => {
        const { left } = this.getBoundingClientRect();
        const width = Math.max(clientX - left, MIN_COL_RESIZE_WIDTH);
        const x = this.offsetLeft + width;
        this.resizeController.resize(this.column, width, x);
    };
    #handleResizeStart(ev) {
        const { target, pointerId } = ev;
        ev.preventDefault();
        this.#addResizeEventHandlers();
        this.resizeController.start(this);
        target.setPointerCapture(pointerId);
    }
    #handlePointerLost = () => {
        this.resizeController.indicatorActive = false;
        this.removeEventListener('pointermove', this.#handleResize);
        this.resizeController.stop();
    };
    #handleAutosize = () => this.resizeController.autosize(this.column, this);
    renderSortPart() {
        const state = this.state.sorting.state.get(this.column.key);
        const idx = Array.from(this.state.sorting.state.values()).indexOf(state);
        const attr = this.state.host.sortConfiguration.multiple
            ? idx > -1
                ? idx + 1
                : nothing
            : nothing;
        const icon = state
            ? state.direction === 'ascending'
                ? SORT_ICON_ASCENDING
                : SORT_ICON_DESCENDING
            : SORT_ICON_ASCENDING;
        return state || this.isSortable
            ? html `<span
          part=${partNameMap({ action: true, sorted: !!state?.direction })}
          @click=${this.isSortable ? this.#handleClick : nothing}
        >
          <igc-icon
            part=${partNameMap({ 'sorting-action': !!state })}
            data-sortIndex=${attr}
            name=${icon}
            collection="internal"
          ></igc-icon>
        </span>`
            : nothing;
    }
    renderContentPart() {
        const defaultContent = this.column.headerText ?? this.column.key;
        const template = this.column.headerTemplate;
        return html `
      <span part="title">
        <span>${template ? template(this.context) : html `${defaultContent}`}</span>
      </span>
    `;
    }
    renderResizePart() {
        return this.column.resizable
            ? html `<span
          part="resizable"
          @dblclick=${this.#handleAutosize}
          @pointerdown=${this.#handleResizeStart}
        ></span>`
            : nothing;
    }
    render() {
        return html `
      <div
        part=${partNameMap({
            content: true,
            sortable: this.isSortable,
            resizing: this.resizeController.indicatorActive,
        })}
      >
        ${this.renderContentPart()}
        <div part="actions">${this.renderSortPart()}</div>
      </div>
      ${this.renderResizePart()}
    `;
    }
}
__decorate([
    consume({ context: gridStateContext, subscribe: true }),
    property({ attribute: false })
], ApexGridHeader.prototype, "state", void 0);
__decorate([
    property({ attribute: false })
], ApexGridHeader.prototype, "column", void 0);
//# sourceMappingURL=header.js.map