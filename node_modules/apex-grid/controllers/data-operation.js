import { isDefined } from '../internal/is-defined.js';
import FilterDataOperation from '../operations/filter.js';
import SortDataOperation from '../operations/sort.js';
export class DataOperationsController {
    constructor(host) {
        this.host = host;
        this.sorting = new SortDataOperation();
        this.filtering = new FilterDataOperation();
        this.host.addController(this);
    }
    hostConnected() { }
    get hasCustomSort() {
        return isDefined(this.host.dataPipelineConfiguration?.sort);
    }
    get hasCustomFilter() {
        return isDefined(this.host.dataPipelineConfiguration?.filter);
    }
    get customFilter() {
        return this.host.dataPipelineConfiguration.filter;
    }
    get customSort() {
        return this.host.dataPipelineConfiguration.sort;
    }
    async apply(data, state) {
        const { filtering, sorting } = state;
        let transformed;
        transformed = this.hasCustomFilter
            ? await this.customFilter({ data, grid: this.host, type: 'filter' })
            : this.filtering.apply(data, filtering.state);
        transformed = this.hasCustomSort
            ? await this.customSort({ data: transformed, grid: this.host, type: 'sort' })
            : this.sorting.apply(transformed, sorting.state);
        return transformed;
    }
}
//# sourceMappingURL=data-operation.js.map