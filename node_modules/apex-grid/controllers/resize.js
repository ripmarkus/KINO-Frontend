import { html, nothing } from 'lit';
import { styleMap } from 'lit/directives/style-map.js';
import { MIN_COL_RESIZE_WIDTH } from '../internal/constants.js';
export class ResizeController {
    constructor(host) {
        this.host = host;
        this.indicatorActive = false;
        this.indicatorOffset = 0;
        this.host.addController(this);
    }
    #maxSize(key, headerWidth) {
        const max = this.host.rows
            .map((row) => row.cells.find((cell) => cell.column.key === key))
            .reduce((prev, current) => (current.offsetWidth > prev ? current.offsetWidth : prev), 0);
        return Math.max(...[MIN_COL_RESIZE_WIDTH, max, headerWidth]);
    }
    start(header) {
        this.indicatorActive = true;
        this.indicatorOffset = header.offsetLeft + header.offsetWidth;
        this.host.requestUpdate();
    }
    stop() {
        this.indicatorActive = false;
        this.host.requestUpdate();
    }
    resize(column, width, sizerOffset) {
        if (sizerOffset) {
            this.indicatorOffset = sizerOffset;
        }
        column.width = `${width}px`;
        this.host.requestUpdate();
    }
    async autosize(column, header) {
        column.width = 'max-content';
        this.host.requestUpdate();
        await this.host.updateComplete;
        column.width = `${this.#maxSize(column.key, header.offsetWidth)}px`;
        this.host.requestUpdate();
    }
    hostConnected() { }
    renderIndicator() {
        return this.indicatorActive
            ? html `<div
          part="resize-indicator"
          style=${styleMap({
                transform: `translateX(${this.indicatorOffset}px)`,
            })}
        ></div>`
            : nothing;
    }
}
//# sourceMappingURL=resize.js.map